Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x197e4f0

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1]
	byte RemoteRole;//[Offset: 0x5f, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x94, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0x98, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 0x40]
	Actor* Owner;//[Offset: 0xe0, Size: 0x8]
	int CachedStreamingPriority;//[Offset: 0xe8, Size: 0x4]
	FName NetDriverName;//[Offset: 0xec, Size: 0x8]
	byte Role;//[Offset: 0xf4, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf5, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf6, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xf7, Size: 0x1]
	int InputPriority;//[Offset: 0xf8, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x16c, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x32ddd00
	void UserConstructionScript();// 0x197e4f0
	void TearOff();// 0x24aba10
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x32ddc30
	void SetTickGroup(byte NewTickGroup);// 0x32ddb20
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x32ddba0
	void SetReplicates(bool bInReplicates);// 0x32dda90
	void SetReplicateMovement(bool bInReplicateMovement);// 0x14787e0
	void SetOwner(Actor* NewOwner);// 0x32dda00
	void SetNetDormancy(byte NewDormancy);// 0x32dd980
	void SetLifeSpan(float InLifespan);// 0x32dd8f0
	void SetAutoDestroyWhenFinished(bool bVal);// 0x32dd860
	void SetActorTickInterval(float TickInterval);// 0x32dd7e0
	void SetActorTickEnabled(bool bEnabled);// 0x32dd750
	void SetActorScale3D(Vector NewScale3D);// 0x32dd6c0
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x32dd630
	void SetActorHiddenInGame(bool bNewHidden);// 0x32dd5a0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x32dd510
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x32dd480
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x32dd3f0
	void ReceiveTick(float DeltaSeconds);// 0x197e4f0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x197e4f0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x197e4f0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x197e4f0
	void ReceiveEndPlay(byte EndPlayReason);// 0x197e4f0
	void ReceiveDestroyed();// 0x197e4f0
	void ReceiveBeginPlay();// 0x197e4f0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x197e4f0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x197e4f0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x197e4f0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x197e4f0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x197e4f0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x197e4f0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x197e4f0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x197e4f0
	void ReceiveActorEndCursorOver();// 0x197e4f0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x197e4f0
	void ReceiveActorBeginCursorOver();// 0x197e4f0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x32dd2d0
	void OnRep_ReplicateMovement();// 0x24ab9f0
	void OnRep_ReplicatedMovement();// 0x16230f0
	void OnRep_Owner();// 0x29df760
	void OnRep_Instigator();// 0x32dd2b0
	void OnRep_AttachmentReplication();// 0x24ab610
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x32dd110
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x32dd070
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x32dcf80
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dcd70
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x32dcc80
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dca70
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dc8c0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dc710
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dc4f0
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dc330
	void K2_OnReset();// 0x197e4f0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x197e4f0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x197e4f0
	SceneComponent* K2_GetRootComponent();// 0x32dc310
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x32dc230
	Rotator K2_GetActorRotation();// 0x32dc170
	Vector K2_GetActorLocation();// 0x32dc0f0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x32dbfe0
	void K2_DestroyComponent(ActorComponent* Component);// 0x32dbf50
	void K2_DestroyActor();// 0x32dbf30
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x32dbd60
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x32dbb90
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x32dba30
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x32db8d0
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32db6c0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32db4b0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32db300
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32db150
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32daf40
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dad90
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x32dabe0
	bool IsOverlappingActor(const Actor* Other);// 0x32dab40
	bool IsChildActor();// 0x32dab10
	bool IsActorTickEnabled();// 0x32daae0
	bool IsActorBeingDestroyed();// 0x32daab0
	bool HasAuthority();// 0x32daa80
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x32da9e0
	Vector GetVelocity();// 0x32da9a0
	Transform GetTransform();// 0x32da950
	bool GetTickableWhenPaused();// 0x32da920
	int GetStreamingPriority();// 0x14c6000
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x32da880
	byte GetRemoteRole();// 0x32da860
	ChildActorComponent* GetParentComponent();// 0x32da830
	Actor* GetParentActor();// 0x32da800
	Actor* GetOwner();// 0x32da7e0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x32da730
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x32da630
	byte GetLocalRole();// 0x156b1f0
	float GetLifeSpan();// 0x32da5f0
	Controller* GetInstigatorController();// 0x32da5c0
	Pawn* GetInstigator();// 0x32da590
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x32da480
	float GetInputAxisValue(const FName InputAxisName);// 0x32da3e0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x32da2e0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x32da240
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x32da1a0
	float GetGameTimeSinceCreation();// 0x32da170
	float GetDotProductTo(const Actor* OtherActor);// 0x32da0d0
	float GetDistanceTo(const Actor* OtherActor);// 0x32da030
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x32d9f20
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x32d9e40
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x32d9da0
	FName GetAttachParentSocketName();// 0x32d9c60
	Actor* GetAttachParentActor();// 0x32d9c30
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x32d9ca0
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x32d9b30
	Vector GetActorUpVector();// 0x32d9ac0
	float GetActorTimeDilation();// 0x32d9a90
	float GetActorTickInterval();// 0x32d9a60
	Vector GetActorScale3D();// 0x32d9a20
	Vector GetActorRightVector();// 0x32d99b0
	Vector GetActorRelativeScale3D();// 0x32d9970
	Vector GetActorForwardVector();// 0x32d9900
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x32d9810
	bool GetActorEnableCollision();// 0x32d97e0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x32d9650
	void ForceNetUpdate();// 0x32d9630
	void FlushNetDormancy();// 0x32d9610
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x32d94b0
	void EnableInput(PlayerController* PlayerController);// 0x32d9420
	void DisableInput(PlayerController* PlayerController);// 0x29c76a0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x32d9390
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x32d9300
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x32d9270
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x32d90b0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x32d8ea0
	bool ActorHasTag(FName Tag);// 0x32d8e00

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x29df760
	void SetTickGroup(byte NewTickGroup);// 0x32e1190
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x32e1210
	void SetIsReplicated(bool ShouldReplicate);// 0x32e1100
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0x32e1080
	void SetComponentTickInterval(float TickInterval);// 0x32e1000
	void SetComponentTickEnabled(bool bEnabled);// 0x32e0f70
	void SetAutoActivate(bool bNewAutoActivate);// 0x14787e0
	void SetActive(bool bNewActive, bool bReset);// 0x32e0e90
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x32e0e00
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x32e0d70
	void ReceiveTick(float DeltaSeconds);// 0x197e4f0
	void ReceiveEndPlay(byte EndPlayReason);// 0x197e4f0
	void ReceiveBeginPlay();// 0x197e4f0
	void OnRep_IsActive();// 0x24ab9f0
	void K2_DestroyComponent(Object* Object);// 0x32e0c60
	bool IsComponentTickEnabled();// 0x32e0c30
	bool IsBeingDestroyed();// 0x32e0c00
	bool IsActive();// 0x32e0bd0
	Actor* GetOwner();// 0x32e0bb0
	float GetComponentTickInterval();// 0x32e0b80
	void Deactivate();// 0x24ab790
	bool ComponentHasTag(FName Tag);// 0x32e0940
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x32e07e0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x32e0750
	void Activate(bool bReset);// 0x29dfa10

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	byte ElementIndex;//[Offset: 0x60, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x64, Size: 0x8]
	Actor* Actor;//[Offset: 0x6c, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x74, Size: 0x8]
	FName BoneName;//[Offset: 0x7c, Size: 0x8]
	FName MyBoneName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float Restitution;//[Offset: 0x34, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float Density;//[Offset: 0x3c, Size: 0x4]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8]
	byte SurfaceType;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x200, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x204, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x208, Size: 0x4]
	float ScreenCullSizeOverride;//[Offset: 0x20c, Size: 0x4]
	float CachedScreenCullSize;//[Offset: 0x210, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x214, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x215, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x216, Size: 0x1]
	byte StreamingPriorityOverride;//[Offset: 0x21c, Size: 0x1]
	enum LightmapType;//[Offset: 0x21d, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21e, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21e, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21e, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21e, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21f, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21f, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21f, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21f, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21f, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21f, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21f, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21f, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 0x1]
	bool bForceVelocityOutput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x220, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x220, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x220, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x220, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 0x1]
	bool bOnlyRenderDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x221, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x221, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x221, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x221, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x221, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x222, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x222, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x222, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x222, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x222, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x222, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x222, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x223, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x223, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x223, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x223, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x223, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x223, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x223, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x223, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 0x1]
	bool bCullCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x226, Size: 0x1]
	enum ShadowDetailMode;//[Offset: 0x227, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x229, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x22a, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x22b, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x22c, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x230, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x240, Size: 0x10]
	int SortPriority;//[Offset: 0x258, Size: 0x4]
	int VisibilityId;//[Offset: 0x25c, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x260, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x270, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x271, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x272, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x273, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x278, Size: 0x4]
	float BoundsScale;//[Offset: 0x284, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x298, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2a8, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x2c8, Size: 0x158]
	delegate OnComponentHit;//[Offset: 0x420, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x421, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x422, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x423, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x424, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x426, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x427, Size: 0x1]
	delegate OnClicked;//[Offset: 0x428, Size: 0x1]
	delegate OnReleased;//[Offset: 0x429, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x42a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x42b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x42c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x42d, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x448, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x34112e0
	void WakeRigidBody(FName BoneName);// 0x3352750
	void WakeAllRigidBodies();// 0x3316280
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x3411230
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x3411160
	void SetSortPriority(int NewSortPriority);// 0x3410fd0
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x3410ec0
	void SetSimulatePhysics(bool bSimulate);// 0x3410e30
	void SetScreenCullSizeOverride(float NewCullSizeOverride);// 0x3410db0
	void SetRenderInMainPass(bool bValue);// 0x3410d20
	void SetRenderCustomDepth(bool bValue);// 0x3410c90
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x3410c00
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x3410500
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3410a60
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3410940
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x3410940
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x3410810
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x34106e0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3410590
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x3410590
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x3410470
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x34103e0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x3410350
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x34101f0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x3410120
	void SetMassScale(FName BoneName, float InMassScale);// 0x3410040
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x340ff30
	void SetLinearDamping(float InDamping);// 0x340fea0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x340fd70
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x340fbe0
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x340fb50
	void SetForceVelocityOutput(bool bValue);// 0x340fac0
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x340fa30
	void SetEnableGravity(bool bGravityEnabled);// 0x340f9a0
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x340f8c0
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x340f7e0
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x340f710
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x340f640
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value, bool bDoRuntimeUpdate);// 0x340f520
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value, bool bDoRuntimeUpdate);// 0x340f400
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value, bool bDoRuntimeUpdate);// 0x340f2f0
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value, bool bDoRuntimeUpdate);// 0x340f1d0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x340f150
	void SetCustomDepthStencilValue(int Value);// 0x340f0c0
	void SetCullDistance(float NewCullDistance);// 0x340f040
	void SetCullCustomDepth(bool bValue);// 0x340efb0
	void SetConstraintMode(byte ConstraintMode);// 0x340ef30
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x340ee60
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x340ede0
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x340ed10
	void SetCollisionObjectType(byte Channel);// 0x340ec90
	void SetCollisionEnabled(byte NewType);// 0x340ec10
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x340eb30
	void SetCastShadow(bool NewCastShadow);// 0x340eaa0
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x340ea10
	void SetBoundsScale(float NewBoundsScale);// 0x340e990
	void SetAngularDamping(float InDamping);// 0x340e360
	void SetAllUseCCD(bool InUseCCD);// 0x340e2d0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x340e1f0
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x340e100
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x340dfe0
	void SetAllMassScale(float InMassScale);// 0x340df50
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x340de50
	void PutRigidBodyToSleep(FName BoneName);// 0x340dd30
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x340d980
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x340d620
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x340d2c0
	bool K2_IsQueryCollisionEnabled();// 0x340d280
	bool K2_IsPhysicsCollisionEnabled();// 0x340d240
	bool K2_IsCollisionEnabled();// 0x340d200
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x340ce90
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x340cdf0
	bool IsOverlappingActor(const Actor* Other);// 0x340cd50
	bool IsGravityEnabled();// 0x33149d0
	bool IsAnyRigidBodyAwake();// 0x340cd20
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x340cae0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x340ca10
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x340c9e0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x340c860
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x340c7b0
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x340c700
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x340c630
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x340c630
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x340c580
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x340c480
	int GetNumMaterials();// 0x340c450
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x340c370
	MaterialInterface* GetMaterial(int ElementIndex);// 0x340c2d0
	float GetMassScale(FName BoneName);// 0x340c230
	float GetMass();// 0x340c1f0
	float GetLinearDamping();// 0x340c1b0
	Vector GetInertiaTensor(FName BoneName);// 0x340c100
	bool GetGenerateOverlapEvents();// 0x340c0d0
	byte GetCollisionResponseToChannel(byte Channel);// 0x340c040
	FName GetCollisionProfileName();// 0x340c000
	byte GetCollisionObjectType();// 0x340bfd0
	byte GetCollisionEnabled();// 0x340bfa0
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x340be60
	Vector GetCenterOfMass(FName BoneName);// 0x340bdb0
	float GetAngularDamping();// 0x340b9c0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x340b8a0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x340b7d0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x340b730
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x340b620
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x340b5a0
	void ClearMoveIgnoreComponents();// 0x340b550
	void ClearMoveIgnoreActors();// 0x340b530
	bool CanCharacterStepUp(Pawn* Pawn);// 0x340b490
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x340b210
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x340b340
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x340b210
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x340b030
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x340ae50
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x340abc0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x340aa90
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x340a950
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x340a810
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x340a6e0
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x340a5b0
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x340a460
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x340a330

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x341f600
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x341f530
	void SetWorldScale3D(Vector NewScale);// 0x341f340
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x341f270
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x341f1e0
	void SetRelativeScale3D(Vector NewScale3D);// 0x341f150
	void SetMobility(byte NewMobility);// 0x341f0d0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x341f000
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x341ee40
	void ResetRelativeTransform();// 0x341ee20
	void OnRep_Visibility(bool OldValue);// 0x341ec30
	void OnRep_Transform();// 0x341ec10
	void OnRep_AttachSocketName();// 0x341ebf0
	void OnRep_AttachParent();// 0x341ebf0
	void OnRep_AttachChildren();// 0x341ebd0
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341e9c0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341e810
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341e600
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341e450
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341e240
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341e090
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341de80
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341dcd0
	Transform K2_GetComponentToWorld();// 0x341dc70
	Vector K2_GetComponentScale();// 0x341dc30
	Rotator K2_GetComponentRotation();// 0x341dbf0
	Vector K2_GetComponentLocation();// 0x341dbb0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x341da50
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x341d880
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x341d720
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341d510
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341d300
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341d150
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341cfa0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341cdf0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341cc40
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341ca30
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341c880
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x341c6d0
	bool IsVisible();// 0x341c6a0
	bool IsSimulatingPhysics(FName BoneName);// 0x341c600
	bool IsAnySimulatingPhysics();// 0x341c5d0
	Vector GetUpVector();// 0x341c430
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x341c320
	Rotator GetSocketRotation(FName InSocketName);// 0x341c270
	Quat GetSocketQuaternion(FName InSocketName);// 0x341c1c0
	Vector GetSocketLocation(FName InSocketName);// 0x341c110
	bool GetShouldUpdatePhysicsVolume();// 0x341c0e0
	Vector GetRightVector();// 0x341c0a0
	Transform GetRelativeTransform();// 0x341c040
	PhysicsVolume* GetPhysicsVolume();// 0x341c010
	void GetParentComponents(out SceneComponent*[] Parents);// 0x341bf60
	int GetNumChildrenComponents();// 0x341bf30
	Vector GetForwardVector();// 0x33f7240
	Vector GetComponentVelocity();// 0x341bef0
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x341bdf0
	SceneComponent* GetChildComponent(int ChildIndex);// 0x341bd50
	FName GetAttachSocketName();// 0x152e9f0
	SceneComponent* GetAttachParent();// 0x341bd30
	FName[] GetAllSocketNames();// 0x341bcb0
	bool DoesSocketExist(FName InSocketName);// 0x341bc10
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x341bb30

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 0x4]
	int Priority;//[Offset: 0x264, Size: 0x4]
	float FluidFriction;//[Offset: 0x268, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 0x1]
	Color BrushColor;//[Offset: 0x22c, Size: 0x4]
	int PolyFlags;//[Offset: 0x230, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	Model* Brush;//[Offset: 0x238, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 0x10]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x450, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x458, Size: 0x8]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x48, Size: 0x58]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xa8, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x158]
	Vector BuildScale3D;//[Offset: 0x288, Size: 0xc]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	byte PhysicsType;//[Offset: 0x30, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1e, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x20, Size: 0x1]
	enum SleepFamily;//[Offset: 0x59, Size: 0x1]
	byte DOFMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5c, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5c, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x6c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x74, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x75, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x78, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0xa8, Size: 0x4]
	float MassInKgOverride;//[Offset: 0xac, Size: 0x4]
	float LinearDamping;//[Offset: 0xb8, Size: 0x4]
	float AngularDamping;//[Offset: 0xbc, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xc0, Size: 0xc]
	Vector COMNudge;//[Offset: 0xcc, Size: 0xc]
	float MassScale;//[Offset: 0xd8, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0xdc, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xf8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x108, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0x110, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x114, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0x118, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0x11c, Size: 0x4]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4]
	int TileSize;//[Offset: 0x2c, Size: 0x4]
	int TileBorderSize;//[Offset: 0x30, Size: 0x4]
	enum MaterialType;//[Offset: 0x34, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	byte LODGroup;//[Offset: 0x40, Size: 0x1]
	int Size;//[Offset: 0x44, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	int GetTileSize();// 0x3417320
	int GetTileCount();// 0x34172c0
	int GetTileBorderSize();// 0x3417280
	int GetSize();// 0x34171f0
	int GetPageTableSize();// 0x34171c0

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xe8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xec, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	byte AddressX;//[Offset: 0xf1, Size: 0x1]
	byte AddressY;//[Offset: 0xf2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xf4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x344a300
	int Blueprint_GetSizeX();// 0x344a2d0

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x68, Size: 0x10]
	int LODBias;//[Offset: 0x78, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x7c, Size: 0x1]
	byte Filter;//[Offset: 0x7d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x7e, Size: 0x1]
	byte LODGroup;//[Offset: 0x7f, Size: 0x1]
	PerPlatformFloat Downscale;//[Offset: 0x80, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x84, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]
	bool bDistanceField;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]
	bool bMultiChannelDistanceField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1]
	int DistanceFieldTargetResolution;//[Offset: 0x88, Size: 0x4]
	float DistanceFieldScanRadius;//[Offset: 0x8c, Size: 0x4]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4]
	int StreamingIndex;//[Offset: 0x4c, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x50, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x33d80e0
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x33d7ad0
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x33d7a30
	PhysicalMaterial* GetPhysicalMaterial();// 0x29df190
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x33d7910
	Material* GetBaseMaterial();// 0x33d78e0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c5, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x200, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x209, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20a, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20a, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20a, Size: 0x1]
	byte ShadingRate;//[Offset: 0x20b, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20c, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20c, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20c, Size: 0x1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x20c, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20d, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20d, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20d, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x20e, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20f, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20f, Size: 0x1]
	byte StencilCompare;//[Offset: 0x210, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x211, Size: 0x1]
	byte RefractionMode;//[Offset: 0x212, Size: 0x1]
	int BlendablePriority;//[Offset: 0x214, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	UInt32Property UsageFlagWarnings;//[Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x220, Size: 0x4]
	Guid StateId;//[Offset: 0x224, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x234, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x268, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry RuntimeEntries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	NameHashes(UInt64Property)[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xb0]
	int NumCharacters;//[Offset: 0x120, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 0x10]
	float ScalingFactor;//[Offset: 0x138, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x13c, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x140, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x18, Size: 0x1]
	FString Chars;//[Offset: 0x20, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x30, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x40, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x78, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 0x4]
	int XPadding;//[Offset: 0x80, Size: 0x4]
	int YPadding;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x90, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int Kerning;//[Offset: 0x9c, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float PlacementJitter;//[Offset: 0x20, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4]
	int MinLOD;//[Offset: 0x2c, Size: 0x4]
	enum Scaling;//[Offset: 0x30, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x80, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x84, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x88, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x98, Size: 0x4]
	int LightMapResolution;//[Offset: 0x9c, Size: 0x4]
	enum LightmapType;//[Offset: 0xa0, Size: 0x1]
	byte DetailMode;//[Offset: 0xa1, Size: 0x1]
	int LightMapCoordinateIndex;//[Offset: 0xa4, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa8, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xb0, Size: 0x8]
	int LODForCollision;//[Offset: 0xb8, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbc, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbc, Size: 0x1]
	PerPlatformFloat ScreenCullSize;//[Offset: 0xc0, Size: 0x4]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xe8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x108, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x114, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x120, Size: 0x1c]
	byte StreamingPriority;//[Offset: 0x13c, Size: 0x1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x140, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x148, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x158, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x160, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x3442eb0
	int GetNumSections(int InLOD);// 0x3442bf0
	int GetNumLODs();// 0x3442bc0
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x3442a90
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x3442a10
	int GetMaterialIndex(FName MaterialSlotName);// 0x3442970
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x34428d0
	BoxSphereBounds GetBounds();// 0x3442720
	Box GetBoundingBox();// 0x34426d0
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x3442600
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x3442570
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x3442470
	void AddSocket(StaticMeshSocket* Socket);// 0x34423e0
	FName AddMaterial(MaterialInterface* Material);// 0x3442350

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x2aee6c0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x2aee5e0
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x2aee500
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x2aee1c0

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x2ae5e20
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x2ae5d00
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x2ae5c30
	void ReversePolygonFacing(PolygonID PolygonID);// 0x2ae5bb0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x2ae5b20
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x2ae58e0
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x2ae5a90
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x2ae5a00
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x2ae5970
	void ReserveNewEdges(int NumberOfNewEdges);// 0x2ae58e0
	bool IsVertexValid(VertexID VertexID);// 0x2ae5850
	bool IsVertexOrphaned(VertexID VertexID);// 0x2ae57c0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x2ae5730
	bool IsTriangleValid(const TriangleID TriangleID);// 0x2ae56a0
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x2ae5610
	bool IsPolygonValid(PolygonID PolygonID);// 0x2ae5580
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x2ae54f0
	bool IsEmpty();// 0x2ae54c0
	bool IsEdgeValid(EdgeID EdgeID);// 0x2ae5430
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x2ae5350
	bool IsEdgeInternal(EdgeID EdgeID);// 0x2ae52c0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2ae51d0
	Vector GetVertexPosition(VertexID VertexID);// 0x2ae5130
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x2ae5050
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x2ae4fb0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x2ae4ed0
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x2ae4df0
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x2ae4d10
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x2ae4c20
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x2ae4b30
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x2ae4a40
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x2ae4950
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x2ae4860
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x2ae4770
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x2ae4680
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2ae4590
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x2ae44b0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x2ae4410
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x2ae4370
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x2ae4280
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x2ae4190
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x2ae40a0
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2ae3fb0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x2ae3ec0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x2ae3e20
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2ae3d30
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2ae3c40
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x2ae3b50
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x2ae3a60
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x2ae39d0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x2ae3940
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x2ae38b0
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x2ae3820
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x2ae3790
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x2ae3700
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x2ae3670
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x2ae35e0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x2ae3550
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x2ae34c0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x2ae3430
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x2ae33a0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x2ae32b0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x2ae31d0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x2ae30e0
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x2ae2ff0
	void Empty();// 0x2ae2fd0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x2ae2ee0
	void DeleteVertex(VertexID VertexID);// 0x2ae2e60
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x2ae2ca0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x2ae2c20
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x2ae2a60
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x2ae2970
	void CreateVertexWithID(VertexID VertexID);// 0x2ae28f0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x2ae2820
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x2ae2780
	VertexID CreateVertex();// 0x2ae2740
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2ae2590
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2ae2420
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2ae2270
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x2ae21f0
	PolygonGroupID CreatePolygonGroup();// 0x2ae21b0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2ae2040
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x2ae1f20
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x2ae1e40
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x2ae1dc0

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x33d8860
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x33d8790
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x33d86a0
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x33d85d0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x33d84e0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x33d8410
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x33d7fc0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33d7f10
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x33d7e70
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33d7dc0
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x33d7d20
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33d7c70
	float K2_GetScalarParameterValue(FName ParameterName);// 0x33d7bd0
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x33d7b00
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x33d7720
	void CopyInterpParameters(MaterialInstance* Source);// 0x33d7690

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x258, Size: 0x8]
	Controller* Controller;//[Offset: 0x260, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 0xc]
	void SpawnDefaultController();// 0x33f4ea0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x33f3e70
	void ReceiveUnpossessed(Controller* OldController);// 0x197e4f0
	void ReceivePossessed(Controller* NewController);// 0x197e4f0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x33f33e0
	void OnRep_PlayerState();// 0xce3260
	void OnRep_Controller();// 0x33f33c0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x33f3180
	Vector K2_GetMovementInputVector();// 0x33f3020
	bool IsPlayerControlled();// 0x3320510
	bool IsPawnControlled();// 0x33f3150
	bool IsMoveInputIgnored();// 0x33f30f0
	bool IsLocallyControlled();// 0x33f30c0
	bool IsControlled();// 0x33f3090
	bool IsBotControlled();// 0x3343090
	Vector GetPendingMovementInputVector();// 0x33f3020
	Vector GetNavAgentLocation();// 0x33f2f60
	PawnMovementComponent* GetMovementComponent();// 0x3328fc0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x33f2ed0
	Vector GetLastMovementInputVector();// 0x33f2e90
	Rotator GetControlRotation();// 0x33f2d60
	Controller* GetController();// 0x33f2da0
	Rotator GetBaseAimRotation();// 0x33f2b80
	void DetachFromControllerPendingDestroy();// 0x15236e0
	Vector ConsumeMovementInputVector();// 0x33f2b40
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x33f2620
	void AddControllerYawInput(float Val);// 0x33f24b0
	void AddControllerRollInput(float Val);// 0x33f2420
	void AddControllerPitchInput(float Val);// 0x33f2390

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x240, Size: 0x10]
	FName StateName;//[Offset: 0x250, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x258, Size: 0x8]
	Character* Character;//[Offset: 0x268, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x290, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	void UnPossess();// 0x3320b40
	void StopMovement();// 0x3320b20
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x3320a30
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x33209a0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x3320910
	void SetControlRotation(out const Rotator NewRotation);// 0x3320880
	void ResetIgnoreMoveInput();// 0x3320860
	void ResetIgnoreLookInput();// 0x3320840
	void ResetIgnoreInputFlags();// 0x3320820
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x197e4f0
	void ReceivePossess(Pawn* PossessedPawn);// 0x197e4f0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x197e4f0
	void Possess(Pawn* InPawn);// 0x3320790
	void OnRep_PlayerState();// 0x3320770
	void OnRep_Pawn();// 0x3320750
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x3320620
	Pawn* K2_GetPawn();// 0x1474e20
	bool IsPlayerController();// 0x33205f0
	bool IsMoveInputIgnored();// 0x33205c0
	bool IsLookInputIgnored();// 0x3320590
	bool IsLocalPlayerController();// 0x3320540
	bool IsLocalController();// 0x3320510
	Actor* GetViewTarget();// 0x33204e0
	Rotator GetDesiredRotation();// 0x33204a0
	Rotator GetControlRotation();// 0x3320460
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x3320330
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x33201f0
	PlayerController* CastToPlayerController();// 0x33201c0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 0x4]
	int PlayerId;//[Offset: 0x22c, Size: 0x4]
	byte Ping;//[Offset: 0x230, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	int StartTime;//[Offset: 0x234, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x248, Size: 0x10]
	UniqueNetIdRepl UniqueID;//[Offset: 0x258, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x288, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x197e4f0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x197e4f0
	void OnRep_UniqueId();// 0xce3100
	void OnRep_Score();// 0x14c5b50
	void OnRep_PlayerName();// 0xbc0f10
	void OnRep_PlayerId();// 0x14f9ae0
	void OnRep_bIsInactive();// 0x14f9ac0
	FString GetPlayerName();// 0x340c960

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x358, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x378, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x388, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x3318080
	void StopJumping();// 0x15b4980
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x3317ff0
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x3317c20
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x3317ab0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, byte ClientMovementMode);// 0x3317810
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, View(UInt32Property) View, byte ClientMovementMode);// 0x3317410
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3316f80
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, View0(UInt32Property) View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x3316af0
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, View(UInt32Property) View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x33167b0
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x3316710
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x33165f0
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x3316450
	void OnRep_RootMotion();// 0x3316430
	void OnRep_ReplicatedBasedMovement();// 0x3316410
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x33163f0
	void OnRep_IsCrouched();// 0x15e34d0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x197e4f0
	void OnLanded(out const HitResult Hit);// 0x197e4f0
	void OnJumped();// 0x33163d0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x33162a0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x197e4f0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x197e4f0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x197e4f0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x197e4f0
	void Jump();// 0x3316280
	bool IsPlayingRootMotion();// 0x3316250
	bool IsPlayingNetworkedRootMotionMontage();// 0x3316220
	bool IsJumpProvidingForce();// 0x33161f0
	bool HasAnyRootMotion();// 0x33161c0
	AnimMontage* GetCurrentMontage();// 0x3315b30
	Vector GetBaseTranslationOffset();// 0x3315b00
	Rotator GetBaseRotationOffsetRotator();// 0x3315ab0
	float GetAnimRootMotionTranslationScale();// 0x3315a80
	void Crouch(bool bClientSimulation);// 0x33159f0
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3315670
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x3315580
	void ClientCheatWalk();// 0x3315560
	void ClientCheatGhost();// 0x3315540
	void ClientCheatFly();// 0x3315520
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3315040
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3314d10
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x3314a80
	void ClientAckGoodMove(float Timestamp);// 0x3314a00
	bool CanJumpInternal();// 0x33149d0
	bool CanJump();// 0x33149a0
	bool CanCrouch();// 0x3314970
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x3314880

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x6a0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x6a8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x6b0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x6b8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x6c0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x6e8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x6f4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x730, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x740, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x750, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x8b0, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x8b4, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x8b5, Size: 0x1]
	byte AnimationMode;//[Offset: 0x8b8, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ba, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ba, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ba, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ba, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8ba, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8ba, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bb, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c0, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c0, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c0, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c1, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c1, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c1, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c1, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c1, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c1, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c1, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c2, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c2, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c2, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c2, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c2, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c2, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c2, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c2, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c3, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c3, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8c3, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8c3, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c3, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8c3, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8c3, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8c3, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c4, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c4, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8c4, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x8c6, Size: 0x2]
	enum MassMode;//[Offset: 0x8c8, Size: 0x1]
	float UniformMass;//[Offset: 0x8cc, Size: 0x4]
	float TotalMass;//[Offset: 0x8d0, Size: 0x4]
	float Density;//[Offset: 0x8d4, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x8d8, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x8dc, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x8e0, Size: 0x4]
	float BendingStiffness;//[Offset: 0x8e4, Size: 0x4]
	float AreaStiffness;//[Offset: 0x8e8, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x8ec, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x8f0, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x8f4, Size: 0x4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x900, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x910, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x920, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x930, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0xa08, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0xa0c, Size: 0x4]
	UInt32Property LastPoseTickFrame;//[Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa70, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xb40, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3428b80
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3428af0
	void ToggleDisablePostProcessBlueprint();// 0x3428ad0
	void TermBodiesBelow(FName ParentBoneName);// 0x3428a40
	void SuspendClothingSimulation();// 0x3428a20
	void Stop();// 0x3428a00
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3428930
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x149f8f0
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x149f8f0
	void SetTeleportRotationThreshold(float Threshold);// 0x34288b0
	void SetTeleportDistanceThreshold(float Threshold);// 0x3428830
	void SetPosition(float InPos, bool bFireNotifies);// 0x3428750
	void SetPlayRate(float Rate);// 0x34286d0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x3428650
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x3428530
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x3428410
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x3428380
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x3428270
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x34281a0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3428110
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3428080
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3427fb0
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3427ea0
	void SetClothMaxDistanceScale(float Scale);// 0x3427e20
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3427d50
	void SetAnimClass(class Object NewClass);// 0x3427bb0
	void SetAnimationMode(byte InAnimationMode);// 0x3427cd0
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3427c40
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3427a50
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3427880
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3427950
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x34277f0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x34276c0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3427590
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3427420
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3427390
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x34272b0
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3427180
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3427000
	void ResumeClothingSimulation();// 0x3426fe0
	void ResetClothTeleportMode();// 0x3426fc0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3426f40
	void ResetAllowedAnimCurveEvaluation();// 0x3426f20
	void ResetAllBodiesSimulatePhysics();// 0x3426f00
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3426e30
	void Play(bool bLooping);// 0x3426da0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x3426be0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3426b10
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3426a80
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x3426880
	bool IsPlaying();// 0x3426850
	bool IsClothingSimulationSuspended();// 0x3426820
	bool IsBodyGravityEnabled(FName BoneName);// 0x3426780
	bool HasValidAnimationInstance();// 0x3426750
	float GetTeleportRotationThreshold();// 0x3426720
	float GetTeleportDistanceThreshold();// 0x3426720
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x3426560
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x3426330
	Vector GetSkeletalCenterOfMass();// 0x34262f0
	AnimInstance* GetPostProcessInstance();// 0x34262c0
	float GetPosition();// 0x3426290
	float GetPlayRate();// 0x3426260
	float GetMorphTarget(FName MorphTargetName);// 0x34261c0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3426120
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3426080
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3425f90
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3425ef0
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0x3425d50
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x3425b60
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x34259b0
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x34257c0
	bool GetDisablePostProcessBlueprint();// 0x3425790
	bool GetDisableAnimCurves();// 0x3425760
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x34255e0
	float GetClothMaxDistanceScale();// 0x3425580
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x34255b0
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x34254b0
	AnimInstance* GetAnimInstance();// 0x3425450
	class Object GetAnimClass();// 0x3425420
	byte GetAnimationMode();// 0x3425480
	bool GetAllowRigidBodyAnimNode();// 0x34253c0
	bool GetAllowedAnimCurveEvaluate();// 0x34253f0
	void ForceClothNextUpdateTeleportAndReset();// 0x34253a0
	void ForceClothNextUpdateTeleport();// 0x3425380
	void ForceClothNextUpdateReset();// 0x3425360
	FName FindConstraintBoneName(int ConstraintIndex);// 0x34252d0
	void ClearMorphTargets();// 0x34252b0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3425180
	void BindClothToMasterPoseComponent();// 0x3425160
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3425090
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3424f10
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3424d90
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3424c70

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x480, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x488, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x490, Size: 0x10]
	VertexOffsetUsage[] VertexOffsetUsage;//[Offset: 0x4a0, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5a8, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x5b0, Size: 0x4]
	int MinLodModel;//[Offset: 0x5b4, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5c0, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5d0, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x604, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x606, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x606, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x606, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x606, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x606, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x607, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x607, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x607, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x607, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x607, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x607, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x607, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x607, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x608, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x608, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x608, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x608, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x608, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x609, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x609, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x60c, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x620, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x640, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x342e3e0
	void UnHideBoneByName(FName BoneName);// 0x342e350
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x342e180
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x342dfb0
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x342de60
	void ShowAllMaterialSections(int LODIndex);// 0x342ddd0
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x342dd00
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x342dc10
	bool SetSkinWeightProfile(FName InProfileName);// 0x342db70
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x342da80
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x342d9b0
	void SetRenderStatic(bool bNewValue);// 0x342d920
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x342d7f0
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x342d6c0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x33fe0b0
	void SetMinLOD(int InNewMinLOD);// 0x342d630
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x342d560
	void SetForcedLOD(int InNewForcedLOD);// 0x342d4d0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x342d440
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x342d3b0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x342d330
	bool IsUsingSkinWeightProfile();// 0x342d300
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x342d230
	bool IsBoneHiddenByName(FName BoneName);// 0x342d190
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x342cf90
	int GetVertexOffsetUsage(int LODIndex);// 0x342cef0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x342cdd0
	FName GetSocketBoneName(FName InSocketName);// 0x342cc90
	Vector GetRefPosePosition(int BoneIndex);// 0x342cbe0
	FName GetParentBone(FName BoneName);// 0x342cb50
	int GetNumLODs();// 0x342cb20
	int GetNumBones();// 0x342caf0
	int GetForcedLOD();// 0x342cac0
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x342c9c0
	FName GetCurrentSkinWeightProfileName();// 0x342c9a0
	FName GetBoneName(int BoneIndex);// 0x342c910
	int GetBoneIndex(FName BoneName);// 0x342c870
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x342c6d0
	void ClearVertexColorOverride(int LODIndex);// 0x342c640
	void ClearSkinWeightProfile();// 0x342c620
	void ClearSkinWeightOverride(int LODIndex);// 0x342c590
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x342c4c0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x450, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x33dc0a0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x33dbfd0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x33dbb10
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x33db460
	FName[] GetMaterialSlotNames();// 0x33db1b0
	MaterialInterface*[] GetMaterials();// 0x33db230
	int GetMaterialIndex(FName MaterialSlotName);// 0x33db110

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x32e9ae0
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x32e9a50
	Pawn* TryGetPawnOwner();// 0x32e9a20
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x32e9950
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x32e9880
	void SetRootMotionMode(byte Value);// 0x32ddb20
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x32e97f0
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x32e9760
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x32e9690
	void SavePoseSnapshot(FName SnapshotName);// 0x32e9600
	void ResetDynamics(enum InTeleportType);// 0x32e9580
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendoutTriggerTime, float InTimeToStartMontageAt);// 0x32e9320
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x32e9150
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x32e9080
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x32e8fb0
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x32e8ee0
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x32e8e10
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x32e8d00
	void Montage_Resume(const AnimMontage* Montage);// 0x32e8c70
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x32e8ac0
	void Montage_Pause(const AnimMontage* Montage);// 0x32e8a30
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x32e8960
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x32e8890
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x32e87f0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x32e8750
	float Montage_GetPosition(const AnimMontage* Montage);// 0x32e86b0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x32e8610
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x32e8570
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x32e84e0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x32e8440
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x32e8370
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x32e82a0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x32e8210
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x32e80b0
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x32e7fe0
	bool IsAnyMontagePlaying();// 0x32e7fb0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x32e7ee0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x32e7dc0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x32e7d10
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x32e7c40
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x32e7b70
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x32e7aa0
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x32e79d0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x32e7900
	bool GetReceiveNotifiesFromLinkedInstances();// 0x32e78d0
	bool GetPropagateNotifiesToLinkedInstances();// 0x32e78a0
	SkeletalMeshComponent* GetOwningComponent();// 0x32e7870
	Actor* GetOwningActor();// 0x32e7840
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x32e7750
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x32e7680
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x32e75e0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x32e7540
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x32e7450
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x32e73b0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x32e72e0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x32e7210
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x32e7140
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x32e7070
	float GetInstanceMachineWeight(int MachineIndex);// 0x32e6fd0
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x32e6f30
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x32e6e90
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x32e6df0
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x32e6d50
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x32e6cb0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x32e6c10
	float GetCurveValue(FName CurveName);// 0x32e6b70
	FName GetCurrentStateName(int MachineIndex);// 0x32e6ae0
	AnimMontage* GetCurrentActiveMontage();// 0x32e6ab0
	void GetAllCurveNames(out FName[] OutNames);// 0x32e6a00
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x32e6910
	void ClearMorphTargets();// 0x32e68f0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x32e67f0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x197e4f0
	void BlueprintPostEvaluateAnimation();// 0x197e4f0
	void BlueprintLinkedAnimationLayersInitialized();// 0x197e4f0
	void BlueprintInitializeAnimation();// 0x197e4f0
	void BlueprintBeginPlay();// 0x197e4f0

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x342d060
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x342cd20

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x14a3b10

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x197e4f0
	FString GetNotifyName();// 0x2b41080

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x197e4f0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x197e4f0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x197e4f0
	FString GetNotifyName();// 0x2b41080

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendoutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x32ef4e0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x3325e50

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x33260a0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x3325fc0

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DISPLAYNAME;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x80, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc]
	PerPlatformFloat ScreenCullSize;//[Offset: 0xd8, Size: 0x4]
	SkeletalMaterial[] Materials;//[Offset: 0xe0, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xf0, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x100, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x160, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x164, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x165, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x166, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x167, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x167, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x167, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x167, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x167, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x168, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x170, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x178, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x180, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x190, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x318, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x320, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x330, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x370, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x390, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x1509f70
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x3422da0
	int NumSockets();// 0x3422d70
	FString[] K2_GetAllMorphTargetNames();// 0x3422c90
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x3422bc0
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x3422b20
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x3422a80
	BoxSphereBounds GetImportedBounds();// 0x3422a30
	Object* GetDefaultAnimatingRig();// 0x34229d0
	BoxSphereBounds GetBounds();// 0x3422980
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x34227b0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x34226d0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x3422630

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]
	BakedCustomAttributePerBoneData[] BakedPerBoneCustomAttributeData;//[Offset: 0x1a0, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: BakedCustomAttributePerBoneData
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
	BakedStringCustomAttribute[] StringAttributes;//[Offset: 0x8, Size: 0x10]
	BakedIntegerCustomAttribute[] IntAttributes;//[Offset: 0x18, Size: 0x10]
	BakedFloatCustomAttribute[] FloatAttributes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BakedStringCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	StringCurve StringCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: StringCurve.IndexedCurve
	FString DefaultValue;//[Offset: 0x68, Size: 0x10]
	StringCurveKey[] Keys;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: StringCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BakedIntegerCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	IntegralCurve IntCurve;//[Offset: 0x8, Size: 0x80]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10]
	int DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BakedFloatCustomAttribute
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	SimpleCurve FloatCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SimpleCurve.RealCurve.IndexedCurve
	byte InterpMode;//[Offset: 0x70, Size: 0x1]
	SimpleCurveKey[] Keys;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: SimpleCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	UInt32Property MaxNumOfTriangles;//[Size: 0x4]
	UInt32Property MaxNumOfVerts;//[Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x3326180

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x3325ef0
	LinearColor GetClampedLinearColorValue(float InTime);// 0x33255b0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x1c]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1c0]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e8, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f8, Size: 0x10c]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x10c]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x10, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0x14, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x18, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x34, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x54, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x70, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xbc, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x10c]
	FName ProfileName;//[Offset: 0x10c, Size: 0x8]

--------------------------------
Class: SolverIterations
	float FixedTimeStep;//[Offset: 0x0, Size: 0x4]
	int SolverIterations;//[Offset: 0x4, Size: 0x4]
	int JointIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionIterations;//[Offset: 0xc, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x14, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VertexOffsetUsage
	int Usage;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x2b19260
	void PhysicsAssetUpdated();// 0x24ab9f0
	float GetSimulationTime();// 0x2b19220
	int GetNumSubsteps();// 0x2b191f0
	int GetNumKinematicParticles();// 0x2b191c0
	int GetNumIterations();// 0x2b19190
	int GetNumDynamicParticles();// 0x2b19160
	int GetNumCloths();// 0x2b19130
	void EnableGravityOverride(out const Vector InVector);// 0x2b190a0
	void DisableGravityOverride();// 0x2b19080
	void ClothConfigUpdated();// 0x24aba10

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e0, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e4, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2e8, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2ec, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f0, Size: 0x98]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x480, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x484, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x488, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x490, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x988, Size: 0x38]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0x9c0, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xa90, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0xad0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3319e60
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3319de0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3319d10
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xf6c5c0
	void SetGroupsToIgnore(int GroupFlags);// 0xf6c530
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xf6c4a0
	void SetGroupsToAvoid(int GroupFlags);// 0xf6c410
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xf6c040
	void SetAvoidanceGroup(int GroupFlags);// 0xf6bfb0
	void SetAvoidanceEnabled(bool bEnable);// 0x3319c80
	float K2_GetWalkableFloorZ();// 0x3319c50
	float K2_GetWalkableFloorAngle();// 0x3319c20
	float K2_GetModifiedMaxAcceleration();// 0x3319be0
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3319a90
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3319870
	bool IsWalking();// 0x32fa4f0
	bool IsWalkable(out const HitResult Hit);// 0x3319780
	float GetValidPerchRadius();// 0x3319750
	float GetPerchRadiusThreshold();// 0x3319720
	PrimitiveComponent* GetMovementBase();// 0x33196f0
	float GetMinAnalogSpeed();// 0x33196b0
	float GetMaxJumpHeightWithJumpTime();// 0x3319670
	float GetMaxJumpHeight();// 0x3319630
	float GetMaxBrakingDeceleration();// 0x33195f0
	float GetMaxAcceleration();// 0x33195b0
	Vector GetLastUpdateVelocity();// 0x3319580
	Rotator GetLastUpdateRotation();// 0x3319530
	Vector GetLastUpdateLocation();// 0x3319500
	Vector GetImpartedMovementBaseVelocity();// 0x33194c0
	Vector GetCurrentAcceleration();// 0x3319480
	Character* GetCharacterOwner();// 0x3319460
	float GetAnalogInputModifier();// 0x3319430
	void DisableMovement();// 0x3319410
	void ClearAccumulatedForces();// 0x14f4a20
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x33191f0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3319080
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x3318fa0
	void AddForce(Vector Force);// 0x3318f10

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x33f2fe0
	bool IsMoveInputIgnored();// 0x33f3120
	Vector GetPendingInputVector();// 0x33f2fe0
	Pawn* GetPawnOwner();// 0x33f2fb0
	Vector GetLastInputVector();// 0x33f2e50
	Vector ConsumeInputVector();// 0x33f2b00
	void AddInputVector(Vector WorldVector, bool bForce);// 0x33f2540

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x33dec70
	void StopActiveMovement();// 0x33dec50
	bool IsSwimming();// 0x33dec20
	bool IsMovingOnGround();// 0x32fa4f0
	bool IsFlying();// 0x33debf0
	bool IsFalling();// 0x33debc0
	bool IsCrouching();// 0x33deb90

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x33dc180
	void SnapUpdatedComponentToPlane();// 0x14ea5c0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x157d220
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x33dbf40
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x33dbeb0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x33dbdc0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x33dbd30
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x33dbcb0
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x33dba80
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x33db580
	float K2_GetModifiedMaxSpeed();// 0x33db540
	float K2_GetMaxSpeedModifier();// 0x33db500
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x33db3c0
	Vector GetPlaneConstraintOrigin();// 0x33db380
	Vector GetPlaneConstraintNormal();// 0x33db340
	enum GetPlaneConstraintAxisSetting();// 0x33db320
	PhysicsVolume* GetPhysicsVolume();// 0x33db2f0
	float GetMaxSpeed();// 0x33db2b0
	float GetGravityZ();// 0x33db0d0
	Vector ConstrainNormalToPlane(Vector Normal);// 0x33db020
	Vector ConstrainLocationToPlane(Vector Location);// 0x33daf70
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x33daec0

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x8c]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x468, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x46c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x3317ed0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x3317df0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x3317d10
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x33160d0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3315fe0
	float GetUnscaledCapsuleRadius();// 0x3315fc0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x3315f90
	float GetUnscaledCapsuleHalfHeight();// 0x3315f70
	float GetShapeScale();// 0x3315e50
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x3315d30
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x3315c20
	float GetScaledCapsuleRadius();// 0x3315be0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x3315b90
	float GetScaledCapsuleHalfHeight();// 0x3315b60

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x450, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x458, Size: 0x8]
	Color ShapeColor;//[Offset: 0x460, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x464, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2a0, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a8, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2b0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2b8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2c0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2d4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2ec, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x2f8, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x308, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x31c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x320, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x32c, Size: 0xc]
	int ClientCap;//[Offset: 0x338, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x340, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x348, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x350, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x358, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3dc, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x418, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x420, Size: 0x8]
	float InputYawScale;//[Offset: 0x434, Size: 0x4]
	float InputPitchScale;//[Offset: 0x438, Size: 0x4]
	float InputRollScale;//[Offset: 0x43c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x440, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x440, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x440, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x440, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x440, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x444, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x448, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x458, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x459, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x45a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x45b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x45c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x460, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x462, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4d8, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e0, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f8, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x550, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x560, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x3404410
	bool WasInputKeyJustPressed(Key Key);// 0x3404320
	void ToggleSpeaking(bool bInSpeaking);// 0x3404290
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x34041c0
	void SwitchLevel(FString URL);// 0x3404120
	void StopHapticEffect(enum Hand);// 0x3404080
	void StartFire(byte FireModeNum);// 0x3403630
	void SetVirtualJoystickVisibility(bool bVisible);// 0x3403040
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x3402ea0
	void SetName(FString S);// 0x3402e00
	void SetMouseLocation(const int X, const int Y);// 0x3402d30
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x3402c60
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x3402a20
	void SetDisableHaptics(bool bNewDisabled);// 0x3402970
	void SetControllerLightColor(Color Color);// 0x34028f0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x3402710
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x34025e0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x3402500
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x3402410
	void ServerViewPrevPlayer();// 0x34023c0
	void ServerViewNextPlayer();// 0x3402370
	void ServerVerifyViewTarget();// 0x3402320
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x3402260
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x34021a0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x3402070
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x3401f10
	void ServerToggleAILogging();// 0x3401ec0
	void ServerShortTimeout();// 0x3401e70
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x3401db0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x3401c70
	void ServerRestartPlayer();// 0x3401c20
	void ServerPause();// 0x3401bd0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x3401b10
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x34019b0
	void ServerExecRPC(FString Msg);// 0x34018f0
	void ServerExec(FString Msg);// 0x14c0250
	void ServerCheckClientPossessionReliable();// 0x34018a0
	void ServerCheckClientPossession();// 0x3401850
	void ServerChangeName(FString S);// 0x3401790
	void ServerCamera(FName NewMode);// 0x34016d0
	void ServerAcknowledgePossession(Pawn* P);// 0x3401610
	void SendToConsole(FString Command);// 0x3401570
	void RestartLevel();// 0x3401550
	void ResetControllerLightColor();// 0x3401530
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x34012c0
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x3401160
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x3400eb0
	void Pause();// 0x34009f0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x3400960
	void LocalTravel(FString URL);// 0x34008c0
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x3400700
	bool IsInputKeyDown(Key Key);// 0x3400610
	void GetViewportSize(out int SizeX, out int SizeY);// 0x3400530
	SpectatorPawn* GetSpectatorPawn();// 0x3400510
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x34003f0
	Vector GetInputVectorKeyState(Key Key);// 0x34002e0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3400150
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x3400070
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x33ffee0
	float GetInputKeyTimeDown(Key Key);// 0x33ffde0
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x33ffcb0
	float GetInputAnalogKeyState(Key Key);// 0x33ffbb0
	HUD* GetHUD();// 0x33ff180
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x33ff9e0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x33ff830
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x33ff680
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x33ff4f0
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x33ff350
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x33ff1b0
	Vector GetFocalLocation();// 0x33ff140
	void FOV(float NewFOV);// 0x33fef90
	void EnableCheats();// 0x33fef70
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x33fede0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x33fece0
	void ConsoleKey(Key Key);// 0x33febf0
	void ClientWasKicked(const FText KickReason);// 0x33feb30
	void ClientVoiceHandshakeComplete();// 0x33feb10
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x33fea70
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x33fe8b0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x33fe790
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x33fe610
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x33fe490
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x33fe320
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x33fe250
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x33fe180
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x33fe0b0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x33fe020
	void ClientStartOnlineSession();// 0x33fe000
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x33fdf30
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x33fddc0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x33fdd30
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x33fdc30
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x33fdba0
	void ClientSetHUD(class HUD NewHUDClass);// 0x33fdb10
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x33fda00
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x33fd880
	void ClientSetCameraMode(FName NewCamMode);// 0x33fd7f0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x33fd5e0
	void ClientSetBlockOnAsyncLoading();// 0x33fd5c0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x33fd500
	void ClientReturnToMainMenu(FString ReturnReason);// 0x33fd460
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x24ab960
	void ClientRestart(Pawn* NewPawn);// 0x33fd3d0
	void ClientReset();// 0x33fd3b0
	void ClientRepObjRef(Object* Object);// 0x33fd320
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x33fd180
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x33fd020
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x33fcf00
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x33fcd90
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x33fcc80
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x33fcb90
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x33fc8c0
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x33fc7a0
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x33fc670
	void ClientIgnoreMoveInput(bool bIgnore);// 0x33fc5e0
	void ClientIgnoreLookInput(bool bIgnore);// 0x33fc550
	void ClientGotoState(FName NewState);// 0x33fc4c0
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x33fc3f0
	void ClientForceGarbageCollection();// 0x33fc3d0
	void ClientFlushLevelStreaming();// 0x33fc3b0
	void ClientEndOnlineSession();// 0x33fc390
	void ClientEnableNetworkVoice(bool bEnable);// 0x33fc300
	void ClientCommitMapChange();// 0x33fc2e0
	void ClientClearCameraLensEffects();// 0x33fc2c0
	void ClientCapBandwidth(int CAP);// 0x33fc230
	void ClientCancelPendingMapChange();// 0x33fc210
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x33fc0e0
	void ClearAudioListenerOverride();// 0x33fc0c0
	void ClearAudioListenerAttenuationOverride();// 0x33fc0a0
	bool CanRestartPlayer();// 0x33fc070
	void Camera(FName NewMode);// 0x33fbfe0
	void AddYawInput(float Val);// 0x33fbf50
	void AddRollInput(float Val);// 0x33fbec0
	void AddPitchInput(float Val);// 0x33fbe30
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x33fbc60

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x228, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x234, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x240, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x258, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x268, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x278, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x280, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x288, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x298, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a0, Size: 0x8]
	void ShowHUD();// 0x14c5b50
	void ShowDebugToggleSubCategory(FName Category);// 0x3352870
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x33527e0
	void ShowDebug(FName DebugType);// 0x3352750
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x33525c0
	void RemoveAllDebugStrings();// 0x33525a0
	void ReceiveHitBoxRelease(const FName BoxName);// 0x197e4f0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x197e4f0
	void ReceiveHitBoxClick(const FName BoxName);// 0x197e4f0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x197e4f0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x197e4f0
	Vector Project(Vector Location);// 0x33520f0
	void PreviousDebugTarget();// 0x33520d0
	void NextDebugTarget();// 0xce3240
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x33515b0
	PlayerController* GetOwningPlayerController();// 0xdc18e0
	Pawn* GetOwningPawn();// 0x3351580
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x3351360
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x33511b0
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3350d50
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x3350b10
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x3350950
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x3350660
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x3350440
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x3350070
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x334fe70
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x334fcf0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x334f9d0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x334f610

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x3310fb0
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x3310ec0
	Vector K2_Project(Vector WorldLocation);// 0x3310e10
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x3310ce0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x3310a30
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x3310670
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x33104c0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x3310390
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x3310150
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x330fff0
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x330fe90
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x330fa00
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x330f8e0

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	float DefaultFOV;//[Offset: 0x240, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x5f0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x890, Size: 0x5f0]
	TViewTarget ViewTarget;//[Offset: 0xe80, Size: 0x600]
	TViewTarget PendingViewTarget;//[Offset: 0x1480, Size: 0x600]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1ab0, Size: 0x5f0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x20a0, Size: 0x5f0]
	CameraModifier*[] ModifierList;//[Offset: 0x2690, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26a0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x26b0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x26b4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x26c0, Size: 0xc]
	delegate OnAudioFadeChangeEvent;//[Offset: 0x26d0, Size: 0x10]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x26f0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2700, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2708, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2748, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2768, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2778, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2788, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2790, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2790, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2790, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2790, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2791, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2794, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2798, Size: 0x4]
	float ViewYawMin;//[Offset: 0x279c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x27a0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x27a4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x27a8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x27b0, Size: 0x4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x3404100
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x3403fb0
	void StopCameraFade();// 0x3403f90
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x3403ec0
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3403db0
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x3403ce0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x3403c10
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x3403b40
	void StopAllCameraShakes(bool bImmediately);// 0x3403ab0
	void StopAllCameraAnims(bool bImmediate);// 0x3403a20
	MatineeCameraShake* StartMatineeCameraShakeFromSource(class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3403840
	MatineeCameraShake* StartMatineeCameraShake(class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x34036b0
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3403440
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x34032c0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x34030d0
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x3402b30
	void SetGameCameraCutThisFrame();// 0x3402a00
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x3401490
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x3401400
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3400ba0
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x3400a10
	void OnPhotographySessionStart();// 0x14f9ae0
	void OnPhotographySessionEnd();// 0x14f9ac0
	void OnPhotographyMultiPartCaptureStart();// 0xbc0f10
	void OnPhotographyMultiPartCaptureEnd();// 0x14c5b50
	PlayerController* GetOwningPlayerController();// 0x34004e0
	float GetFOVAngle();// 0x3319670
	Rotator GetCameraRotation();// 0x33ff100
	Vector GetCameraLocation();// 0x33ff0c0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x33ff020
	void ClearCameraLensEffects();// 0x15e34d0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x197e4f0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x33fbd90
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x33fbcf0

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ShakeScale;//[Offset: 0x2c, Size: 0x4]
	PlayerCameraManager* CameraManager;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	enum PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x33118d0
	void SetScale(float NewDuration);// 0x3311620
	void SetDuration(float NewDuration);// 0x3311320

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x550]
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	byte BloomMethod;//[Offset: 0x21, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 0x1]
	float WhiteTemp;//[Offset: 0x24, Size: 0x4]
	float WhiteTint;//[Offset: 0x28, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float ToneCurveAmount;//[Offset: 0x180, Size: 0x4]
	float FilmSlope;//[Offset: 0x184, Size: 0x4]
	float FilmToe;//[Offset: 0x188, Size: 0x4]
	float FilmShoulder;//[Offset: 0x18c, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x190, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x194, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x198, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a8, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1bc, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1c0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d4, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e4, Size: 0x10]
	float FilmContrast;//[Offset: 0x1f4, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1fc, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x200, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x204, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x214, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x218, Size: 0x4]
	float BloomIntensity;//[Offset: 0x21c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x220, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x224, Size: 0x4]
	float Bloom1Size;//[Offset: 0x228, Size: 0x4]
	float Bloom2Size;//[Offset: 0x22c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x230, Size: 0x4]
	float Bloom4Size;//[Offset: 0x234, Size: 0x4]
	float Bloom5Size;//[Offset: 0x238, Size: 0x4]
	float Bloom6Size;//[Offset: 0x23c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x240, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x250, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x260, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x280, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x290, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2a0, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2b0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2bc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2c0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2c4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2c8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2d0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2d4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x300, Size: 0x4]
	float CameraISO;//[Offset: 0x304, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x308, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x30c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x310, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x314, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x318, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x328, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x330, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x338, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x33c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x340, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x344, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x348, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x34c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x350, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x354, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x358, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x35c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x360, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x370, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x374, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x378, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x380, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x400, Size: 0x4]
	float GrainJitter;//[Offset: 0x404, Size: 0x4]
	float GrainIntensity;//[Offset: 0x408, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x40c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x410, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x414, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x41c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x420, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x424, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x434, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x438, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x440, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x448, Size: 0x4]
	float RayTracingAOIntensity;//[Offset: 0x44c, Size: 0x4]
	float RayTracingAORadius;//[Offset: 0x450, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x454, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x464, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x468, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x46c, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x470, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x474, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4c4, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 0x4]
	float LPVSize;//[Offset: 0x4cc, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x516, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x530, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x534, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x538, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x540, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc4, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x1f8, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x1fc, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x200, Size: 0x4]
	class CameraShakeBase* CameraShake;//[Offset: 0x208, Size: 0x8]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x33119f0
	void StopAllCameraShakes(bool bImmediately);// 0x3311960
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x3311750
	void Start();// 0x3311730
	float GetAttenuationFactor(out const Vector Location);// 0x330f690

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0x98, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x9c, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0xa0, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0xa4, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0xc8, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0xec, Size: 0xc]
	float AnimPlayRate;//[Offset: 0xf8, Size: 0x4]
	float AnimScale;//[Offset: 0xfc, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x100, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x104, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x108, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x110, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	float OscillatorTimeRemaining;//[Offset: 0x11c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x120, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x197e4f0
	void ReceivePlayShake(float Scale);// 0x197e4f0
	bool ReceiveIsFinished();// 0x150b060
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x197e4f0

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x34, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x38, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x550]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 0x8]

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5e0]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5e0]
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 0x8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x2c, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x15597d0
	Actor* GetViewTarget();// 0x29df1c0
	void EnableModifier();// 0x330f670
	void DisableModifier(bool bImmediate);// 0x330f5e0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x197e4f0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x197e4f0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x238, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x248, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x268, Size: 0x10]
	void ToggleActive();// 0x332dda0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x332dcc0
	void SetTemplate(ParticleSystem* NewTemplate);// 0xbc0f30
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x332dbf0
	void SetFloatParameter(FName ParameterName, float Param);// 0x332db20
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x332da50
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x332d980
	void OnRep_bCurrentlyActive();// 0xbc0f10
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x1524b20
	bool IsActive();// 0x332d950
	void Deactivate();// 0x332d930
	void Activate();// 0x332d910

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x450, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x458, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x468, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x479, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x479, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x479, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x479, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47a, Size: 0x1]
	byte LODMethod;//[Offset: 0x485, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x486, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x488, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x498, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x4a8, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x4b8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x4c8, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	Vector OldPosition;//[Offset: 0x4dc, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x4e8, Size: 0xc]
	float WarmupTime;//[Offset: 0x4f4, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x4f8, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x500, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x508, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x528, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x540, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x598, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x5a0, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x5a8, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x5a9, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x5aa, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x5d8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x33ef460
	void SetTemplate(ParticleSystem* NewTemplate);// 0x33ef3d0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x33ef300
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x33eedb0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x33eeca0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x33eeb80
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x33eea60
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x33ee950
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x33ee830
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x33ee750
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x33ee480
	int GetNumActiveParticles();// 0x33ee360
	MaterialInterface* GetNamedMaterial(FName InName);// 0x33ee2c0
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x33ee170
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x33ee050
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x33edf30
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x33ede10
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x33edcf0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x33edbd0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x33edae0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x33ed920
	void EndTrails();// 0x33ed900
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x33ed830
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x33ed630

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x33ef5c0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x14afc40
	void SetIntParameter(FName ParameterName, int Param);// 0x33ef230
	void SetFloatParameter(FName ParameterName, float Param);// 0x33ef150
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x33ef080
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x33eefa0
	void SetBoolParameter(FName ParameterName, bool Param);// 0x33eeed0
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x33ee5b0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x33ee3b0
	void ReleaseToPool();// 0x33ee390
	FXSystemAsset* GetFXSystemAsset();// 0x33ee290

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4]
	float WarmupTime;//[Offset: 0x38, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	UInt32Property MinTimeBetweenTicks;//[Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x33ed790

--------------------------------
Class: FXSystemAsset.Object
	UInt32Property MaxPoolSize;//[Size: 0x4]
	UInt32Property PoolPrimeSize;//[Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	UInt32Property DetailModeBitmask;//[Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	enum RenderResolution;//[Offset: 0xd1, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd2, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd3, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 0x1]
	FName EventName;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float AspectRatio;//[Offset: 0x24c, Size: 0x4]
	float FOVAngle;//[Offset: 0x250, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x550]
	int GetAutoActivatePlayerIndex();// 0x330f730

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x1f8, Size: 0x4]
	float OrthoWidth;//[Offset: 0x1fc, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x200, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x204, Size: 0x4]
	float AspectRatio;//[Offset: 0x208, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20c, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x20d, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x240, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x270, Size: 0x550]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x33116a0
	void SetProjectionMode(byte InProjectionMode);// 0x33115a0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x3311520
	void SetOrthoWidth(float InOrthoWidth);// 0x33114a0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x3311420
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x33113a0
	void SetFieldOfView(float InFieldOfView);// 0x2a63a20
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x3311290
	void SetAspectRatio(float InAspectRatio);// 0x3311210
	void RemoveBlendable(interface classNone InBlendableObject);// 0x33110e0
	void OnCameraMeshHiddenChanged();// 0xb7a5a0
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x330f760
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x330f490

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x24ab610
	void ViewSelf();// 0x331de00
	void ViewPlayer(FString S);// 0x331dd60
	void ViewClass(class Actor DesiredClass);// 0x331dcd0
	void ViewActor(FName ActorName);// 0x331dc40
	void UpdateSafeArea();// 0x331dc20
	void ToggleServerStatReplicatorUpdateStatNet();// 0x331dc00
	void ToggleServerStatReplicatorClientOverwrite();// 0x331dbe0
	void ToggleDebugCamera();// 0x331dbc0
	void ToggleAILogging();// 0x331dba0
	void TestCollisionDistance();// 0x331db80
	void Teleport();// 0x331db60
	void Summon(FString ClassName);// 0x331dac0
	void StreamLevelOut(FName PackageName);// 0x331da30
	void StreamLevelIn(FName PackageName);// 0x331d9a0
	void SpawnServerStatReplicator();// 0x331d980
	void Slomo(float NewTimeDilation);// 0x331d8f0
	void SetWorldOrigin();// 0x331d8d0
	void SetMouseSensitivityToDefault();// 0x331d8b0
	void ServerToggleAILogging();// 0x331d7d0
	void ReceiveInitCheatManager();// 0x197e4f0
	void ReceiveEndPlay();// 0x197e4f0
	void PlayersOnly();// 0x331d7b0
	void OnlyLoadLevel(FName PackageName);// 0x331d720
	void LogLoc();// 0x331d700
	void InvertMouse();// 0x331d6e0
	void God();// 0x331d6c0
	void Ghost();// 0x330f670
	void FreezeFrame(float Delay);// 0x331d630
	void Fly();// 0x2b19080
	void FlushLog();// 0x331d610
	void EnableDebugCamera();// 0xd59ac0
	void DumpVoiceMutingState();// 0x331d5f0
	void DumpPartyState();// 0x331d5d0
	void DumpOnlineSessionState();// 0x331d5b0
	void DumpChatState();// 0x331d590
	void DisableDebugCamera();// 0xd59ae0
	void DestroyTarget();// 0x331d570
	void DestroyServerStatReplicator();// 0x331d550
	void DestroyPawns(class Pawn aClass);// 0x29db4b0
	void DestroyAllPawnsExceptTarget();// 0x331d530
	void DestroyAll(class Actor aClass);// 0x331d4a0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x331d3d0
	void DebugCapsuleSweepPawn();// 0x331d3b0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x331d320
	void DebugCapsuleSweepClear();// 0x331d300
	void DebugCapsuleSweepChannel(byte Channel);// 0x331d280
	void DebugCapsuleSweepCapture();// 0x331d260
	void DebugCapsuleSweep();// 0x331d240
	void DamageTarget(float DamageAmount);// 0x331d1b0
	void CheatScript(FString ScriptName);// 0x331d0c0
	void ChangeSize(float F);// 0x331d030
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x331ce70
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x331cc80
	void BugIt(FString ScreenShotDescription);// 0x331cbe0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x578, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x578, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x578, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x578, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x578, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x578, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x580, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x588, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x590, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x598, Size: 0x8c]
	PlayerController* OriginalControllerRef;//[Offset: 0x628, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x630, Size: 0x8]
	float SpeedScale;//[Offset: 0x638, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x63c, Size: 0x4]
	float InitialAccel;//[Offset: 0x640, Size: 0x4]
	float InitialDecel;//[Offset: 0x644, Size: 0x4]
	void ToggleDisplay();// 0x33262c0
	void ShowDebugSelectedInfo();// 0x33262a0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x3326220
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x197e4f0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x197e4f0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x197e4f0
	Actor* GetSelectedActor();// 0x3325f90

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x450, Size: 0x4]
	float FrustumAngle;//[Offset: 0x454, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x458, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x45c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x460, Size: 0x4]
	Texture* Texture;//[Offset: 0x468, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x34102c0
	void SetBind(FName BindName, FString Command);// 0x340e3f0
	void InvertAxisKey(const Key AxisKey);// 0x340cc40
	void InvertAxis(const FName AxisName);// 0x340cbb0
	void ClearSmoothing();// 0x340b580

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1518, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1af0, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6e8, Size: 0x8]

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10e, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x110, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x118, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x120, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x128, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x130, Size: 0x8]
	Level*[] Levels;//[Offset: 0x138, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x148, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x180, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x188, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x198, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a0, Size: 0x8]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x1f8, Size: 0x50]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x248, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x258, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x5d8, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x698, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x3455bf0
	void HandleTimelineScrubbed();// 0x3455bd0

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x235, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x236, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x236, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x236, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x236, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x236, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x236, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x236, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x238, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x240, Size: 0x8]
	float WorldToMeters;//[Offset: 0x248, Size: 0x4]
	float KillZ;//[Offset: 0x24c, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x250, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x258, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x25c, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x260, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x268, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x270, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x278, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x280, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x284, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x290, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x294, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x298, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2a0, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2c0, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x2e4, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e8, Size: 0x8]
	float TimeDilation;//[Offset: 0x2f0, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x2f4, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x2f8, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x2fc, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x300, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x304, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x308, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x30c, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x350, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x358, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x368, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x378, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x380, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x388, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x390, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3a0, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x14c5b50

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x28]
	float Duration;//[Offset: 0x108, Size: 0x4]
	float MaxDistance;//[Offset: 0x10c, Size: 0x4]
	float TotalSamples;//[Offset: 0x110, Size: 0x4]
	float Priority;//[Offset: 0x114, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x120, Size: 0x48]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x168, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x170, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x180, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x188, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x198, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x1a8, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x80]
	SoundClass*[] ChildClasses;//[Offset: 0xa8, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb8, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x30, Size: 0x40]
	byte OutputTarget;//[Offset: 0x70, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x71, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	enum GainMode;//[Offset: 0x68, Size: 0x1]
	float OutputVolume;//[Offset: 0x6c, Size: 0x4]
	float WetLevel;//[Offset: 0x70, Size: 0x4]
	float DryLevel;//[Offset: 0x74, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x78, Size: 0x10]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x3438230
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x3438030
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x3437fa0
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x3437dc0
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x3437cf0
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x3437c60
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x3437b90
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x3437aa0
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x34377a0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x34376b0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x1b8, Size: 0x4]
	int StreamingPriority;//[Offset: 0x1bc, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x1c0, Size: 0x1]
	byte SoundGroup;//[Offset: 0x1c2, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c3, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c3, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c3, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x1c4, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c5, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c5, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c6, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c6, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x1c8, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1d8, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x1e8, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1f8, Size: 0x4]
	FString SpokenText;//[Offset: 0x240, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x250, Size: 0x4]
	float Volume;//[Offset: 0x254, Size: 0x4]
	float Pitch;//[Offset: 0x258, Size: 0x4]
	int NumChannels;//[Offset: 0x25c, Size: 0x4]
	int SampleRate;//[Offset: 0x260, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x270, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x280, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float QFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x8, Size: 0x1]
	float RetriggerTime;//[Offset: 0xc, Size: 0x4]
	float VolumeScale;//[Offset: 0x10, Size: 0x4]
	enum VolumeScaleMode;//[Offset: 0x14, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x18, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x20, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1]
	enum PitchRouting;//[Offset: 0x41, Size: 0x1]
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1]
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	enum SendStage;//[Offset: 0x1, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8]
	float SendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4]
	float MinSendDistance;//[Offset: 0x24, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x370, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x374, Size: 0x4]
	AudioBus* AudioBus;//[Offset: 0x378, Size: 0x8]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380, Size: 0x1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1]
	bool bIsAutomatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x258, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x280, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x288, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	void StartPlay();// 0x3349320
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x3347300
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x33471e0
	bool ShouldReset(Actor* ActorToReset);// 0x3346cb0
	void ReturnToMainMenuHost();// 0x154e9b0
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x3345ad0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3345a00
	void RestartPlayer(Controller* NewPlayer);// 0x3345970
	void ResetLevel();// 0x3345950
	bool PlayerCanRestart(PlayerController* Player);// 0x3345280
	bool MustSpectate(PlayerController* NewPlayerController);// 0x3344030
	void K2_PostLogin(PlayerController* NewPlayer);// 0x197e4f0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x197e4f0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x197e4f0
	void K2_OnLogout(Controller* ExitingController);// 0x197e4f0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x197e4f0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x3343420
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x3343200
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1524b20
	bool HasMatchStarted();// 0x3320510
	bool HasMatchEnded();// 0x3343090
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x3342f60
	int GetNumSpectators();// 0x3341ff0
	int GetNumPlayers();// 0x3341fc0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x3341990
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x33409e0
	Actor* ChoosePlayerStart(Controller* Player);// 0x333fd70
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x333fc40
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x333fb50

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 0x4]
	int MaxPlayers;//[Offset: 0x22c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x230, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName SessionName;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x230, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x238, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x240, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x254, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x258, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x25c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x3320770
	void OnRep_ReplicatedWorldTimeSeconds();// 0x3349320
	void OnRep_ReplicatedHasBegunPlay();// 0xce3240
	void OnRep_GameModeClass();// 0x3320750
	bool HasMatchStarted();// 0x334c240
	bool HasMatchEnded();// 0x334c210
	bool HasBegunPlay();// 0x334c1e0
	float GetServerWorldTimeSeconds();// 0x334c080
	float GetPlayerStartTime(Controller* Controller);// 0x334bb90
	float GetPlayerRespawnDelay(Controller* Controller);// 0x334baf0

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x288, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x28c, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x3329dc0
	void MoveUp_World(float Val);// 0x33292c0
	void MoveRight(float Val);// 0x3329230
	void MoveForward(float Val);// 0x33291a0
	void LookUpAtRate(float Rate);// 0x3329110

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x468, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x343f9a0
	float GetUnscaledSphereRadius();// 0x3315f70
	float GetShapeScale();// 0x343db00
	float GetScaledSphereRadius();// 0x343dab0

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x478, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x47c, Size: 0x4]
	int MinLOD;//[Offset: 0x480, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x484, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x488, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x490, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x494, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x494, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x494, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x494, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x494, Size: 0x1]
	bool bAutomaticallyCreateRenderState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x494, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x495, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x495, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x495, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x495, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x495, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x495, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x495, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x498, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x49c, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x4a0, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x4a4, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b8, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c8, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0xd8acd0
	void SetReverseCulling(bool ReverseCulling);// 0x3447b50
	void SetForcedLodModel(int NewForcedLodModel);// 0x3447710
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x3447680
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3447400
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3447370
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x34471d0

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	UInt32Property PackedRelativeBox;//[Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	UInt32Property Channels;//[Size: 0x4]
	UInt32Property InRate;//[Size: 0x4]
	UInt32Property OutRate;//[Size: 0x4]
	UInt32Property MaxPacketOverhead;//[Size: 0x4]
	UInt32Property InRateClientMax;//[Size: 0x4]
	UInt32Property InRateClientMin;//[Size: 0x4]
	UInt32Property InRateClientAvg;//[Size: 0x4]
	UInt32Property InPacketsClientMax;//[Size: 0x4]
	UInt32Property InPacketsClientMin;//[Size: 0x4]
	UInt32Property InPacketsClientAvg;//[Size: 0x4]
	UInt32Property OutRateClientMax;//[Size: 0x4]
	UInt32Property OutRateClientMin;//[Size: 0x4]
	UInt32Property OutRateClientAvg;//[Size: 0x4]
	UInt32Property OutPacketsClientMax;//[Size: 0x4]
	UInt32Property OutPacketsClientMin;//[Size: 0x4]
	UInt32Property OutPacketsClientAvg;//[Size: 0x4]
	UInt32Property NetNumClients;//[Size: 0x4]
	UInt32Property InPackets;//[Size: 0x4]
	UInt32Property OutPackets;//[Size: 0x4]
	UInt32Property InBunches;//[Size: 0x4]
	UInt32Property OutBunches;//[Size: 0x4]
	UInt32Property OutLoss;//[Size: 0x4]
	UInt32Property InLoss;//[Size: 0x4]
	UInt32Property VoiceBytesSent;//[Size: 0x4]
	UInt32Property VoiceBytesRecv;//[Size: 0x4]
	UInt32Property VoicePacketsSent;//[Size: 0x4]
	UInt32Property VoicePacketsRecv;//[Size: 0x4]
	UInt32Property PercentInVoice;//[Size: 0x4]
	UInt32Property PercentOutVoice;//[Size: 0x4]
	UInt32Property NumActorChannels;//[Size: 0x4]
	UInt32Property NumConsideredActors;//[Size: 0x4]
	UInt32Property PrioritizedActors;//[Size: 0x4]
	UInt32Property NumRelevantActors;//[Size: 0x4]
	UInt32Property NumRelevantDeletedActors;//[Size: 0x4]
	UInt32Property NumReplicatedActorAttempts;//[Size: 0x4]
	UInt32Property NumReplicatedActors;//[Size: 0x4]
	UInt32Property NumActors;//[Size: 0x4]
	UInt32Property NumNetActors;//[Size: 0x4]
	UInt32Property NumDormantActors;//[Size: 0x4]
	UInt32Property NumInitiallyDormantActors;//[Size: 0x4]
	UInt32Property NumNetGUIDsAckd;//[Size: 0x4]
	UInt32Property NumNetGUIDsPending;//[Size: 0x4]
	UInt32Property NumNetGUIDsUnAckd;//[Size: 0x4]
	UInt32Property ObjPathBytes;//[Size: 0x4]
	UInt32Property NetGUIDOutRate;//[Size: 0x4]
	UInt32Property NetGUIDInRate;//[Size: 0x4]
	UInt32Property NetSaturated;//[Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x230, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x234, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x260, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 0x4]
	float MoveRepSize;//[Offset: 0x268, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4]
	float GainHF;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float LateDelay;//[Offset: 0x3c, Size: 0x4]
	float DecayTime;//[Offset: 0x40, Size: 0x4]
	float Density;//[Offset: 0x44, Size: 0x4]
	float Diffusion;//[Offset: 0x48, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4]
	float LateGain;//[Offset: 0x54, Size: 0x4]
	float Gain;//[Offset: 0x58, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	UInt32Property MBPNumSubdivs;//[Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f4, Size: 0x1]
	bool bFinishedLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f4, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x268, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x278, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x298, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x468, Size: 0x8]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x197e4f0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x33bfd30
	bool RemoteEvent(FName EventName);// 0x33bf3e0
	void LevelReset();// 0x197e4f0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x450, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	float ScreenSize;//[Offset: 0x45c, Size: 0x4]
	float U;//[Offset: 0x460, Size: 0x4]
	float UL;//[Offset: 0x464, Size: 0x4]
	float V;//[Offset: 0x468, Size: 0x4]
	float VL;//[Offset: 0x46c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x32ff3b0
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x32ff080
	void SetSprite(Texture2D* NewSprite);// 0x24ab960

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb4, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb8, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbe, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbe, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbe, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbf, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbf, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbf, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbf, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xc0, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe8, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf8, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x108, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x118, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x128, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x130, Size: 0x8]
	bool ShouldBeLoaded();// 0x2b43580
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x33c0c70
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x334b6d0
	void SetPriority(int NewPriority);// 0x33c0a50
	void SetLevelLODIndex(int LODIndex);// 0x33c0360
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x33c02d0
	bool IsStreamingStatePending();// 0x33beed0
	bool IsLevelVisible();// 0x33beea0
	bool IsLevelLoaded();// 0x33bee70
	FName GetWorldAssetPackageFName();// 0x33bee00
	Level* GetLoadedLevel();// 0x24d3f10
	LevelScriptActor* GetLevelScriptActor();// 0x33bed50
	bool GetIsRequestingUnloadAndRemoval();// 0x33bed20
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x33bec40

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x274, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x840, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9ec, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa10, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa28, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x38, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x32fed50
	int GetObjectCount();// 0x32fec30
	int GetNewAvoidanceUID();// 0x32fec00
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x32feb50

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10]
	void ReceiveShutdown();// 0x197e4f0
	void ReceiveInit();// 0x197e4f0
	void HandleTravelError(byte FailureType);// 0x197e4f0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x197e4f0
	void DebugRemovePlayer(int ControllerId);// 0x3339850
	void DebugCreatePlayer(int ControllerId);// 0x33397c0

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x78, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 0x8]
	void SSSwapControllers();// 0x24ab9f0
	void ShowTitleSafeArea();// 0x24aba10
	void SetConsoleTarget(int PlayerIndex);// 0x14a48e0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x33579c0
	bool WasControllerKeyJustPressed(Key Key);// 0x33579c0
	bool IsControllerKeyDown(Key Key);// 0x33579c0
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3357840
	Vector GetControllerVectorKeyState(Key Key);// 0x33572c0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x33571e0
	float GetControllerKeyTimeDown(Key Key);// 0x3356fb0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x33570b0
	float GetControllerAnalogKeyState(Key Key);// 0x3356fb0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x110, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x120, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x130, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x158, Size: 0x10]
	delegate OnVisibilityChanged;//[Offset: 0x168, Size: 0x10]
	Margin Padding;//[Offset: 0x190, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1b0, Size: 0x8]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x29dcfb0
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x29dced0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x29dcdf0
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x29dcd60
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x29dccd0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x197e4f0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x29dcc00
	void StopListeningForAllInputActions();// 0x29dcbe0
	void StopAnimationsAndLatentActions();// 0x29dcbc0
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x29dcb30
	void StopAllAnimations();// 0x29dcb10
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x29dc810
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlayBackSpeed);// 0x29dc740
	void SetPadding(Margin InPadding);// 0x29dc6b0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x29dc620
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x29dc550
	void SetInputActionPriority(int NewPriority);// 0x29dc2f0
	void SetInputActionBlocking(bool bShouldBlock);// 0x29dc260
	void SetForegroundColor(SlateColor InForegroundColor);// 0x29dc0f0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x29dc070
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29dbf50
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x29dbe80
	void SetAnchorsInViewport(Anchors Anchors);// 0x29dbdf0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x29dbd70
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x29dbce0
	void RemoveFromViewport();// 0x29dbcc0
	void RegisterInputComponent();// 0x29dbca0
	void PreConstruct(bool IsDesignTime);// 0x197e4f0
	void PlaySound(SoundBase* SoundToPlay);// 0x29dbc10
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlayBackSpeed, bool bRestoreState);// 0x29db9f0
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlayBackSpeed, bool bRestoreState);// 0x29db8d0
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlayBackSpeed, bool bRestoreState);// 0x29db7b0
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlayBackSpeed, bool bRestoreState);// 0x29db5e0
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x29db540
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x197e4f0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x197e4f0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x197e4f0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x197e4f0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x197e4f0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x197e4f0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x197e4f0
	void OnPaint(out PaintContext Context);// 0x197e4f0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x197e4f0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	void OnMouseCaptureLost();// 0x197e4f0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x197e4f0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x197e4f0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x197e4f0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x197e4f0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x197e4f0
	void OnInitialized();// 0x197e4f0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x197e4f0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x197e4f0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x197e4f0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x197e4f0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x197e4f0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x197e4f0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x197e4f0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x197e4f0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x29db4b0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x29db420
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x197e4f0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x197e4f0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x29db290
	bool IsPlayingAnimation();// 0x29db260
	bool IsListeningForInputAction(FName ActionName);// 0x29db1c0
	bool IsInViewport();// 0x29dafa0
	bool IsInteractable();// 0x197e4f0
	bool IsAnyAnimationPlaying();// 0x29db190
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x29db0f0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x29db050
	Pawn* GetOwningPlayerPawn();// 0x29db000
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x29dafd0
	bool GetIsVisible();// 0x29dafa0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x29daf00
	Anchors GetAnchorsInViewport();// 0x29daec0
	Vector2D GetAlignmentInViewport();// 0x29dae80
	void FlushAnimations();// 0x29dae60
	void Destruct();// 0x197e4f0
	void Construct();// 0x197e4f0
	void CancelLatentActions();// 0x29dae00
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x29dad20
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x29dac40
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x29daac0
	void AddToViewport(int ZOrder);// 0x29daa30
	bool AddToPlayerScreen(int ZOrder);// 0x29da990

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xc8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xd0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf8, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x29e07e0
	void SetUserFocus(PlayerController* PlayerController);// 0x29e05b0
	void SetToolTipText(out const FText InToolTipText);// 0x29e04e0
	void SetToolTip(Widget* Widget);// 0x29e0450
	void SetRenderTranslation(Vector2D Translation);// 0x29e0340
	void SetRenderTransformPivot(Vector2D Pivot);// 0x29e02c0
	void SetRenderTransformAngle(float Angle);// 0x29e0240
	void SetRenderTransform(WidgetTransform InTransform);// 0x29e0160
	void SetRenderShear(Vector2D Shear);// 0x29e00e0
	void SetRenderScale(Vector2D Scale);// 0x29e0060
	void SetRenderOpacity(float InOpacity);// 0x29dffe0
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x29dfe80
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x29dfd90
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x29dfca0
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x29dfbd0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x29dfac0
	void SetKeyboardFocus();// 0x29dfaa0
	void SetIsEnabled(bool bInIsEnabled);// 0x29dfa10
	void SetFocus();// 0x29df970
	void SetCursor(byte InCursor);// 0x29df8f0
	void SetClipping(enum InClipping);// 0x29df870
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x29df7a0
	void ResetCursor();// 0x29df780
	void RemoveFromParent();// 0x29df760
	EventReply OnReply__DelegateSignature();// 0x197e4f0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x197e4f0
	bool IsVisible();// 0x29df730
	bool IsHovered();// 0x1557e40
	void InvalidateLayoutAndVolatility();// 0x29df710
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x29df670
	bool HasUserFocus(PlayerController* PlayerController);// 0x29df5d0
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x29df500
	bool HasMouseCapture();// 0x29df4d0
	bool HasKeyboardFocus();// 0x29df4a0
	bool HasFocusedDescendants();// 0x29df470
	bool HasAnyUserFocus();// 0x29df440
	Widget* GetWidget__DelegateSignature();// 0x197e4f0
	enum GetVisibility();// 0x29df410
	Geometry GetTickSpaceGeometry();// 0x29df2f0
	FText GetText__DelegateSignature();// 0x197e4f0
	enum GetSlateVisibility__DelegateSignature();// 0x197e4f0
	SlateColor GetSlateColor__DelegateSignature();// 0x197e4f0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x197e4f0
	float GetRenderTransformAngle();// 0x29df290
	float GetRenderOpacity();// 0x29df260
	PanelWidget* GetParent();// 0x29df230
	Geometry GetPaintSpaceGeometry();// 0x29df1f0
	PlayerController* GetOwningPlayer();// 0x29df1c0
	LocalPlayer* GetOwningLocalPlayer();// 0x29df190
	byte GetMouseCursor__DelegateSignature();// 0x197e4f0
	LinearColor GetLinearColor__DelegateSignature();// 0x197e4f0
	bool GetIsEnabled();// 0x29df160
	int GetInt32__DelegateSignature();// 0x197e4f0
	GameInstance* GetGameInstance();// 0x29df130
	float GetFloat__DelegateSignature();// 0x197e4f0
	Vector2D GetDesiredSize();// 0x29df0c0
	enum GetClipping();// 0x29df090
	enum GetCheckBoxState__DelegateSignature();// 0x197e4f0
	Geometry GetCachedGeometry();// 0x29df050
	bool GetBool__DelegateSignature();// 0x197e4f0
	FText GetAccessibleText();// 0x29defb0
	FText GetAccessibleSummaryText();// 0x29def10
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x197e4f0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x197e4f0
	void ForceVolatile(bool bForce);// 0x29dee80
	void ForceLayoutPrepass();// 0x29dee60

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x108, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x29cc0f0
	bool RemoveChild(Widget* Content);// 0x29cc050
	bool HasChild(Widget* Content);// 0x29cbec0
	bool HasAnyChildren();// 0x29cbe90
	int GetChildrenCount();// 0x29cbb40
	int GetChildIndex(const Widget* Content);// 0x29cbaa0
	Widget* GetChildAt(int Index);// 0x29cba00
	Widget*[] GetAllChildren();// 0x29cb980
	void ClearChildren();// 0x29cb8b0
	PanelSlot* AddChild(Widget* Content);// 0x29cb770

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x29e0b00
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x29e0a20
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x29e0990
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x29e0900
	float GetStartTime();// 0x29df2c0
	float GetEndTime();// 0x29df100
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x29ded80
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x29deca0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x27d96a0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x27d95f0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Guid EvaluationFieldGuid;//[Offset: 0x58, Size: 0x10]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4]
	enum Flags;//[Offset: 0x1c, Size: 0x1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4]
	int RowIndex;//[Offset: 0xa8, Size: 0x4]
	int OverlapPriority;//[Offset: 0xac, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	float StartTime;//[Offset: 0xb4, Size: 0x4]
	float EndTime;//[Offset: 0xb8, Size: 0x4]
	float PrerollTime;//[Offset: 0xbc, Size: 0x4]
	float PostrollTime;//[Offset: 0xc0, Size: 0x4]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc9, Size: 0x2]
	void SetRowIndex(int NewRowIndex);// 0x27daf00
	void SetPreRollFrames(int InPreRollFrames);// 0x27dae70
	void SetPostRollFrames(int InPostRollFrames);// 0x27dade0
	void SetOverlapPriority(int NewPriority);// 0x27dac30
	void SetIsLocked(bool bInIsLocked);// 0x27daba0
	void SetIsActive(bool bInIsActive);// 0x27dab10
	void SetCompletionMode(enum InCompletionMode);// 0x27da860
	void SetBlendType(enum InBlendType);// 0x27da7e0
	bool IsLocked();// 0x27d9c20
	bool IsActive();// 0x27d9bf0
	int GetRowIndex();// 0xfaa010
	int GetPreRollFrames();// 0x27d9b60
	int GetPostRollFrames();// 0x27d9b40
	int GetOverlapPriority();// 0x27d9b20
	enum GetCompletionMode();// 0x27d98c0
	OptionalMovieSceneBlendType GetBlendType();// 0x27d9780

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum CompletionMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4]
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4]
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	FrameNumber Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentId;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceID
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int16 HierarchicalBias;//[Offset: 0x94, Size: 0x2]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8]
	UInt32Property EntityID;//[Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FrameNumber ForcedTime;//[Offset: 0x0, Size: 0x4]
	enum Flags;//[Offset: 0x8, Size: 0x1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8]
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2]
	enum Flags;//[Offset: 0x2, Size: 0x1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	UInt32Property SectionIndex;//[Size: 0x4]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] Ids;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Geometry

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x410, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x420, Size: 0xe8]
	void SetUserTag(FName InUserTag);// 0x29dca00
	FName GetUserTag();// 0x29db030

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x90, Size: 0x50]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x238, Size: 0x138]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*> WeakUserWidgets;//[Offset: 0x28, Size: 0x50]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x29c2bd0
	void Dragged(out const PointerEvent PointerEvent);// 0x29c2aa0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x29c2970

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x1f8, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x200, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x208, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x331d820

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x230, Size: 0x8]
	float PlayRate;//[Offset: 0x238, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x240, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	float InterpPosition;//[Offset: 0x28c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 0x1]
	delegate OnPlay;//[Offset: 0x298, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b8, Size: 0x10]
	void Stop();// 0x14f9ac0
	void SetPosition(float NewPosition, bool bJump);// 0x33d8330
	void SetLoopingState(bool bNewLooping);// 0x33d82a0
	void Reverse();// 0x14f9ae0
	void Play();// 0xbc0f10
	void Pause();// 0xce3100
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x33d77b0
	void ChangePlaybackDirection();// 0x32fed30

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x70, Size: 0x8]
	Object*[] CreateSubObjects;//[Offset: 0x160, Size: 0x10]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DISPLAYNAME;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x228, Size: 0x8]
	void Stop();// 0x32e12a0
	void Play(float StartTime);// 0x32e0cf0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x32e0ab0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0x32e09e0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x32e0870

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x1f8, Size: 0x8]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x200, Size: 0x10]
	SoundClass* SoundClassOverride;//[Offset: 0x210, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21a, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x220, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x228, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x22c, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x230, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x234, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x238, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x23c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x240, Size: 0x4]
	float Priority;//[Offset: 0x244, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x248, Size: 0x4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x250, Size: 0x8]
	float PitchMultiplier;//[Offset: 0x258, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x25c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x268, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x270, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x610, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x618, Size: 0x50]
	enum AutoAttachLocationRule;//[Offset: 0x674, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x675, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x676, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x678, Size: 0x48]
	delegate OnAudioPlayStateChanged;//[Offset: 0x6c0, Size: 0x10]
	delegate OnAudioVirtualizationChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x710, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x738, Size: 0x10]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x760, Size: 0x10]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x788, Size: 0x10]
	delegate OnQueueSubtitles;//[Offset: 0x7b0, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x7c0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x7c8, Size: 0x8]
	void StopDelayed(float DelayTime);// 0x32fba00
	void Stop();// 0x32fb9e0
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x32fb910
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x32fb890
	void SetUISound(bool bInUISound);// 0x32fb800
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x32fb6b0
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x32fb560
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x32fb490
	void SetSound(SoundBase* NewSound);// 0x32fb400
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x32fb260
	void SetPaused(bool bPause);// 0x32fb1d0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x32fb150
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x32fb0c0
	void SetIntParameter(FName InName, int inInt);// 0x32faff0
	void SetFloatParameter(FName InName, float InFloat);// 0x32faea0
	void SetBoolParameter(FName InName, bool InBool);// 0x32faac0
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x32fa9f0
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float SourceBusSendLevel);// 0x32fa920
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x32fa5e0
	void Play(float StartTime);// 0x32fa550
	bool IsVirtualized();// 0x32fa520
	bool IsPlaying();// 0x32fa4f0
	bool HasCookedFFTData();// 0x32fa4c0
	bool HasCookedAmplitudeEnvelopeData();// 0x32fa490
	enum GetPlayState();// 0x32fa460
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x32fa380
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x32fa260
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x32fa1a0
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x32fa0f0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x32f9fd0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x32f9e70
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x32f9c80
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x32f9090
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x32f8fc0

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary);// 0x2a652f0
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject);// 0x2a65260
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent);// 0x2a65090
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent);// 0x2a64fa0
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float TicksPerSecond);// 0x2a64580
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float ThirtySecondsNotesPerMinute);// 0x2a643c0
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float SecondsPerTick);// 0x2a63c70
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float MillisecondsPerTick);// 0x2a63ab0
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, float BeatsPerMinute);// 0x2a635f0
	void ResumeClock(const Object* WorldContextObject);// 0x2a634a0
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x2a633b0
	void PauseClock(const Object* WorldContextObject);// 0x2a62c10
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x2a624f0
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x2a62450
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x2a623b0
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x2a61ed0
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x2a61a90

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1]
	float Multiplier;//[Offset: 0x4, Size: 0x4]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10]
	float PlaybackTime;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4]
	float PlaybackTime;//[Offset: 0x4, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4]
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10]
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x58, Size: 0x10]
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0x68, Size: 0x10]
	<FName,enum> AttributeBlendModes;//[Offset: 0x78, Size: 0x50]
	enum DefaultAttributeBlendMode;//[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Meaning;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8]
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x230, Size: 0x4]
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x238, Size: 0x10]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x248, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x258, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x268, Size: 0x10]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x278, Size: 0x8]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x280, Size: 0x8]
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x288, Size: 0x8]
	Function* UberGraphFunction;//[Offset: 0x298, Size: 0x8]
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x2a0, Size: 0x50]

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x330, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x340, Size: 0x8]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x348, Size: 0x10]
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x358, Size: 0x50]
	FName[] SyncGroupNames;//[Offset: 0x428, Size: 0x10]
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x438, Size: 0x10]
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x448, Size: 0x50]
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x498, Size: 0x50]
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x4e8, Size: 0xc8]

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8]
	int InitialState;//[Offset: 0x8, Size: 0x4]
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10]
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8]
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10]
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4]
	int StartNotify;//[Offset: 0x1c, Size: 0x4]
	int EndNotify;//[Offset: 0x20, Size: 0x4]
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4]
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4]
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10]
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10]
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4]
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4]
	int TransitionIndex;//[Offset: 0x8, Size: 0x4]
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int[] PoseEvaluatorLinks;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4]
	int NextState;//[Offset: 0xc, Size: 0x4]
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4]
	int StartNotify;//[Offset: 0x14, Size: 0x4]
	int EndNotify;//[Offset: 0x18, Size: 0x4]
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4]
	enum BlendMode;//[Offset: 0x20, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8]
	byte LogicType;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 0x8]
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 0x10]
	Function* Function;//[Offset: 0x18, Size: 0x8]
	FieldPathProperty ValueHandlerNodeProperty;//[Size: 0x20]

--------------------------------
Class: ExposedValueCopyRecord
	int CopyIndex;//[Offset: 0x0, Size: 0x4]
	enum PostCopyOperation;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PropertyAccessLibrary
	PropertyAccessSegment[] PathSegments;//[Offset: 0x0, Size: 0x10]
	PropertyAccessPath[] SrcPaths;//[Offset: 0x10, Size: 0x10]
	PropertyAccessPath[] DestPaths;//[Offset: 0x20, Size: 0x10]
	PropertyAccessCopyBatch CopyBatches;//[Offset: 0x30, Size: 0x10]
	PropertyAccessIndirectionChain[] SrcAccesses;//[Offset: 0x70, Size: 0x10]
	PropertyAccessIndirectionChain[] DestAccesses;//[Offset: 0x80, Size: 0x10]
	PropertyAccessIndirection[] InDirections;//[Offset: 0x90, Size: 0x10]
	int[] EventAccessIndices;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: PropertyAccessSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	Struct* Struct;//[Offset: 0x8, Size: 0x8]
	FieldPathProperty Property;//[Size: 0x20]
	Function* Function;//[Offset: 0x30, Size: 0x8]
	int ArrayIndex;//[Offset: 0x38, Size: 0x4]
	uint16 Flags;//[Offset: 0x3c, Size: 0x2]

--------------------------------
Class: PropertyAccessPath
	int PathSegmentStartIndex;//[Offset: 0x0, Size: 0x4]
	int PathSegmentCount;//[Offset: 0x4, Size: 0x4]
	bool bHasEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PropertyAccessCopyBatch
	PropertyAccessCopy[] Copies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PropertyAccessCopy
	int AccessIndex;//[Offset: 0x0, Size: 0x4]
	int DestAccessStartIndex;//[Offset: 0x4, Size: 0x4]
	int DestAccessEndIndex;//[Offset: 0x8, Size: 0x4]
	enum Type;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PropertyAccessIndirectionChain
	FieldPathProperty Property;//[Size: 0x20]
	int IndirectionStartIndex;//[Offset: 0x20, Size: 0x4]
	int IndirectionEndIndex;//[Offset: 0x24, Size: 0x4]
	int EventId;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PropertyAccessIndirection
	FieldPathProperty ArrayProperty;//[Size: 0x20]
	Function* Function;//[Offset: 0x20, Size: 0x8]
	int ReturnBufferSize;//[Offset: 0x28, Size: 0x4]
	int ReturnBufferAlignment;//[Offset: 0x2c, Size: 0x4]
	int ArrayIndex;//[Offset: 0x30, Size: 0x4]
	UInt32Property Offset;//[Size: 0x4]
	enum ObjectType;//[Offset: 0x38, Size: 0x1]
	enum Type;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10]
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50]
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10]
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10]
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10]
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10]
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10]
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10]
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10]
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10]
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10]
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50]
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10]
	ExposedValueHandler[] EvaluateGraphExposedInputs;//[Offset: 0x208, Size: 0x10]
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x218, Size: 0x50]
	PropertyAccessLibrary PropertyAccessLibrary;//[Offset: 0x268, Size: 0xc8]

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName Group;//[Offset: 0x8, Size: 0x8]
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4]
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10]
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10]
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20]
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10]
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	byte TranslationCompressionFormat;//[Offset: 0x3c, Size: 0x1]
	byte RotationCompressionFormat;//[Offset: 0x3d, Size: 0x1]
	byte ScaleCompressionFormat;//[Offset: 0x3e, Size: 0x1]

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x40, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x44, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x48, Size: 0x4]
	float MaxEffectorDiff;//[Offset: 0x4c, Size: 0x4]
	float MinEffectorDiff;//[Offset: 0x50, Size: 0x4]
	float EffectorDiffSocket;//[Offset: 0x54, Size: 0x4]
	float ParentKeyScale;//[Offset: 0x58, Size: 0x4]
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x60, Size: 0x4]
	float MaxPosDiffBitwise;//[Offset: 0x64, Size: 0x4]
	float MaxAngleDiffBitwise;//[Offset: 0x68, Size: 0x4]
	float MaxScaleDiffBitwise;//[Offset: 0x6c, Size: 0x4]
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10]
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10]
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10]
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4]
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4]
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4]
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4]
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4]
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4]
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4]
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4]
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4]
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x40, Size: 0x4]
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x40, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x44, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	Vector Scale;//[Offset: 0x58, Size: 0xc]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	FName SocketName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	FName AttachName;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8]
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8]
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8]
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1]
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8]
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x197e4f0

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10]
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10]
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10]
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10]
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10]
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10]
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8]
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2b8, Size: 0x8]
	delegate PostEvaluateAnimEvent;//[Offset: 0x2c0, Size: 0x10]
	void StopAnim();// 0x32f2680
	void SetReverse(bool bInReverse);// 0x32f25f0
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x32f24d0
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x32f23b0
	void SetPosition(float InPosition, bool bFireNotifies);// 0x32f22d0
	void SetPlayRate(float InPlayRate);// 0x32f21c0
	void SetPlaying(bool bIsPlaying);// 0x32f2240
	void SetLooping(bool bIsLooping);// 0x32f2130
	void SetBlendSpaceInput(out const Vector InBlendInput);// 0x32f20a0
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x32f1f80
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x32f1e70
	float GetLength();// 0x32f1e40
	AnimationAsset* GetAnimationAsset();// 0x32f1e10

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	enum Interpolation;//[Offset: 0xac, Size: 0x1]
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x100, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x110, Size: 0x10]
	delegate OnTemperatureChangeDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnLowPowerModeDelegate;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4]
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4]
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4]
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4]
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4]
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4]
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bDisableCommitAndBuildDuringFetchResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1]
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1]
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4]
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4]
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4]
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4]
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4]
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1]
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x68]

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4]
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4]
	int PushOutIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4]
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4]
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4]
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4]
	int JointPairIterations;//[Offset: 0x1c, Size: 0x4]
	int JointPushOutPairIterations;//[Offset: 0x20, Size: 0x4]
	float ClusterConnectionFactor;//[Offset: 0x24, Size: 0x4]
	enum ClusterUnionConnectionType;//[Offset: 0x28, Size: 0x1]
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2c, Size: 0x10]
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x40, Size: 0x10]
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x54, Size: 0x10]
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinImpulse;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinVolume;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinVolume;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe0, Size: 0x34]
	byte LockedAxis;//[Offset: 0x114, Size: 0x1]
	byte DefaultDegreesOfFreedom;//[Offset: 0x115, Size: 0x1]
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 0x1]
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 0x1]
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	float AnimPhysicsMinDeltaTime;//[Offset: 0x120, Size: 0x4]
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float MaxPhysicsDeltaTime;//[Offset: 0x128, Size: 0x4]
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	float MaxSubstepDeltaTime;//[Offset: 0x130, Size: 0x4]
	int MaxSubsteps;//[Offset: 0x134, Size: 0x4]
	float SyncSceneSmoothingFactor;//[Offset: 0x138, Size: 0x4]
	float InitialAverageFrameRate;//[Offset: 0x13c, Size: 0x4]
	int PhysXTreeRebuildRate;//[Offset: 0x140, Size: 0x4]
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x148, Size: 0x10]
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x158, Size: 0x40]
	float MinDeltaVelocityForHitEvents;//[Offset: 0x198, Size: 0x4]
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x19c, Size: 0x3]

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4]
	float PingLimit;//[Offset: 0x4, Size: 0x4]
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4]
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4]
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4]
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4]
	float PositionLerp;//[Offset: 0x18, Size: 0x4]
	float AngleLerp;//[Offset: 0x1c, Size: 0x4]
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4]
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4]
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4]
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4]
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1]
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1]
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10]
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10]
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10]
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10]
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1]
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1]
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8]
	FName NewName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x450, Size: 0x4]
	float ArrowSize;//[Offset: 0x454, Size: 0x4]
	float ArrowLength;//[Offset: 0x458, Size: 0x4]
	float ScreenSize;//[Offset: 0x45c, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x32f5d80

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8]
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8]
	FString Filename;//[Offset: 0x38, Size: 0x10]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10]
	Object* Options;//[Offset: 0x60, Size: 0x8]
	FString[] Errors;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8]
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8]
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10]
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10]
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4]
	int TextIndent;//[Offset: 0x5c, Size: 0x4]
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8]
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x197e4f0
	static bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x33398e0
	static bool RunAssetExportTask(AssetExportTask* Task);// 0x161b7b0

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10]
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10]
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10]
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10]
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10]
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10]
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28]
	class Object* AssetBaseClassLoaded;//[Offset: 0x30, Size: 0x8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10]
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc]
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10]
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4]
	int ChunkId;//[Offset: 0x4, Size: 0x4]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum CookRule;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10]
	FString FilterString;//[Offset: 0x18, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10]
	FString New;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8]
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x24ab9f0

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8]
	static AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x32f9b20
	static AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x32f94c0

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	static AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x32f95e0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	static AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x32f9720

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	static AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x32f99c0

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	static AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x32f9860

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x32f9300
	static AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x32f91a0

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x1f8, Size: 0x4]
	float FogMultiplier;//[Offset: 0x1fc, Size: 0x4]
	float DensityMultiplier;//[Offset: 0x200, Size: 0x4]
	float DensityOffset;//[Offset: 0x204, Size: 0x4]
	float DistanceScale;//[Offset: 0x208, Size: 0x4]
	float AltitudeScale;//[Offset: 0x20c, Size: 0x4]
	float DistanceOffset;//[Offset: 0x210, Size: 0x4]
	float GroundOffset;//[Offset: 0x214, Size: 0x4]
	float StartDistance;//[Offset: 0x218, Size: 0x4]
	float SunDiscScale;//[Offset: 0x21c, Size: 0x4]
	float DefaultBrightness;//[Offset: 0x220, Size: 0x4]
	Color DefaultLightColor;//[Offset: 0x224, Size: 0x4]
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bAtmosphereAffectsSunIlluminance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 0x1]
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x22c, Size: 0x2c]
	Texture2D* TransmittanceTexture;//[Offset: 0x258, Size: 0x8]
	Texture2D* IrradianceTexture;//[Offset: 0x260, Size: 0x8]
	void StartPrecompute();// 0xb7a5a0
	void SetSunMultiplier(float NewSunMultiplier);// 0x32fb780
	void SetStartDistance(float NewStartDistance);// 0x32fb630
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x32fb2e0
	void SetFogMultiplier(float NewFogMultiplier);// 0x32faf70
	void SetDistanceScale(float NewDistanceScale);// 0x32fae20
	void SetDistanceOffset(float NewDistanceOffset);// 0x32fada0
	void SetDensityOffset(float NewDensityOffset);// 0x32fad20
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x32faca0
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x32fac10
	void SetDefaultBrightness(float NewBrightness);// 0x32fab90
	void SetAltitudeScale(float NewAltitudeScale);// 0x32fa8a0
	void DisableSunDisk(bool NewSunDisk);// 0x32f9de0
	void DisableGroundScattering(bool NewGroundScattering);// 0x32f9d50

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0, Size: 0x4]
	float DecayHeight;//[Offset: 0x4, Size: 0x4]
	int MaxScatteringOrder;//[Offset: 0x8, Size: 0x4]
	int TransmittanceTexWidth;//[Offset: 0xc, Size: 0x4]
	int TransmittanceTexHeight;//[Offset: 0x10, Size: 0x4]
	int IrradianceTexWidth;//[Offset: 0x14, Size: 0x4]
	int IrradianceTexHeight;//[Offset: 0x18, Size: 0x4]
	int InscatterAltitudeSampleNum;//[Offset: 0x1c, Size: 0x4]
	int InscatterMuNum;//[Offset: 0x20, Size: 0x4]
	int InscatterMuSNum;//[Offset: 0x24, Size: 0x4]
	int InscatterNuNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18]
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18]
	SoftObjectPath ReverbSubmix;//[Offset: 0xc8, Size: 0x18]
	SoftObjectPath EQSubmix;//[Offset: 0xe0, Size: 0x18]
	enum VoiPSampleRate;//[Offset: 0xf8, Size: 0x4]
	float DefaultReverbSendLevel;//[Offset: 0xfc, Size: 0x4]
	int MaximumConcurrentStreams;//[Offset: 0x100, Size: 0x4]
	float GlobalMinPitchScale;//[Offset: 0x104, Size: 0x4]
	float GlobalMaxPitchScale;//[Offset: 0x108, Size: 0x4]
	AudioQualitySettings[] QualityLevels;//[Offset: 0x110, Size: 0x10]
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1]
	UInt32Property NumStoppingSources;//[Size: 0x4]
	enum PanningMethod;//[Offset: 0x128, Size: 0x1]
	enum MonoChannelUpmixMethod;//[Offset: 0x129, Size: 0x1]
	FString DialogueFilenameFormat;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: AudioQualitySettings
	FText DISPLAYNAME;//[Offset: 0x0, Size: 0x18]
	int MaxChannels;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x260, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	ReverbSettings Settings;//[Offset: 0x268, Size: 0x20]
	InteriorSettings AmbientZoneSettings;//[Offset: 0x288, Size: 0x24]
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2b0, Size: 0x10]
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x2c0, Size: 0x10]
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0x32ff2e0
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0x32ff210
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0x32fefd0
	void SetPriority(float NewPriority);// 0x32fef50
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0x32feeb0
	void SetEnabled(bool bNewEnabled);// 0x32fee20
	void OnRep_bEnabled();// 0x32fed30

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1]
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1]
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10]
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x38, Size: 0x10]
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x32fec60

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10]
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18]
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10]
	SoftObjectPath[] AssetsToOpen;//[Offset: 0x70, Size: 0x10]
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10]
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x90, Size: 0x1f0]
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x280, Size: 0x30]
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b0, Size: 0x10]
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c0, Size: 0x30]
	FString[] TestLevelFolders;//[Offset: 0x2f0, Size: 0x10]
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x300, Size: 0x10]
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x310, Size: 0x10]
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x320, Size: 0x10]
	IntPoint DefaultScreenshotResolution;//[Offset: 0x330, Size: 0x8]
	float PIETestDuration;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18]
	int TestTimer;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10]
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150]
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60]
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20]
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20]
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20]
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20]
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20]
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20]
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20]
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20]
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20]
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20]
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20]
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10]
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10]
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10]
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10]
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10]
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10]
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10]
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10]
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10]
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10]
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10]
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10]
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10]
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10]
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10]
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10]
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10]
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10]
	FString DeviceID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x228, Size: 0x20]

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	static void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x3303690
	static void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x3303580
	static bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x33033d0
	static int Map_Length(out const <int,int> TargetMap);// 0x3303320
	static void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x3303210
	static bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x3302f70
	static bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x3302dc0
	static void Map_Clear(out const <int,int> TargetMap);// 0x3302d20
	static void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x3302aa0

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	static FString VideoCaptureDir();// 0x3308e90
	static void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0x3308d20
	static void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0x3308b60
	static FString SourceConfigDir();// 0x33079f0
	static bool ShouldSaveToUserDir();// 0x3308b30
	static FString ShaderWorkingDir();// 0x3308ab0
	static void SetProjectFilePath(FString NewGameProjectFilePath);// 0x3308a20
	static FString SetExtension(FString InPath, FString InNewExtension);// 0x33088e0
	static FString ScreenShotDir();// 0x3308860
	static FString SandboxesDir();// 0x3308060
	static FString RootDir();// 0x3307fe0
	static void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0x3307ef0
	static FString ProjectUserDir();// 0x3307e70
	static FString ProjectSavedDir();// 0x3307df0
	static FString ProjectPluginsDir();// 0x3307d70
	static FString ProjectPersistentDownloadDir();// 0x3307cf0
	static FString ProjectModsDir();// 0x3307c70
	static FString ProjectLogDir();// 0x3307bf0
	static FString ProjectIntermediateDir();// 0x3307b70
	static FString ProjectDir();// 0x3307af0
	static FString ProjectContentDir();// 0x3307a70
	static FString ProjectConfigDir();// 0x33079f0
	static FString ProfilingDir();// 0x3307970
	static void NormalizeFilename(FString InPath, out FString OutPath);// 0x3307880
	static void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0x3307790
	static FString MakeValidFileName(FString inString, FString InReplacementChar);// 0x3307650
	static void MakeStandardFilename(FString InPath, out FString OutPath);// 0x3307560
	static void MakePlatformFilename(FString InPath, out FString OutPath);// 0x3307470
	static bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0x3307310
	static FString LaunchDir();// 0x3307290
	static bool IsSamePath(FString PathA, FString PathB);// 0x33071a0
	static bool IsRestrictedPath(FString InPath);// 0x3307100
	static bool IsRelative(FString InPath);// 0x3307060
	static bool IsProjectFilePathSet();// 0x3307030
	static bool IsDrive(FString InPath);// 0x3306f90
	static bool HasProjectPersistentDownloadDir();// 0x3306f60
	static FString[] GetToolTipLocalizationPaths();// 0x3306f20
	static FString[] GetRestrictedFolderNames();// 0x3306ee0
	static FString GetRelativePathToRoot();// 0x3306ea0
	static FString[] GetPropertyNameLocalizationPaths();// 0x3306e60
	static FString GetProjectFilePath();// 0x3306de0
	static FString GetPath(FString InPath);// 0x3306d00
	static FString GetInvalidFileSystemChars();// 0x3306b40
	static FString[] GetGameLocalizationPaths();// 0x3306b00
	static FString GetExtension(FString InPath, bool bIncludeDot);// 0x33069e0
	static FString[] GetEngineLocalizationPaths();// 0x33069a0
	static FString[] GetEditorLocalizationPaths();// 0x3306960
	static FString GetCleanFilename(FString InPath);// 0x3306850
	static FString GetBaseFilename(FString InPath, bool bRemovePath);// 0x3306730
	static FString GeneratedConfigDir();// 0x33066b0
	static FString GameUserDeveloperDir();// 0x3306630
	static FString GameSourceDir();// 0x33065b0
	static FString GameDevelopersDir();// 0x3306530
	static FString GameAgnosticSavedDir();// 0x3306090
	static bool FileExists(FString InPath);// 0x3306490
	static FString FeaturePackDir();// 0x3306410
	static FString EnterprisePluginsDir();// 0x3306390
	static FString EnterpriseFeaturePackDir();// 0x3306310
	static FString EnterpriseDir();// 0x3306290
	static FString EngineVersionAgnosticUserDir();// 0x3306210
	static FString EngineUserDir();// 0x3306190
	static FString EngineSourceDir();// 0x3306110
	static FString EngineSavedDir();// 0x3306090
	static FString EnginePluginsDir();// 0x3306010
	static FString EngineIntermediateDir();// 0x3305f90
	static FString EngineDir();// 0x3305f10
	static FString EngineContentDir();// 0x3305e90
	static FString EngineConfigDir();// 0x3305e10
	static bool DirectoryExists(FString InPath);// 0x3305d70
	static FString DiffDir();// 0x3305cf0
	static FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0x3305b60
	static FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0x3305a20
	static FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0x33058e0
	static FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0x33057a0
	static FString Combine(out const FString[] InPaths);// 0x3305690
	static bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0x3305590
	static FString CloudDir();// 0x3305510
	static FString ChangeExtension(FString InPath, FString InNewExtension);// 0x33053b0
	static FString BugItDir();// 0x3305220
	static FString AutomationTransientDir();// 0x33051a0
	static FString AutomationLogDir();// 0x3305120
	static FString AutomationDir();// 0x33050a0

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10]

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	static int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x33085d0
	static void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x3308500
	static int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x33083c0
	static int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x33080e0
	static void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x3306bc0
	static byte GetDeviceOrientation();// 0x3306930
	static void ClearAllLocalNotifications();// 0x33054f0
	static void CancelLocalNotificationById(int NotificationID);// 0x3305330
	static void CancelLocalNotification(FString ActivationEvent);// 0x33052a0

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	static void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x330ba60
	static void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x330c7f0
	static void Set_ToArray(out const <int> A, out int[] Result);// 0x330c6e0
	static void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0x330c5d0
	static bool Set_Remove(out const <int> TargetSet, out const int Item);// 0x330c420
	static int Set_Length(out const <int> TargetSet);// 0x330c370
	static void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x330c1f0
	static void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x330c070
	static bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x330bec0
	static void Set_Clear(out const <int> TargetSet);// 0x330be20
	static void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x330bd10
	static void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x330bb60

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	int BlendDepth;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4]
	IntPoint Location;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb0, Size: 0x28]
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	Transform PostTransform;//[Offset: 0xe0, Size: 0x30]
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x468, Size: 0xc]
	float LineThickness;//[Offset: 0x474, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x330b980
	Vector GetUnscaledBoxExtent();// 0x330b950
	Vector GetScaledBoxExtent();// 0x330b8f0

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x1f8, Size: 0x8]
	enum ReflectionSourceType;//[Offset: 0x200, Size: 0x1]
	enum MobileReflectionCompression;//[Offset: 0x201, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x208, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x210, Size: 0x4]
	float Brightness;//[Offset: 0x214, Size: 0x4]
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	float MaxValueRGBM;//[Offset: 0x21c, Size: 0x4]
	Vector CaptureOffset;//[Offset: 0x220, Size: 0xc]
	Guid MapBuildDataId;//[Offset: 0x22c, Size: 0x10]
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x280, Size: 0x4]
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x288, Size: 0x8]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	EdGraphNode* Node;//[Offset: 0x30, Size: 0x8]
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10]
	int NodePosX;//[Offset: 0x48, Size: 0x4]
	int NodePosY;//[Offset: 0x4c, Size: 0x4]
	int NodeWidth;//[Offset: 0x50, Size: 0x4]
	int NodeHeight;//[Offset: 0x54, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1]
	enum EnabledState;//[Offset: 0x59, Size: 0x1]
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5b, Size: 0x1]
	FString NodeComment;//[Offset: 0x60, Size: 0x10]
	int ErrorType;//[Offset: 0x70, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10]
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10]
	FString PinToolTip;//[Offset: 0x38, Size: 0x10]
	byte Direction;//[Offset: 0x48, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58]
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10]
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10]
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8]
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8]
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20]
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c]
	enum ContainerType;//[Offset: 0x54, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1]
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8]
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10]
	FString ToolTip;//[Offset: 0x38, Size: 0x10]
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10]
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10]
	FName Layer;//[Offset: 0x70, Size: 0x8]
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10]
	int Direction;//[Offset: 0x10, Size: 0x4]
	FName ItemName;//[Offset: 0x14, Size: 0x8]
	int PolyFlags;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x28, Size: 0x278]

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x88]
	SlateBrush Hovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush Pressed;//[Offset: 0x118, Size: 0x88]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 0x88]
	Margin NormalPadding;//[Offset: 0x228, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x238, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: DeviceProfileManager.Object
	Object*[] Profiles;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10]
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10]
	Object* Parent;//[Offset: 0x58, Size: 0x8]
	FString[] CVars;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1]
	int LODBias;//[Offset: 0xc, Size: 0x4]
	int LODBias_Smaller;//[Offset: 0x10, Size: 0x4]
	int LODBias_Smallest;//[Offset: 0x14, Size: 0x4]
	int NumStreamedMips;//[Offset: 0x1c, Size: 0x4]
	byte MipGenSettings;//[Offset: 0x20, Size: 0x1]
	int MinLODSize;//[Offset: 0x24, Size: 0x4]
	int MaxLODSize;//[Offset: 0x28, Size: 0x4]
	int MaxLODSize_Smaller;//[Offset: 0x2c, Size: 0x4]
	int MaxLODSize_Smallest;//[Offset: 0x30, Size: 0x4]
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4]
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4]
	FName MinMagFilter;//[Offset: 0x40, Size: 0x8]
	FName MipFilter;//[Offset: 0x48, Size: 0x8]
	enum MipLoadOptions;//[Offset: 0x50, Size: 0x1]
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	float Downscale;//[Offset: 0x54, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x58, Size: 0x1]
	int VirtualTextureTileCountBias;//[Offset: 0x5c, Size: 0x4]
	int VirtualTextureTileSizeBias;//[Offset: 0x60, Size: 0x4]
	byte LossyCompressionAmount;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xf0, Size: 0x4]
	int SizeY;//[Offset: 0xf4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xf8, Size: 0x10]
	byte AddressX;//[Offset: 0x108, Size: 0x1]
	byte AddressY;//[Offset: 0x109, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10a, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x10b, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x10d, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x10e, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x10f, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x118, Size: 0x10]
	World* World;//[Offset: 0x128, Size: 0x8]
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	void UpdateResource();// 0x29cb8b0
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x197e4f0
	void GetSize(out int Width, out int Height);// 0x3315e90
	static CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x33158b0

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8]
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x368, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x370, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x380, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x388, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3a0, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3a8, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3c0, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3c8, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3d8, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3e0, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x3f0, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x3f8, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x408, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x410, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x420, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x428, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x438, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x440, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x458, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x460, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x470, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x478, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x488, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x490, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4a0, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4a8, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4b8, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4c0, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4d0, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4d8, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4e8, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x500, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x508, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x510, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x518, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x520, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x538, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x540, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x548, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x560, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x568, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x580, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x590, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5a8, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5b8, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5c8, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x5d8, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x5e8, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x5f8, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x608, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x618, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x628, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x62c, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x630, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x634, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x638, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63c, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x640, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x644, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x648, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x658, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x668, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x678, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x680, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x698, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6a8, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6b8, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6c8, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x6d8, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x6e0, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x6f8, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x700, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x718, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x720, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x738, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x740, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x758, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x760, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x780, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x788, Size: 0x10]
	float NearClipPlane;//[Offset: 0x798, Size: 0x4]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79c, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7a0, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a4, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a4, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a4, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a4, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7a4, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7a4, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7a8, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ac, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7c0, Size: 0x8]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x7e8, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x800, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x828, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x844, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x84c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x850, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x854, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x858, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x85c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x860, Size: 0x4]
	Color C_AddWire;//[Offset: 0x864, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x868, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x86c, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x870, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x874, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x878, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x87c, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x880, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x884, Size: 0x4]
	Color C_Volume;//[Offset: 0x888, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x88c, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x890, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x898, Size: 0x10]
	enum TransitionType;//[Offset: 0x8a8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8b0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x8c0, Size: 0x10]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x8d4, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x8d8, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8dc, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x8e0, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e4, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x8e8, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x8ec, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8f0, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x900, Size: 0x4]
	float DisplayGamma;//[Offset: 0x904, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x908, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x90c, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x91c, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x92c, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x93c, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x94c, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x960, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x960, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x960, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x960, Size: 0x1]
	UInt32Property bEnableVisualLogRecordingOnStart;//[Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x968, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x96c, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x970, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x980, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x984, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x988, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xbf8, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc08, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc18, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc28, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2c, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc48, Size: 0x4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	UInt32Property ResolutionSizeX;//[Size: 0x4]
	UInt32Property ResolutionSizeY;//[Size: 0x4]
	UInt32Property LastUserConfirmedResolutionSizeX;//[Size: 0x4]
	UInt32Property LastUserConfirmedResolutionSizeY;//[Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	UInt32Property Version;//[Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x24ab610
	bool SupportsHDRDisplayOutput();// 0x334cf50
	void SetVSyncEnabled(bool bEnable);// 0x334cda0
	void SetVisualEffectQuality(int Value);// 0x334cec0
	void SetViewDistanceQuality(int Value);// 0x334ce30
	void SetToDefaults();// 0x29cb8b0
	void SetTextureQuality(int Value);// 0x334cd10
	void SetShadowQuality(int Value);// 0x334cc80
	void SetShadingQuality(int Value);// 0x334cbf0
	void SetScreenResolution(IntPoint Resolution);// 0x334cb70
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x334caf0
	void SetResolutionScaleValue(int NewScaleValue);// 0x334ca60
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x334c9e0
	void SetPostProcessingQuality(int Value);// 0x334c950
	void SetOverallScalabilityLevel(int Value);// 0x334c8c0
	void SetFullscreenMode(byte InFullscreenMode);// 0x334c840
	void SetFrameRateLimit(float NewLimit);// 0x334c7c0
	void SetFoliageQuality(int Value);// 0x334c730
	void SetDynamicResolutionEnabled(bool bEnable);// 0x334c6a0
	void SetBenchmarkFallbackValues();// 0x334c680
	void SetAudioQualityLevel(int QualityLevel);// 0x334c5f0
	void SetAntiAliasingQuality(int Value);// 0x334c560
	void SaveSettings();// 0x331d6c0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x334c460
	void RevertVideoMode();// 0x334c440
	void ResetToCurrentSettings();// 0x334c420
	void LoadSettings(bool bForceReload);// 0x334c390
	bool IsVSyncEnabled();// 0x15d6f40
	bool IsVSyncDirty();// 0x334c360
	bool IsScreenResolutionDirty();// 0x334c330
	bool IsHDREnabled();// 0x334c300
	bool IsFullscreenModeDirty();// 0x334c2d0
	bool IsDynamicResolutionEnabled();// 0x334c2a0
	bool IsDynamicResolutionDirty();// 0x334c270
	bool IsDirty();// 0x150b0b0
	int GetVisualEffectQuality();// 0x334c1b0
	int GetViewDistanceQuality();// 0x334c180
	int GetTextureQuality();// 0x334c150
	static int GetSyncInterval();// 0x334c120
	int GetShadowQuality();// 0x334c0f0
	int GetShadingQuality();// 0x334c0c0
	IntPoint GetScreenResolution();// 0x334c040
	float GetResolutionScaleNormalized();// 0x334c010
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x334be70
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x334bcd0
	float GetRecommendedResolutionScale();// 0x334bc90
	byte GetPreferredFullscreenMode();// 0x334bc60
	int GetPostProcessingQuality();// 0x334bc30
	int GetOverallScalabilityLevel();// 0x14a37e0
	IntPoint GetLastConfirmedScreenResolution();// 0x334bab0
	byte GetLastConfirmedFullscreenMode();// 0x334ba80
	static GameUserSettings* GetGameUserSettings();// 0x334ba50
	byte GetFullscreenMode();// 0x334ba20
	float GetFrameRateLimit();// 0x334b9f0
	static int GetFramePace();// 0x334b9c0
	int GetFoliageQuality();// 0x334b990
	IntPoint GetDesktopResolution();// 0x334b950
	static IntPoint GetDefaultWindowPosition();// 0x334b910
	static byte GetDefaultWindowMode();// 0x334b8e0
	float GetDefaultResolutionScale();// 0x334b8a0
	static IntPoint GetDefaultResolution();// 0x334b860
	int GetCurrentHDRDisplayNits();// 0x334b830
	int GetAudioQualityLevel();// 0xfaa010
	int GetAntiAliasingQuality();// 0xdaee20
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x334b760
	void ConfirmVideoMode();// 0x24ab790
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x334b6d0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x334b640
	void ApplyNonResolutionSettings();// 0x24aba10
	void ApplyHardwareBenchmarkResults();// 0x331d7b0

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x344dc60
	enum GetSynchronizationState();// 0x344dc30
	QualifiedFrameTime GetQualifiedFrameTime();// 0x344dbf0
	FrameRate GetFrameRate();// 0x344db20
	Timecode GetDelayedTimecode();// 0x344dae0
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x344daa0
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0x344d9e0
	void FetchAndUpdate();// 0x24aba10

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x28, Size: 0x580]

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x88]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98, Size: 0x88]
	SlateBrush UncheckedPressedImage;//[Offset: 0x120, Size: 0x88]
	SlateBrush CheckedImage;//[Offset: 0x1a8, Size: 0x88]
	SlateBrush CheckedHoveredImage;//[Offset: 0x230, Size: 0x88]
	SlateBrush CheckedPressedImage;//[Offset: 0x2b8, Size: 0x88]
	SlateBrush UndeterminedImage;//[Offset: 0x340, Size: 0x88]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3c8, Size: 0x88]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x450, Size: 0x88]
	Margin Padding;//[Offset: 0x4d8, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x4e8, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x510, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x538, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x550, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x568, Size: 0x18]

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18]
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1]
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1]
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1]
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18]
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18]
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18]
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18]
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18]
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10]
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10]
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x2159cc0
	bool GetSkipAssigningGamepadToPlayer1();// 0x2159c90
	static GameMapsSettings* GetGameMapsSettings();// 0x2159c60

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10]
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ClusteredStaticMeshComponent.SceneComponent.ActorComponent.Object
	ClusteredStaticMeshEntry[] Entries;//[Offset: 0x1f8, Size: 0x10]

--------------------------------
Class: ClusteredStaticMeshEntry
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	Transform Transform;//[Offset: 0x20, Size: 0x30]
	ClusteredStaticMeshComponent* Owner;//[Offset: 0x50, Size: 0x8]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5c, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x60, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x64, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x68, Size: 0x10]
	int SortPriority;//[Offset: 0x78, Size: 0x4]
	enum LightmapType;//[Offset: 0x7c, Size: 0x1]
	int MinLOD;//[Offset: 0x80, Size: 0x4]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x84, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x84, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x85, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x85, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x85, Size: 0x1]
	bool bOnlyRenderDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x85, Size: 0x1]
	bool bHasValidSettingsForStaticLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x85, Size: 0x1]
	byte DepthPriorityGroup;//[Offset: 0x86, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x87, Size: 0x1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x88, Size: 0x18]
	int LODDataIndex;//[Offset: 0xa0, Size: 0x4]
	enum ShadowDetailMode;//[Offset: 0xa4, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa5, Size: 0x1]
	bool bCullCustomDepth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa5, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0xa6, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0xa8, Size: 0x4]
	LightingChannels LightingChannels;//[Offset: 0xac, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0xad, Size: 0x1]
	int8 VirtualTextureLodBias;//[Offset: 0xae, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0xaf, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0xb0, Size: 0x1]
	float MinDrawDistance;//[Offset: 0xb4, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0xb8, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0xbc, Size: 0x4]
	float ScreenCullSizeOverride;//[Offset: 0xc0, Size: 0x4]
	float CachedScreenCullSize;//[Offset: 0xc4, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0xc8, Size: 0x10]
	enum VirtualTextureRenderPassType;//[Offset: 0xd8, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0xdc, Size: 0x4]
	BoxSphereBounds Bounds;//[Offset: 0xe0, Size: 0x1c]
	BoxSphereBounds LocalBounds;//[Offset: 0xfc, Size: 0x1c]

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10]
	FString HelpUsage;//[Offset: 0x38, Size: 0x10]
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10]
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10]
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1]
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8]
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10]
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10]
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4]
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10]
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10]
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4]
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Color InputColor;//[Offset: 0x58, Size: 0x4]
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4]
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4]
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4]
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4]
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4]
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4]
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4]
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4]
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4]
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4]
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4]
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x60, Size: 0x4]
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x64, Size: 0x4]
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4]
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4]
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4]
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4]
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4]
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4]
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x260, Size: 0x10]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4]
	float CullDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	UInt32Property TextureSize;//[Size: 0x4]
	CurveLinearColor*[] GradientCurves;//[Offset: 0x118, Size: 0x10]
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0x3325650

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0x3325730
	void GetCurves(out NamedCurveValue[] OutValues);// 0x33257d0
	FName GetBindingName();// 0x3325570

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	static void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x3325d70
	static bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x33259e0
	static FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0x3325880
	static void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x3325370
	static bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0x33252a0

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x228, Size: 0x8]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x3329570
	MaterialInterface* GetDecalMaterial();// 0x3329020
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x3328fc0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x1f8, Size: 0x8]
	int SortOrder;//[Offset: 0x200, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x204, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x208, Size: 0x4]
	float FadeDuration;//[Offset: 0x20c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x210, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x214, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	Vector DecalSize;//[Offset: 0x21c, Size: 0xc]
	void SetSortOrder(int Value);// 0x3329d30
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x3329aa0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x3329980
	void SetFadeIn(float StartDelay, float Duaration);// 0x33298b0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x3329600
	float GetFadeStartDelay();// 0x33290e0
	float GetFadeInStartDelay();// 0x33290b0
	float GetFadeInDuration();// 0x1513cc0
	float GetFadeDuration();// 0x3329080
	MaterialInterface* GetDecalMaterial();// 0x3329050
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x3328ff0

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x138, Size: 0x4]
	float Acceleration;//[Offset: 0x13c, Size: 0x4]
	float Deceleration;//[Offset: 0x140, Size: 0x4]
	float TurningBoost;//[Offset: 0x144, Size: 0x4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9]

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1]
	byte Plurality;//[Offset: 0x29, Size: 0x1]
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10]

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	FString SpokenText;//[Offset: 0x30, Size: 0x10]
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10]
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10]
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10]
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8]
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void ToggleEnabled();// 0x33c0fa0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x33c0800
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x33c06e0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x33c05e0
	void SetLightColor(LinearColor NewLightColor);// 0x33c03f0
	void SetEnabled(bool bSetEnabled);// 0x33bffa0
	void SetCastShadows(bool bNewValue);// 0x33bfb80
	void SetBrightness(float NewBrightness);// 0x33bf9e0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x33bf6c0
	void OnRep_bEnabled();// 0x14c5b50
	bool IsEnabled();// 0x33bee40
	LinearColor GetLightColor();// 0x33bed80
	float GetBrightness();// 0x33becf0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x230, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x234, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x238, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x240, Size: 0x4]
	float MinRoughness;//[Offset: 0x248, Size: 0x4]
	float SpecularScale;//[Offset: 0x24c, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x250, Size: 0x4]
	float ShadowBias;//[Offset: 0x254, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x258, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x25c, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x260, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x264, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x268, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x270, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x278, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x288, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x294, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x298, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x29c, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 0x1]
	float BloomScale;//[Offset: 0x2a4, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2a8, Size: 0x4]
	float BloomMaxBrightness;//[Offset: 0x2ac, Size: 0x4]
	Color BloomTint;//[Offset: 0x2b0, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x2b8, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x33c0f20
	void SetUseIESBrightness(bool bNewValue);// 0x33c0e90
	void SetTransmission(bool bNewValue);// 0x33c0e00
	void SetTemperature(float NewTemperature);// 0x33c0d80
	void SetSpecularScale(float NewValue);// 0x33c0d00
	void SetShadowSlopeBias(float NewValue);// 0x33c0bf0
	void SetShadowBias(float NewValue);// 0x33c0b70
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x33c0920
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x33c0890
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x33c0770
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x33c0660
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x33c0560
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x33c0480
	void SetIntensity(float NewIntensity);// 0x33c0250
	void SetIndirectLightingIntensity(float NewIntensity);// 0x33c01d0
	void SetIESTexture(TextureLightProfile* NewValue);// 0x33c0140
	void SetIESBrightnessScale(float NewValue);// 0x33c00c0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x33c0030
	void SetEnableLightShaftBloom(bool bNewValue);// 0x33bff10
	void SetBloomTint(Color NewValue);// 0x33bf960
	void SetBloomThreshold(float NewValue);// 0x33bf8e0
	void SetBloomScale(float NewValue);// 0x33bf860
	void SetBloomMaxBrightness(float NewValue);// 0x33bf7e0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x33bf750
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x33bf480

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x1f8, Size: 0x10]
	float Brightness;//[Offset: 0x208, Size: 0x4]
	float Intensity;//[Offset: 0x20c, Size: 0x4]
	Color LightColor;//[Offset: 0x210, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x214, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x214, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x214, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x214, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x214, Size: 0x1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x214, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x215, Size: 0x1]
	bool bAffectStaticIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x215, Size: 0x1]
	enum ShadowDetailMode;//[Offset: 0x218, Size: 0x1]
	float DeepShadowLayerDistribution;//[Offset: 0x21c, Size: 0x4]
	float IndirectLightingIntensity;//[Offset: 0x220, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x224, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x228, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x33c0ae0
	void SetCastVolumetricShadow(bool bNewValue);// 0x33bfca0
	void SetCastShadows(bool bNewValue);// 0x33bfc10
	void SetCastRaytracedShadow(bool bNewValue);// 0x33bfaf0
	void SetCastDeepShadow(bool bNewValue);// 0x33bfa60
	void SetAffectStaticIndirectLighting(bool bNewValue);// 0x33bf630
	void SetAffectReflection(bool bNewValue);// 0x33bf5a0
	void SetAffectGlobalIllumination(bool bNewValue);// 0x33bf510
	LinearColor GetLightColor();// 0x33bedc0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x110, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x330, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x338, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x33c, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x340, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x34c, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x350, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x354, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x358, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x35c, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x360, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x364, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x36c, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x370, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x374, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x378, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x37c, Size: 0x4]
	float ShadowSourceAngleFactor;//[Offset: 0x380, Size: 0x4]
	float TraceDistance;//[Offset: 0x384, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x38c, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x390, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 0x1]
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 0x1]
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 0x1]
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a0, Size: 0x1]
	float CloudShadowStrength;//[Offset: 0x3a4, Size: 0x4]
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x3a8, Size: 0x4]
	float CloudShadowOnSurfaceStrength;//[Offset: 0x3ac, Size: 0x4]
	float CloudShadowDepthBias;//[Offset: 0x3b0, Size: 0x4]
	float CloudShadowExtent;//[Offset: 0x3b4, Size: 0x4]
	float CloudShadowMapResolutionScale;//[Offset: 0x3b8, Size: 0x4]
	float CloudShadowRaySampleCountScale;//[Offset: 0x3bc, Size: 0x4]
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x3c0, Size: 0x10]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3d0, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x3e4, Size: 0x4]
	float ShadowAmount;//[Offset: 0x3e8, Size: 0x4]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x3329cb0
	void SetShadowAmount(float NewValue);// 0x3329c30
	void SetOcclusionMaskDarkness(float NewValue);// 0x3329bb0
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x3329b20
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x3329820
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x33297a0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x3329720
	void SetDynamicShadowCascades(int NewValue);// 0x3329690
	void SetCascadeTransitionFraction(float NewValue);// 0x33294f0
	void SetCascadeDistributionExponent(float NewValue);// 0x3329470
	void SetAtmosphereSunLightIndex(int NewValue);// 0x33293e0
	void SetAtmosphereSunLight(bool bNewValue);// 0x3329350

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x40, Size: 0x8]
	float MinInput;//[Offset: 0x48, Size: 0x4]
	float MaxInput;//[Offset: 0x4c, Size: 0x4]
	float MinOutput;//[Offset: 0x50, Size: 0x4]
	float MaxOutput;//[Offset: 0x54, Size: 0x4]
	byte ParamMode;//[Offset: 0x58, Size: 0x1]

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x38, Size: 0x4]
	float Max;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector2D OutVal;//[Offset: 0x4, Size: 0x8]
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 0x8]
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 0x8]
	byte InterpMode;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x38, Size: 0xc]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	byte LockedAxes;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x54, Size: 0x1]

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x50, Size: 0x8]
	Vector MinInput;//[Offset: 0x58, Size: 0xc]
	Vector MaxInput;//[Offset: 0x64, Size: 0xc]
	Vector MinOutput;//[Offset: 0x70, Size: 0xc]
	Vector MaxOutput;//[Offset: 0x7c, Size: 0xc]
	byte ParamModes;//[Offset: 0x88, Size: 0x1]

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x38, Size: 0xc]
	Vector Min;//[Offset: 0x44, Size: 0xc]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x54, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x55, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x54, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x56, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4]
	TwoVectors OutVal;//[Offset: 0x4, Size: 0x18]
	TwoVectors ArriveTangent;//[Offset: 0x1c, Size: 0x18]
	TwoVectors LeaveTangent;//[Offset: 0x34, Size: 0x18]
	byte InterpMode;//[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0xc]
	Vector v2;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8]
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8]
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8]
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8]
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10]
	FString Excerpt;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10]
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10]
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10]
	FString LeftMessage;//[Offset: 0x58, Size: 0x10]
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10]
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10]
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10]
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x14c5b50

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x1f8, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x1fc, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x200, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x20c, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x220, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x228, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x22c, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x23c, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x240, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x244, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x248, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x24c, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x25c, Size: 0x4]
	float StartDistance;//[Offset: 0x260, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x264, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x26c, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x270, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x274, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x284, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x288, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x28c, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x333a380
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x333a300
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x333a270
	void SetVolumetricFogDistance(float NewValue);// 0x333a1f0
	void SetVolumetricFogAlbedo(Color NewValue);// 0x333a170
	void SetVolumetricFog(bool bNewValue);// 0x333a0e0
	void SetStartDistance(float Value);// 0x333a060
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x3339fe0
	void SetInscatteringTextureTint(LinearColor Value);// 0x3339ed0
	void SetInscatteringColorCubemapAngle(float Value);// 0x3339e50
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x3339dc0
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x3339d40
	void SetFogMaxOpacity(float Value);// 0x3339c30
	void SetFogInscatteringColor(LinearColor Value);// 0x3339ba0
	void SetFogHeightFalloff(float Value);// 0x32faf70
	void SetFogDensity(float Value);// 0x32fb780
	void SetFogCutoffDistance(float Value);// 0x3339b20
	void SetDirectionalInscatteringStartDistance(float Value);// 0x3339aa0
	void SetDirectionalInscatteringExponent(float Value);// 0x3339a20
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x3339990

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10]
	enum Hinting;//[Offset: 0x40, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1]
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1]

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xb0]

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xb0]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x1f8, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x200, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x200, Size: 0x1]
	float IntensityMultiplier;//[Offset: 0x204, Size: 0x4]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x208, Size: 0x8]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x210, Size: 0xb0]
	delegate OnForceFeedbackFinished;//[Offset: 0x2c0, Size: 0x10]
	void Stop();// 0x333a400
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x3339f60
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x3339cb0
	void Play(float StartTime);// 0x2a63a20
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x3339690
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x3339560

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xde0, Size: 0x4]
	float ServerFlushLogInterval;//[Offset: 0xde4, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0xde8, Size: 0x8]

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2d4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d8, Size: 0x4]
	int NumBots;//[Offset: 0x2dc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void StartMatch();// 0x1544a30
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x3345db0
	void Say(FString Msg);// 0x3345d10
	void RestartGame();// 0x14f4430
	bool ReadyToStartMatch();// 0x3314970
	bool ReadyToEndMatch();// 0x3345680
	void K2_OnSetMatchState(FName NewState);// 0x197e4f0
	bool IsMatchInProgress();// 0x3343360
	FName GetMatchState();// 0x3341f10
	void EndMatch();// 0x3340840
	void AbortMatch();// 0x333d070

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	static void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x33496a0
	static void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x3349530
	static bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x3349340
	static AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x3348f50
	static AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x3348c40
	static AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x33489e0
	static Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x3348910
	static ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x3348570
	static ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x33482b0
	static ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x3347fa0
	static ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x3347d20
	static AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x3347920
	static AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x3347600
	static AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x33473d0
	static DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x3346f50
	static DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x3346d50
	static void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x3346be0
	static void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x3346b20
	static void SetSubtitlesEnabled(bool bEnabled);// 0x3346aa0
	static void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x3346880
	static void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x3346730
	static void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x3346670
	static void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x33465b0
	static void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x33464f0
	static void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x33463f0
	static void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x3346150
	static bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x3346080
	static void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x3345fc0
	static void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x3345f00
	static void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x3345e40
	static bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x3345bf0
	static void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x3345890
	static Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x33457a0
	static Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x33456b0
	static void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x33455c0
	static bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x3345460
	static void PrimeSound(SoundBase* InSound);// 0x33453e0
	static void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x3345320
	static void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x3345050
	static void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, Actor* OwningActor);// 0x3344d40
	static void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, Actor* OwningActor, bool bIsUISound);// 0x3344ae0
	static void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x3344800
	static void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x3344610
	static FString ParseOption(FString Options, FString Key);// 0x3344490
	static void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0x3344270
	static void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x33440d0
	static HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, int HitItem, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x3343ac0
	static void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x3343880
	static void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo, int ActorPriority, bool bInShouldActAsCutoff, bool bShouldKeepLoading);// 0x33435f0
	static SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x3343510
	static bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x3343390
	static bool IsGamePaused(const Object* WorldContextObject);// 0x33432d0
	static bool HasOption(FString Options, FString InKey);// 0x33430c0
	static bool HasLaunchOption(FString OptionToCheck);// 0x3342ff0
	static int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x3342e00
	static IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x3342d60
	static float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x3342cd0
	static void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x3342930
	static enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x3342c40
	static float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x33428a0
	static float GetTimeSeconds(const Object* WorldContextObject);// 0x3342810
	static byte GetSurfaceType(out const HitResult Hit);// 0x3342730
	static LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x3342660
	static float GetRealTimeSeconds(const Object* WorldContextObject);// 0x33425d0
	static Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x3342500
	static int GetPlayerControllerID(PlayerController* Player);// 0x3342470
	static PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x33423a0
	static PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x33422d0
	static Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x3342200
	static PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x3342130
	static FString GetPlatformName();// 0x33420b0
	static class Object GetObjectClass(const Object* Object);// 0x3342020
	static int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x3341f30
	static void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x3341db0
	static int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x3341c70
	static float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x3341be0
	static GameStateBase* GetGameState(const Object* WorldContextObject);// 0x3341b50
	static GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x3341ac0
	static GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x161a340
	static bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x3341a30
	static ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x3341900
	static FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x33417f0
	static bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x3341620
	static float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x3341590
	static void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x3341470
	static void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x3341350
	static void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x33411f0
	static void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x33410d0
	static Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x3341000
	static void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x3340e70
	static Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x3340db0
	static void GetAccurateRealTime(const Object* WorldContextObject, out int Seconds, out float PartialSeconds);// 0x3340c80
	static void FlushLevelStreaming(const Object* WorldContextObject);// 0x3340c00
	static Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x3340ae0
	static bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x3340860
	static void EnableLiveStreaming(bool Enable);// 0x33407c0
	static bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x33406e0
	static bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x3340570
	static bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x3340490
	static void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x33403d0
	static AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x3340170
	static SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x33400e0
	static PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x333ffe0
	static void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x333ff60
	static void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0x333fe10
	static void CancelAsyncLoading();// 0x333fc20
	static void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out int HitItem, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x333f520
	static bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x333e4d0
	static bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x333efb0
	static bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x333ea20
	static bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x333e7f0
	static Actor* BeginSpawningActorFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, bool bNoCollisionFail, Actor* Owner);// 0x333e2c0
	static Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x333e110
	static Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x333df10
	static bool AreSubtitlesEnabled();// 0x333dee0
	static bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x333ddc0
	static bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x333da20
	static bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x333d710
	static float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x333d490
	static float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x333d2f0
	static void AnnounceAccessibleString(FString AnnouncementString);// 0x333d260
	static void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x333d090

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 0x4]
	float MaxSimTime;//[Offset: 0x20, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	byte TraceChannel;//[Offset: 0x25, Size: 0x1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 0x10]
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 0x10]
	float SimFrequency;//[Offset: 0x48, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x4c, Size: 0x4]
	byte DrawDebugType;//[Offset: 0x50, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x54, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x2c, Size: 0x8c]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x278, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x280, Size: 0x8]
	int ElapsedTime;//[Offset: 0x288, Size: 0x4]
	void OnRep_MatchState();// 0x1523db0
	void OnRep_ElapsedTime();// 0x3345950

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x238, Size: 0x8]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x3443710
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x3443610

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x360, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x364, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x3443790
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x3443690

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x34c, Size: 0x4]
	float SourceRadius;//[Offset: 0x350, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x354, Size: 0x4]
	float SourceLength;//[Offset: 0x358, Size: 0x4]
	void SetSourceRadius(float bNewValue);// 0x34110e0
	void SetSourceLength(float NewValue);// 0x3411060
	void SetSoftSourceRadius(float bNewValue);// 0x3410f50
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x340fcf0

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x330, Size: 0x1]
	float Radius;//[Offset: 0x334, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x338, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x33c, Size: 0xc]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x33c32e0
	void SetAttenuationRadius(float NewRadius);// 0x33c3260
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x33c3150

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10]
	int SampleRate;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110]

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88]
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88]

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void StopPerformanceSnapshots();// 0x3352920
	static void StartPerformanceSnapshots();// 0x3352900
	static void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x3351a90

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4e0, Size: 0x10]
	int NumCustomDataFloats;//[Offset: 0x4f0, Size: 0x4]
	float[] PerInstanceSMCustomData;//[Offset: 0x4f8, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x508, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x50c, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x510, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x518, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x570, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x578, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3358080
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x3357f20
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x3357e50
	bool RemoveInstance(int InstanceIndex);// 0x3357d90
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x3357430
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x33576c0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x3357590
	int GetInstanceCount();// 0x3357400
	void ClearInstances();// 0x3356b90
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3356990
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x3356740
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x3356520
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x3356600
	int AddInstance(out const Transform InstanceTransform);// 0x3356440

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x598, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x5a8, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x5b0, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x5cc, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x5e8, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x600, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x604, Size: 0x1c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x624, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x3352690

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10]
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c]
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8]
	FName Key;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	<MaterialInterface*,InstancedStaticMeshComponent*> ImpostersStaticMeshComponents;//[Offset: 0x230, Size: 0x50]
	HLODProxy* Proxy;//[Offset: 0x280, Size: 0x8]
	FName Key;//[Offset: 0x288, Size: 0x8]
	float LODDrawDistance;//[Offset: 0x290, Size: 0x4]
	int LODLevel;//[Offset: 0x294, Size: 0x4]
	Actor*[] SubActors;//[Offset: 0x298, Size: 0x10]
	byte CachedNumHLODLevels;//[Offset: 0x2a8, Size: 0x1]

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	static float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x33524a0
	static Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x33522f0
	static Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x33521a0
	static float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x3351fd0
	static Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x3351ea0
	static Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x3351da0
	static ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x3351bc0
	static void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x33517a0
	static void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x334fb70

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8]
	int NumMips;//[Offset: 0x8, Size: 0x4]
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10]
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10]
	Color[] TextureData;//[Offset: 0x30, Size: 0x10]
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8]
	byte Weighting;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10]
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8]
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18]
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20]
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10]
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10]
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10]
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10]
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1]
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1]
	float FOVScale;//[Offset: 0x74, Size: 0x4]
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4]
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10]
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10]
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10]
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28]
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28]
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18]
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18]
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10]
	void SaveKeyMappings();// 0x3357e30
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x3357c20
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x3357ab0
	static InputSettings* GetInputSettings();// 0x33573d0
	void GetAxisNames(out FName[] AxisNames);// 0x3356f00
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x3356dc0
	void GetActionNames(out FName[] ActionNames);// 0x3356d10
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x3356bd0
	void ForceRebuildKeymaps();// 0x3356bb0
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x33562d0
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x3356160

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8]
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4]
	float Sensitivity;//[Offset: 0x4, Size: 0x4]
	float Exponent;//[Offset: 0x8, Size: 0x4]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]
	Key Key;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	Key Key;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x4, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8]
	float CompressTolerance;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf0, Size: 0x4]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	enum TeleportType;//[Offset: 0xf9, Size: 0x1]
	enum BehaviourType;//[Offset: 0xfa, Size: 0x1]
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 0x1]
	delegate OnInterpToReverse;//[Offset: 0x100, Size: 0x10]
	delegate OnInterpToStop;//[Offset: 0x110, Size: 0x10]
	delegate OnWaitBeginDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnWaitEndDelegate;//[Offset: 0x130, Size: 0x10]
	delegate OnResetDelegate;//[Offset: 0x140, Size: 0x10]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 0x4]
	InterpControlPoint[] ControlPoints;//[Offset: 0x158, Size: 0x10]
	void StopSimulating(out const HitResult HitResult);// 0x335b600
	void RestartMovement(float InitialDirection);// 0x335b580
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x197e4f0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x197e4f0
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x197e4f0
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x197e4f0
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x197e4f0
	void FinaliseControlPoints();// 0x335b560

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0xc]
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x90, Size: 0x8]
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4]
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8]
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4]
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10]
	FName PropertyName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10]
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4]
	float TransitionTime;//[Offset: 0x4, Size: 0x4]
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8]
	int ShotNumber;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName EventName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	LinearColor FadeColor;//[Offset: 0x94, Size: 0x10]

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x90, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20]
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8]
	float ResetFloat;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10]
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10]
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8]
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8]
	int ElementIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4]
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10]
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10]
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0xc]

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4]
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10]
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10]
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10]
	byte InterpMode;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x90, Size: 0x1]
	InterpLookupTrack LookupTrack;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Volume;//[Offset: 0x4, Size: 0x4]
	float Pitch;//[Offset: 0x8, Size: 0x4]
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10]
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte ToggleAction;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte Action;//[Offset: 0x4, Size: 0x1]
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2]
	UInt32Property UnsignedInt32Variable;//[Size: 0x4]
	UInt64Property UnsignedInt64Variable;//[Size: 0x8]
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1]
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2]
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8]
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1]
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	static void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x3361060
	static void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x3360f10
	static void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x3360dd0
	static void Array_Shuffle(out const int[] TargetArray);// 0x3360d30
	static void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0x3360b00
	static void Array_Reverse(out const int[] TargetArray);// 0x3360a60
	static void Array_Resize(out const int[] TargetArray, int Size);// 0x3360970
	static bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0x33607b0
	static void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x33606c0
	static void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0x3360530
	static void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0x33603f0
	static int Array_Length(out const int[] TargetArray);// 0x3360340
	static int Array_LastIndex(out const int[] TargetArray);// 0x3360290
	static bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x33601a0
	static void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x335ffb0
	static bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0x335fe90
	static void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0x335fc90
	static int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x335fad0
	static bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x335f910
	static void Array_Clear(out const int[] TargetArray);// 0x335f870
	static void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x335f760
	static int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x335f5b0
	static int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x335f400

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	static void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x3365500
	static bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x3365400
	static Guid NewGuid();// 0x33653c0
	static bool IsValid_Guid(out const Guid InGuid);// 0x3364460
	static void Invalidate_Guid(out Guid InGuid);// 0x33643d0
	static bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x3362820
	static FString Conv_GuidToString(out const Guid InGuid);// 0x33625f0

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	static bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x3366470
	static bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x33662a0
	static float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x3366170
	static int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x3366040
	static int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x3365f10
	static Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x3365dd0
	static int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x3365ca0
	static Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x3365b60
	static enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x3365a30
	static Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x33658f0
	static Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x3365780
	static Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x3365640
	static bool Key_IsVectorAxis(out const Key Key);// 0x33652f0
	static bool Key_IsValid(out const Key Key);// 0x3365220
	static bool Key_IsMouseButton(out const Key Key);// 0x3365150
	static bool Key_IsModifierKey(out const Key Key);// 0x3365080
	static bool Key_IsKeyboardKey(out const Key Key);// 0x3364fb0
	static bool Key_IsGamepadKey(out const Key Key);// 0x3364ee0
	static bool Key_IsDigital(out const Key Key);// 0x3364e10
	static bool Key_IsButtonAxis(out const Key Key);// 0x3364d40
	static bool Key_IsAxis3D(out const Key Key);// 0x3364c70
	static bool Key_IsAxis2D(out const Key Key);// 0x3364ba0
	static bool Key_IsAxis1D(out const Key Key);// 0x3364ad0
	static bool Key_IsAnalog(out const Key Key);// 0x3364a00
	static enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0x3364900
	static enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0x33647f0
	static enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0x33646f0
	static enum Key_GetNavigationAction(out const Key InKey);// 0x3364620
	static FText Key_GetDisplayName(out const Key Key);// 0x3364500
	static bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x3364320
	static bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x3364270
	static bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x33641c0
	static bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x3364110
	static bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x3364060
	static bool InputEvent_IsRepeat(out const InputEvent Input);// 0x3363fb0
	static bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x3363f00
	static bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x3363e50
	static bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x3363da0
	static bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x3363cf0
	static bool InputEvent_IsControlDown(out const InputEvent Input);// 0x3363c40
	static bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x3363b90
	static bool InputEvent_IsAltDown(out const InputEvent Input);// 0x3363ae0
	static FText InputChord_GetDisplayName(out const InputChord Key);// 0x3363990
	static int GetUserIndex(out const KeyEvent Input);// 0x3363780
	static Key GetKey(out const KeyEvent Input);// 0x3363080
	static float GetAnalogValue(out const AnalogInputEvent Input);// 0x3362c80
	static bool EqualEqual_KeyKey(Key A, Key B);// 0x3362b00
	static bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x3362920
	static void CalibrateTilt();// 0x3362510

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	static bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0x3366970
	static bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0x3366890
	static bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0x33667b0
	static bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0x33666d0
	static bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0x33665a0
	static FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0x33635b0
	static FString GetNativeCulture(const enum TextCategory);// 0x33633e0
	static FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0x33631b0
	static FString GetCurrentLocale();// 0x3363000
	static FString GetCurrentLanguage();// 0x3362f80
	static FString GetCurrentCulture();// 0x3362f80
	static FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x3362eb0
	static FString GetCultureDisplayName(FString Culture, const bool Localized);// 0x3362d90
	static void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x3362530

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	static void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x3366ba0
	static void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x3366a50
	static LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x3363880
	static float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x33634b0
	static MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0x33626d0

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	static int Xor_IntInt(int A, int B);// 0x3396ff0
	static int64 Xor_Int64Int64(int64 A, int64 B);// 0x3396f20
	static int Wrap(int Value, int Min, int Max);// 0x3396e10
	static Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0x3396ba0
	static Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0x3396a50
	static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0x3396cf0
	static float VSizeXYSquared(Vector A);// 0x3392410
	static float VSizeXY(Vector A);// 0x3392380
	static float VSizeSquared(Vector A);// 0x33922e0
	static float VSize2DSquared(Vector2D A);// 0x33921b0
	static float VSize2D(Vector2D A);// 0x3392120
	static float VSize(Vector A);// 0x3392240
	static Vector VLerp(Vector A, Vector B, float Alpha);// 0x3391fe0
	static Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x3391e50
	static Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x3391cc0
	static Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x3393d70
	static Vector Vector_Zero();// 0x3396a20
	static Vector Vector_Up();// 0x33969f0
	static void Vector_UnwindEuler(out Vector A);// 0x3396970
	static Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0x3396880
	static Vector Vector_ToRadians(Vector A);// 0x33967e0
	static Vector Vector_ToDegrees(Vector A);// 0x3396740
	static Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0x3396580
	static void Vector_Set(out Vector A, float X, float Y, float Z);// 0x3396420
	static Vector Vector_Right();// 0x33963f0
	static Vector Vector_Reciprocal(out const Vector A);// 0x3396300
	static Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0x3396200
	static Vector Vector_One();// 0x33961d0
	static Vector Vector_NormalUnsafe(out const Vector A);// 0x3395f00
	static void Vector_Normalize(out Vector A, float Tolerance);// 0x3396040
	static Vector Vector_Normal2D(Vector A, float Tolerance);// 0x3395d30
	static Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0x3395be0
	static Vector Vector_Left();// 0x3395bb0
	static bool Vector_IsZero(out const Vector A);// 0x3395b00
	static bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0x33959e0
	static bool Vector_IsUniform(out const Vector A, float Tolerance);// 0x33958c0
	static bool Vector_IsNormal(out const Vector A);// 0x33957f0
	static bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0x33956e0
	static bool Vector_IsNAN(out const Vector A);// 0x3395610
	static float Vector_HeadingAngle(Vector A);// 0x33954c0
	static Vector Vector_GetSignVector(Vector A);// 0x3395400
	static Vector Vector_GetProjection(Vector A);// 0x3395360
	static float Vector_GetAbsMin(Vector A);// 0x33952c0
	static float Vector_GetAbsMax(Vector A);// 0x3395220
	static Vector Vector_GetAbs(Vector A);// 0x3395180
	static Vector Vector_Forward();// 0x3395150
	static Vector Vector_Down();// 0x3395120
	static float Vector_DistanceSquared(Vector v1, Vector v2);// 0x3395040
	static float Vector_Distance2DSquared(Vector v1, Vector v2);// 0x3394e80
	static float Vector_Distance2D(Vector v1, Vector v2);// 0x3394db0
	static float Vector_Distance(Vector v1, Vector v2);// 0x3394f50
	static float Vector_CosineAngle2D(Vector A, Vector B);// 0x3394bb0
	static Vector Vector_ComponentMin(Vector A, Vector B);// 0x3394ad0
	static Vector Vector_ComponentMax(Vector A, Vector B);// 0x33949f0
	static Vector Vector_ClampSizeMax2D(Vector A, float Max);// 0x3394660
	static Vector Vector_ClampSizeMax(Vector A, float Max);// 0x33947f0
	static Vector Vector_ClampSize2D(Vector A, float Min, float Max);// 0x33944b0
	static Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0x33943a0
	static Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0x3394260
	static Vector Vector_Backward();// 0x3394230
	static void Vector_Assign(out Vector A, out const Vector InVector);// 0x3394150
	static void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0x3393fe0
	static Vector4 Vector4_Zero();// 0x3393d50
	static float Vector4_SizeSquared3(out const Vector4 A);// 0x3393bc0
	static float Vector4_SizeSquared(out const Vector4 A);// 0x3393c80
	static float Vector4_Size3(out const Vector4 A);// 0x3393a30
	static float Vector4_Size(out const Vector4 A);// 0x3393af0
	static void Vector4_Set(out Vector4 A, float X, float Y, float Z, float W);// 0x3393880
	static Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0x3393580
	static void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0x33936d0
	static Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0x33933d0
	static Vector4 Vector4_Negated(out const Vector4 A);// 0x3393330
	static Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0x33931a0
	static bool Vector4_IsZero(out const Vector4 A);// 0x33930e0
	static bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0x3392fb0
	static bool Vector4_IsNormal3(out const Vector4 A);// 0x3392ee0
	static bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0x3392dc0
	static bool Vector4_IsNAN(out const Vector4 A);// 0x3392cd0
	static float Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0x3392a80
	static float Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0x3392ba0
	static Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0x3392920
	static void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0x3392830
	static Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x3392620
	static Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x33924a0
	static Vector2D Vector2D_Zero();// 0x3392800
	static Vector2D Vector2D_Unit45Deg();// 0x33927d0
	static Vector2D Vector2D_One();// 0x33927a0
	static Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x3391ab0
	static DateTime UtcNow();// 0x3391a70
	static Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0x3391870
	static Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x3391720
	static Vector TransformLocation(out const Transform T, Vector Location);// 0x3391580
	static Vector TransformDirection(out const Transform T, Vector Direction);// 0x33913e0
	static float Transform_Determinant(out const Transform Transform);// 0x3391990
	static Vector2D ToSign2D(Vector2D A);// 0x33912e0
	static Vector2D ToRounded2D(Vector2D A);// 0x33911d0
	static void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out float OutLength);// 0x3391040
	static DateTime Today();// 0x3391390
	static Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0x3390b00
	static Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x33908e0
	static Timespan TimespanZeroValue();// 0x33753a0
	static float TimespanRatio(Timespan A, Timespan B);// 0x3390f60
	static Timespan TimespanMinValue();// 0x3390f30
	static Timespan TimespanMaxValue();// 0x3390f00
	static bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x3390dc0
	static Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x3390650
	static float Tan(float A);// 0x3390d30
	static Vector Subtract_VectorVector(Vector A, Vector B);// 0x3390570
	static Vector Subtract_VectorInt(Vector A, int B);// 0x3390480
	static Vector Subtract_VectorFloat(Vector A, float B);// 0x33903a0
	static Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x3390270
	static Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x33901a0
	static Vector2D Subtract_Vector2DFloat(Vector2D A, float B);// 0x33900d0
	static Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x338fa30
	static Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0x338fff0
	static LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x338ff00
	static IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0x338fe30
	static IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0x338fd50
	static int Subtract_IntInt(int A, int B);// 0x338fc90
	static int64 Subtract_Int64Int64(int64 A, int64 B);// 0x338fbc0
	static float Subtract_FloatFloat(float A, float B);// 0x338faf0
	static DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x338fa30
	static Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x338fa30
	static byte Subtract_ByteByte(byte A, byte B);// 0x338f970
	static float Square(float A);// 0x338f8f0
	static float Sqrt(float A);// 0x338f840
	static Vector Spherical2DToUnitCartesian(Vector2D A);// 0x338f760
	static float Sin(float A);// 0x338f6d0
	static int64 SignOfInteger64(int64 A);// 0x338f580
	static int SignOfInteger(int A);// 0x338f630
	static float SignOfFloat(float A);// 0x338f4b0
	static void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x338f3e0
	static void Set2D(out Vector2D A, float X, float Y);// 0x338f2d0
	static Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x338ee20
	static Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x338f100
	static FString SelectString(FString A, FString B, bool bPickA);// 0x338ef60
	static Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x338ee20
	static Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x338e9e0
	static int SelectInt(int A, int B, bool bPickA);// 0x338ed20
	static float SelectFloat(float A, float B, bool bPickA);// 0x338ec00
	static LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x338eae0
	static class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x338e9e0
	static void SeedRandomStream(out RandomStream Stream);// 0x338e960
	static float SafeDivide(float A, float B);// 0x338e890
	static int64 Round64(float A);// 0x338e730
	static int Round(float A);// 0x338e800
	static Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x338e640
	static Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x338e4f0
	static Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0x338c880
	static Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x338c6f0
	static Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x338c560
	static void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0x338c480
	static void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0x338c290
	static LinearColor RGBLinearToHSV(LinearColor RGB);// 0x338c200
	static void ResetVectorSpringState(out VectorSpringState SpringState);// 0x338e450
	static void ResetRandomStream(out const RandomStream Stream);// 0x338e3d0
	static void ResetFloatSpringState(out FloatSpringState SpringState);// 0x338e340
	static Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x338bfb0
	static Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x338e1b0
	static Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x338e080
	static Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x338dee0
	static Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x338dda0
	static Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x338dc70
	static Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x338db80
	static Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x338da40
	static Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x338d950
	static Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x338d8b0
	static Vector RandomUnitVector();// 0x338d870
	static Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x338d780
	static Rotator RandomRotator(bool bRoll);// 0x338d6e0
	static Vector RandomPointInBoundingBox(Vector Origin, Vector BoxExtent);// 0x338d5a0
	static int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x338d490
	static int RandomIntegerInRange(int Min, int Max);// 0x338d380
	static int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x338d2b0
	static int64 RandomInteger64InRange(int64 Min, int64 Max);// 0x338d0d0
	static int64 RandomInteger64(int64 Max);// 0x338d000
	static int RandomInteger(int Max);// 0x338d1f0
	static float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x338cee0
	static float RandomFloatInRange(float Min, float Max);// 0x338cde0
	static float RandomFloatFromStream(out const RandomStream Stream);// 0x338cd50
	static float RandomFloat();// 0x338cd10
	static bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x338cc30
	static bool RandomBoolWithWeight(float Weight);// 0x338cbb0
	static bool RandomBoolFromStream(out const RandomStream Stream);// 0x338cb20
	static bool RandomBool();// 0x338cac0
	static float RadiansToDegrees(float A);// 0x338ca30
	static Vector Quat_VectorUp(out const Quat Q);// 0x338ac50
	static Vector Quat_VectorRight(out const Quat Q);// 0x338ab60
	static Vector Quat_VectorForward(out const Quat Q);// 0x338aa60
	static Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0x338bd90
	static float Quat_SizeSquared(out const Quat Q);// 0x338bcd0
	static float Quat_Size(out const Quat Q);// 0x338bc10
	static void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0x338bb30
	static void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0x338b980
	static Rotator Quat_Rotator(out const Quat Q);// 0x338b8e0
	static Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0x338b6e0
	static Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0x338b580
	static void Quat_Normalize(out Quat Q, float Tolerance);// 0x338b430
	static Quat Quat_MakeFromEuler(out const Vector Euler);// 0x338b390
	static Quat Quat_Log(out const Quat Q);// 0x338b2f0
	static bool Quat_IsNormalized(out const Quat Q);// 0x338b220
	static bool Quat_IsNonFinite(out const Quat Q);// 0x338b140
	static bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0x338b020
	static bool Quat_IsFinite(out const Quat Q);// 0x338af40
	static Quat Quat_Inversed(out const Quat Q);// 0x338aeb0
	static Quat Quat_Identity();// 0x338ae90
	static Vector Quat_GetRotationAxis(out const Quat Q);// 0x338ad60
	static Vector Quat_GetAxisZ(out const Quat Q);// 0x338ac50
	static Vector Quat_GetAxisY(out const Quat Q);// 0x338ab60
	static Vector Quat_GetAxisX(out const Quat Q);// 0x338aa60
	static float Quat_GetAngle(out const Quat Q);// 0x338a9b0
	static Quat Quat_Exp(out const Quat Q);// 0x338a910
	static Vector Quat_Euler(out const Quat Q);// 0x338a870
	static void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0x338a740
	static float Quat_AngularDistance(out const Quat A, out const Quat B);// 0x338a600
	static Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x338a490
	static Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x338a370
	static Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x338a200
	static bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x338a100
	static float PerlinNoise1D(const float Value);// 0x338a070
	static int Percent_IntInt(int A, int B);// 0x3389f90
	static float Percent_FloatFloat(float A, float B);// 0x3389e10
	static byte Percent_ByteByte(byte A, byte B);// 0x3389d30
	static int Or_IntInt(int A, int B);// 0x3389c70
	static int64 Or_Int64Int64(int64 A, int64 B);// 0x3389ba0
	static DateTime Now();// 0x3389b60
	static bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0x33887b0
	static bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x3388680
	static bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x33885b0
	static bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x3389870
	static bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x33896e0
	static bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x33895b0
	static bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x3388b00
	static bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x33893c0
	static bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0x3389260
	static bool NotEqual_ObjectObject(Object* A, Object* B);// 0x3388a30
	static bool NotEqual_NameName(FName A, FName B);// 0x3389190
	static bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x3389000
	static bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x3388f10
	static bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0x3388e40
	static bool NotEqual_IntInt(int A, int B);// 0x3388d70
	static bool NotEqual_Int64Int64(int64 A, int64 B);// 0x3388ca0
	static bool NotEqual_FloatFloat(float A, float B);// 0x3388bc0
	static bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x3388b00
	static bool NotEqual_ClassClass(class Object A, class Object B);// 0x3388a30
	static bool NotEqual_ByteByte(byte A, byte B);// 0x3388970
	static bool NotEqual_BoolBool(bool A, bool B);// 0x3388890
	static bool Not_PreBool(bool A);// 0x3389ad0
	static int64 Not_Int64(int64 A);// 0x33899c0
	static int Not_Int(int A);// 0x3389a50
	static Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0x3388010
	static float NormalizeToRange(float Value, float RangeMin, float RangeMax);// 0x3388390
	static Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x33884b0
	static float NormalizeAxis(float Angle);// 0x3388300
	static void Normalize2D(out Vector2D A, float Tolerance);// 0x3388180
	static Vector2D Normal2D(Vector2D A);// 0x3387d30
	static Vector Normal(Vector A, float Tolerance);// 0x3387e50
	static Vector NegateVector(Vector A);// 0x3387bf0
	static Rotator NegateRotator(Rotator A);// 0x3387b50
	static Vector2D Negated2D(out const Vector2D A);// 0x3387c90
	static bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x3387920
	static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);// 0x3387800
	static float MultiplyMultiply_FloatFloat(float Base, float Exp);// 0x33864b0
	static float MultiplyByPi(float Value);// 0x3386420
	static Vector Multiply_VectorVector(Vector A, Vector B);// 0x3387720
	static Vector Multiply_VectorInt(Vector A, int B);// 0x3387290
	static Vector Multiply_VectorFloat(Vector A, float B);// 0x33871b0
	static Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x33875f0
	static Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x3387520
	static Vector2D Multiply_Vector2DFloat(Vector2D A, float B);// 0x3387450
	static Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x3387380
	static Rotator Multiply_RotatorInt(Rotator A, int B);// 0x3387290
	static Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x33871b0
	static Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0x3387070
	static Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x3386e60
	static Matrix Multiply_MatrixFloat(out const Matrix A, float B);// 0x3386cf0
	static LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x3386c00
	static LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x3386b30
	static IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0x3386a50
	static IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0x3386970
	static int Multiply_IntInt(int A, int B);// 0x33868b0
	static float Multiply_IntFloat(int A, float B);// 0x33867e0
	static int64 Multiply_Int64Int64(int64 A, int64 B);// 0x3386710
	static float Multiply_FloatFloat(float A, float B);// 0x3386640
	static byte Multiply_ByteByte(byte A, byte B);// 0x3386580
	static Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x337b610
	static void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x3386020
	static void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x3385ee0
	static void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x3385da0
	static int64 MinInt64(int64 A, int64 B);// 0x3385cd0
	static void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x3386160
	static int Min(int A, int B);// 0x3385c00
	static void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x3385ac0
	static void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x3385980
	static void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x3385840
	static int64 MaxInt64(int64 A, int64 B);// 0x3385770
	static int Max(int A, int B);// 0x33856a0
	static Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0x3385440
	static Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0x3385560
	static Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0x3385300
	static Quat Matrix_ToQuat(out const Matrix M);// 0x3385260
	static void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0x3385180
	static void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0x3385050
	static void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0x3384f10
	static Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0x3384dd0
	static Matrix Matrix_RemoveTranslation(out const Matrix M);// 0x3384d10
	static void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0x3384c30
	static Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0x3384ab0
	static Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0x3384940
	static Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0x33847c0
	static Matrix Matrix_Identity();// 0x3384770
	static Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0x3384670
	static void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x33844e0
	static Matrix Matrix_GetTransposed(out const Matrix M);// 0x33842f0
	static Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0x3384230
	static Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0x3383e00
	static Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0x33840c0
	static void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x3383f10
	static float Matrix_GetRotDeterminant(out const Matrix M);// 0x3383cf0
	static Rotator Matrix_GetRotator(out const Matrix M);// 0x3374160
	static Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0x3383c50
	static float Matrix_GetMaximumAxisScale(out const Matrix M);// 0x3383bc0
	static Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0x3383a80
	static Matrix Matrix_GetInverse(out const Matrix M);// 0x33839c0
	static bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0x33837d0
	static bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0x33835e0
	static bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0x3383430
	static bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0x3383240
	static bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0x3383050
	static bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0x3382e60
	static float Matrix_GetDeterminant(out const Matrix M);// 0x3382dd0
	static Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0x3382cd0
	static bool Matrix_ContainsNaN(out const Matrix M);// 0x3382c40
	static Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0x3382ad0
	static Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0x3382860
	static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x33826b0
	static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);// 0x3382500
	static Vector4 MakeVector4(float X, float Y, float Z, float W);// 0x3382260
	static Vector2D MakeVector2D(float X, float Y);// 0x3382190
	static Vector MakeVector(float X, float Y, float Z);// 0x33823e0
	static Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x3381ff0
	static Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0x3381cd0
	static Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0x3381e60
	static Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x3381950
	static Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x3381840
	static Rotator MakeRotFromZ(out const Vector Z);// 0x3381780
	static Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x3381670
	static Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x3381560
	static Rotator MakeRotFromY(out const Vector Y);// 0x33814a0
	static Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x3381390
	static Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x3381280
	static Rotator MakeRotFromX(out const Vector X);// 0x33811c0
	static Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x3381bb0
	static Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x3381a60
	static Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0x3381030
	static RandomStream MakeRandomStream(int InitialSeed);// 0x3380fa0
	static QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0x3380e80
	static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x3380d60
	static Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x3380c70
	static FrameRate MakeFrameRate(int Numerator, int Denominator);// 0x3380bb0
	static DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x33809a0
	static LinearColor MakeColor(float R, float G, float B, float A);// 0x3380820
	static Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x3380650
	static Box MakeBox(Vector Min, Vector Max);// 0x3380730
	static float Loge(float A);// 0x33805c0
	static float Log(float A, float Base);// 0x33804f0
	static bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x337f030
	static bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x337ee40
	static LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0x337f3c0
	static LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0x337f260
	static LinearColor LinearColor_Yellow();// 0x33804d0
	static LinearColor LinearColor_White();// 0x33804b0
	static LinearColor LinearColor_Transparent();// 0x3380490
	static Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0x3380400
	static LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0x3380310
	static void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0x3380230
	static void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0x337fff0
	static void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0x33801a0
	static void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0x337ff10
	static void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0x337fe30
	static void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0x337fc80
	static void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0x337fbb0
	static LinearColor LinearColor_Red();// 0x337fb90
	static Color LinearColor_QuantizeRound(LinearColor InColor);// 0x337fb00
	static Color LinearColor_Quantize(LinearColor InColor);// 0x337fa70
	static bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0x337f910
	static LinearColor LinearColor_Green();// 0x337f8f0
	static LinearColor LinearColor_Gray();// 0x337f8d0
	static float LinearColor_GetMin(LinearColor InColor);// 0x337f840
	static float LinearColor_GetMax(LinearColor InColor);// 0x337f7b0
	static float LinearColor_GetLuminance(LinearColor InColor);// 0x337f710
	static float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0x337f610
	static LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0x337f530
	static LinearColor LinearColor_Blue();// 0x337f510
	static LinearColor LinearColor_Black();// 0x337f4f0
	static Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x337e950
	static bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x337e620
	static bool LessEqual_IntInt(int A, int B);// 0x337e880
	static bool LessEqual_Int64Int64(int64 A, int64 B);// 0x337e7b0
	static bool LessEqual_FloatFloat(float A, float B);// 0x337e6e0
	static bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x337e620
	static bool LessEqual_ByteByte(byte A, byte B);// 0x337e560
	static bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x337eb10
	static bool Less_IntInt(int A, int B);// 0x337ed70
	static bool Less_Int64Int64(int64 A, int64 B);// 0x337eca0
	static bool Less_FloatFloat(float A, float B);// 0x337ebd0
	static bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x337eb10
	static bool Less_ByteByte(byte A, byte B);// 0x337ea50
	static float Lerp(float A, float B, float Alpha);// 0x337e440
	static bool IsZero2D(out const Vector2D A);// 0x337e390
	static bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x337e200
	static bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x337e0c0
	static bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0x337dfc0
	static bool IsMorning(DateTime A);// 0x337df10
	static bool IsLeapYear(int Year);// 0x337de80
	static bool IsAfternoon(DateTime A);// 0x337ddd0
	static Transform InvertTransform(out const Transform T);// 0x337dbc0
	static Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x337da70
	static Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x337d870
	static Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x337d6d0
	static IntPoint IntPoint_Zero();// 0x337d6a0
	static IntPoint IntPoint_Up();// 0x337d670
	static IntPoint IntPoint_Right();// 0x337d650
	static IntPoint IntPoint_One();// 0x337d620
	static IntPoint IntPoint_Left();// 0x337d5f0
	static IntPoint IntPoint_Down();// 0x337d5c0
	static bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x337d420
	static bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0x337d280
	static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);// 0x337d0d0
	static float Hypotenuse(float Width, float Height);// 0x337d000
	static LinearColor HSVToRGBLinear(LinearColor HSV);// 0x337ce90
	static void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0x337cf20
	static LinearColor HSVToRGB(float H, float S, float V, float A);// 0x337cd00
	static float GridSnap_Float(float Location, float GridSize);// 0x337cbd0
	static Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x337c6e0
	static bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x337c3b0
	static bool GreaterEqual_IntInt(int A, int B);// 0x337c610
	static bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0x337c540
	static bool GreaterEqual_FloatFloat(float A, float B);// 0x337c470
	static bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x337c3b0
	static bool GreaterEqual_ByteByte(byte A, byte B);// 0x337c2f0
	static bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x337c8a0
	static bool Greater_IntInt(int A, int B);// 0x337cb00
	static bool Greater_Int64Int64(int64 A, int64 B);// 0x337ca30
	static bool Greater_FloatFloat(float A, float B);// 0x337c960
	static bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x337c8a0
	static bool Greater_ByteByte(byte A, byte B);// 0x337c7e0
	static int GetYear(DateTime A);// 0x337c270
	static void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x337c140
	static Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x337c080
	static Vector GetUpVector(Rotator InRot);// 0x337bfe0
	static float GetTotalSeconds(Timespan A);// 0x337bf50
	static float GetTotalMinutes(Timespan A);// 0x337bec0
	static float GetTotalMilliseconds(Timespan A);// 0x337be30
	static float GetTotalHours(Timespan A);// 0x337bda0
	static float GetTotalDays(Timespan A);// 0x337bd10
	static Timespan GetTimeOfDay(DateTime A);// 0x337bc90
	static float GetTAU();// 0x337bc70
	static void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0x337ba90
	static int GetSeconds(Timespan A);// 0x337b9d0
	static int GetSecond(DateTime A);// 0x337b9d0
	static Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0x337b7b0
	static Vector GetRightVector(Rotator InRot);// 0x337b710
	static Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x337b610
	static float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x337b4d0
	static float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x337b390
	static float GetPI();// 0x337b370
	static int GetMonth(DateTime A);// 0x337b2f0
	static int GetMinutes(Timespan A);// 0x337b240
	static int GetMinute(DateTime A);// 0x337b240
	static float GetMinElement(Vector A);// 0x337b1c0
	static float GetMin2D(Vector2D A);// 0x337b140
	static int GetMilliseconds(Timespan A);// 0x337b080
	static int GetMillisecond(DateTime A);// 0x337afd0
	static float GetMaxElement(Vector A);// 0x337af50
	static float GetMax2D(Vector2D A);// 0x337aed0
	static int GetHours(Timespan A);// 0x337ae20
	static int GetHour12(DateTime A);// 0x337ada0
	static int GetHour(DateTime A);// 0x337ae20
	static Vector GetForwardVector(Rotator InRot);// 0x337ad00
	static Timespan GetDuration(Timespan A);// 0x337ac80
	static Vector GetDirectionUnitVector(Vector From, Vector To);// 0x337aab0
	static int GetDays(Timespan A);// 0x337aa30
	static int GetDayOfYear(DateTime A);// 0x337a9b0
	static int GetDay(DateTime A);// 0x337a930
	static DateTime GetDate(DateTime A);// 0x337a8a0
	static void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x337a6c0
	static void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x337a540
	static float GetAbsMax2D(Vector2D A);// 0x337a4b0
	static Vector2D GetAbs2D(Vector2D A);// 0x337a420
	static float FWrap(float Value, float Min, float Max);// 0x3379620
	static IntVector FTruncVector(out const Vector InVector);// 0x3379580
	static int64 FTrunc64(float A);// 0x3379480
	static int FTrunc(float A);// 0x3379500
	static Timespan FromSeconds(float Seconds);// 0x337a390
	static Timespan FromMinutes(float Minutes);// 0x337a300
	static Timespan FromMilliseconds(float Milliseconds);// 0x337a270
	static Timespan FromHours(float Hours);// 0x337a1e0
	static Timespan FromDays(float Days);// 0x337a150
	static float Fraction(float A);// 0x337a0b0
	static int FMod(float Dividend, float Divisor, out float Remainder);// 0x3379360
	static float FMin(float A, float B);// 0x3379290
	static float FMax(float A, float B);// 0x33791c0
	static float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x3379e80
	static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x3379d60
	static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x3379060
	static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);// 0x3378f00
	static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);// 0x3378da0
	static void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x3379b40
	static Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x3379a00
	static Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x33798b0
	static Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x3379760
	static int64 FFloor64(float A);// 0x3378c50
	static int FFloor(float A);// 0x3378d10
	static float FClamp(float Value, float Min, float Max);// 0x3378b30
	static int64 FCeil64(float A);// 0x33789c0
	static int FCeil(float A);// 0x3378a90
	static float Exp(float A);// 0x3378930
	static bool EqualExactly_VectorVector(Vector A, Vector B);// 0x3378780
	static bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x3378650
	static bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x3378580
	static bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x3378430
	static bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x33782a0
	static bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x3378170
	static bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x3377ff0
	static bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x3377610
	static bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x3377e00
	static bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0x3377ca0
	static bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x3377540
	static bool EqualEqual_NameName(FName A, FName B);// 0x3377bd0
	static bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x3377a40
	static bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x3377950
	static bool EqualEqual_IntInt(int A, int B);// 0x3377880
	static bool EqualEqual_Int64Int64(int64 A, int64 B);// 0x33777b0
	static bool EqualEqual_FloatFloat(float A, float B);// 0x33776d0
	static bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x3377610
	static bool EqualEqual_ClassClass(class Object A, class Object B);// 0x3377540
	static bool EqualEqual_ByteByte(byte A, byte B);// 0x3377480
	static bool EqualEqual_BoolBool(bool A, bool B);// 0x33773a0
	static bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0x3378860
	static float Ease(float A, float B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x33771c0
	static Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x3376e50
	static Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x3376c90
	static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x3377010
	static float DotProduct2D(Vector2D A, Vector2D B);// 0x3376ae0
	static float Dot_VectorVector(Vector A, Vector B);// 0x3376bb0
	static Vector Divide_VectorVector(Vector A, Vector B);// 0x33769b0
	static Vector Divide_VectorInt(Vector A, int B);// 0x3376870
	static Vector Divide_VectorFloat(Vector A, float B);// 0x3376730
	static Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x3376600
	static Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x3376500
	static Vector2D Divide_Vector2DFloat(Vector2D A, float B);// 0x33763e0
	static Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x3376310
	static LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x3376220
	static IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0x3376120
	static IntPoint Divide_IntPointInt(IntPoint A, int B);// 0x3376020
	static int Divide_IntInt(int A, int B);// 0x3375f40
	static int64 Divide_Int64Int64(int64 A, int64 B);// 0x3375e50
	static float Divide_FloatFloat(float A, float B);// 0x3375cd0
	static byte Divide_ByteByte(byte A, byte B);// 0x3375bf0
	static float DistanceSquared2D(Vector2D v1, Vector2D v2);// 0x3375b20
	static float Distance2D(Vector2D v1, Vector2D v2);// 0x3375a50
	static float DegTan(float A);// 0x3375930
	static float DegSin(float A);// 0x33758a0
	static float DegreesToRadians(float A);// 0x33759c0
	static float DegCos(float A);// 0x3375810
	static float DegAtan2(float Y, float X);// 0x33756a0
	static float DegAtan(float A);// 0x3375780
	static float DegAsin(float A);// 0x33755f0
	static float DegAcos(float A);// 0x3375540
	static int DaysInYear(int Year);// 0x33754b0
	static int DaysInMonth(int Year, int Month);// 0x33753c0
	static DateTime DateTimeMinValue();// 0x33753a0
	static DateTime DateTimeMaxValue();// 0x3375370
	static bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x3375230
	static bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x33750e0
	static float CrossProduct2D(Vector2D A, Vector2D B);// 0x3374ef0
	static Vector Cross_VectorVector(Vector A, Vector B);// 0x3374fc0
	static Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x3374dc0
	static float Cos(float A);// 0x3374d30
	static Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x3374ba0
	static Vector2D Conv_VectorToVector2D(Vector InVector);// 0x3374b20
	static Transform Conv_VectorToTransform(Vector InLocation);// 0x3374a80
	static Rotator Conv_VectorToRotator(Vector InVec);// 0x33749e0
	static Quat Conv_VectorToQuaternion(Vector InVec);// 0x3374940
	static LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x33748a0
	static Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0x33747f0
	static Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0x3374740
	static Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0x33746a0
	static Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x33745c0
	static IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0x3374510
	static Matrix Conv_TransformToMatrix(out const Transform Transform);// 0x3374400
	static Vector Conv_RotatorToVector(Rotator InRot);// 0x3374360
	static Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0x33742b0
	static Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0x3374200
	static Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0x3374160
	static Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x33740d0
	static Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0x3373ff0
	static Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x3373f30
	static IntVector Conv_IntToIntVector(int inInt);// 0x3373ea0
	static int64 Conv_IntToInt64(int inInt);// 0x3373e20
	static float Conv_IntToFloat(int inInt);// 0x3373d90
	static byte Conv_IntToByte(int inInt);// 0x3373d10
	static bool Conv_IntToBool(int inInt);// 0x3373c80
	static Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0x3373bf0
	static int Conv_Int64ToInt(int64 inInt);// 0x3373b70
	static byte Conv_Int64ToByte(int64 inInt);// 0x3373af0
	static Vector Conv_FloatToVector(float InFloat);// 0x3373a60
	static LinearColor Conv_FloatToLinearColor(float InFloat);// 0x33739d0
	static LinearColor Conv_ColorToLinearColor(Color InColor);// 0x3373940
	static int Conv_ByteToInt(byte InByte);// 0x33738c0
	static float Conv_ByteToFloat(byte InByte);// 0x3373840
	static int Conv_BoolToInt(bool InBool);// 0x33737b0
	static float Conv_BoolToFloat(bool InBool);// 0x3373720
	static byte Conv_BoolToByte(bool InBool);// 0x3373690
	static Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x3373500
	static Rotator ComposeRotators(Rotator A, Rotator B);// 0x3373400
	static bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x3373330
	static Vector ClampVectorSize(Vector A, float Min, float Max);// 0x3373160
	static int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0x3373050
	static float ClampAxis(float Angle);// 0x3372fc0
	static Vector2D ClampAxes2D(Vector2D A, float MinAxisVal, float MaxAxisVal);// 0x3372e90
	static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);// 0x3372d70
	static int Clamp(int Value, int Min, int Max);// 0x3372c70
	static LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x3372ae0
	static void BreakVector4(out const Vector4 InVec, out float X, out float Y, out float Z, out float W);// 0x3372770
	static void BreakVector2D(Vector2D InVec, out float X, out float Y);// 0x3372640
	static void BreakVector(Vector InVec, out float X, out float Y, out float Z);// 0x3372960
	static void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x3372420
	static void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0x3371fc0
	static void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x33721f0
	static void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x3371cc0
	static void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x3371e40
	static void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x3371be0
	static void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0x3371a40
	static void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0x3371910
	static void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x3371660
	static void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0x3371480
	static bool BooleanXOR(bool A, bool B);// 0x33713b0
	static bool BooleanOR(bool A, bool B);// 0x33712d0
	static bool BooleanNOR(bool A, bool B);// 0x33711f0
	static bool BooleanNAND(bool A, bool B);// 0x3371110
	static bool BooleanAND(bool A, bool B);// 0x3371030
	static byte BMin(byte A, byte B);// 0x3370f60
	static byte BMax(byte A, byte B);// 0x3370e90
	static float Atan2(float Y, float X);// 0x3370d30
	static float Atan(float A);// 0x3370e00
	static float Asin(float A);// 0x3370c90
	static int And_IntInt(int A, int B);// 0x3370bd0
	static int64 And_Int64Int64(int64 A, int64 B);// 0x3370b00
	static Vector Add_VectorVector(Vector A, Vector B);// 0x3370a20
	static Vector Add_VectorInt(Vector A, int B);// 0x3370930
	static Vector Add_VectorFloat(Vector A, float B);// 0x3370850
	static Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x3370720
	static Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x3370650
	static Vector2D Add_Vector2DFloat(Vector2D A, float B);// 0x3370580
	static Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x336fd50
	static Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0x33704a0
	static Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x3370310
	static LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x3370220
	static IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0x3370150
	static IntPoint Add_IntPointInt(IntPoint A, int B);// 0x3370070
	static int Add_IntInt(int A, int B);// 0x336ffb0
	static int64 Add_Int64Int64(int64 A, int64 B);// 0x336fee0
	static float Add_FloatFloat(float A, float B);// 0x336fe10
	static DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x336fd50
	static DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0x336fd50
	static byte Add_ByteByte(byte A, byte B);// 0x336fc90
	static float Acos(float A);// 0x336fbf0
	static int64 Abs_Int64(int64 A);// 0x336fad0
	static int Abs_Int(int A);// 0x336fb60
	static float Abs(float A);// 0x336fa40

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: FloatSpringState

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	static void MarkBit(out int Data, int Index);// 0x339dfd0
	static bool HasUnmarkedBit(int Data, int NumBits);// 0x339d400
	static bool HasMarkedBit(int Data, int NumBits);// 0x339d330
	static byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x339d260
	static int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x339d120
	static int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x339cec0
	static int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x339cdc0
	static byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x339ccf0
	static FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x339cbe0
	static FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x339cb10
	static void ClearBit(out int Data, int Index);// 0x339a090
	static void ClearAllBits(out int Data);// 0x339a010
	static bool BitIsMarked(int Data, int Index);// 0x3398960

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	static void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x339f480
	static Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x339eb40
	static void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x339eac0
	static Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x339e970
	static LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x339e800
	static LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x339e690
	static Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x339e540
	static SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x339dd50
	static Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x339d5c0
	static Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x339d4d0
	static void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x339c620
	static void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x339c4b0
	static void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x339c0c0
	static void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x339bfc0
	static TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x339bc80
	static TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x339ba70
	static TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x339b8a0
	static void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x339b7a0
	static void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x339a160
	static void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x3398a30
	static void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x33987a0

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xf0, Size: 0x4]
	int SizeY;//[Offset: 0xf4, Size: 0x4]
	int SizeZ;//[Offset: 0xf8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xfc, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x10c, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10d, Size: 0x1]

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xf0, Size: 0x4]
	int SizeY;//[Offset: 0xf4, Size: 0x4]
	int Slices;//[Offset: 0xf8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xfc, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x10c, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10d, Size: 0x1]

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	static FString TrimTrailing(FString SourceString);// 0x339fc80
	static FString Trim(FString SourceString);// 0x339fba0
	static FString ToUpper(FString SourceString);// 0x339fac0
	static FString ToLower(FString SourceString);// 0x339f9e0
	static FString TimeSecondsToString(float InSeconds);// 0x339f910
	static bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0x339f7d0
	static bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x339f590
	static FString RightPad(FString SourceString, int ChCount);// 0x339f360
	static FString RightChop(FString SourceString, int Count);// 0x339f240
	static FString Right(FString SourceString, int Count);// 0x339f120
	static FString Reverse(FString SourceString);// 0x339f040
	static int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x339eea0
	static FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0x339ecd0
	static FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0x339e3c0
	static bool NotEqual_StrStr(FString A, FString B);// 0x339e1e0
	static bool NotEqual_StriStri(FString A, FString B);// 0x339e2d0
	static FString Mid(FString SourceString, int Start, int Count);// 0x339cfc0
	static bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0x339e0a0
	static int Len(FString S);// 0x339dcb0
	static FString LeftPad(FString SourceString, int ChCount);// 0x339db90
	static FString LeftChop(FString SourceString, int Count);// 0x339da70
	static FString Left(FString SourceString, int Count);// 0x339d950
	static FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x339d7e0
	static bool IsNumeric(FString SourceString);// 0x339d740
	static bool IsEmpty(FString inString);// 0x339d6a0
	static FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0x339cfc0
	static int GetCharacterAsNumber(FString SourceString, int Index);// 0x339ca30
	static FString[] GetCharacterArrayFromString(FString SourceString);// 0x339c950
	static int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x339c790
	static bool EqualEqual_StrStr(FString A, FString B);// 0x339c2d0
	static bool EqualEqual_StriStri(FString A, FString B);// 0x339c3c0
	static bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0x339c190
	static int CullArray(FString SourceString, out FString[] inArray);// 0x339be90
	static FString Conv_VectorToString(Vector InVec);// 0x339b6c0
	static FString Conv_Vector2dToString(Vector2D InVec);// 0x339b600
	static FString Conv_TransformToString(out const Transform InTrans);// 0x339b4e0
	static void Conv_StringToVector2D(FString inString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x339b280
	static void Conv_StringToVector(FString inString, out Vector OutConvertedVector, out bool OutIsValid);// 0x339b3b0
	static void Conv_StringToRotator(FString inString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x339b150
	static FName Conv_StringToName(FString inString);// 0x339b0a0
	static int Conv_StringToInt(FString inString);// 0x339b000
	static float Conv_StringToFloat(FString inString);// 0x339af60
	static void Conv_StringToColor(FString inString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x339ae30
	static FString Conv_RotatorToString(Rotator InRot);// 0x339ad50
	static FString Conv_ObjectToString(Object* InObj);// 0x339ac80
	static FString Conv_NameToString(FName InName);// 0x339abb0
	static FString Conv_MatrixToString(out const Matrix InMatrix);// 0x339aae0
	static FString Conv_IntVectorToString(IntVector InIntVec);// 0x339aa00
	static FString Conv_IntToString(int inInt);// 0x339a930
	static FString Conv_IntPointToString(IntPoint InIntPoint);// 0x339a870
	static FString Conv_FloatToString(float InFloat);// 0x339a7a0
	static FString Conv_ColorToString(LinearColor InColor);// 0x339a6d0
	static FString Conv_ByteToString(byte InByte);// 0x339a600
	static FString Conv_BoolToString(bool InBool);// 0x339a530
	static bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x339a3b0
	static FString Concat_StrStr(FString A, FString B);// 0x339a270
	static FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x3399c60
	static FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x3399e30
	static FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x3399a80
	static FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x33998b0
	static FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x33996e0
	static FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x3399500
	static FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x3399330
	static FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);// 0x3399160
	static FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x3398f80
	static FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x3398db0

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	static bool IsRegisteredTableId(const FName TableId);// 0x33adc40
	static bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x33adb60
	static FString GetTableNamespace(const FName TableId);// 0x33ad7e0
	static FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x33ad6c0
	static FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x33ad550
	static FName[] GetRegisteredStringTables();// 0x33ad150
	static FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x33ac400
	static FString[] GetKeysFromStringTable(const FName TableId);// 0x33ac330

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	static void UnregisterForRemoteNotifications();// 0x33b3230
	static void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0x33b6e30
	static void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0x33b6da0
	static void TransactObject(Object* Object);// 0x33a8a70
	static void StackTrace();// 0x33b6d80
	static bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b68d0
	static bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b6440
	static bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b5fb0
	static bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b5b40
	static bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b56f0
	static bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b52a0
	static bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x33b5010
	static bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x33b4d80
	static void SnapshotObject(Object* Object);// 0x33a8a70
	static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0x33b4cf0
	static void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0x33b4c70
	static void ShowInterstitialAd();// 0x33b4c50
	static void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0x33b4b90
	static void SetWindowTitle(out const FText Title);// 0x33b4ad0
	static void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0x33a8100
	static void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0x33b49c0
	static void SetUserActivity(out const UserActivity UserActivity);// 0x33b4920
	static void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0x33b47d0
	static void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0x33b4680
	static void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0x33b45c0
	static void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0x33b3690
	static void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0x33b44a0
	static void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0x33b4360
	static void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0x33b4220
	static void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0x33b4110
	static void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0x33b4010
	static void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0x33b3f00
	static void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0x33b3df0
	static void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0x33b3be0
	static void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0x33b3ce0
	static void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0x33b3ae0
	static void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0x33a8100
	static void SetFloatPropertyByName(Object* Object, FName PropertyName, float Value);// 0x33b39d0
	static void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0x33b38a0
	static void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0x33b3790
	static void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0x33b3690
	static void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0x33b3590
	static void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0x33b3490
	static void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0x33b3390
	static void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x33b3250
	static void ResetGamepadAssignmentToController(int ControllerId);// 0xf552b0
	static void ResetGamepadAssignments();// 0xc123b0
	static void RegisterForRemoteNotifications();// 0x33b3230
	static void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0x33b30e0
	static void PrintWarning(FString inString);// 0x33b3050
	static void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x33b2e00
	static void PrintString(const Object* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration);// 0x33b2c00
	static bool ParseParamValue(FString inString, FString InParam, out FString OutValue);// 0x33b2aa0
	static bool ParseParam(FString inString, FString InParam);// 0x33b29b0
	static void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0x33b2740
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0x197e4f0
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0x197e4f0
	static bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x33b25f0
	static bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x33b25f0
	static bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x2ac6ed0
	static bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x33b2500
	static FString NormalizeFilename(FString InFilename);// 0x33b2420
	static void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0x33b2130
	static SoftObjectPath MakeSoftObjectPath(FString PathString);// 0x33b2040
	static SoftClassPath MakeSoftClassPath(FString PathString);// 0x33b1f80
	static FText MakeLiteralText(FText Value);// 0x33b1e20
	static FString MakeLiteralString(FString Value);// 0x33b1d10
	static FName MakeLiteralName(FName Value);// 0x33b1c90
	static int MakeLiteralInt(int Value);// 0xe65210
	static float MakeLiteralFloat(float Value);// 0x33b1c10
	static byte MakeLiteralByte(byte Value);// 0x33b1b90
	static bool MakeLiteralBool(bool Value);// 0x3373690
	static void LoadInterstitialAd(int AdIdIndex);// 0x33b1b10
	static class Object LoadClassAsset_Blocking(class Object AssetClass);// 0x33b1a00
	static void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x33b1700
	static Object* LoadAsset_Blocking(Object* Asset);// 0x33b18f0
	static void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0x33b1510
	static bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b10a0
	static bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b0c50
	static bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b0800
	static bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33b03e0
	static bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33affe0
	static bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33afbe0
	static void LaunchURL(FString URL);// 0x33afb50
	static void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33afa90
	static void K2_UnPauseTimerDelegate(delegate Delegate);// 0x33afa00
	static void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0x33af8e0
	static bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33af810
	static bool K2_TimerExistsDelegate(delegate Delegate);// 0x33af770
	static bool K2_TimerExists(Object* Object, FString FunctionName);// 0x33af640
	static TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x33af490
	static TimerHandle K2_SetTimer(Object* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0x33af250
	static void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33af190
	static void K2_PauseTimerDelegate(delegate Delegate);// 0x33af100
	static void K2_PauseTimer(Object* Object, FString FunctionName);// 0x33aefe0
	static bool K2_IsValidTimerHandle(TimerHandle Handle);// 0x33aef50
	static bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33aee80
	static bool K2_IsTimerPausedDelegate(delegate Delegate);// 0x33aede0
	static bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0x33aecb0
	static bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33aebe0
	static bool K2_IsTimerActiveDelegate(delegate Delegate);// 0x33aeb40
	static bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0x33aea10
	static TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0x33ae970
	static float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33ae8a0
	static float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0x33ae800
	static float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0x33ae6d0
	static float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33ae600
	static float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0x33ae560
	static float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0x33ae430
	static void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0x33ae370
	static void K2_ClearTimerDelegate(delegate Delegate);// 0x33ae2e0
	static void K2_ClearTimer(Object* Object, FString FunctionName);// 0x33ae1c0
	static void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0x33ae0f0
	static bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0x33ae030
	static bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0x33ae030
	static bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0x2ac66c0
	static bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x33adf90
	static bool IsValidClass(class Object Class);// 0x33adeb0
	static bool IsValid(const Object* Object);// 0x33adeb0
	static bool IsUnattended();// 0x33ade80
	static bool IsStandalone(const Object* WorldContextObject);// 0x33addf0
	static bool IsSplitScreen(const Object* WorldContextObject);// 0x33add60
	static bool IsServer(const Object* WorldContextObject);// 0x33adcd0
	static bool IsScreensaverEnabled();// 0x95db50
	static bool IsPackagedForDistribution();// 0xf59da0
	static bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0x33adad0
	static bool IsInterstitialAdRequested();// 0x33adaa0
	static bool IsInterstitialAdAvailable();// 0x33ada70
	static bool IsDedicatedServer(const Object* WorldContextObject);// 0x33ad9e0
	static bool IsControllerAssignedToGamepad(int ControllerId);// 0x33ad950
	static void HideAdBanner();// 0x33ad930
	static bool GetVolumeButtonsHandledBySystem();// 0xf59da0
	static FString GetUniqueDeviceId();// 0x33ad8b0
	static FString GetSystemPath(const Object* Object);// 0x33ad480
	static bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0x33ad3d0
	static Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x33ad300
	static class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x33ad230
	static int GetRenderingMaterialQualityLevel();// 0x33ad200
	static int GetRenderingDetailMode();// 0x33ad1d0
	static FString GetProjectSavedDirectory();// 0x33ad0d0
	static FString GetProjectDirectory();// 0x15fb140
	static FString GetProjectContentDirectory();// 0x33ad050
	static void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x33ace30
	static void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0x33acd50
	static PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0x33acc30
	static PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0x33acb10
	static PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0x33aca70
	static PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0x33ac9d0
	static FString[] GetPreferredLanguages();// 0x33ac950
	static FString GetPlatformUserName();// 0x33ac8d0
	static FString GetPlatformUserDir();// 0x33ac850
	static FString GetPathName(const Object* Object);// 0x33ac780
	static Object* GetOuterObject(const Object* Object);// 0x33ac6f0
	static FString GetObjectName(const Object* Object);// 0x33ac620
	static Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x33ac580
	static int GetMinYResolutionForUI();// 0x33ac550
	static int GetMinYResolutionFor3DView();// 0x33ac520
	static FString GetLocalCurrencySymbol();// 0x33abe80
	static FString GetLocalCurrencyCode();// 0x33abe80
	static float GetGameTimeInSeconds(const Object* WorldContextObject);// 0x3342810
	static FString GetGamepadControllerName(int ControllerId);// 0x33ac260
	static Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0x33ac180
	static FString GetGameName();// 0x33ac100
	static FString GetGameBundleId();// 0x33ac080
	static int64 GetFrameCount();// 0x33ac050
	static FString GetEngineVersion();// 0x33abfd0
	static FString GetDisplayName(const Object* Object);// 0x33abf00
	static FString GetDeviceId();// 0x33abe80
	static FString GetDefaultLocale();// 0x33abe00
	static FString GetDefaultLanguage();// 0x33abd80
	static bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0x33abc30
	static bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0x33abb80
	static int GetConsoleVariableIntValue(FString VariableName);// 0x33abae0
	static float GetConsoleVariableFloatValue(FString VariableName);// 0x33aba40
	static bool GetConsoleVariableBoolValue(FString VariableName);// 0x33ab9a0
	static void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x33ab830
	static FString GetCommandLine();// 0x33ab7b0
	static class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0x33ab710
	static FString GetClassDisplayName(class Object Class);// 0x33ab640
	static int GetAdIDCount();// 0x33ab610
	static void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0x33ab4c0
	static void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0x33ab3a0
	static void ForceCloseAdBanner();// 0x33ab380
	static void FlushPersistentDebugLines(const Object* WorldContextObject);// 0x33a8a70
	static void FlushDebugStrings(const Object* WorldContextObject);// 0x33a8a70
	static void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0x33ab260
	static bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0x33ab110
	static bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0x33ab110
	static bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0x2ac5700
	static bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0x33ab020
	static int EndTransaction();// 0x33aaff0
	static void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0x33aadf0
	static void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x33aabc0
	static void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0x33aaa20
	static void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0x33aa830
	static void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0x33aa630
	static void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0x33aa430
	static void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x33aa1d0
	static void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0x33a9fc0
	static void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0x33a9d40
	static void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0x33a9b50
	static void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x33a9840
	static void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0x33a9840
	static void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0x33a9520
	static void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0x33a92a0
	static void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0x33a9190
	static void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0x33a8f40
	static void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0x33a8d00
	static bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0x33a8c30
	static void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0x33a8af0
	static void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0x33a8a70
	static FString ConvertToRelativePath(FString Filename);// 0x33a8990
	static FString ConvertToAbsolutePath(FString Filename);// 0x33a88b0
	static Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0x33a8710
	static FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0x33a8610
	static Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0x33a87f0
	static FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0x33a8610
	static class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0x33a8550
	static class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0x33a8470
	static FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0x2ac5b00
	static FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0x33a8390
	static Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0x33a82e0
	static Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0x33a8240
	static class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0x33a8180
	static void ControlScreensaver(bool bAllowScreenSaver);// 0x33a8100
	static bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x33a7e70
	static bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x33a7be0
	static void CollectGarbage();// 0x33a7bc0
	static bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a76d0
	static bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a7200
	static bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a6d30
	static bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a6870
	static bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a63e0
	static bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a5f40
	static bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x33a5c70
	static bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x33a59a0
	static bool CanLaunchURL(FString URL);// 0x33a5900
	static void CancelTransaction(const int Index);// 0xf552b0
	static void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0x33a57b0
	static void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0x33a57b0
	static bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a52a0
	static bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a4da0
	static bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a48a0
	static bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a43d0
	static bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a3f10
	static bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0x33a3a50
	static bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0x33a37c0
	static bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0x33a3530
	static int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0x33a33a0
	static DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0x33a3230

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TimerHandle
	UInt64Property Handle;//[Size: 0x8]

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10]
	float MaxSamples;//[Offset: 0x10, Size: 0x4]
	float MinValue;//[Offset: 0x14, Size: 0x4]
	float MaxValue;//[Offset: 0x18, Size: 0x4]
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	static FText TextTrimTrailing(out const FText InText);// 0x33bc790
	static FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x33bc660
	static FText TextTrimPreceding(out const FText InText);// 0x33bc530
	static FText TextToUpper(out const FText InText);// 0x33bc400
	static FText TextToLower(out const FText InText);// 0x33bc2d0
	static bool TextIsTransient(out const FText InText);// 0x33bc200
	static bool TextIsFromStringTable(out const FText Text);// 0x33bc130
	static bool TextIsEmpty(out const FText InText);// 0x33bc060
	static bool TextIsCultureInvariant(out const FText InText);// 0x33bbf90
	static FText TextFromStringTable(const FName TableId, FString Key);// 0x33bbe50
	static bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x33bbca0
	static FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0x33bba90
	static bool NotEqual_TextText(out const FText A, out const FText B);// 0x33bb920
	static bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x33bb7b0
	static void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0x33bb510
	static FText GetEmptyText();// 0x33bb480
	static FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x33bb250
	static bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x33bb0d0
	static bool EqualEqual_TextText(out const FText A, out const FText B);// 0x33baf60
	static bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x33badf0
	static FText Conv_VectorToText(Vector InVec);// 0x33bad00
	static FText Conv_Vector2dToText(Vector2D InVec);// 0x33bac20
	static FText Conv_TransformToText(out const Transform InTrans);// 0x33baae0
	static FString Conv_TextToString(out const FText InText);// 0x33ba9d0
	static FText Conv_StringToText(FString inString);// 0x33ba8d0
	static FText Conv_RotatorToText(Rotator InRot);// 0x33ba7e0
	static FText Conv_ObjectToText(Object* InObj);// 0x33ba6f0
	static FText Conv_NameToText(FName InName);// 0x33ba600
	static FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x33ba3e0
	static FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x33ba1c0
	static FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x33b9ef0
	static FText Conv_ColorToText(LinearColor InColor);// 0x33b9e10
	static FText Conv_ByteToText(byte Value);// 0x33b9d30
	static FText Conv_BoolToText(bool InBool);// 0x33b9c40
	static FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x33b9910
	static FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x33b9670
	static FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x33b97c0
	static FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x33b9b50
	static FText AsTime_DateTime(out const DateTime In);// 0x33b9a60
	static FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x33b93a0
	static FText AsDateTime_DateTime(out const DateTime In);// 0x33b91c0
	static FText AsDate_DateTime(out const DateTime InDateTime);// 0x33b92b0
	static FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0x33b8a40
	static FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x33b8ea0
	static FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x33b8b80

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1]
	FString NativeCulture;//[Offset: 0x8, Size: 0x10]
	FString Namespace;//[Offset: 0x18, Size: 0x10]
	FString Key;//[Offset: 0x28, Size: 0x10]
	FString NativeString;//[Offset: 0x38, Size: 0x10]
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50]
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FText CachedText;//[Offset: 0xa0, Size: 0x18]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: LayerActorStats
	class Object* Type;//[Offset: 0x0, Size: 0x8]
	int Total;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x228, Size: 0x8]
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	static LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x33bf160
	static LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride);// 0x33bef00

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8]
	int[] Surfaces;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb0, Size: 0x4]
	int ForcedLOD;//[Offset: 0xb4, Size: 0x4]
	ComponentSync[] ComponentsToSync;//[Offset: 0xb8, Size: 0x10]
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xc8, Size: 0x50]
	int CurrentLOD;//[Offset: 0x118, Size: 0x4]
	int CurrentNumLODs;//[Offset: 0x11c, Size: 0x4]
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x120, Size: 0x10]
	PrimitiveComponent*[] SubComponents;//[Offset: 0x130, Size: 0x10]
	FString GetLODSyncDebugText();// 0x33c30d0

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum SyncOption;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10]
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x450, Size: 0x10]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x33c71c0
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x33c6fd0

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float BaseSizeX;//[Offset: 0x14, Size: 0x4]
	float BaseSizeY;//[Offset: 0x18, Size: 0x4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	float ConstA;//[Offset: 0x68, Size: 0x4]
	float ConstB;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0xc]

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x60, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x68, Size: 0x10]
	FName Group;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x80, Size: 0x4]
	byte Channel;//[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x40, Size: 0xc]
	ExpressionInput X;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x40, Size: 0xc]
	ExpressionInput X;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x40, Size: 0x10]
	MaterialAttributesInput B;//[Offset: 0x58, Size: 0x10]
	ExpressionInput Alpha;//[Offset: 0x70, Size: 0xc]
	byte PixelAttributeBlendType;//[Offset: 0x84, Size: 0x1]
	byte VertexAttributeBlendType;//[Offset: 0x85, Size: 0x1]

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Height;//[Offset: 0x54, Size: 0xc]
	ExpressionInput HeightRatioInput;//[Offset: 0x68, Size: 0xc]
	float HeightRatio;//[Offset: 0x7c, Size: 0x4]
	float ReferencePlane;//[Offset: 0x80, Size: 0x4]
	UInt32Property ConstCoordinate;//[Size: 0x4]

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x40, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x58, Size: 0x10]
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	byte PrimitiveDataIndex;//[Offset: 0x69, Size: 0x1]

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Min;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Max;//[Offset: 0x68, Size: 0xc]
	byte ClampMode;//[Offset: 0x7c, Size: 0x1]
	float MinDefault;//[Offset: 0x80, Size: 0x4]
	float MaxDefault;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8]
	FName ParameterName;//[Offset: 0x48, Size: 0x8]
	Guid ParameterId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	FString Text;//[Offset: 0x48, Size: 0x10]
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10]
	int FontSize;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x40, Size: 0x4]
	float G;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	float Bias;//[Offset: 0x54, Size: 0x4]
	float Scale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	float Period;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x58, Size: 0x4]
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	byte PrimitiveDataIndex;//[Offset: 0x5d, Size: 0x1]

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8]
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8]
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString code;//[Offset: 0x40, Size: 0x10]
	byte OutputType;//[Offset: 0x50, Size: 0x1]
	FString Description;//[Offset: 0x58, Size: 0x10]
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10]
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10]
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10]
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8]
	byte OutputType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10]
	FString DefineValue;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x40, Size: 0xc]
	float ConstWidth;//[Offset: 0x54, Size: 0x4]
	float ConstHeight;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x40, Size: 0xc]
	ExpressionInput FadeDistance;//[Offset: 0x54, Size: 0xc]
	float OpacityDefault;//[Offset: 0x68, Size: 0x4]
	float FadeDistanceDefault;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x40, Size: 0x1]
	ExpressionInput Depth;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Fraction;//[Offset: 0x54, Size: 0xc]
	LinearColor LuminanceFactors;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	float ConstA;//[Offset: 0x68, Size: 0x4]
	float ConstB;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10]
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10]
	UInt32Property ParameterIndex;//[Size: 0x4]

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8]
	int FontTexturePage;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x50, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x58, Size: 0x10]
	FName Group;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x40, Size: 0xc]
	float Exponent;//[Offset: 0x54, Size: 0x4]
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x58, Size: 0xc]
	float BaseReflectFraction;//[Offset: 0x6c, Size: 0x4]
	ExpressionInput Normal;//[Offset: 0x70, Size: 0xc]

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x40, Size: 0xc]
	FName InputName;//[Offset: 0x54, Size: 0x8]
	FString Description;//[Offset: 0x60, Size: 0x10]
	Guid ID;//[Offset: 0x70, Size: 0x10]
	byte InputType;//[Offset: 0x80, Size: 0x1]
	Vector4 PreviewValue;//[Offset: 0x90, Size: 0x10]
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int SortPriority;//[Offset: 0xa4, Size: 0x4]
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x40, Size: 0x8]
	FString Description;//[Offset: 0x48, Size: 0x10]
	int SortPriority;//[Offset: 0x58, Size: 0x4]
	ExpressionInput A;//[Offset: 0x5c, Size: 0xc]
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	Guid ID;//[Offset: 0x74, Size: 0x10]

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x40, Size: 0x10]
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]
	ExpressionInput StaticIndirect;//[Offset: 0x54, Size: 0xc]
	ExpressionInput DynamicIndirect;//[Offset: 0x68, Size: 0xc]

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Redness;//[Offset: 0x54, Size: 0xc]
	ExpressionInput DyeColor;//[Offset: 0x68, Size: 0xc]

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	ExpressionInput AGreaterThanB;//[Offset: 0x68, Size: 0xc]
	ExpressionInput AEqualsB;//[Offset: 0x7c, Size: 0xc]
	ExpressionInput ALessThanB;//[Offset: 0x90, Size: 0xc]
	float EqualsThreshold;//[Offset: 0xa4, Size: 0x4]
	float ConstB;//[Offset: 0xa8, Size: 0x4]
	float ConstAEqualsB;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Value;//[Offset: 0x68, Size: 0xc]
	float ConstA;//[Offset: 0x7c, Size: 0x4]
	float ConstB;//[Offset: 0x80, Size: 0x4]
	float ConstValue;//[Offset: 0x84, Size: 0x4]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Lightmass;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Alpha;//[Offset: 0x68, Size: 0xc]
	float ConstA;//[Offset: 0x7c, Size: 0x4]
	float ConstB;//[Offset: 0x80, Size: 0x4]
	float ConstAlpha;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Metallic;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Specular;//[Offset: 0x68, Size: 0xc]
	ExpressionInput Roughness;//[Offset: 0x7c, Size: 0xc]
	ExpressionInput Anisotropy;//[Offset: 0x90, Size: 0xc]
	ExpressionInput EmissiveColor;//[Offset: 0xa4, Size: 0xc]
	ExpressionInput Opacity;//[Offset: 0xb8, Size: 0xc]
	ExpressionInput OpacityMask;//[Offset: 0xcc, Size: 0xc]
	ExpressionInput Normal;//[Offset: 0xe0, Size: 0xc]
	ExpressionInput Tangent;//[Offset: 0xf4, Size: 0xc]
	ExpressionInput WorldPositionOffset;//[Offset: 0x108, Size: 0xc]
	ExpressionInput WorldDisplacement;//[Offset: 0x11c, Size: 0xc]
	ExpressionInput TessellationMultiplier;//[Offset: 0x130, Size: 0xc]
	ExpressionInput SubsurfaceColor;//[Offset: 0x144, Size: 0xc]
	ExpressionInput ClearCoat;//[Offset: 0x158, Size: 0xc]
	ExpressionInput ClearCoatRoughness;//[Offset: 0x16c, Size: 0xc]
	ExpressionInput AmbientOcclusion;//[Offset: 0x180, Size: 0xc]
	ExpressionInput Refraction;//[Offset: 0x194, Size: 0xc]
	ExpressionInput CustomizedUVs;//[Offset: 0x1a8, Size: 0xc]
	ExpressionInput PixelDepthOffset;//[Offset: 0x248, Size: 0xc]
	ExpressionInput ShadingModel;//[Offset: 0x25c, Size: 0xc]

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x40, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x48, Size: 0x10]
	MaterialAttributesInput Input;//[Offset: 0x58, Size: 0x10]
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x70, Size: 0x40]
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0xb0, Size: 0x10]
	int NumActiveLayerCallers;//[Offset: 0xc0, Size: 0x4]
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0xc8, Size: 0x10]
	int NumActiveBlendCallers;//[Offset: 0xd8, Size: 0x4]
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8]
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x40, Size: 0xc]
	ExpressionInput MaterialProxy;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	float ConstA;//[Offset: 0x68, Size: 0x4]
	float ConstB;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	float ConstA;//[Offset: 0x68, Size: 0x4]
	float ConstB;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	float ConstA;//[Offset: 0x68, Size: 0x4]
	float ConstB;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x40, Size: 0xc]
	ExpressionInput FilterWidth;//[Offset: 0x54, Size: 0xc]
	float Scale;//[Offset: 0x68, Size: 0x4]
	int Quality;//[Offset: 0x6c, Size: 0x4]
	byte NoiseFunction;//[Offset: 0x70, Size: 0x1]
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	int Levels;//[Offset: 0x78, Size: 0x4]
	float OutputMin;//[Offset: 0x7c, Size: 0x4]
	float OutputMax;//[Offset: 0x80, Size: 0x4]
	float LevelScale;//[Offset: 0x84, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	UInt32Property RepeatSize;//[Size: 0x4]

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Time;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Speed;//[Offset: 0x68, Size: 0xc]
	float SpeedX;//[Offset: 0x7c, Size: 0x4]
	float SpeedY;//[Offset: 0x80, Size: 0x4]
	UInt32Property ConstCoordinate;//[Size: 0x4]
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x40, Size: 0xc]
	float ConstDefaultValue;//[Offset: 0x54, Size: 0x4]
	UInt32Property DataIndex;//[Size: 0x4]

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Exponent;//[Offset: 0x54, Size: 0xc]
	float ConstExponent;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x40, Size: 0xc]
	ExpressionInput PreviousFrame;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Inputs;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x40, Size: 0xc]
	ExpressionInput RayTraced;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Reflection;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x40, Size: 0xc]
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x40, Size: 0xc]
	ExpressionInput RotationAngle;//[Offset: 0x54, Size: 0xc]
	ExpressionInput PivotPoint;//[Offset: 0x68, Size: 0xc]
	ExpressionInput Position;//[Offset: 0x7c, Size: 0xc]
	float Period;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Time;//[Offset: 0x54, Size: 0xc]
	float CenterX;//[Offset: 0x68, Size: 0x4]
	float CenterY;//[Offset: 0x6c, Size: 0x4]
	float Speed;//[Offset: 0x70, Size: 0x4]
	UInt32Property ConstCoordinate;//[Size: 0x4]

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Specular;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Roughness;//[Offset: 0x68, Size: 0xc]
	ExpressionInput Normal;//[Offset: 0x7c, Size: 0xc]
	ExpressionInput WorldHeight;//[Offset: 0x90, Size: 0xc]
	ExpressionInput Opacity;//[Offset: 0xa4, Size: 0xc]
	ExpressionInput Mask;//[Offset: 0xb8, Size: 0xc]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]
	ExpressionInput VirtualTextureOutput;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x40, Size: 0xc]
	ExpressionInput WorldPosition;//[Offset: 0x54, Size: 0xc]
	ExpressionInput MipValue;//[Offset: 0x68, Size: 0xc]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x80, Size: 0x8]
	enum MaterialType;//[Offset: 0x88, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	byte MipValueMode;//[Offset: 0x8b, Size: 0x1]
	byte TextureAddressMode;//[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x90, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x98, Size: 0x10]
	FName Group;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x40, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x44, Size: 0xc]
	ExpressionInput OffsetFraction;//[Offset: 0x58, Size: 0xc]
	Vector2D ConstInput;//[Offset: 0x6c, Size: 0x8]

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x40, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x44, Size: 0xc]
	ExpressionInput Coordinates;//[Offset: 0x58, Size: 0xc]
	Vector2D ConstInput;//[Offset: 0x6c, Size: 0x8]

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x40, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x44, Size: 0xc]
	Vector2D ConstInput;//[Offset: 0x58, Size: 0x8]
	float FallbackDepth;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x40, Size: 0xc]
	byte SceneTextureId;//[Offset: 0x54, Size: 0x1]
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MaterialExpressionScreenPercentage.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10]
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x40, Size: 0xc]
	ExpressionInput VertexShader;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Inputs;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x40, Size: 0xc]
	ExpressionInput shadow;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	float Period;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x40, Size: 0xc]
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x54, Size: 0xc]
	ExpressionInput PhaseG;//[Offset: 0x68, Size: 0xc]
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x7c, Size: 0xc]

--------------------------------
Class: MaterialExpressionSkinningVertexOffsets.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x40, Size: 0x4]
	ExpressionInput WorldPosition;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Max;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Value;//[Offset: 0x68, Size: 0xc]
	float ConstMin;//[Offset: 0x7c, Size: 0x4]
	float ConstMax;//[Offset: 0x80, Size: 0x4]
	float ConstValue;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Index;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Seed;//[Offset: 0x68, Size: 0xc]
	UInt32Property ConstIndex;//[Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x40, Size: 0xc]
	ExpressionInput WindInput;//[Offset: 0x54, Size: 0xc]
	ExpressionInput LODInput;//[Offset: 0x68, Size: 0xc]
	ExpressionInput ExtraBendWS;//[Offset: 0x7c, Size: 0xc]
	byte GeometryType;//[Offset: 0x90, Size: 0x1]
	byte WindType;//[Offset: 0x91, Size: 0x1]
	byte LODType;//[Offset: 0x92, Size: 0x1]
	float BillboardThreshold;//[Offset: 0x94, Size: 0x4]
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	ExpressionInput Radius;//[Offset: 0x68, Size: 0xc]
	ExpressionInput Hardness;//[Offset: 0x7c, Size: 0xc]
	float AttenuationRadius;//[Offset: 0x90, Size: 0x4]
	float HardnessPercent;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x40, Size: 0xc]
	float ConstantDensity;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	ExpressionInput A;//[Offset: 0x44, Size: 0xc]
	ExpressionInput B;//[Offset: 0x58, Size: 0xc]
	ExpressionInput Value;//[Offset: 0x6c, Size: 0xc]

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x40, Size: 0xc]
	ExpressionInput X;//[Offset: 0x54, Size: 0xc]
	float ConstY;//[Offset: 0x68, Size: 0x4]
	float ConstX;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x40, Size: 0xc]
	ExpressionInput B;//[Offset: 0x54, Size: 0xc]
	float ConstA;//[Offset: 0x68, Size: 0x4]
	float ConstB;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	float Period;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Seed;//[Offset: 0x54, Size: 0xc]
	UInt32Property ConstIndex;//[Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0x6c, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x40, Size: 0x4]
	float UTiling;//[Offset: 0x44, Size: 0x4]
	float VTiling;//[Offset: 0x48, Size: 0x4]
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x40, Size: 0xc]
	byte Property;//[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleConditional.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float Period;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	byte TransformSourceType;//[Offset: 0x54, Size: 0x1]
	byte TransformType;//[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]
	byte TransformSourceType;//[Offset: 0x54, Size: 0x1]
	byte TransformType;//[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x40, Size: 0xc]
	byte NoiseFunction;//[Offset: 0x54, Size: 0x1]
	int Quality;//[Offset: 0x58, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	UInt32Property TileSize;//[Size: 0x4]

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Yes;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x40, Size: 0xc]
	ExpressionInput PhaseG2;//[Offset: 0x54, Size: 0xc]
	ExpressionInput PhaseBlend;//[Offset: 0x68, Size: 0xc]
	ExpressionInput MultiScatteringContribution;//[Offset: 0x7c, Size: 0xc]
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x90, Size: 0xc]
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa4, Size: 0xc]
	ExpressionInput ConservativeDensity;//[Offset: 0xb8, Size: 0xc]
	float ConstPhaseG;//[Offset: 0xcc, Size: 0x4]
	float ConstPhaseG2;//[Offset: 0xd0, Size: 0x4]
	float ConstPhaseBlend;//[Offset: 0xd4, Size: 0x4]
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	UInt32Property MultiScatteringApproximationOctaveCount;//[Size: 0x4]
	float ConstMultiScatteringContribution;//[Offset: 0xe0, Size: 0x4]
	float ConstMultiScatteringOcclusion;//[Offset: 0xe4, Size: 0x4]
	float ConstMultiScatteringEccentricity;//[Offset: 0xe8, Size: 0x4]
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8]
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x80, Size: 0x10]
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0x90, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xa0, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x228, Size: 0x10]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x360, Size: 0x8]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x33d7e70
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x33d7d20
	float K2_GetScalarParameterValue(FName ParameterName);// 0x33d7bd0

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x2d0, Size: 0x8]

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	static void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x33dbc30
	static void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x33db960
	static void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x33db7a0

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10]
	FString LastError;//[Offset: 0x48, Size: 0x10]
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10]
	FString DISPLAYNAME;//[Offset: 0x10, Size: 0x10]
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10]
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0xc]
	Vector Right;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	float SnapRadius;//[Offset: 0xc, Size: 0x4]
	float SnapHeight;//[Offset: 0x10, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	byte Direction;//[Offset: 0x1c, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0xc]
	Vector LeftEnd;//[Offset: 0x3c, Size: 0xc]
	Vector RightStart;//[Offset: 0x48, Size: 0xc]
	Vector RightEnd;//[Offset: 0x54, Size: 0xc]

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	static void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0x33e2a00
	static void MarkPropertyDirty(Object* Object, FName PropertyName);// 0x33e2940

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4]
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4]
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10]
	FString ToolTip;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x28, Size: 0x8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Object*[] Objects;//[Offset: 0x38, Size: 0x10]
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10]
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	float DamagePerSec;//[Offset: 0x274, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x278, Size: 0x8]
	float PainInterval;//[Offset: 0x280, Size: 0x4]
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1]
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x284, Size: 0x1]
	Controller* DamageInstigator;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x38, Size: 0x48]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x38, Size: 0x8]
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x38, Size: 0x8]
	RawDistributionFloat DragScaleRaw;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x38, Size: 0x48]

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x30, Size: 0xc]
	Vector EndPoint1;//[Offset: 0x3c, Size: 0xc]
	RawDistributionFloat Range;//[Offset: 0x48, Size: 0x30]
	RawDistributionFloat Strength;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30]
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	byte SelectionMethod;//[Offset: 0xa4, Size: 0x1]
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	int LastSelIndex;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat Range;//[Offset: 0x78, Size: 0x30]
	RawDistributionFloat Strength;//[Offset: 0xa8, Size: 0x30]
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1]
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1]
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd8, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd8, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd8, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd8, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9, Size: 0x1]

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]
	DistributionFloat* Strength;//[Offset: 0x40, Size: 0x8]
	RawDistributionFloat StrengthRaw;//[Offset: 0x48, Size: 0x30]

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x30, Size: 0x1]
	BeamModifierOptions PositionOptions;//[Offset: 0x34, Size: 0x4]
	RawDistributionVector Position;//[Offset: 0x38, Size: 0x48]
	BeamModifierOptions TangentOptions;//[Offset: 0x80, Size: 0x4]
	RawDistributionVector Tangent;//[Offset: 0x88, Size: 0x48]
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	BeamModifierOptions StrengthOptions;//[Offset: 0xd4, Size: 0x4]
	RawDistributionFloat Strength;//[Offset: 0xd8, Size: 0x30]

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	int Frequency;//[Offset: 0x34, Size: 0x4]
	int Frequency_LowRange;//[Offset: 0x38, Size: 0x4]
	RawDistributionVector NoiseRange;//[Offset: 0x40, Size: 0x48]
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x88, Size: 0x30]
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	RawDistributionVector NoiseSpeed;//[Offset: 0xc0, Size: 0x48]
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	float NoiseLockRadius;//[Offset: 0x10c, Size: 0x4]
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	float NoiseLockTime;//[Offset: 0x114, Size: 0x4]
	float NoiseTension;//[Offset: 0x118, Size: 0x4]
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x120, Size: 0x30]
	int NoiseTessellation;//[Offset: 0x150, Size: 0x4]
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	float FrequencyDistance;//[Offset: 0x158, Size: 0x4]
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c, Size: 0x1]
	RawDistributionFloat NoiseScale;//[Offset: 0x160, Size: 0x30]

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x30, Size: 0x1]
	FName SourceName;//[Offset: 0x34, Size: 0x8]
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	RawDistributionVector Source;//[Offset: 0x40, Size: 0x48]
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	byte SourceTangentMethod;//[Offset: 0x8c, Size: 0x1]
	RawDistributionVector SourceTangent;//[Offset: 0x90, Size: 0x48]
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	RawDistributionFloat SourceStrength;//[Offset: 0xe0, Size: 0x30]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x30, Size: 0x1]
	FName TargetName;//[Offset: 0x34, Size: 0x8]
	RawDistributionVector Target;//[Offset: 0x40, Size: 0x48]
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	byte TargetTangentMethod;//[Offset: 0x8c, Size: 0x1]
	RawDistributionVector TargetTangent;//[Offset: 0x90, Size: 0x48]
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	RawDistributionFloat TargetStrength;//[Offset: 0xe0, Size: 0x30]
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	float LockRadius;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	byte UpdateMethod;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x48]
	RawDistributionVector DampingFactorRotation;//[Offset: 0x78, Size: 0x48]
	RawDistributionFloat MaxCollisions;//[Offset: 0xc0, Size: 0x30]
	byte CollisionCompletionOption;//[Offset: 0xf0, Size: 0x1]
	byte[] CollisionTypes;//[Offset: 0xf8, Size: 0x10]
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	RawDistributionFloat ParticleMass;//[Offset: 0x118, Size: 0x30]
	float DirScalar;//[Offset: 0x148, Size: 0x4]
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1]
	float VerticalFudgeFactor;//[Offset: 0x150, Size: 0x4]
	RawDistributionFloat DelayAmount;//[Offset: 0x158, Size: 0x30]
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1]
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 0x1]
	float MaxCollisionDistance;//[Offset: 0x18c, Size: 0x4]

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30]
	float Friction;//[Offset: 0x90, Size: 0x4]
	float RandomSpread;//[Offset: 0x94, Size: 0x4]
	float RandomDistribution;//[Offset: 0x98, Size: 0x4]
	float RadiusScale;//[Offset: 0x9c, Size: 0x4]
	float RadiusBias;//[Offset: 0xa0, Size: 0x4]
	byte Response;//[Offset: 0xa4, Size: 0x1]
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1]

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat StartAlpha;//[Offset: 0x78, Size: 0x30]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20]

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat AlphaOverLife;//[Offset: 0x78, Size: 0x30]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x78, Size: 0x30]
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x40, Size: 0x30]
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]
	RawDistributionVector InheritVelocityScale;//[Offset: 0x78, Size: 0x48]
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xc0, Size: 0x10]
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x48]
	RawDistributionVector UpperRightCorner;//[Offset: 0x78, Size: 0x48]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	float SpawnFraction;//[Offset: 0x34, Size: 0x4]
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x48]
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x80, Size: 0x30]
	RawDistributionFloat RadiusScale;//[Offset: 0xb0, Size: 0x30]
	RawDistributionFloat LightExponent;//[Offset: 0xe0, Size: 0x30]
	LightingChannels LightingChannels;//[Offset: 0x110, Size: 0x1]
	float VolumetricScatteringIntensity;//[Offset: 0x114, Size: 0x4]
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x48]
	float DistributeOverNPoints;//[Offset: 0x78, Size: 0x4]
	float DistributeThreshold;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x30, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x34, Size: 0xc]
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x40, Size: 0x10]
	byte SelectionMethod;//[Offset: 0x50, Size: 0x1]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x58, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x5c, Size: 0x8]
	int NumPreSelectedIndices;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8]
	Vector Offset;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x48]
	RawDistributionVector LocationOffset;//[Offset: 0x78, Size: 0x48]
	RawDistributionVector ScaleFactor;//[Offset: 0xc0, Size: 0x48]
	RawDistributionVector Direction;//[Offset: 0x108, Size: 0x48]

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x30, Size: 0x8]
	byte SelectionMethod;//[Offset: 0x38, Size: 0x1]
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	float InheritSourceVelocityScale;//[Offset: 0x40, Size: 0x4]
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	float InheritSourceRotationScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	RawDistributionFloat VelocityScale;//[Offset: 0x38, Size: 0x30]
	RawDistributionVector StartLocation;//[Offset: 0x68, Size: 0x48]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	RawDistributionFloat StartRadius;//[Offset: 0xb8, Size: 0x30]
	RawDistributionFloat StartHeight;//[Offset: 0xe8, Size: 0x30]
	byte HeightAxis;//[Offset: 0x118, Size: 0x1]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x120, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xb0, Size: 0x30]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xe0, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x48]
	RawDistributionFloat Height;//[Offset: 0x78, Size: 0x30]
	RawDistributionFloat Angle;//[Offset: 0xa8, Size: 0x30]
	RawDistributionFloat Thickness;//[Offset: 0xd8, Size: 0x30]

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x30, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x34, Size: 0xc]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x44, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x48, Size: 0x8]
	FName[] ValidAssociatedBones;//[Offset: 0x50, Size: 0x10]
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	Vector NormalToCompare;//[Offset: 0x64, Size: 0xc]
	float NormalCheckToleranceDegrees;//[Offset: 0x70, Size: 0x4]
	float NormalCheckTolerance;//[Offset: 0x74, Size: 0x4]
	int[] ValidMaterialIndices;//[Offset: 0x78, Size: 0x10]
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	UInt32Property InheritUVChannel;//[Size: 0x4]

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x48]
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20]

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x48]
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10]
	int UpdateFlags;//[Offset: 0x40, Size: 0x4]
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	byte ValueMethod;//[Offset: 0xc, Size: 0x1]
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	RawDistributionFloat ParamValue;//[Offset: 0x18, Size: 0x30]

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20]

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30]
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x78, Size: 0x20]

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x48]
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x48]
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x30, Size: 0x8]
	Vector2D MaxScale;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x38, Size: 0x4]
	float MovementTolerance;//[Offset: 0x3c, Size: 0x4]
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x40, Size: 0x30]
	float MaxFrameDistance;//[Offset: 0x70, Size: 0x4]
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 0x1]
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74, Size: 0x1]
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30]
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8]
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4]
	byte BoundingMode;//[Offset: 0x38, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	RawDistributionFloat FrameRate;//[Offset: 0x78, Size: 0x30]
	int StartingFrame;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x30, Size: 0x1]
	FName SourceName;//[Offset: 0x34, Size: 0x8]
	RawDistributionFloat SourceStrength;//[Offset: 0x40, Size: 0x30]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	int SourceOffsetCount;//[Offset: 0x74, Size: 0x4]
	Vector[] SourceOffsetDefaults;//[Offset: 0x78, Size: 0x10]
	byte SelectionMethod;//[Offset: 0x88, Size: 0x1]
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	float TilingDistance;//[Offset: 0x34, Size: 0x4]
	float DistanceTessellationStepSize;//[Offset: 0x38, Size: 0x4]
	float TangentTessellationStepSize;//[Offset: 0x3c, Size: 0x4]
	float WidthTessellationStepSize;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x30, Size: 0x1]
	int TextureTile;//[Offset: 0x34, Size: 0x4]
	float TextureTileDistance;//[Offset: 0x38, Size: 0x4]
	int Sheets;//[Offset: 0x3c, Size: 0x4]
	int MaxBeamCount;//[Offset: 0x40, Size: 0x4]
	float Speed;//[Offset: 0x44, Size: 0x4]
	int InterpolationPoints;//[Offset: 0x48, Size: 0x4]
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	int UpVectorStepSize;//[Offset: 0x50, Size: 0x4]
	FName BranchParentName;//[Offset: 0x54, Size: 0x8]
	RawDistributionFloat Distance;//[Offset: 0x60, Size: 0x30]
	byte TaperMethod;//[Offset: 0x90, Size: 0x1]
	RawDistributionFloat TaperFactor;//[Offset: 0x98, Size: 0x30]
	RawDistributionFloat TaperScale;//[Offset: 0xc8, Size: 0x30]
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 0x1]
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 0x1]
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x280]
	GPUSpriteResourceData ResourceData;//[Offset: 0x2b0, Size: 0x160]
	float CameraMotionBlurAmount;//[Offset: 0x410, Size: 0x4]
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 0x1]

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8]
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8]
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10]
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0x70]
	FloatDistribution VectorFieldScale;//[Offset: 0xa0, Size: 0x20]
	FloatDistribution DragCoefficient;//[Offset: 0xc0, Size: 0x20]
	FloatDistribution PointAttractorStrength;//[Offset: 0xe0, Size: 0x20]
	FloatDistribution Resilience;//[Offset: 0x100, Size: 0x20]
	Vector ConstantAcceleration;//[Offset: 0x120, Size: 0xc]
	Vector PointAttractorPosition;//[Offset: 0x12c, Size: 0xc]
	float PointAttractorRadiusSq;//[Offset: 0x138, Size: 0x4]
	Vector OrbitOffsetBase;//[Offset: 0x13c, Size: 0xc]
	Vector OrbitOffsetRange;//[Offset: 0x148, Size: 0xc]
	Vector2D InvMaxSize;//[Offset: 0x154, Size: 0x8]
	float InvRotationRateScale;//[Offset: 0x15c, Size: 0x4]
	float MaxLifetime;//[Offset: 0x160, Size: 0x4]
	int MaxParticleCount;//[Offset: 0x164, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x168, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x169, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16c, Size: 0x1]
	byte CollisionMode;//[Offset: 0x170, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x178, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x17c, Size: 0x4]
	RawDistributionVector DynamicColor;//[Offset: 0x180, Size: 0x48]
	RawDistributionFloat DynamicAlpha;//[Offset: 0x1c8, Size: 0x30]
	RawDistributionVector DynamicColorScale;//[Offset: 0x1f8, Size: 0x48]
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x240, Size: 0x30]

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	Rotator MinInitialRotation;//[Offset: 0x40, Size: 0xc]
	Rotator MaxInitialRotation;//[Offset: 0x4c, Size: 0xc]
	Rotator RotationRate;//[Offset: 0x58, Size: 0xc]
	float Intensity;//[Offset: 0x64, Size: 0x4]
	float Tightness;//[Offset: 0x68, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x1c]
	float Intensity;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10]
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10]
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorBias;//[Offset: 0x40, Size: 0x10]
	Vector4 MiscScale;//[Offset: 0x50, Size: 0x10]
	Vector4 MiscBias;//[Offset: 0x60, Size: 0x10]
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70, Size: 0x10]
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80, Size: 0x10]
	Vector4 SubImageSize;//[Offset: 0x90, Size: 0x10]
	Vector4 SizeBySpeed;//[Offset: 0xa0, Size: 0x10]
	Vector ConstantAcceleration;//[Offset: 0xb0, Size: 0xc]
	Vector OrbitOffsetBase;//[Offset: 0xbc, Size: 0xc]
	Vector OrbitOffsetRange;//[Offset: 0xc8, Size: 0xc]
	Vector OrbitFrequencyBase;//[Offset: 0xd4, Size: 0xc]
	Vector OrbitFrequencyRange;//[Offset: 0xe0, Size: 0xc]
	Vector OrbitPhaseBase;//[Offset: 0xec, Size: 0xc]
	Vector OrbitPhaseRange;//[Offset: 0xf8, Size: 0xc]
	float GlobalVectorFieldScale;//[Offset: 0x104, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x108, Size: 0x4]
	float PerParticleVectorFieldScale;//[Offset: 0x10c, Size: 0x4]
	float PerParticleVectorFieldBias;//[Offset: 0x110, Size: 0x4]
	float DragCoefficientScale;//[Offset: 0x114, Size: 0x4]
	float DragCoefficientBias;//[Offset: 0x118, Size: 0x4]
	float ResilienceScale;//[Offset: 0x11c, Size: 0x4]
	float ResilienceBias;//[Offset: 0x120, Size: 0x4]
	float CollisionRadiusScale;//[Offset: 0x124, Size: 0x4]
	float CollisionRadiusBias;//[Offset: 0x128, Size: 0x4]
	float CollisionTimeBias;//[Offset: 0x12c, Size: 0x4]
	float CollisionRandomSpread;//[Offset: 0x130, Size: 0x4]
	float CollisionRandomDistribution;//[Offset: 0x134, Size: 0x4]
	float OneMinusFriction;//[Offset: 0x138, Size: 0x4]
	float RotationRateScale;//[Offset: 0x13c, Size: 0x4]
	float CameraMotionBlurAmount;//[Offset: 0x140, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x144, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x145, Size: 0x1]
	Vector2D PivotOffset;//[Offset: 0x148, Size: 0x8]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x154, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x158, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8]
	float LODSizeScale;//[Offset: 0x40, Size: 0x4]
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1]
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1]
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1]
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1]
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x48]
	byte AxisLockOption;//[Offset: 0x90, Size: 0x1]
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1]
	byte CameraFacingUpAxisOption;//[Offset: 0x92, Size: 0x1]
	byte CameraFacingOption;//[Offset: 0x93, Size: 0x1]
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x30, Size: 0x4]
	int SheetsPerTrail;//[Offset: 0x34, Size: 0x4]
	int MaxTrailCount;//[Offset: 0x38, Size: 0x4]
	int MaxParticleInTrailCount;//[Offset: 0x3c, Size: 0x4]
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 0x1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 0x1]
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 0x1]
	byte RenderAxis;//[Offset: 0x44, Size: 0x1]
	float TangentSpawningScalar;//[Offset: 0x48, Size: 0x4]
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	float TilingDistance;//[Offset: 0x50, Size: 0x4]
	float DistanceTessellationStepSize;//[Offset: 0x54, Size: 0x4]
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	float TangentTessellationScalar;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float GlobalVectorFieldScale;//[Offset: 0x34, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8]
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x50, Size: 0xc]
	float Intensity;//[Offset: 0x5c, Size: 0x4]
	float Tightness;//[Offset: 0x60, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x64, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x64, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x64, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x30, Size: 0xc]
	Vector MaxInitialRotation;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x38, Size: 0x48]
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x80, Size: 0x30]

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0, Size: 0x20]

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x38, Size: 0x30]
	RawDistributionFloat Velocity;//[Offset: 0x68, Size: 0x30]
	Vector Direction;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x38, Size: 0x48]

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x38, Size: 0x48]
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	Vector LastRemoteNoisePosition;//[Offset: 0xb4, Size: 0xc]
	float NoiseLifetime;//[Offset: 0xc0, Size: 0x4]
	float LastRemoteNoiseVolume;//[Offset: 0xc4, Size: 0x4]
	float LastRemoteNoiseTime;//[Offset: 0xc8, Size: 0x4]
	float LastLocalNoiseVolume;//[Offset: 0xcc, Size: 0x4]
	float LastLocalNoiseTime;//[Offset: 0xd0, Size: 0x4]
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x33f32a0

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb0, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xb8, Size: 0x8]
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x33f4e20
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x33f4d90
	Transform GetBodyTargetTransform(FName BodyName);// 0x33f2bc0
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x33f29a0
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x33f28b0
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x33f2750

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x228, Size: 0x8]
	Actor* ConstraintActor1;//[Offset: 0x230, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x238, Size: 0x8]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 0x1]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x1f8, Size: 0x8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x200, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x208, Size: 0x8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x210, Size: 0x8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x228, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x230, Size: 0x10]
	ConstraintInstance ConstraintInstance;//[Offset: 0x240, Size: 0x1c0]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x33f4cc0
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x33f4c30
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x33f4b60
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x33f4a90
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x33f49c0
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x33f4930
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x33f4800
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x33f4770
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x33f4640
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x33f4520
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x33f4450
	void SetDisableCollision(bool bDisableCollision);// 0x33f43c0
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x33f42f0
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x33f41c0
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x33f40a0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x33f3f40
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x33f3de0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x33f3d10
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x33f3c80
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x33f3bb0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x33f3ae0
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x33f3a10
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x33f3940
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x33f38b0
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x33f37e0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x33f36c0
	void SetAngularDriveMode(byte DriveMode);// 0x33f3640
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x33f3570
	bool IsBroken();// 0x33f3060
	float GetCurrentTwist();// 0x33f2e20
	float GetCurrentSwing2();// 0x33f2df0
	float GetCurrentSwing1();// 0x33f2dc0
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x33f2c80
	void BreakConstraint();// 0x33f2ae0

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb0, Size: 0x8]
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	float LinearDamping;//[Offset: 0xc4, Size: 0x4]
	float LinearStiffness;//[Offset: 0xc8, Size: 0x4]
	float AngularDamping;//[Offset: 0xcc, Size: 0x4]
	float AngularStiffness;//[Offset: 0xd0, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x140, Size: 0x4]
	void SetTargetRotation(Rotator NewRotation);// 0x33f7ca0
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x33f7bc0
	void SetTargetLocation(Vector NewLocation);// 0x33f7b30
	void SetLinearStiffness(float NewLinearStiffness);// 0x33f7ab0
	void SetLinearDamping(float NewLinearDamping);// 0x33f7a30
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x33f79b0
	void SetAngularStiffness(float NewAngularStiffness);// 0x33f7930
	void SetAngularDamping(float NewAngularDamping);// 0x33f78b0
	void ReleaseComponent();// 0xd59ac0
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x33f7630
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x33f7510
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x33f73a0
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x33f72c0
	PrimitiveComponent* GetGrabbedComponent();// 0x24d3f60

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x1f8, Size: 0x4]
	float SpringDamping;//[Offset: 0x1fc, Size: 0x4]
	float SpringLengthAtRest;//[Offset: 0x200, Size: 0x4]
	float SpringRadius;//[Offset: 0x204, Size: 0x4]
	byte SpringChannel;//[Offset: 0x208, Size: 0x1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	float SpringCompression;//[Offset: 0x20c, Size: 0x4]
	Vector GetSpringRestingPoint();// 0x33f7280
	Vector GetSpringDirection();// 0x33f7240
	Vector GetSpringCurrentEndPoint();// 0x33f7200
	float GetNormalizedCompressionScalar();// 0x33f71d0

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x1f8, Size: 0x4]

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x228, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x238, Size: 0x8]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	void OnInterpToggle(bool bEnable);// 0x33f7820

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2b0, Size: 0x8]
	float NormalDistortionStrength;//[Offset: 0x2b8, Size: 0x4]
	float PrefilterRoughness;//[Offset: 0x2bc, Size: 0x4]
	float PrefilterRoughnessDistance;//[Offset: 0x2c0, Size: 0x4]
	int ScreenPercentage;//[Offset: 0x2c4, Size: 0x4]
	float ExtraFOV;//[Offset: 0x2c8, Size: 0x4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x2cc, Size: 0x4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2d0, Size: 0x4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2d4, Size: 0x4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2d8, Size: 0x4]
	float AngleFromPlaneFadeStart;//[Offset: 0x2dc, Size: 0x4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x2e0, Size: 0x4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x1f8, Size: 0x1]
	byte CaptureSource;//[Offset: 0x1f9, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x200, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x210, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x220, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x230, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x240, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x244, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x248, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x250, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x290, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x341f4a0
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x341f3d0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x341ef70
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x341ed90
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x341ecc0
	void HideComponent(PrimitiveComponent* InComponent);// 0x341c540
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x341c470
	void ClearShowOnlyComponents();// 0x341bb10
	void ClearHiddenComponents();// 0x341baf0

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x280, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x288, Size: 0x8]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc0, Size: 0x10]
	bool SupportsConvertibleLaptops();// 0x33f7d30
	void PlatformEventDelegate__DelegateSignature();// 0x197e4f0
	bool IsInTabletMode();// 0x33f77f0
	bool IsInLaptopMode();// 0x33f77c0

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10]
	int ResponseCode;//[Offset: 0x38, Size: 0x4]
	int Tag;//[Offset: 0x3c, Size: 0x4]
	FString StringResponse;//[Offset: 0x40, Size: 0x10]
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10]
	int GetNumHeaders();// 0xb7a570
	FString GetHeaderValue(FString HeaderName);// 0x33f70e0
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x33f6f80

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x238, Size: 0x8]
	void SetRadius(float NewRadius);// 0x3410b80
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x340fc70

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x340e830
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x340e710
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x340e5f0
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x340e4d0
	void ResetBoneTransformByName(FName BoneName);// 0x340ddc0
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x340bca0
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x340bbc0
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x340bae0
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x340ba00
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x340b6a0

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x90]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	int BasePoseIndex;//[Offset: 0x114, Size: 0x4]
	FName RetargetSource;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10]
	FName[] Tracks;//[Offset: 0x10, Size: 0x10]
	<FName,int> TrackMap;//[Offset: 0x20, Size: 0x50]
	PoseData[] Poses;//[Offset: 0x70, Size: 0x10]
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10]
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 0x50]
	float[] CurveData;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x28, Size: 0x8]
	Color PoseWatchColour;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x200, Size: 0x550]
	float Priority;//[Offset: 0x750, Size: 0x4]
	float BlendRadius;//[Offset: 0x754, Size: 0x4]
	float BlendWeight;//[Offset: 0x758, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75c, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x340ad00

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x270, Size: 0x550]
	float Priority;//[Offset: 0x7c0, Size: 0x4]
	float BlendRadius;//[Offset: 0x7c4, Size: 0x4]
	float BlendWeight;//[Offset: 0x7c8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x330f490

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x260, Size: 0x10]
	Actor*[] OverrideInvisibleActors;//[Offset: 0x270, Size: 0x10]
	FName[] OverrideInvisibleLevels;//[Offset: 0x280, Size: 0x10]

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc]
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10]
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10]
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf0, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf4, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf8, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf8, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf8, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf8, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf9, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf9, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf9, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xfc, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x100, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x10c, Size: 0x4]
	float Buoyancy;//[Offset: 0x110, Size: 0x4]
	float Bounciness;//[Offset: 0x114, Size: 0x4]
	float Friction;//[Offset: 0x118, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x11c, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x120, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x128, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x138, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x160, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x164, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x3413cd0
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x3413c40
	void SetInterpolatedComponent(SceneComponent* Component);// 0x3413aa0
	void ResetInterpolation();// 0x24caf70
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x197e4f0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x197e4f0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x3413830
	Vector LimitVelocity(Vector NewVelocity);// 0x3413780
	bool IsVelocityUnderSimulationThreshold();// 0x3413720
	bool IsInterpolationComplete();// 0x34136f0

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x228, Size: 0x8]
	void ToggleForce();// 0x14f9ae0
	void FireImpulse();// 0x14c5b50
	void EnableForce();// 0xbc0f10
	void DisableForce();// 0x14f9ac0

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x1f8, Size: 0x4]
	byte Falloff;//[Offset: 0x1fc, Size: 0x1]
	float ImpulseStrength;//[Offset: 0x200, Size: 0x4]
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	float ForceStrength;//[Offset: 0x208, Size: 0x4]
	float DestructibleDamage;//[Offset: 0x20c, Size: 0x4]
	byte[] ObjectTypesToAffect;//[Offset: 0x210, Size: 0x10]
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x3413920
	void FireImpulse();// 0x24cc020
	void AddObjectTypeToAffect(byte ObjectType);// 0x3413670

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x348, Size: 0x4]
	float SourceHeight;//[Offset: 0x34c, Size: 0x4]
	float BarnDoorAngle;//[Offset: 0x350, Size: 0x4]
	float BarnDoorLength;//[Offset: 0x354, Size: 0x4]
	Texture* SourceTexture;//[Offset: 0x358, Size: 0x8]
	void SetSourceWidth(float bNewValue);// 0x3413bc0
	void SetSourceTexture(Texture* bNewValue);// 0x3413b30
	void SetSourceHeight(float NewValue);// 0x340fcf0
	void SetBarnDoorLength(float NewValue);// 0x3413a20
	void SetBarnDoorAngle(float NewValue);// 0x34139a0

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4]
	byte MobileMSAASampleCount;//[Offset: 0x40, Size: 0x1]
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bMobileAllowSoftwareOcclusionCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 0x1]
	float MinScreenRadiusForLights;//[Offset: 0x48, Size: 0x4]
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x4c, Size: 0x4]
	float MinScreenRadiusForCSMdepth;//[Offset: 0x50, Size: 0x4]
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	PerPlatformFloat ScreenSizeCullingDefaultSize;//[Offset: 0x58, Size: 0x4]
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	UInt32Property VirtualTextureTileSize;//[Size: 0x4]
	UInt32Property VirtualTextureTileBorderSize;//[Size: 0x4]
	UInt32Property VirtualTextureFeedbackFactor;//[Size: 0x4]
	bool bVirtualTextureEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bVirtualTextureEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool bSupportShadingModelPreintegratedSkin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool bSupportShadingModelClearCoat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]
	bool bSupportShadingModelHair;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c, Size: 0x1]
	bool bSupportShadingModelSingleLayerWater;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6c, Size: 0x1]
	bool bSupportShadingModelThinTranslucent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6c, Size: 0x1]
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c, Size: 0x1]
	int ReflectionCaptureResolution;//[Offset: 0x70, Size: 0x4]
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 0x1]
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74, Size: 0x1]
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74, Size: 0x1]
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x74, Size: 0x1]
	bool bAllowPrecomputedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x74, Size: 0x1]
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x74, Size: 0x1]
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x74, Size: 0x1]
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75, Size: 0x1]
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75, Size: 0x1]
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x75, Size: 0x1]
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x78, Size: 0x4]
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	byte TranslucentSortPolicy;//[Offset: 0x80, Size: 0x1]
	Vector TranslucentSortAxis;//[Offset: 0x84, Size: 0xc]
	byte CustomDepthStencil;//[Offset: 0x90, Size: 0x1]
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0x98, Size: 0x1]
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 0x1]
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 0x1]
	byte DefaultFeatureAutoExposure;//[Offset: 0xa0, Size: 0x1]
	float DefaultFeatureAutoExposureBias;//[Offset: 0xa4, Size: 0x4]
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bUsePreExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	bool bEnablePreExposureOnlyInTheEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 0x1]
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1]
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1]
	bool bSSGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1]
	byte DefaultFeatureAntiAliasing;//[Offset: 0xac, Size: 0x1]
	enum DefaultLightUnits;//[Offset: 0xad, Size: 0x1]
	byte DefaultBackBufferPixelFormat;//[Offset: 0xae, Size: 0x1]
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	byte EarlyZPass;//[Offset: 0xb4, Size: 0x1]
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]
	byte ClearSceneMethod;//[Offset: 0xbc, Size: 0x1]
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	int GPUSimulationTextureSizeX;//[Offset: 0xc4, Size: 0x4]
	int GPUSimulationTextureSizeY;//[Offset: 0xc8, Size: 0x4]
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	byte GBufferFormat;//[Offset: 0xd0, Size: 0x1]
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 0x1]
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd4, Size: 0x1]
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd4, Size: 0x1]
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd4, Size: 0x1]
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd4, Size: 0x1]
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd4, Size: 0x1]
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd4, Size: 0x1]
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd5, Size: 0x1]
	float WireframeCullThreshold;//[Offset: 0xd8, Size: 0x4]
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 0x1]
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc, Size: 0x1]
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdc, Size: 0x1]
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdc, Size: 0x1]
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xdc, Size: 0x1]
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xdc, Size: 0x1]
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xdc, Size: 0x1]
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xdc, Size: 0x1]
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd, Size: 0x1]
	enum DefaultSkinCacheBehavior;//[Offset: 0xe0, Size: 0x1]
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xe4, Size: 0x4]
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	UInt32Property MobileNumDynamicPointLights;//[Size: 0x4]
	bool bMobileDynamicPointLightsUseStaticBranch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool bLPV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 0x1]
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf1, Size: 0x1]
	int UnlimitedBonInfluencesThreshold;//[Offset: 0xf4, Size: 0x4]
	byte MobilePlanarReflectionMode;//[Offset: 0xf8, Size: 0x1]
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0xf9, Size: 0x1]
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0xfa, Size: 0x1]
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0x100, Size: 0x18]
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0x118, Size: 0x18]
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0x130, Size: 0x18]

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10]
	Node[] Nodes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8]
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1]
	FName ParentSpace;//[Offset: 0x4, Size: 0x8]
	float Weight;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName ParentName;//[Offset: 0x8, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	FString DISPLAYNAME;//[Offset: 0x40, Size: 0x10]
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xf0, Size: 0xc]
	Vector PivotTranslation;//[Offset: 0xfc, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x1f8, Size: 0x28]
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x228, Size: 0x8]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	UInt32Property ScalabilityGroup;//[Size: 0x4]
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x240, Size: 0x8]
	int StreamLowMips;//[Offset: 0x248, Size: 0x4]
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1]
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1]
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x3417370

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8]
	UInt64Property BuildHash;//[Size: 0x8]

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x110, Size: 0xc]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x238, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x33f7820

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2b0, Size: 0x1]
	float FOVAngle;//[Offset: 0x2b4, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2b8, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2c0, Size: 0x8]
	byte CompositeMode;//[Offset: 0x2c8, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 0x550]
	float PostProcessBlendWeight;//[Offset: 0x820, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x824, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x828, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x830, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x874, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x880, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88c, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88c, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1]
	void CaptureScene();// 0x341bad0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x341b980

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2b0, Size: 0x8]
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x2c0, Size: 0x8]
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x2c8, Size: 0x8]
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x2d0, Size: 0x8]
	float IPD;//[Offset: 0x2d8, Size: 0x4]
	void CaptureScene();// 0x341bad0

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xf0, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xf4, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x104, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x105, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x105, Size: 0x1]

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x238, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x33f7820

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x110, Size: 0x1]

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x238, Size: 0x8]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x240, Size: 0x8]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x248, Size: 0x8]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x250, Size: 0x8]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x258, Size: 0x8]
	void OnRep_ReplicatedPhysAsset();// 0xbc0f10
	void OnRep_ReplicatedMesh();// 0x14c5b50
	void OnRep_ReplicatedMaterial1();// 0x14f9ae0
	void OnRep_ReplicatedMaterial0();// 0x14f9ac0

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x1f8, Size: 0x1]
	float BottomRadius;//[Offset: 0x1fc, Size: 0x4]
	Color GroundAlbedo;//[Offset: 0x200, Size: 0x4]
	float AtmosphereHeight;//[Offset: 0x204, Size: 0x4]
	float MultiScatteringFactor;//[Offset: 0x208, Size: 0x4]
	float TraceSampleCountScale;//[Offset: 0x20c, Size: 0x4]
	float RayleighScatteringScale;//[Offset: 0x210, Size: 0x4]
	LinearColor RayleighScattering;//[Offset: 0x214, Size: 0x10]
	float RayleighExponentialDistribution;//[Offset: 0x224, Size: 0x4]
	float MieScatteringScale;//[Offset: 0x228, Size: 0x4]
	LinearColor MieScattering;//[Offset: 0x22c, Size: 0x10]
	float MieAbsorptionScale;//[Offset: 0x23c, Size: 0x4]
	LinearColor MieAbsorption;//[Offset: 0x240, Size: 0x10]
	float MieAnisotropy;//[Offset: 0x250, Size: 0x4]
	float MieExponentialDistribution;//[Offset: 0x254, Size: 0x4]
	float OtherAbsorptionScale;//[Offset: 0x258, Size: 0x4]
	LinearColor OtherAbsorption;//[Offset: 0x25c, Size: 0x10]
	TentDistribution OtherTentDistribution;//[Offset: 0x26c, Size: 0xc]
	LinearColor SkyLuminanceFactor;//[Offset: 0x278, Size: 0x10]
	float AerialPespectiveViewDistanceScale;//[Offset: 0x288, Size: 0x4]
	float HeightFogContribution;//[Offset: 0x28c, Size: 0x4]
	float TransmittanceMinLightElevationAngle;//[Offset: 0x290, Size: 0x4]
	float AerialPerspectiveStartDepth;//[Offset: 0x294, Size: 0x4]
	Guid bStaticLightingBuiltGUID;//[Offset: 0x2bc, Size: 0x10]
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x3431b80
	void SetRayleighScatteringScale(float NewValue);// 0x3431b00
	void SetRayleighScattering(LinearColor NewValue);// 0x3431a70
	void SetRayleighExponentialDistribution(float NewValue);// 0x34319f0
	void SetOtherAbsorptionScale(float NewValue);// 0x33c0bf0
	void SetOtherAbsorption(LinearColor NewValue);// 0x3431960
	void SetMieScatteringScale(float NewValue);// 0x34316d0
	void SetMieScattering(LinearColor NewValue);// 0x3431640
	void SetMieExponentialDistribution(float NewValue);// 0x33c0b70
	void SetMieAnisotropy(float NewValue);// 0x34315c0
	void SetMieAbsorptionScale(float NewValue);// 0x3431540
	void SetMieAbsorption(LinearColor NewValue);// 0x34314b0
	void SetHeightFogContribution(float NewValue);// 0x3431210
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x3430fe0
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x3430ef0

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4]
	float TipValue;//[Offset: 0x4, Size: 0x4]
	float Width;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x14c5b50

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	byte SourceType;//[Offset: 0x231, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x238, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x240, Size: 0x4]
	int CubemapResolution;//[Offset: 0x244, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x248, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x250, Size: 0x10]
	float OcclusionMaxDistance;//[Offset: 0x260, Size: 0x4]
	float Contrast;//[Offset: 0x264, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x268, Size: 0x4]
	float MinOcclusion;//[Offset: 0x26c, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x270, Size: 0x4]
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 0x1]
	float CloudAmbientOcclusionStrength;//[Offset: 0x278, Size: 0x4]
	float CloudAmbientOcclusionExtent;//[Offset: 0x27c, Size: 0x4]
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x280, Size: 0x4]
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x284, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x288, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x338, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x3431c10
	void SetOcclusionTint(out const Color InTint);// 0x34318d0
	void SetOcclusionExponent(float InOcclusionExponent);// 0x3431850
	void SetOcclusionContrast(float InOcclusionContrast);// 0x34317d0
	void SetMinOcclusion(float InMinOcclusion);// 0x3431750
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x3431420
	void SetLightColor(LinearColor NewLightColor);// 0x3431390
	void SetIntensity(float NewIntensity);// 0x3431310
	void SetIndirectLightingIntensity(float NewIntensity);// 0x3431290
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x34310f0
	void SetCubemap(TextureCube* NewCubemap);// 0x3431060
	void RecaptureSky();// 0x3430fc0

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1]
	SoundNode* FirstNode;//[Offset: 0x1c0, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x1cc, Size: 0x4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x1d0, Size: 0x3a0]
	float SubtitlePriority;//[Offset: 0x570, Size: 0x4]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578, Size: 0x1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578, Size: 0x1]
	int CookedQualityIndex;//[Offset: 0x57c, Size: 0x4]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1]
	FString DISPLAYNAME;//[Offset: 0x8, Size: 0x10]
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3a0]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x48, Size: 0x4]
	float DelayMax;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8]
	DialogueContext Context;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4]
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4]
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4]
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4]
	float Volume;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x48, Size: 0x4]
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float SmoothingInterpSpeed;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x48, Size: 0x4]
	float LoopEnd;//[Offset: 0x4c, Size: 0x4]
	float DurationAfterLoop;//[Offset: 0x50, Size: 0x4]
	int LoopCount;//[Offset: 0x54, Size: 0x4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x60, Size: 0x8]
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x68, Size: 0x8]
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x70, Size: 0x88]
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf8, Size: 0x88]
	float PitchMin;//[Offset: 0x180, Size: 0x4]
	float PitchMax;//[Offset: 0x184, Size: 0x4]
	float VolumeMin;//[Offset: 0x188, Size: 0x4]
	float VolumeMax;//[Offset: 0x18c, Size: 0x4]

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x48, Size: 0x4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x48, Size: 0x4]
	float PitchMax;//[Offset: 0x4c, Size: 0x4]
	float VolumeMin;//[Offset: 0x50, Size: 0x4]
	float VolumeMax;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x48, Size: 0x20]
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x68, Size: 0x20]

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float Default;//[Offset: 0x8, Size: 0x4]
	float MinInput;//[Offset: 0xc, Size: 0x4]
	float MaxInput;//[Offset: 0x10, Size: 0x4]
	float MinOutput;//[Offset: 0x14, Size: 0x4]
	float MaxOutput;//[Offset: 0x18, Size: 0x4]
	byte ParamMode;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	float AmplitudeMin;//[Offset: 0x4c, Size: 0x4]
	float AmplitudeMax;//[Offset: 0x50, Size: 0x4]
	float FrequencyMin;//[Offset: 0x54, Size: 0x4]
	float FrequencyMax;//[Offset: 0x58, Size: 0x4]
	float OffsetMin;//[Offset: 0x5c, Size: 0x4]
	float OffsetMax;//[Offset: 0x60, Size: 0x4]
	float CenterMin;//[Offset: 0x64, Size: 0x4]
	float CenterMax;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10]
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10]
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4]
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4]
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28]
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x40, Size: 0x8]
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x48, Size: 0x8]
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x50, Size: 0x10]
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x38, Size: 0x8]
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8]
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x38, Size: 0x8]
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x40, Size: 0x8]
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x48, Size: 0x8]
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x50, Size: 0x8]
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x58, Size: 0x8]
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x280, Size: 0x4]
	float CaptureDistanceScale;//[Offset: 0x284, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x450, Size: 0x70]
	InterpCurveVector SplineInfo;//[Offset: 0x4c0, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4d8, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4f0, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x508, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x524, Size: 0x4]
	float Duration;//[Offset: 0x528, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 0x1]
	float LoopPosition;//[Offset: 0x534, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x538, Size: 0xc]
	void UpdateSpline();// 0x33fe000
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x34402d0
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x3440160
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x343f910
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x343ff90
	void SetTangentColor(out const LinearColor TangentColor);// 0x343f910
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x343fe20
	void SetSplineWorldPoints(out const Vector[] Points);// 0x343fd70
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x343fb30
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x343fc40
	void SetSplineLocalPoints(out const Vector[] Points);// 0x343fa80
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x343f910
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x343f800
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x343f690
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x343f520
	void SetDrawDebug(bool bShow);// 0x343f490
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x343f3b0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x343f290
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x343f1c0
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x343f0f0
	bool IsClosedLoop();// 0x343f0c0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x343f010
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x343ef20
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x343ee70
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x343ed80
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x343ecd0
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x343ec20
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x343eb30
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x343ea80
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x343e9a0
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x343e8c0
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343e790
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343e6b0
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343e5c0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343e4d0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x343e330
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x343e1e0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x343e080
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x343df20
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343ddf0
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343c460
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343dd00
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343dc10
	byte GetSplinePointType(int PointIndex);// 0x343db70
	float GetSplineLength();// 0x343db40
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x343d9c0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x343d910
	Vector GetScaleAtSplineInputKey(float InKey);// 0x343d870
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x343d7d0
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343d6a0
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343d5c0
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343d4d0
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343d3e0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343d2c0
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343d1f0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343d110
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343d030
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343cf00
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343ce20
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343cd30
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343cc40
	int GetNumberOfSplineSegments();// 0x343cc10
	int GetNumberOfSplinePoints();// 0x343cbe0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343cab0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343c9d0
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343c8e0
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343c7f0
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x343c670
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x343c540
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343c460
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x343c3c0
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x343c2f0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x343c220
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x343c180
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x343c0e0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x343bfb0
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343bed0
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x343bde0
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x343bcf0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x343bc50
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x343bb70
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343ba80
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x343b920
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343b830
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x343b780
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343b690
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343b5b0
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343b4c0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343b3d0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x343b330
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x343b240
	void ClearSplinePoints(bool bUpdateSpline);// 0x343b1b0
	void AddSplineWorldPoint(out const Vector Position);// 0x343b110
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x343afa0
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x343ae80
	void AddSplineLocalPoint(out const Vector Position);// 0x343adf0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x343acf0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x343abe0

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
	UInt32Property Version;//[Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4e8, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x540, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x54c, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x550, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x560, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x568, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56c, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x56d, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x570, Size: 0x4]
	void UpdateMesh();// 0x3443f10
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x3443e30
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x3443d60
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x3443c80
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x3443ba0
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x3443ad0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x34438f0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x3443810
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x3443540
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x3443460
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x3443390
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x34432b0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x34431d0
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x3443100
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x3443020
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x3442f40
	Vector GetStartTangent();// 0x3442dc0
	Vector2D GetStartScale();// 0x3442d80
	float GetStartRoll();// 0x3442d50
	Vector GetStartPosition();// 0x3442d10
	Vector2D GetStartOffset();// 0x3442cd0
	Vector GetSplineUpDir();// 0x3442c90
	byte GetForwardAxis();// 0x34428a0
	Vector GetEndTangent();// 0x3442860
	Vector2D GetEndScale();// 0x3442820
	float GetEndRoll();// 0x34427f0
	Vector GetEndPosition();// 0x34427b0
	Vector2D GetEndOffset();// 0x3442770
	float GetBoundaryMin();// 0xb69180
	float GetBoundaryMax();// 0x34426a0

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x1f8, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x1fc, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x208, Size: 0xc]
	float ProbeSize;//[Offset: 0x214, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x218, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21c, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21c, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21c, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x21c, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x21c, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x21c, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21d, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x220, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x224, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x228, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x22c, Size: 0x4]
	bool IsCollisionFixApplied();// 0x3442e80
	Vector GetUnfixedCameraPosition();// 0x3442e40
	Rotator GetTargetRotation();// 0x3442e00

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 0x1]
	void SetMobility(byte InMobility);// 0x34478c0

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4]
	float OverlayArc;//[Offset: 0x2c, Size: 0x4]
	int Height;//[Offset: 0x30, Size: 0x4]
	void SetRadius(float InRadius);// 0x3447ad0
	void SetOverlayArc(float InOverlayArc);// 0x3447940
	void SetHeight(int InHeight);// 0x34477a0

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x14]
	Box2D RightUVRect;//[Offset: 0x3c, Size: 0x14]
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x8]
	Vector2D RightScale;//[Offset: 0x58, Size: 0x8]
	Vector2D LeftBias;//[Offset: 0x60, Size: 0x8]
	Vector2D RightBias;//[Offset: 0x68, Size: 0x8]
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x3447580

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x14]
	Box2D RightUVRect;//[Offset: 0x14, Size: 0x14]
	Vector2D LeftScale;//[Offset: 0x28, Size: 0x8]
	Vector2D RightScale;//[Offset: 0x30, Size: 0x8]
	Vector2D LeftBias;//[Offset: 0x38, Size: 0x8]
	Vector2D RightBias;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	Texture* Texture;//[Offset: 0x200, Size: 0x8]
	Texture* LeftTexture;//[Offset: 0x208, Size: 0x8]
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	Vector2D QuadSize;//[Offset: 0x214, Size: 0x8]
	Box2D UVRect;//[Offset: 0x21c, Size: 0x14]
	float CylinderRadius;//[Offset: 0x230, Size: 0x4]
	float CylinderOverlayArc;//[Offset: 0x234, Size: 0x4]
	int CylinderHeight;//[Offset: 0x238, Size: 0x4]
	EquirectProps EquirectProps;//[Offset: 0x23c, Size: 0x48]
	byte StereoLayerType;//[Offset: 0x284, Size: 0x1]
	byte StereoLayerShape;//[Offset: 0x285, Size: 0x1]
	StereoLayerShape* Shape;//[Offset: 0x288, Size: 0x8]
	int Priority;//[Offset: 0x290, Size: 0x4]
	void SetUVRect(Box2D InUVRect);// 0x3447e30
	void SetTexture(Texture* InTexture);// 0x3447da0
	void SetQuadSize(Vector2D InQuadSize);// 0x3447a50
	void SetPriority(int InPriority);// 0x34479c0
	void SetLeftTexture(Texture* InTexture);// 0x3447830
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x3447480
	void MarkTextureForUpdate();// 0x3447350
	Box2D GetUVRect();// 0x3447320
	Texture* GetTexture();// 0x3447300
	Vector2D GetQuadSize();// 0x34472d0
	int GetPriority();// 0x34472b0
	Texture* GetLeftTexture();// 0x34471b0

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowSplashScreen();// 0x24e7df0
	static void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x3447be0
	static void HideSplashScreen();// 0x24e6c90
	static void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x3447130

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	static WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0x344a6b0
	static LocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x344a490
	static LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0x344a560
	static GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0x344a3c0
	static EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x344a330

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x30, Size: 0x8]
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18]
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18]
	FText TransientText;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x450, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x468, Size: 0x8]
	Font* Font;//[Offset: 0x470, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x478, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x479, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x47c, Size: 0x4]
	float XScale;//[Offset: 0x480, Size: 0x4]
	float YScale;//[Offset: 0x484, Size: 0x4]
	float WorldSize;//[Offset: 0x488, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x48c, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x490, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x494, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 0x1]
	void SetYScale(float Value);// 0x344ad90
	void SetXScale(float Value);// 0x344ad10
	void SetWorldSize(float Value);// 0x344ac90
	void SetVertSpacingAdjust(float Value);// 0x344ab90
	void SetVerticalAlignment(byte Value);// 0x344ac10
	void SetTextRenderColor(Color Value);// 0x344ab10
	void SetTextMaterial(MaterialInterface* Material);// 0x344aa80
	void SetText(FString Value);// 0x344a9e0
	void SetHorizSpacingAdjust(float Value);// 0x344a8e0
	void SetHorizontalAlignment(byte Value);// 0x344a960
	void SetFont(Font* Value);// 0x344a850
	void K2_SetText(out const FText Value);// 0x344a780
	Vector GetTextWorldSize();// 0x344a670
	Vector GetTextLocalSize();// 0x344a630

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x140, Size: 0x1]
	byte AddressY;//[Offset: 0x141, Size: 0x1]
	byte AddressZ;//[Offset: 0x142, Size: 0x1]

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x344e4b0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x344e3e0
	void SetTimelineLengthMode(byte NewLengthMode);// 0x344e360
	void SetTimelineLength(float NewLength);// 0x344e2e0
	void SetPlayRate(float NewRate);// 0x344e140
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x344e1c0
	void SetNewTime(float NewTime);// 0x344e0c0
	void SetLooping(bool bNewLooping);// 0x344e030
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x344df60
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x344ded0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x344de00
	void ReverseFromEnd();// 0x344dde0
	void Reverse();// 0x344ddc0
	void PlayFromStart();// 0x344dda0
	void Play();// 0x344dd80
	void OnRep_Timeline();// 0x344dd60
	bool IsReversing();// 0x344dd30
	bool IsPlaying();// 0x344dd00
	bool IsLooping();// 0x344dcd0
	float GetTimelineLength();// 0x344dca0
	float GetPlayRate();// 0x344db90
	float GetPlaybackPosition();// 0x344dbc0
	bool GetIgnoreTimeDilation();// 0x344db60

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x34523e0
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x3452280
	void Init();// 0x24ab790
	int GetNumAccounts();// 0x2b19130
	FString GetAccountName(int AccountIndex);// 0x3451660
	bool CanShowTweetUI();// 0x1557e40
	bool AuthorizeAccounts();// 0x150b0b0

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1]
	Guid Guid;//[Offset: 0xc4, Size: 0x10]

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1]
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50]
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50]
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18]
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18]
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18]
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18]
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18]
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18]
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18]
	float ApplicationScale;//[Offset: 0x188, Size: 0x4]
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1]
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18]
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88]
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8]
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10]
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x250, Size: 0x8]
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8]
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x29c05e0
	void SetSize(Vector2D InSize);// 0x29c0100
	void SetPosition(Vector2D InPosition);// 0x29bff00
	void SetOffsets(Margin InOffset);// 0x29bfb20
	void SetMinimum(Vector2D InMinimumAnchors);// 0x29bfa10
	void SetMaximum(Vector2D InMaximumAnchors);// 0x29bf990
	void SetLayout(out const AnchorData InLayoutData);// 0x29bf770
	void SetAutoSize(bool InbAutoSize);// 0x29beb40
	void SetAnchors(Anchors InAnchors);// 0x29bea20
	void SetAlignment(Vector2D InAlignment);// 0x29be9a0
	int GetZOrder();// 0x29be8e0
	Vector2D GetSize();// 0x29be640
	Vector2D GetPosition();// 0x29be600
	Margin GetOffsets();// 0x29be5c0
	AnchorData GetLayout();// 0x29be530
	bool GetAutoSize();// 0x29be4a0
	Anchors GetAnchors();// 0x29be460
	Vector2D GetAlignment();// 0x29be420

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x29be290

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x108, Size: 0x88]
	delegate BrushDelegate;//[Offset: 0x190, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1a0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1c4, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x29c8430
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29c7dc0
	void SetBrushTintColor(SlateColor TintColor);// 0x29c7c40
	void SetBrushSize(Vector2D DesiredSize);// 0x29c7bc0
	void SetBrushResourceObject(Object* ResourceObject);// 0x29c7b30
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x29c7a60
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x29c7990
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x29c7840
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x29c7730
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x29c76a0
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x29c75b0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x29c7520
	void SetBrush(out const SlateBrush InBrush);// 0x29c73a0
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x29c6b70

--------------------------------
Class: TigerWidget.UserWidget.Widget.Visual.Object
	TigerTooltipWidget* TigerTooltipWidget;//[Offset: 0x268, Size: 0x8]
	TigerTooltipAction[] TooltipActions;//[Offset: 0x270, Size: 0x10]
	void UpdateScrollOffsetFromGamepadInput(ScrollBox* ScrollBox);// 0x1630e20
	bool ShouldIgnoreVisibilityChanges();// 0x1630dc0
	TigerTooltipWidget* ReuseOrCreateNewTooltipWidget(class TigerTooltipWidget InTooltipClass);// 0x1630d20
	void RemoveTooltipInputListeners();// 0x1630d00
	void PostAkEvent(AkAudioEvent* AudioEvent);// 0x1630be0
	void OnPlayerStateReceived(TigerPlayerState* InPlayerState);// 0x197e4f0
	bool IsSharkmobAccountLoginsEnabled();// 0x1630680
	void IncrementCollapseVisibility();// 0x1630660
	TigerPlayer* GetViewTargetTigerPlayer();// 0x1630380
	TigerSpectatorPawn* GetTigerSpectator();// 0x1630350
	TigerPlayerState* GetTigerPlayerState();// 0x1630320
	TigerPlayerController* GetTigerPlayerController();// 0x16302f0
	TigerPlayer* GetTigerPlayer();// 0x16302c0
	TigerPersistentPlayerState* GetTigerPersistentPlayerState();// 0x1630290
	TigerMatchHUD* GetTigerMatchHUD();// 0x1630260
	TigerMatchGameState* GetTigerMatchGameState();// 0x1630230
	TigerElysiumHUD* GetTigerElysiumHUD();// 0x1630200
	TigerHUD* GetTigerBaseHUD();// 0x16301d0
	TigerPlayer* GetSpectatedTigerPlayer();// 0x16301a0
	float GetScrollOffsetFromGamepadInput();// 0x1630170
	Widget* GetRootWidget();// 0x1630140
	TigerPartyManager* GetPartyManager();// 0x1630110
	void DecrementCollapseVisibility();// 0x16300f0
	TigerTooltipWidget* ConstructTooltipWidget();// 0x197e4f0
	void CallReleasedForAction(out const FName InputAction);// 0x162ff70
	void CallPressedForAction(out const FName InputAction);// 0x162fee0
	void AddTooltipInputListeners();// 0x162fe30
	void AddTooltipAction(out const TigerTooltipAction NewTooltipAction, out const delegate OnPressed, out const delegate OnReleased);// 0x162fc50

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x228]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x348, Size: 0x4d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x818, Size: 0x8]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x820, Size: 0x8]
	byte Orientation;//[Offset: 0x828, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0x829, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x82a, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x82c, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x834, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x845, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x846, Size: 0x1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x847, Size: 0x1]
	enum NavigationDestination;//[Offset: 0x848, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0x84c, Size: 0x4]
	enum ScrollWhenFocusChanges;//[Offset: 0x850, Size: 0x1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 0x1]
	float WheelScrollMultiplier;//[Offset: 0x854, Size: 0x4]
	delegate OnUserScrolled;//[Offset: 0x858, Size: 0x10]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x29d1fb0
	void SetScrollOffset(float NewScrollOffset);// 0x29d1750
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x29d16d0
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x29d1870
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x29d17d0
	void SetOrientation(byte NewOrientation);// 0x29d14a0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x29d0940
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x29d0820
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x29d0790
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x29d0700
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x29d05a0
	void ScrollToStart();// 0x29d0580
	void ScrollToEnd();// 0x29d0560
	float GetViewOffsetFraction();// 0x29cfd00
	float GetScrollOffsetOfEnd();// 0x29cfc30
	float GetScrollOffset();// 0x29cfc00
	void EndInertialScrolling();// 0x29cf650

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 0x88]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 0x88]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 0x88]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 0x88]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 0x88]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 0x88]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 0x88]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: TigerTooltipWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerWidget* OwningWidget;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x95a020
	float GetMaximumDuration();// 0x959ff0
	float GetMaxAttenuationRadius();// 0x959fc0
	bool GetIsInfinite();// 0x959f90

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	UInt32Property ShortID;//[Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	UInt32Property CachedHash;//[Size: 0x4]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x58, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa8, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: TigerPlayerState.PlayerState.Info.Actor.Object
	bool bGhostModeOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bIsGroupLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	EOSUserComponent* EOSUserComponent;//[Offset: 0x330, Size: 0x8]
	TigerGroupStateComponent* GroupStateComponent;//[Offset: 0x338, Size: 0x8]
	TigerPlayerMasqueradeComponent* PlayerMasqueradeComponent;//[Offset: 0x340, Size: 0x8]
	TigerMatchRecapComponent* MatchRecapComponent;//[Offset: 0x348, Size: 0x8]
	TigerMatchMedalComponent* MatchMedalComponent;//[Offset: 0x350, Size: 0x8]
	bool bIsGroupFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	TigerPersistentPlayerState* PersistentPlayerState;//[Offset: 0x360, Size: 0x8]
	bool bStreamerModeIsScramblingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	delegate OnGroupChangedDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnGroupFullnessChangedDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnNameChangedDelegate;//[Offset: 0x390, Size: 0x10]
	delegate OnApperanceChanged;//[Offset: 0x3a0, Size: 0x10]
	delegate OnReplaceInvalidLoadedAppearance;//[Offset: 0x3b0, Size: 0x10]
	delegate OnPlayerCardLoaded;//[Offset: 0x3c0, Size: 0x10]
	delegate OnNumSpectatorsChanged;//[Offset: 0x3d0, Size: 0x10]
	delegate OnLeaderStatusChangedDelegate;//[Offset: 0x3e0, Size: 0x10]
	enum ArchetypeType;//[Offset: 0x3f0, Size: 0x1]
	enum GroupingMode;//[Offset: 0x3f1, Size: 0x1]
	delegate OnPawnChanged;//[Offset: 0x3f8, Size: 0x10]
	delegate OnArchetypeChanged;//[Offset: 0x408, Size: 0x10]
	delegate OnSeasonLevelChanged;//[Offset: 0x418, Size: 0x10]
	delegate OnArchetypeLevelChanged;//[Offset: 0x428, Size: 0x10]
	delegate OnPlayerLevelChanged;//[Offset: 0x438, Size: 0x10]
	TigerCollectibleProgressCache* CollectibleProgressCache;//[Offset: 0x448, Size: 0x8]
	TigerGroupId GroupID;//[Offset: 0x450, Size: 0x10]
	int CurrentSeasonLevel;//[Offset: 0x460, Size: 0x4]
	int CurrentArchetypeLevel;//[Offset: 0x464, Size: 0x4]
	int CurrentPlayerLevel;//[Offset: 0x468, Size: 0x4]
	int PlayerScore;//[Offset: 0x46c, Size: 0x4]
	TigerPreviewerData AppearanceAsPreviewerData;//[Offset: 0x470, Size: 0x2d8]
	TigerCharacterAppearance CharacterAppearance;//[Offset: 0x748, Size: 0xc8]
	bool bHasLoadedAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]
	TigerPersistentPlayerCardData PlayerCardData;//[Offset: 0x818, Size: 0x18]
	bool bHasLoadedPlayerCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	Pawn* OwningPawn;//[Offset: 0x8d4, Size: 0x8]
	Pawn* PreviousOwningPawn;//[Offset: 0x8dc, Size: 0x8]
	TigerPlayer* LastOwningPlayer;//[Offset: 0x8e4, Size: 0x8]
	TigerPlayerAppearanceCache* AppearanceCache;//[Offset: 0x8f0, Size: 0x8]
	Actor* Killer;//[Offset: 0x8f8, Size: 0x8]
	TigerPlayer*[] AssistPlayers;//[Offset: 0x900, Size: 0x10]
	FString FakePlayerName;//[Offset: 0x928, Size: 0x10]
	bool bIsVoipEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 0x1]
	bool bIsVoipInputDeviceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b1, Size: 0x1]
	TigerGroupId ExtendedGroupId;//[Offset: 0x9c8, Size: 0x10]
	void UpdatePlayerStateGameDataInt(int InValue);// 0x15b5b70
	void UpdatePlayerStateGameData();// 0x15b5b50
	bool ShouldShowSpeakerIcon();// 0x15b5960
	bool SharesGroup(TigerPlayerState* OtherPlayer);// 0x15b58c0
	void SetAppearanceFromPreviewerDataLocally(out const TigerPreviewerData InPreviewerData);// 0x15b5810
	void Server_UpdatePlayerMutedStatus(const TigerPersistentPlayerID InMutedPlayer, const bool bInWasMuted);// 0x15b5720
	void Server_UpdatePlayerBlockedStatus(const TigerPersistentPlayerID InBlockedPlayer, const bool bInWasBlocked);// 0x15b5630
	void Server_SetIsVoipInputDeviceEnabled(const bool bInIsVoipInputDeviceEnabled);// 0x15b5400
	void Server_SetIsVoipEnabled(const bool bInIsVoipInputDeviceEnabled);// 0x15b5370
	void Server_SetCharacterAppearance(const TigerCharacterAppearance NewCharacterAppearance);// 0x15b5290
	void Server_SetBlockedAndMutedPlayers(const TigerPersistentPlayerID[] InBlockedPlayers, const TigerPersistentPlayerID[] InMutedPlayers);// 0x15b5140
	void Server_SetArchetype(enum InArchetypeType);// 0x15b5090
	void Server_RequestWeaponsConfig();// 0x15b5040
	void Server_ReportPlayer(enum InReason, int InReportTargetID);// 0x15b4f70
	void Server_OnStreamerSettingsChanged(bool bIsScramblingPlayers);// 0x15b4eb0
	void Server_LeaveGroup();// 0x15b4e60
	void RandomizeCharacterMeshes();// 0x15b4e40
	void OptionallyLeavePartyAndLeaveGroupIfNotInAParty(const bool bInShouldLeaveParty);// 0x15b4db0
	void OnTigerNumSpectatorsChanged__DelegateSignature(int InSpectators);// 0x197e4f0
	void OnSeasonLevelChanged__DelegateSignature(int InSeasonLevel);// 0x197e4f0
	void OnReplaceInvalidLoadedAppearance__DelegateSignature();// 0x197e4f0
	void OnRep_PlayerCardData();// 0x15b4d90
	void OnRep_IsVoipInputDeviceEnabledChanged();// 0xb7a5a0
	void OnRep_IsVoipEnabledChanged();// 0x15b4d70
	void OnRep_GroupLeader();// 0x15b4d50
	void OnRep_GroupIsFull();// 0x15b4d30
	void OnRep_GroupChanged();// 0x15b4d10
	void OnRep_CurrentSeasonLevel();// 0x15b4cf0
	void OnRep_CurrentPlayerLevel();// 0x15b4cd0
	void OnRep_CurrentArchetypeLevel();// 0x15b4cb0
	void OnRep_CharacterAppearance();// 0x15b4c90
	void OnRep_ArchetypeType();// 0x15b4c70
	void OnPlayerMutedStatusChanged(out const TigerPersistentPlayerID InMutedPlayer, const bool bInWasMuted);// 0x15b4b70
	void OnPlayerLevelChanged__DelegateSignature(int InPlayerLevel);// 0x197e4f0
	void OnPlayerKilledBy(Actor* InKiller, TigerPlayer* InKilledPlayer);// 0x15b4aa0
	void OnPlayerCardLoaded__DelegateSignature();// 0x197e4f0
	void OnPlayerBlockedStatusChanged(out const TigerPersistentPlayerID InBlockedPlayer, const bool bInWasBlocked);// 0x15b49a0
	void OnPlayerApperanceChanged__DelegateSignature(TigerPlayerState* InPlayerState);// 0x197e4f0
	void OnPersistentPlayerDataInitialized();// 0x15b4980
	void OnPawnChanged__DelegateSignature(Pawn* NewPawn);// 0x197e4f0
	void OnNameChangedDelegate__DelegateSignature();// 0x197e4f0
	void OnLeaderStatusChanged__DelegateSignature(bool bInIsLeader);// 0x197e4f0
	void OnGroupModifiedDelegate__DelegateSignature();// 0x197e4f0
	void OnGroupChangedDelegate__DelegateSignature();// 0x197e4f0
	void OnArchetypeTypeChangedDelegate__DelegateSignature(TigerPlayerClanData* InClanData, TigerPowerKit* InArchetypeData);// 0x197e4f0
	void OnArchetypeLevelChanged__DelegateSignature(int InArchetypeLevel);// 0x197e4f0
	void LeaveGroup();// 0x15b4960
	bool IsVoipOutputDeviceEnabled();// 0x15b4930
	bool IsVoipInputDeviceEnabled();// 0x15b4900
	bool IsVoipEnabled();// 0x15b48d0
	bool IsPlayerTalking();// 0x15b48a0
	bool IsGroupLeader();// 0x15b4870
	bool IsGroupFull();// 0x15b4840
	bool HasGroup();// 0x15b4810
	bool HasExtendedGroup();// 0x15b47e0
	bool HasAnySpectators();// 0x15b47b0
	void HandleOnDailyChallengesInitializedEvent();// 0xb7a5a0
	void HandleAssistPlayerKilled(Actor* InKiller, TigerPlayer* InKilledPlayer);// 0x15b46e0
	TigerPlayer* GetTigerPlayer();// 0x15b46b0
	float GetProgressToNextArchetypeLevelForArchetype(const enum InArchetypeType);// 0x15b4620
	float GetProgressToNextArchetypeLevel();// 0x15b45f0
	TigerPlayerMatchStats GetPlayerMatchStats();// 0x15b45b0
	TigerPlayerMatchMetaStats GetPlayerMatchMetaStats();// 0x15b4570
	TigerCharacterCardData GetPlayerCardCustomizations();// 0x15b44d0
	TigerPowerKit* GetPlayerArchetypeData();// 0x15b44a0
	enum GetPlatformType();// 0x15b4470
	int GetPlacement();// 0x15b4440
	Pawn* GetOwningPawn();// 0x15b4400
	enum GetClanFromArchetype();// 0x15b4340
	void Client_SendWeaponsConfigChecksumAndId(FString InChecksum, const int InID);// 0x15b4260
	void Client_OnRecievedReward();// 0x15b4240
	void Client_OnCollectibleAwardsReceived(const TigerCollectibleData* InCollectible, const TigerRewardsCollection InRewards);// 0x15b4150
	void CheckForInvalidAppearance();// 0x15b4130
	void ApplyPlayerCard();// 0x15b4110
	void ApplyOutfitSetup(out const TigerPersistentOutfitSetup InOutfitSetup);// 0x15b4040
	void ApplyCharacterAppearance();// 0x15b4020

--------------------------------
Class: EOSUserComponent.ActorComponent.Object
	void Server_ReceiveConnectInfo(FString InToken, FString InID);// 0xd59c30
	void Server_ReceiveAntiCheatData(const byte[] InByteArray);// 0xd59b90
	void Server_EACConnected(const bool bInEACConnected);// 0xd59b00
	void Client_RequestEOSProductUserId();// 0xd59ae0
	void Client_RequestEACConnectedStatus();// 0xd59ac0
	void Client_ReceiveAntiCheatData(const byte[] InByteArray);// 0xd59a20

--------------------------------
Class: TigerGroupStateComponent.ActorComponent.Object
	delegate OnGroupMembersChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnPlayerIndexChanged;//[Offset: 0xc0, Size: 0x10]
	delegate OnCrossplaySettingSynced;//[Offset: 0xd0, Size: 0x10]
	TigerOtherGroupMembersData OtherGroupMembersData;//[Offset: 0xe0, Size: 0x20]
	delegate OnMarkedAsGroupMember;//[Offset: 0x118, Size: 0x10]
	delegate OnRemoveMarkedAsGroupMember;//[Offset: 0x128, Size: 0x10]
	TigerCompassMarkerComponent* CompassComponent;//[Offset: 0x138, Size: 0x8]
	TigerPlayerController* LocalPlayerController;//[Offset: 0x140, Size: 0x8]
	TigerGroupMemberMarkerProxy* GroupMemberMapMarkerProxy;//[Offset: 0x148, Size: 0x8]
	TigerInWorldWidget* ExtendedGroupMemberWidget;//[Offset: 0x150, Size: 0x8]
	byte GroupMemberId;//[Offset: 0x158, Size: 0x1]
	TigerGroupId PreviousGroupID;//[Offset: 0x15c, Size: 0x10]
	int[] GroupMemberIDs;//[Offset: 0x170, Size: 0x10]
	bool ValidGroupID();// 0x1520440
	void TeamMembersChanged__DelegateSignature(TigerGroupStateComponent* InGroupStateComponent, out const TigerPlayerState*[] InPreviousGroupMembers);// 0x197e4f0
	void Server_ReportCrossplaySettings(enum InClientSetting, TigerPlayerState* InOtherTigerPlayerState);// 0x15202e0
	void Server_RefreshGroupMembers();// 0x1520290
	void Server_LockAndSyncCrossplaySettings(enum InInstigatorSetting);// 0x1520210
	bool PlayerIsInAGroup();// 0x15201c0
	void OnUserEnteredVoipRoom(out const TigerPersistentVoipID InPersistentVoipId);// 0x1520110
	void OnRep_OnGroupMemberIdChanged(byte InOldGroupMemberId);// 0x1520070
	void OnRep_OnGroupChanged();// 0x1520050
	void OnPlayerVoiceStatusChanged(out const TigerPersistentPlayerID InAffectedPlayer, const bool bInWasSilenced);// 0x151ff50
	void OnCrossplaySyncTimeout();// 0x151fbb0
	bool IsGroupMemberWithLocalPlayer();// 0x151f980
	bool IsGroupMemberByPersistentPlayerId(const TigerPersistentPlayerID InPlayerId);// 0x151f880
	bool IsGroupMember(const TigerPlayer* InTigerPlayer);// 0x151f7e0
	bool IsExtendedGroupMember(const TigerPlayer* InTigerPlayer);// 0x151f740
	void HandlePlayerStateAdded(TigerPlayerState* InPlayerState);// 0x151f6b0
	void HandleLifeStatusChanged(enum InNewLifeStatus);// 0x151f580
	byte GetPlayerIndex();// 0x151f530
	TigerPlayerState*[] GetOtherGroupMembersBP();// 0x151f4b0
	int[] GetOtherGroupMemberIDsBP();// 0x151f430
	void ExecuteForAllOtherMembers(out const delegate InDelegate);// 0x151f220
	void ExecuteDelegate__DelegateSignature(TigerPlayerState* InPlayerState);// 0x197e4f0
	int CurrentPresentGroupMemberCount();// 0x151f090
	void Client_UpdateGroupMembers(const TigerOtherGroupMembersData InOtherGroupMembers);// 0x151efd0
	void Client_ReportCrossplaySettings(enum InSyncedSetting);// 0x151ef50
	void Client_LockArchetypeSelection(TigerPlayerState* InPlayerState, enum InArchetype);// 0x151ee80
	void Client_LockAndSyncCrossplaySettings(TigerPlayerState* InOtherTigerPlayerState);// 0x14b9bd0
	bool AnyOtherMemberAlive();// 0x151ec20

--------------------------------
Class: TigerPersistentVoipID
	FString UniqueID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerPersistentPlayerID
	FString UniqueID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerPlayer.TigerCharacter.Character.Pawn.Actor.Object
	byte PlayerVisibilityToNPC;//[Offset: 0x878, Size: 0x1]
	enum CurrentTraversalState;//[Offset: 0x879, Size: 0x1]
	Vector GunOffset;//[Offset: 0x87c, Size: 0xc]
	TigerSpringArmComponent* SpringArm;//[Offset: 0x888, Size: 0x8]
	TigerInventoryComponent* InventoryComponent;//[Offset: 0x890, Size: 0x8]
	TigerConsumablesComponent* ConsumablesComponent;//[Offset: 0x898, Size: 0x8]
	TigerDebugComponent* DebugComponent;//[Offset: 0x8a0, Size: 0x8]
	TigerAudioVisualizationSpawnerComponent* AudioVisualizationComponent;//[Offset: 0x8a8, Size: 0x8]
	ShapeComponent* InteractionVolumeComponent;//[Offset: 0x8d8, Size: 0x8]
	ShapeComponent* TriggerVolumeComponent;//[Offset: 0x8e0, Size: 0x8]
	PostProcessComponent* FullscreenPostProcessComponent;//[Offset: 0x8e8, Size: 0x8]
	TigerDistrictComponent* DistrictComponent;//[Offset: 0x8f0, Size: 0x8]
	TigerCrowdAgentComponent* CrowdAgentComponent;//[Offset: 0x8f8, Size: 0x8]
	TigerBloodResonanceComponent* BloodResonanceComponent;//[Offset: 0x900, Size: 0x8]
	TigerEmotePlayerComponent* EmotePlayerComponent;//[Offset: 0x908, Size: 0x8]
	TigerUtilityPowerHSenseComponent* HSenseComponent;//[Offset: 0x910, Size: 0x8]
	class TigerUtilityPowerHSenseComponent* HSenseClass;//[Offset: 0x918, Size: 0x8]
	TigerUtilityPowerBaseComponent* UtilityPowerComp;//[Offset: 0x920, Size: 0x8]
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0x928, Size: 0x8]
	TigerCharCustomizationComponent* CharacterCustomizationComponent;//[Offset: 0x930, Size: 0x8]
	TigerArtifactComponent* ArtifactComponent;//[Offset: 0x938, Size: 0x8]
	TigerPlayerClanData* PlayerClan;//[Offset: 0x940, Size: 0x8]
	TigerPassiveConfig*[] SelectedPerks;//[Offset: 0x948, Size: 0x10]
	<class TigerProjectile,int8> InitialProjectileReserveCount;//[Offset: 0x958, Size: 0x50]
	int8 DefaultReservedProjectileCount;//[Offset: 0x9a8, Size: 0x1]
	float LastAirStartTime;//[Offset: 0x9ac, Size: 0x4]
	float LastAirEndTime;//[Offset: 0x9b0, Size: 0x4]
	delegate OnGasDamageTaken;//[Offset: 0x9b8, Size: 0x10]
	delegate OnSelfReviveBlockedByRedGas;//[Offset: 0x9c8, Size: 0x10]
	delegate OnShieldBroken;//[Offset: 0x9d8, Size: 0x10]
	delegate OnSilencedChanged;//[Offset: 0xa00, Size: 0x10]
	delegate OnDiablerizeStateChanged;//[Offset: 0xa10, Size: 0x10]
	delegate OnReviveStateChanged;//[Offset: 0xa20, Size: 0x10]
	delegate OnPlayerEvent;//[Offset: 0xa30, Size: 0x10]
	delegate OnDamageDealt;//[Offset: 0xa40, Size: 0x10]
	delegate OnHealthChanged;//[Offset: 0xa50, Size: 0x10]
	delegate OnTraversalAction;//[Offset: 0xa60, Size: 0x10]
	delegate OnLifeStatusChanged;//[Offset: 0xa70, Size: 0x10]
	delegate OnUpdateArchetypePassiveActiveState;//[Offset: 0xab0, Size: 0x10]
	delegate OnBeginPlay;//[Offset: 0xac0, Size: 0x10]
	delegate OnGroupMemberDied;//[Offset: 0xad0, Size: 0x10]
	delegate OnSelectedPerksUpdated;//[Offset: 0xae0, Size: 0x10]
	bool bExposePlayersInHeightenedSense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 0x1]
	TigerStepUpOffset StepUpOffset;//[Offset: 0xaf4, Size: 0x2c]
	class TigerPhysicalInteraction* DiablerizeInteractionClass;//[Offset: 0xb28, Size: 0x8]
	class TigerPhysicalInteraction* ReviveInteractionClass;//[Offset: 0xb30, Size: 0x8]
	FName LoopSectionName;//[Offset: 0xb38, Size: 0x8]
	FName EndSectionName;//[Offset: 0xb40, Size: 0x8]
	FName InterruptedSectionName;//[Offset: 0xb48, Size: 0x8]
	delegate SavedLocationAdded;//[Offset: 0xb50, Size: 0x10]
	delegate OnKilledBy;//[Offset: 0xb60, Size: 0x10]
	AkAudioEvent* JumpAudioEvent;//[Offset: 0xb70, Size: 0x8]
	float LeaveGameDestroyDelay;//[Offset: 0xb78, Size: 0x4]
	bool bControllerDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 0x1]
	bool bAllowCollisionWithPlayersInElysium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7e, Size: 0x1]
	TigerPowerKit* PowerKit;//[Offset: 0xb80, Size: 0x8]
	float RecentDamageTaken;//[Offset: 0xb88, Size: 0x4]
	float RecentDamageDecayWaitDuration;//[Offset: 0xb90, Size: 0x4]
	float RecentDamageDecayInitialWaitDuration;//[Offset: 0xb94, Size: 0x4]
	float RecentDamageDecayRate;//[Offset: 0xb98, Size: 0x4]
	float InvulnerabilityDurationDowned;//[Offset: 0xba4, Size: 0x4]
	float InvulnerabilityDurationRegenerated;//[Offset: 0xba8, Size: 0x4]
	float InvulnerabilityDurationRevived;//[Offset: 0xbac, Size: 0x4]
	float LocationHistorySaveDistanceSquared;//[Offset: 0xbc0, Size: 0x4]
	float LocationHistoryDurationSeconds;//[Offset: 0xbc4, Size: 0x4]
	bool bIsInvisibleByDodge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 0x1]
	bool bIsRecoveringFromDodge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc9, Size: 0x1]
	delegate EventOnGunRangeTravelled;//[Offset: 0xbd0, Size: 0x10]
	SceneComponent* ProjectileSpawnRootRef;//[Offset: 0xbe0, Size: 0x8]
	CameraComponent* Camera;//[Offset: 0xbe8, Size: 0x8]
	SkeletalMeshComponent* HolsteredWeaponMeshRef;//[Offset: 0xbf0, Size: 0x8]
	SkeletalMeshComponent* SecondaryHolsteredWeaponMeshRef;//[Offset: 0xbf8, Size: 0x8]
	TigerCompressedRotation CompressedCameraRotation;//[Offset: 0xc01, Size: 0x2]
	TigerNpcThatCanSeePlayerWrapper[] NpcThatCanSeePlayerServer;//[Offset: 0xc10, Size: 0x10]
	TigerNpcThatCanSeePlayerWrapper_Client[] NpcThatCanSeePlayerClient;//[Offset: 0xc20, Size: 0x10]
	TigerNpcThatCanSeePlayerWrapper_Client[] LastNpcsThatCantSeePlayerSent;//[Offset: 0xc30, Size: 0x10]
	float LastNpcThatCanSeePlayerSyncTime;//[Offset: 0xc48, Size: 0x4]
	TigerPhysicalInteraction* PhysicalInteractionObject;//[Offset: 0xc50, Size: 0x8]
	TigerPlayer* OtherPhysicalInteractionPlayer;//[Offset: 0xc58, Size: 0x8]
	TigerPassiveComponent*[] PassiveComponents;//[Offset: 0xc60, Size: 0x10]
	<Object*,TigerPassiveWithLogicArray> ClanPassivesMap;//[Offset: 0xc70, Size: 0x50]
	TigerCharacterStatModification CombinedPassiveStatChanges;//[Offset: 0xcc0, Size: 0xa8]
	MaterialInterface* InvisibilityMaterial;//[Offset: 0xd68, Size: 0x8]
	MaterialInstanceDynamic* InvisibilityMaterialInstance;//[Offset: 0xd70, Size: 0x8]
	TigerUIEnemyHealthBar* InWorldHealthBar;//[Offset: 0xd78, Size: 0x8]
	float AirTimeRequiredForSuspiciousLanding;//[Offset: 0xd80, Size: 0x4]
	Vector GroundBelowDeathLocation;//[Offset: 0xd84, Size: 0xc]
	bool bWasDiablerized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 0x1]
	FName DiablerizeAnimationName;//[Offset: 0xd94, Size: 0x8]
	FName GetDiablerizedAnimationName;//[Offset: 0xd9c, Size: 0x8]
	FName ReviveTeammateAnimationName;//[Offset: 0xda4, Size: 0x8]
	FName GettingRevivedAnimationName;//[Offset: 0xdac, Size: 0x8]
	ParticleSystem* EnhancedReviveParticleEffect;//[Offset: 0xdb8, Size: 0x8]
	ParticleSystemComponent* RegenerateComponent;//[Offset: 0xdc0, Size: 0x8]
	FName RegenerateSpawnRateParam;//[Offset: 0xdc8, Size: 0x8]
	float RegenerateRemainingDownTimeMultiplier;//[Offset: 0xdd0, Size: 0x4]
	float EnhancedReviveParticleEffectLength;//[Offset: 0xdd4, Size: 0x4]
	float TimeToGetInPositionForPhysicalInteraction;//[Offset: 0xde0, Size: 0x4]
	float ReviveHealthPercentage;//[Offset: 0xde4, Size: 0x4]
	float ReviveHealth;//[Offset: 0xde8, Size: 0x4]
	bool bUsePercentReviveHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdec, Size: 0x1]
	float PhysicalInteractionTimeLeft;//[Offset: 0xdf0, Size: 0x4]
	AkAudioEvent* RevivedAudioEvent;//[Offset: 0xdf8, Size: 0x8]
	FName RegeneratingDoneAnimationName;//[Offset: 0xe00, Size: 0x8]
	float DamageDurationForInterrupt;//[Offset: 0xe08, Size: 0x4]
	float InterruptDamageLimits;//[Offset: 0xe0c, Size: 0x4]
	byte EnabledInterruptDamageLimits;//[Offset: 0xe14, Size: 0x1]
	float DownedRangedDamageTakenMultiplier;//[Offset: 0xe18, Size: 0x4]
	float DownedMeleeDamageTakenMultiplier;//[Offset: 0xe1c, Size: 0x4]
	float DownedDisciplineDamageTakenMultiplier;//[Offset: 0xe20, Size: 0x4]
	float DownedRegenRatePerSecond;//[Offset: 0xe24, Size: 0x4]
	float DownedRegenRateReviveMultiplier;//[Offset: 0xe28, Size: 0x4]
	float DownedBaseHealth;//[Offset: 0xe2c, Size: 0x4]
	float AuthDownedRegenValue;//[Offset: 0xe30, Size: 0x4]
	float SyncedReviveEndTime;//[Offset: 0xe38, Size: 0x4]
	bool bDownedRegenShouldTickInsideHolyIncense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3c, Size: 0x1]
	bool bCanRegenerateInsideHolyIncense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3d, Size: 0x1]
	float EffectUpdateTimeAfterInsideHolyIncense;//[Offset: 0xe40, Size: 0x4]
	float HardLandingSpeed;//[Offset: 0xe44, Size: 0x4]
	int OverlappingSuspiciousGuardVolumeCount;//[Offset: 0xe48, Size: 0x4]
	int OverlappingThreatGuardVolumeCount;//[Offset: 0xe4c, Size: 0x4]
	int PlayerStateId;//[Offset: 0xe50, Size: 0x4]
	float IsInCloseQuartersCombatCooldownTime;//[Offset: 0xe90, Size: 0x4]
	float EnemyOutlineDistanceSquared;//[Offset: 0xe94, Size: 0x4]
	float EnemyOutlineCombatDistanceSquared;//[Offset: 0xe98, Size: 0x4]
	float ApproximateDownedHeightOffset;//[Offset: 0xe9c, Size: 0x4]
	AkAudioEvent* FallStartedAudioEvent;//[Offset: 0xeb8, Size: 0x8]
	AkAudioEvent* FallEndedAudioEvent;//[Offset: 0xec0, Size: 0x8]
	AkAudioEvent* HitEnemyAudioEvent;//[Offset: 0xec8, Size: 0x8]
	AkAudioEvent* HitEnemyHeadAudioEvent;//[Offset: 0xed0, Size: 0x8]
	AkAudioEvent* ExtraHealthHitAudioEvent;//[Offset: 0xed8, Size: 0x8]
	AkAudioEvent* VentrueClanBuffHitAudioEvent;//[Offset: 0xee0, Size: 0x8]
	AkAudioEvent* PickUpRangedWeaponAudioEvent;//[Offset: 0xee8, Size: 0x8]
	AkAudioEvent* PickUpMeleeWeaponAudioEvent;//[Offset: 0xef0, Size: 0x8]
	AkAudioEvent* PickUpAmmoAudioEvent;//[Offset: 0xef8, Size: 0x8]
	AkAudioEvent* PickUpConsumableAudioEvent;//[Offset: 0xf00, Size: 0x8]
	AkAudioEvent* PickUpCollectibleAudioEvent;//[Offset: 0xf08, Size: 0x8]
	AkAudioEvent* StartCrouchAudioEvent;//[Offset: 0xf10, Size: 0x8]
	AkAudioEvent* EndCrouchAudioEvent;//[Offset: 0xf18, Size: 0x8]
	AkAudioEvent* HalfHealthBreakAudioEvent;//[Offset: 0xf20, Size: 0x8]
	class TigerPhysicalInteraction* PhysicalInteractionClass;//[Offset: 0xf28, Size: 0x8]
	TigerJudge* JudgeFeedTarget;//[Offset: 0xf30, Size: 0x8]
	float JudgeFeedTimeSeconds;//[Offset: 0xf38, Size: 0x4]
	FName[] RangedHitMontageNames;//[Offset: 0xf40, Size: 0x10]
	FName TransitionParameterName;//[Offset: 0xf50, Size: 0x8]
	StaticMeshComponent* TempProp;//[Offset: 0xf58, Size: 0x8]
	<TigerCharacter*> CharmedCharacters;//[Offset: 0xf60, Size: 0x50]
	bool bIsDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb0, Size: 0x1]
	bool bIsInGhostMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 0x1]
	bool bIsScouted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1040, Size: 0x1]
	bool bIsInAssaultedArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1041, Size: 0x1]
	bool bIsInGunRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1059, Size: 0x1]
	bool bShouldRestrictOffensiveActionsInElysium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105a, Size: 0x1]
	float UpdateTimeSpentAtLocation(FString InLocationName, const float InSecondsToAdd);// 0x1592050
	void UpdateScoutedMeshVisiblity(const float InVisibility);// 0x197e4f0
	void UpdateHuntingKnifeEffectParameters(const float StrengthFromDistance, const float StrengthFromKillings);// 0x197e4f0
	void UpdateHolyIncenseEffect(const float InDeltaTime);// 0x197e4f0
	void UpdateHolyIncenseAudio();// 0x197e4f0
	void UpdateArchetypePassiveActiveState();// 0x158e5c0
	void TriggerPlayerEvent(const enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x1591f50
	void ToggleGunRangeFreedomCheat();// 0xb7a5a0
	void ShowUIFX();// 0x197e4f0
	bool ShouldUseFootIk();// 0x1591e30
	bool ShouldShowRecentDamage();// 0x1591e10
	void SetupSignificanceAndRegisterToActorGrid(TigerPlayerState* InPlayerState);// 0x1509f70
	void SetSelectedPerkInSlot(TigerPerkItem* InPerkItem, const int InSlot);// 0x1591d40
	void SetGunRangeFreedom(bool bInHasGunRangeFreedom);// 0x1591cb0
	void SetDownedRegenTime(const float InRegenTime);// 0x1591c30
	void SetDebugAppearanceItemById(FString InDatabaseId);// 0x14c0250
	void SetDebugAppearance(FString AppearanceText);// 0x14c0250
	void Server_UpdateCameraRotation(const TigerCompressedRotation CompressedRotation);// 0x1591b90
	void Server_ToggleGunRangeFreedom();// 0xb7a5a0
	void Server_SetSelectedPerkInSlot(const InPerkItemID(UInt64Property) InPerkItemID, const int InSlot);// 0x15917f0
	void Server_SetDebugCharacterData(FString ClanText, int PowerKitIndex, FString GenderText);// 0x1591690
	void Server_PickUpItemFromCluster(TigerItemCluster* InItemCluster, const InItemClusterUID(UInt32Property) InItemClusterUID);// 0x15913c0
	void Server_GetItemFromLootUI(TigerLootBox* LootBox, TigerItemAsset* Item, int Count, const enum InItemSourceID);// 0x1591160
	void Server_Cheat_Walk();// 0x1591110
	void Server_Cheat_Ghost(const bool bForce);// 0x1591050
	void Server_Cheat_Fly();// 0x1591000
	void Server_AbortMeleeAnimation();// 0x1590e90
	void SendDistanceAchievementData();// 0x1590a70
	void RemoveNPCThatLostSightOfPlayerFromList(TigerBaseNPC* InNpc);// 0x15909e0
	void PlayVentrueClanBuffHitAudio();// 0x15909c0
	void PlayHitAudio(bool bInWasHeadshot, bool bInInEffectiveRange, TigerCharacter* InHitCharacter);// 0x15908a0
	void PlayExtraHealthHitAudio();// 0x1590880
	void OnWallJump(out const Vector InVelocity);// 0x197e4f0
	void OnWallGrindStarted(out const Vector InVelocity);// 0x197e4f0
	void OnWallGrindEnded(out const Vector InVelocity);// 0x197e4f0
	void OnTigerMovementModeChanged(const byte PrevMovementMode, const enum PrevCustomMode, const byte NewMovementMode, const enum NewCustomMode);// 0x197e4f0
	void OnSuperIsReady();// 0x197e4f0
	void OnStoreDoorsBreached();// 0x15907e0
	void OnStoppedBeingGroupMember();// 0x197e4f0
	void OnStoppedAimingCameraTransition();// 0x197e4f0
	void OnStartedPhysicalInteraction(class TigerPhysicalInteraction PhysInteractionClass, const bool bIsTargetPlayer);// 0x197e4f0
	void OnStartedAimingCameraTransition();// 0x197e4f0
	void OnSlidingStarted(out const Vector InVelocity);// 0x197e4f0
	void OnSlidingEnded(out const Vector InVelocity);// 0x197e4f0
	void OnSlideJump(out const Vector InVelocity);// 0x197e4f0
	void OnShieldDepleted(TigerPlayer* InInstigator);// 0x197e4f0
	void OnRestart();// 0x197e4f0
	void OnRep_TraversalState();// 0x15907c0
	void OnRep_SyncedReviveEndTime();// 0x15907a0
	void OnRep_PowerKit();// 0x1590780
	void OnRep_PlayerClan();// 0x197e4f0
	void OnRep_GotDowned(bool bWasDowned);// 0x15906f0
	void OnRep_EnteredGhostMode(bool bWasInGhostMode);// 0x149f8f0
	void OnRainAmountSet(float RainAmount);// 0x197e4f0
	void OnNoLongerScouted();// 0x197e4f0
	void OnModEquipped();// 0x197e4f0
	void OnMatchStateChangedForLocalPlayerPawn(const enum InOldState, const enum InNewState);// 0x1590620
	void OnLocalSprintStarted();// 0x197e4f0
	void OnLocalSprintEnded();// 0x197e4f0
	void OnLocalExitedIndoor();// 0x197e4f0
	void OnLocalEnteredIndoor();// 0x197e4f0
	void OnInterruptedPhysicalInteraction(class TigerPhysicalInteraction PhysInteractionClass, const bool bIsTargetPlayer);// 0x197e4f0
	void OnHardLanding(out const Vector InVelocity);// 0x197e4f0
	void OnGotScouted();// 0x197e4f0
	void OnGotPlayerState();// 0x197e4f0
	void OnGotHitForAudio(out const FName InSurfaceForAudio);// 0x197e4f0
	void OnGoneBelowHalfHealth();// 0x197e4f0
	void OnFinishedPhysicalInteraction(class TigerPhysicalInteraction PhysInteractionClass, const bool bIsTargetPlayer);// 0x197e4f0
	void OnExtraHealthDepleted();// 0x197e4f0
	void OnDoubleJump(out const Vector Direction);// 0x197e4f0
	void OnDodgeRecovery(bool IsControllingPlayer, out const Vector_NetQuantizeNormal LaunchDirection, const byte DodgeStage);// 0x197e4f0
	void OnDiablerizedFinished();// 0x197e4f0
	void OnDamageTaken(const float DamageTaken, Actor* DamageInstigator);// 0x197e4f0
	void OnControllerDisconnected();// 0x197e4f0
	void OnClimbStarted(out const Vector InVelocity);// 0x197e4f0
	void OnClimbEnded(out const Vector InVelocity);// 0x197e4f0
	void OnBecameSpectator();// 0x197e4f0
	void OnBecameGroupMember(bool bInExtendedGroupMember);// 0x197e4f0
	void OnAboutToBeHitByDisplacement();// 0x197e4f0
	void Multicast_StopJudgeFeedAnimation();// 0x1590600
	void Multicast_ShieldDepleted(TigerPlayer* InInstigator);// 0x1590570
	void Multicast_SetupForPhysicalInteraction(class TigerPhysicalInteraction InSetupPhysicalInteractionClass, TigerPlayer* InOtherPlayer);// 0x15904a0
	void Multicast_SetCharacterData(const TigerPlayerClanData* InNewClan, const TigerPowerKit* InNewPowerKit, const TigerPassiveConfig*[] InNewPerks);// 0x1590370
	void Multicast_RespawnPlayerWithTransform(const Vector InLocation, const Rotator InRotation);// 0x1590290
	void Multicast_RespawnPlayer();// 0x1590270
	void Multicast_PlayJudgeFeedAnimation();// 0x1590130
	void Multicast_PlayerDowned(byte LastHitYawCompressed, byte ActorYaw, const bool bUseStaticDownEntryAnimation);// 0x1590150
	void Multicast_OnSuccessfulPhysicalInteraction(const bool bWasTargetPlayer);// 0x15900a0
	void Multicast_OnRegenerationDone();// 0x1590080
	void Multicast_OnItemPickedUp(TigerItemAsset* InItemAsset);// 0x158fff0
	void Multicast_OnDamageTaken(const float DamageAmount, Actor* DamageInstigator);// 0x158ff20
	void Multicast_InterruptPhysicalInteraction();// 0x158ff00
	void Multicast_GuardBreak();// 0x158fee0
	void Multicast_FastReplicationReceived(const TigerFastRepMovementData InRepMovement);// 0x158fe60
	void Multicast_ExtraHealthDepleted();// 0x158fe40
	void Multicast_ApplyWeaponVisibility(class TigerWeapon WeaponClassToShow);// 0x158fdb0
	bool LocalValidateItemPickupFromLootUI(TigerLootBox* LootBox, TigerItemAsset* Item, int Count);// 0x158fca0
	void LocalPlayerTick(const float InDeltaSeconds);// 0x197e4f0
	bool IsPlayingReviveAnim(bool bInIsTarget);// 0x158fc00
	bool IsInPhysicalInteraction();// 0x158fbb0
	bool IsInInvulnerableState();// 0x158fb80
	bool IsInGunRange();// 0x158fb60
	bool IsInGhostMode();// 0x158fb40
	bool IsIndoor();// 0x158fbe0
	bool IsInDialogueInteraction();// 0x158fb10
	bool IsGroupMember(const TigerPlayer* InOtherPlayer);// 0x158fa70
	bool IsGettingDiablerized();// 0x158fa40
	bool IsFeedingOnJudge();// 0x158fa10
	bool IsExtendedGroupMember(const TigerPlayer* InOtherPlayer);// 0x158f970
	bool IsCharming(const TigerCharacter* Character);// 0x158f8d0
	bool IsBeingRevived();// 0x158f8a0
	void IncrementShieldShaderCounter();// 0x197e4f0
	void HideUIFX();// 0x197e4f0
	bool HaveEnhancedReviveSpeed();// 0x158f870
	bool HasRecentlyLanded(float WithinSeconds, float MinimumAirTime);// 0x158f790
	bool HasPassiveByDataAsset(const TigerPassiveConfig* InPassive);// 0x158f6f0
	bool HasPassive(class TigerPassiveConfig InPassive);// 0x158f620
	bool HasMaxKindredCharmCount();// 0x158f5f0
	bool HasBeenInAirFor(float MinimumAirTime);// 0x158f560
	void HandleMatchSettingsReceived();// 0x158f520
	void HandleAppearanceChange();// 0x158f500
	void GroupMemberDied();// 0x158f4e0
	void GraphicsSettingsChanged(out const TigerGraphicsSettings InGraphicsSettings, out const TigerGraphicsSettingsPS5 InGraphicsSettingsPS5);// 0x158f390
	float GetTimeInAir();// 0x158f310
	TigerPlayerState* GetTigerPlayerState();// 0x158f2e0
	TigerPlayerController* GetTigerPlayerController();// 0x158f2b0
	float GetRemainingDownedTime();// 0x158f280
	ActorComponent* GetPassiveLogicByDataAsset(const TigerPassiveConfig* InPassive);// 0x158ee70
	ActorComponent* GetPassiveLogic(class TigerPassiveConfig InPassive);// 0x158ed60
	int GetNumPerkSlots();// 0x158ed30
	float GetJudgeFeedProgress();// 0x158ed00
	int8 GetInitialProjectileReserveCountForClass(class TigerProjectile InProjectileClass);// 0x158ec60
	TigerInventoryStats GetCharacterInventoryStats();// 0x158ec20
	void GetAllPerkDataForCurrentArchetype(out <TigerPerkItem*,enum> OutPerkItems);// 0x158eae0
	void GetAllPerkDataForArchetype(enum InPowerkitType, out <TigerPerkItem*,enum> OutPerkItems);// 0x158e960
	void EnableGhostMode(bool bGhostMode, const bool bForce);// 0x158e890
	bool DownedRegenShouldTickInsideHolyIncense();// 0x158e870
	bool DiedHighAboveGround();// 0x158e810
	void DecrementShieldShaderCounter();// 0x197e4f0
	void DebugSetSelectedPerkInSlot(FString InPerkItemName, const int InSlot);// 0x14c0420
	void Debug_Multicast_SendDummyData(const int8[] Data);// 0x158e770
	void DeactivateHeightenedSenses();// 0x158e750
	void Client_UpdateReviveEndTime(float InSyncedEndTime, bool bInIsInAssaultedArea);// 0x158e670
	void Client_UpdateKindredCharmCount(const int InKindredCharmCount);// 0x158e5e0
	void Client_UpdateArchetypePassiveActiveState();// 0x158e5c0
	void Client_SyncNpcsThatCanSeePlayer(const TigerNpcThatCanSeePlayerWrapper_Client[] InNpcsThatCanSeePlayer, const byte InPlayerVisibilityToNpc);// 0x158e4e0
	void Client_SetVentrueOnePassiveActiveState(const bool bInActive);// 0x158e130
	void Client_SetupForRevive(TigerPlayer* OtherPlayer, uint16 CompressedDesiredFacing);// 0x158e290
	void Client_SetupForDiablerize(TigerPlayer* OtherPlayer, uint16 CompressedDesiredFacing);// 0x158e1c0
	void Client_SetGunRangeFreedom(bool bInGunRangeFreedom);// 0x158e0a0
	void Client_SetAsScouted(const float Time);// 0x158e020
	void Client_RemoveBestialTracking(PlayerState* Player);// 0x158deb0
	void Client_PostGunSound(AkAudioEvent* InAudioEvent, const Vector InSoundLocation);// 0x158dde0
	void Client_PlayerDowned(byte LastHitYawCompressed, byte ActorYaw, const bool bUseStaticDownEntryAnimation);// 0x158dcc0
	void Client_OnTakeDamage(const float InNewHealth, const float InTotalDamageTaken, const DamageEvent InDamageEvent, Actor* InDamageCauser);// 0x158db50
	void Client_KilledNpc(TigerNPC* InNpc);// 0x158d9e0
	void Client_InterruptPhysicalInteraction();// 0x158d9c0
	void Client_InitialBestialTrackingData(PlayerState* Player, const TigerPlayerSavedLocation[] Locations);// 0x158d8e0
	void Client_HitPlayerGoneBelowHalfHealth();// 0x158d8c0
	void Client_GuardBreak();// 0x158d8a0
	void Client_GoneBelowHalfHealth();// 0x158d880
	void Client_AddEpsilonOnePassiveScoutedPlayer(TigerPlayer* InPlayer);// 0x158d720
	void Client_AddBestialTrackingData(PlayerState* Player, const TigerPlayerSavedLocation Location);// 0x158d650
	void Client_AboutToBeHitByDisplacement();// 0x158d630
	bool CanUseConsumable(const TigerConsumableAsset* InConsumable);// 0x158d4a0
	bool CanNPCSeePlayer(TigerBaseNPC* TigerNPC, bool bIgnoreInvisibility);// 0x158d3a0
	bool CanEmote();// 0x158d370
	bool CanBeRevivedBy(const TigerPlayer* InReviver);// 0x158d2d0
	bool CanBeDiablerizedBy(const TigerPlayer* InDiablerist);// 0x158d230
	void AddNPCThatSawPlayerToList(TigerBaseNPC* InNpc);// 0x158d0d0
	void ActivateHuntingKnifeEffect(bool bActivate);// 0x197e4f0
	void ActivateHeightenedSenses();// 0x158d0b0

--------------------------------
Class: TigerCharacter.Character.Pawn.Actor.Object
	TigerCharacterMeshManager* MeshManager;//[Offset: 0x4c0, Size: 0x8]
	TigerRangedWeaponComponent* RangedWeaponComponent;//[Offset: 0x4c8, Size: 0x8]
	TigerMeleeWeaponComponent* MeleeWeaponComponent;//[Offset: 0x4d0, Size: 0x8]
	TigerCombatComponent* CombatComponent;//[Offset: 0x4d8, Size: 0x8]
	TigerFeedingComponent* FeedingComponent;//[Offset: 0x4e0, Size: 0x8]
	TigerBuffComponent* BuffComponent;//[Offset: 0x4e8, Size: 0x8]
	TigerOutlineComponent* OutlineComponent;//[Offset: 0x4f0, Size: 0x8]
	AkComponent* AudioComponent;//[Offset: 0x4f8, Size: 0x8]
	AkComponent* NonOccludedAudioComponent;//[Offset: 0x500, Size: 0x8]
	SceneComponent* AdditionalMeshes;//[Offset: 0x508, Size: 0x8]
	SkeletalMeshComponentBudgeted* HeadMesh;//[Offset: 0x510, Size: 0x8]
	SkeletalMeshComponentBudgeted* HoodieMesh;//[Offset: 0x518, Size: 0x8]
	SkeletalMeshComponentBudgeted* HairMesh;//[Offset: 0x520, Size: 0x8]
	SkeletalMeshComponentBudgeted* HeadgearMesh;//[Offset: 0x528, Size: 0x8]
	SkeletalMeshComponentBudgeted* EyewearMesh;//[Offset: 0x530, Size: 0x8]
	SkeletalMeshComponentBudgeted* BodyAdditionalMesh;//[Offset: 0x538, Size: 0x8]
	delegate OnCharacterAction;//[Offset: 0x560, Size: 0x10]
	delegate OnDamageMitigated;//[Offset: 0x570, Size: 0x10]
	delegate OnDefeated;//[Offset: 0x580, Size: 0x10]
	bool bIsRootMotionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	float BaseMaxHealth;//[Offset: 0x5a4, Size: 0x4]
	SkeletalMeshComponent* ThirdPersonWeaponMeshRef;//[Offset: 0x5a8, Size: 0x8]
	SkeletalMeshComponent* SecondaryWeaponMeshRef;//[Offset: 0x5b0, Size: 0x8]
	SceneComponent* ProjectileSpawnRef;//[Offset: 0x5b8, Size: 0x8]
	SceneComponent* SecondaryProjectileSpawnRef;//[Offset: 0x5c0, Size: 0x8]
	TigerCharacterStatModification BaseCharacterStats;//[Offset: 0x5c8, Size: 0xa8]
	TigerReplicatedCharacterStats ReplicatedCharacterStats;//[Offset: 0x670, Size: 0x18]
	bool bBlueprintReferencesSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 0x1]
	delegate OnCharacterDeath;//[Offset: 0x720, Size: 0x10]
	float CurrentHealth;//[Offset: 0x760, Size: 0x4]
	delegate OnMaxShieldReplicated;//[Offset: 0x768, Size: 0x10]
	uint16 MaxShield;//[Offset: 0x778, Size: 0x2]
	int16 MaxAttainableShield;//[Offset: 0x77a, Size: 0x2]
	uint16 CurrentShield;//[Offset: 0x77c, Size: 0x2]
	float LowHealthThreshold;//[Offset: 0x780, Size: 0x4]
	float HitAnimationInterval;//[Offset: 0x788, Size: 0x4]
	Vector HealthBarOffset;//[Offset: 0x798, Size: 0xc]
	enum BodyType;//[Offset: 0x7a4, Size: 0x1]
	bool bIsKindred;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 0x1]
	enum CharacterType;//[Offset: 0x7a6, Size: 0x1]
	FName RangedHitAnimationListName;//[Offset: 0x7a8, Size: 0x8]
	FName MeleeHitAnimationListName;//[Offset: 0x7b0, Size: 0x8]
	PhysicsAsset* HitboxPhysicsAsset;//[Offset: 0x7b8, Size: 0x8]
	PhysicsAsset* RagdollPhysicsAsset;//[Offset: 0x7c0, Size: 0x8]
	TimerHandle RagdollTimer;//[Offset: 0x7d8, Size: 0x8]
	AnimMontage* TimedMontageLoop;//[Offset: 0x7e0, Size: 0x8]
	TimerHandle TimedMontageLoopTimer;//[Offset: 0x7e8, Size: 0x8]
	TigerCharacter*[] CharmedByCharacters;//[Offset: 0x800, Size: 0x10]
	bool bIsDodging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]
	float SmoothYawInterpSpeed;//[Offset: 0x818, Size: 0x4]
	WidgetComponent* HealthBarComponent;//[Offset: 0x828, Size: 0x8]
	SkeletalMeshSocket* WidgetSocket;//[Offset: 0x830, Size: 0x8]
	void TriggerLimitedHitAnimation(const bool bIsRangedHit);// 0x14b0a50
	float TriggerHitAnimation(const bool bInIsRangedHit);// 0x14b09b0
	float TriggerAnimationByName(FName AnimationMontageName, const float PlayRate);// 0x14b08e0
	void TigerOnMaxShieldReplicated__DelegateSignature();// 0x197e4f0
	void TigerOnDefeated__DelegateSignature(Controller* InInstigatorController);// 0x197e4f0
	void TigerOnDamageMitigated__DelegateSignature(const float InTotalDamage, const float InDamageMitigated);// 0x197e4f0
	void TigerOnCrouchStateUpdated__DelegateSignature(const bool bInIsCrouched);// 0x197e4f0
	void TigerOnCharacterDeath__DelegateSignature();// 0x197e4f0
	void TigerOnCharacterAction__DelegateSignature(const enum InCharacterAction);// 0x197e4f0
	void SpawnBloodDecal();// 0x197e4f0
	bool ShouldHealthbarBeVisible();// 0x14b08b0
	void SetClanSwitch(const enum InTigerClan);// 0x14b0830
	void SetBaseMaxHealth(const float NewMaxHealth);// 0x14b07b0
	void ReportCharacterAction(const enum Action);// 0x14b0730
	void RefreshCharacterStats();// 0x14b0710
	int PostAkEvent(AkAudioEvent* AudioEvent, bool bEnableOcclusion);// 0x14b0640
	void OnWeaponVisualChangedEvent();// 0x197e4f0
	void OnWeaponFired(const bool bSecondaryWeaponFired);// 0x197e4f0
	void OnShowDamageAmount(out const Vector InHitLocation, out const LinearColor InDamageColor, const int InTotalDamageAmount, const int InHealthDamageAmount, const bool bInHasExtraHealth, const bool bInHasShield, const float InRangedDamageFalloffPercent);// 0x197e4f0
	void OnRep_MaxShieldChanged(const uint16 InOldMaxShield);// 0x14b0330
	void OnRep_CurrentShieldChanged();// 0x14b0310
	void OnRep_CurrentHealth(float InOldHealth);// 0x14b0280
	void OnPlayMeleeHitEffects(TigerMeleeWeapon* WeaponHitBy, out const Vector ImpactLocation, out const Vector HitDirection);// 0x197e4f0
	void OnLocalDisciplineUseFailed(out const DisciplineUse DisciplineUse);// 0x197e4f0
	void OnLocalDisciplineUse(out const DisciplineUse DisciplineUse, float ExpectedDuration);// 0x197e4f0
	void OnLocalDisciplineReleaseFailed(out const DisciplineUse DisciplineUse);// 0x197e4f0
	void OnLocalDisciplineRelease(out const DisciplineUse DisciplineUse, float ExpectedDuration);// 0x197e4f0
	void OnDodged(bool IsControllingPlayer, const bool bLaunchedInAir, Vector LaunchDirection, const byte DodgeStage);// 0x197e4f0
	void OnDisciplineUseSucceeded(out const DisciplineUse DisciplineUse);// 0x197e4f0
	void OnDisciplineReleaseSucceeded(out const DisciplineUse DisciplineUse);// 0x197e4f0
	void Multicast_SetRagdollDeath(bool bEnableRagdoll);// 0x14afc40
	void Multicast_PostAkEvent(AkAudioEvent* AudioEvent, bool bSkipLocallyControlled);// 0x14afb70
	void Multicast_PlaySoundAtActorLocation(SoundBase* SoundBase);// 0x14afae0
	void Multicast_PlayAnimationBroadcastUnreliable(AnimMontage* Animation, bool bSkipLocallyControlled);// 0x14afa10
	void Multicast_PlayAnimationBroadcast(AnimMontage* Animation, bool bSkipLocallyControlled);// 0x14af940
	void Multicast_OnJumped(const int InJumpCount);// 0x14af8b0
	void Multicast_OnDefeated(Controller* InInstigatorController);// 0x14af820
	void Multicast_ApplyEffectWithTarget(class TigerCharacterEffect Effect, TigerCharacter* Target);// 0x14af750
	void Multicast_ApplyEffectWithSocket(class TigerCharacterEffect Effect, const FName SocketName);// 0x14af680
	void Multicast_ApplyEffect(class TigerCharacterEffect Effect);// 0x14af5f0
	void Multicast_AbortAnimationBroadcastUnreliable(AnimMontage* Animation, bool bSkipLocallyControlled);// 0x14af520
	void Multicast_AbortAnimationBroadcast(AnimMontage* Animation, bool bSkipLocallyControlled);// 0x14af450
	void LocalApplyEffectWithTarget(class TigerCharacterEffect Effect, TigerCharacter* Target);// 0x14af380
	void LocalApplyEffectWithSocket(class TigerCharacterEffect Effect, const FName SocketName);// 0x14af2b0
	void LocalApplyEffect(class TigerCharacterEffect Effect);// 0x14af220
	bool IsSprinting();// 0x14af1f0
	bool IsSimulatedProxy();// 0x14af1c0
	bool IsPlayingAnimationMontage();// 0x14af190
	bool IsInvulnerable();// 0x14af160
	bool IsInJump();// 0x14af130
	bool IsInAir();// 0x14af100
	bool IsFriendlyWith(const TigerCharacter* OtherCharacter);// 0x14af060
	bool IsDowned();// 0x14af030
	bool IsDead();// 0x14af000
	bool IsClimbing();// 0x14aefd0
	bool IsCharacterVisible();// 0x14aefb0
	bool IsBelowLowHealthThreshold(const float InHealthOffset);// 0x14aef20
	TigerCharacterMovementComponent* GetTigerCharacterMovement();// 0x14ae230
	TigerAnimInstance* GetTigerAnimInstance();// 0x14ae200
	float GetSmoothYaw();// 0x14ae1d0
	bool GetShieldFull();// 0x14ae1a0
	TigerReplicatedCharacterStats GetReplicatedStats();// 0x14ae160
	enum GetPlayerHostilityStatus(const TigerCharacter* InOtherCharacter);// 0x14ae0c0
	TigerNonReplicatedCharacterStats GetNonReplicatedStats();// 0x14ae040
	float GetMaxShield();// 0x14ae010
	float GetMaxHealth();// 0x14adfd0
	float GetHeartVisibility();// 0x14adfb0
	float GetCurrentShield();// 0x14adf80
	float GetCurrentHealthPercentage();// 0x14adf50
	float GetCurrentHealth();// 0x14adf20
	float GetBaseMaxHealth();// 0x14adef0
	enum GetAkCharacterAlignment();// 0x14adec0
	Rotator GetAimRotation();// 0x14ade80
	float GetAimAnglePitch();// 0x14ade50
	float ChangeHealth(float InHealAmount, TigerCharacter* InInstigator, const bool bInOnlyHealRecentDamage);// 0x14add30
	bool CanBleed();// 0x14add00
	void CalculateCharacterStats(out TigerCharacterStatModification AccumulatedStats);// 0x14adc60
	void AuthorityApplyEffectWithTarget(class TigerCharacterEffect Effect, TigerCharacter* Target);// 0x14adb90
	void AuthorityApplyEffectWithSocket(class TigerCharacterEffect Effect, const FName SocketName);// 0x14adac0
	void AuthorityApplyEffect(class TigerCharacterEffect Effect);// 0x14ada30
	void AbortAnimationByName(FName InAnimationMontageName, const float InBlendOutTime, bool bInStopAllIfNullMontage);// 0x14ad910
	void AbortAnimation(AnimMontage* InAnimationMontage, const float InBlendOutTime, bool bInStopAllIfNullMontage);// 0x14ad7f0

--------------------------------
Class: TigerCharacterMeshManager.ActorComponent.Object
	TigerStaticMeshData[] StaticMeshes;//[Offset: 0xb0, Size: 0x10]
	TigerPoseableMeshData[] PoseableMeshes;//[Offset: 0xc0, Size: 0x10]
	TigerCharacterMeshData Mesh;//[Offset: 0xd0, Size: 0x18]
	StaticPiercingPhysics* StaticPiercingPhysics;//[Offset: 0x1d8, Size: 0x8]
	void SetVisibilityOnMeshes(bool bInNewVisibility);// 0x14bb9f0
	void SetVisibilityOnMesh(enum InMeshType, bool bInNewVisibility);// 0x14bb910
	void SetVisibilityOnDynamicMesh(enum InMeshType, bool bInNewVisibility);// 0x14bb830
	void SetVisibilityAllowanceOnMeshes(bool bInNewVisibilityIsAllowed);// 0x14bb7a0
	void SetVisibilityAllowanceOnMesh(enum InMeshType, bool bInNewVisibilityIsAllowed);// 0x14bb6c0
	void SetVisibilityAllowanceOnDynamicMesh(enum InMeshType, bool bInNewVisibilityIsAllowed);// 0x14bb5e0
	void SetSkeletalMesh(enum Part, SkeletalMesh* Mesh, bool bForceClothNextUpdateTeleport);// 0x14bb4d0
	void SetScalarParameterValueOnMeshes(FName InParameterName, float InParameterValue);// 0x14bb3f0
	void SetMaterial(enum Part, int MaterialIndex, MaterialInterface* Material);// 0x14bb2e0
	void RemoveMeshComponent(StaticMeshComponent* InMesh);// 0x14bae10
	void RegisterMeshComponent(enum Part, SkeletalMeshComponent* MeshComponent);// 0x14bad40
	SkeletalMeshComponent* GetSkeletalMeshComponent(enum Part);// 0x14ba480
	MeshComponent*[] GetRegisteredMeshes();// 0x14ba400
	void AddPoseableMesh(SkeletalMesh* InMesh, class TigerCharacterPoseableMeshAnimInstance InAnimClass, enum InType, TigerCharacterPoseableMeshBoneSetupData[] InPoseableMeshSetupData, const Vector InOffsetLocation, const Rotator InOffsetRotation);// 0x14b9e10
	void AddPiercing(StaticMesh* InPiercingMesh, const FName InFaceSlotName, const FName InPiercingSlotName, const Vector InLocalLocation, const Rotator InLocalRotation);// 0x14b9c60
	void AddMeshComponent(StaticMeshComponent* InMesh);// 0x14b9bd0

--------------------------------
Class: TigerCharacterPoseableMeshAnimInstance.AnimInstance.Object
	TigerCharacterMeshManager* MeshManager;//[Offset: 0x2b8, Size: 0x8]
	<FName,TigerCharacterPoseableMeshBoneData> NameToDataLut;//[Offset: 0x2c0, Size: 0x50]
	void SetUpNameToDataLut(out const TigerCharacterPoseableMeshBoneSetupData[] InPoseableMeshSetupData);// 0x14c01a0
	void SetOffsetLocationAndRotation(const Vector InOffsetLocation, const Rotator InOffsetRotation);// 0x14bff50
	void GetBoneOffsetTransform(FName InName, out Vector OutLocation, out Rotator OutRotation);// 0x14bf680

--------------------------------
Class: TigerCharacterPoseableMeshBoneData
	enum BodyPart;//[Offset: 0x0, Size: 0x1]
	FName ParentBone;//[Offset: 0x4, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0xc, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: TigerCharacterPoseableMeshBoneSetupData
	enum BodyPart;//[Offset: 0x0, Size: 0x1]
	FName ParentBone;//[Offset: 0x4, Size: 0x8]
	FName MeshBone;//[Offset: 0xc, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x14, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: TigerStaticMeshData.TigerMeshData
	StaticMeshComponent* MeshComponent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerMeshData
	bool bIsVisibile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bVisibilityIsAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerPoseableMeshData.TigerMeshData
	SkeletalMeshComponent* MeshComponent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerCharacterMeshData.TigerMeshData
	SkeletalMeshComponent* MeshComponent;//[Offset: 0x8, Size: 0x8]
	SkeletalMesh* RegisteredMesh;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: StaticPiercingPhysics.Object
	StaticPhysicsPiercingData[] SimulatedPhysicsStaticPiercings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: StaticPhysicsPiercingData
	StaticMeshComponent* PiercingStaticMesh;//[Offset: 0x0, Size: 0x8]
	Vector PreviousLocation;//[Offset: 0x8, Size: 0xc]
	Transform CachedRelativeTransform;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: TigerPerkItem.TigerInventoryItemBase.Object
	TigerPassiveConfig* PerkPassive;//[Offset: 0x130, Size: 0x8]

--------------------------------
Class: TigerInventoryItemBase.Object
	FText UiName;//[Offset: 0x30, Size: 0x18]
	FText UIDescription;//[Offset: 0x48, Size: 0x18]
	FText TemporaryVs2CategoryName;//[Offset: 0x60, Size: 0x18]
	Texture2D* UITexture;//[Offset: 0x78, Size: 0x28]
	Texture2D* UiBackgroundTexture;//[Offset: 0xa0, Size: 0x28]
	LinearColor TintColor;//[Offset: 0xc8, Size: 0x10]
	bool bForceToFrontWhenSorted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	enum Rarity;//[Offset: 0xd9, Size: 0x1]
	bool bIsAvailableForEveryone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bUseCustomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	enum OutfitGender;//[Offset: 0xdc, Size: 0x1]
	TigerInventoryItemOwnerType[] PossibleOwners;//[Offset: 0xe0, Size: 0x10]
	FString CameraTag;//[Offset: 0xf0, Size: 0x10]
	class TigerInventoryItemBase* ReplacementAsset;//[Offset: 0x100, Size: 0x28]
	UInt64Property TelemetryID;//[Size: 0x8]
	void TakeTelemetryIDFromCombinedItem(TigerCharacterCombinedItemConfiguration* InCombinedItem);// 0x15779b0
	void SetUIMaterialParameters(MaterialInstanceDynamic* InMaterial);// 0x197e4f0
	MaterialInterface* GetUiMaterialOverride();// 0x197e4f0
	enum GetStoreCategory();// 0x150b060
	bool GetPrimaryOwnerNoArchetype(out enum OutClan, out enum OutBodyType);// 0x1577380
	bool GetPrimaryOwner(out enum OutClan, out enum OutArchetype, out enum OutBodyType);// 0x1577240
	enum[] GetPossibleOwningClans();// 0x1577190
	enum[] GetPossibleOwningBodyTypes();// 0x1577110
	enum[] GetPossibleOwningArchetypes();// 0x1577090
	enum GetGender();// 0x1577060
	bool CanBeOwnedByBodyWithArchetypeRestriction(enum InBodyType, enum InPowerKit);// 0x1576e00
	bool CanBeOwnedByBodyType(enum InBodyType);// 0x1576d70
	bool CanBeOwnedByArchetype(enum InArchetypeType);// 0x1576ce0
	bool CanBeOwnedByAnyArchetypeOfClan(const TigerPlayerClanData* InClan, enum BodyType);// 0x1576c10

--------------------------------
Class: TigerPassiveConfig.DataAsset.Object
	FText Name;//[Offset: 0x30, Size: 0x18]
	FText Description;//[Offset: 0x48, Size: 0x18]
	FText Summary;//[Offset: 0x60, Size: 0x18]
	Texture2D* Icon;//[Offset: 0x78, Size: 0x8]
	MediaSource* PreviewVideo;//[Offset: 0x80, Size: 0x8]
	class TigerWidget* CustomWidget;//[Offset: 0x88, Size: 0x8]
	class TigerPassiveComponent* LogicComponent;//[Offset: 0x90, Size: 0x8]
	TigerCharacterStatModification PassiveStatChanges;//[Offset: 0x98, Size: 0xa8]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x2b43580
	void SetMediaOptionString(out const FName Key, FString Value);// 0x2b42ab0
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x2b429e0
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x2b42900
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x2b42820
	FString GetUrl();// 0x2b41080

--------------------------------
Class: TigerPassiveComponent.ActorComponent.Object
	TigerPlayer* PlayerOwner;//[Offset: 0xb0, Size: 0x8]
	TigerWidget* PassiveWidget;//[Offset: 0xb8, Size: 0x8]
	void SetPassiveWidget(TigerWidget* InWidget);// 0x1570ae0
	void OnFirstPossessed(TigerPlayer* InPlayer, const bool InHasAuthority);// 0x197e4f0
	void OnCreated(TigerPlayer* InPlayer, const bool InHasAuthority);// 0x197e4f0
	bool IsPassiveActive();// 0x15707e0
	TigerWidget* GetPassiveWidget();// 0x15701a0

--------------------------------
Class: TigerCharacterStatModification
	float ClanSkillCooldownMultiplier;//[Offset: 0x0, Size: 0x4]
	float ArchetypeSkillCooldownMultiplier;//[Offset: 0x4, Size: 0x4]
	float CooldownMultiplier;//[Offset: 0x8, Size: 0x4]
	float CooldownSpeedMultiplier;//[Offset: 0xc, Size: 0x4]
	float RechargeMultiplier;//[Offset: 0x10, Size: 0x4]
	float RechargeSpeedMultiplier;//[Offset: 0x14, Size: 0x4]
	TigerCharacterSingleStatModification MovementSpeed;//[Offset: 0x18, Size: 0x8]
	float ClimbSpeedMultiplier;//[Offset: 0x20, Size: 0x4]
	float MasqueradePointMultiplier;//[Offset: 0x24, Size: 0x4]
	float MasqueradeConsequenceDurationMultiplier;//[Offset: 0x28, Size: 0x4]
	float BloodhuntDurationMultiplier;//[Offset: 0x2c, Size: 0x4]
	TigerCharacterSingleStatModification MovementAcceleration;//[Offset: 0x30, Size: 0x8]
	TigerCharacterSingleStatModification Health;//[Offset: 0x38, Size: 0x8]
	float JumpForceMultiplier;//[Offset: 0x40, Size: 0x4]
	float WallJumpForceMultiplier;//[Offset: 0x44, Size: 0x4]
	float AttackSpeedMultiplier;//[Offset: 0x48, Size: 0x4]
	float ReloadSpeedMultiplier;//[Offset: 0x4c, Size: 0x4]
	float StaminaCostMultiplier;//[Offset: 0x50, Size: 0x4]
	float AmmoFindMultiplier;//[Offset: 0x54, Size: 0x4]
	float AmmoCapacityMultiplier;//[Offset: 0x58, Size: 0x4]
	float FeedSpeedMultiplier;//[Offset: 0x5c, Size: 0x4]
	float MeleeDamageDealtMultiplier;//[Offset: 0x60, Size: 0x4]
	float DamageDealtMultiplier;//[Offset: 0x64, Size: 0x4]
	float DamageDealtToCiviliansMultiplier;//[Offset: 0x68, Size: 0x4]
	float AbilityDamageDealtMultiplier;//[Offset: 0x6c, Size: 0x4]
	float ShotgunDamageDealtMultiplier;//[Offset: 0x70, Size: 0x4]
	float ShootingDamageDealtMultiplier;//[Offset: 0x74, Size: 0x4]
	float DamageTakenMultiplier;//[Offset: 0x78, Size: 0x4]
	float MeleeDamageTakenMultiplier;//[Offset: 0x7c, Size: 0x4]
	TigerCharacterSingleStatModification MeleeLifestealMultiplier;//[Offset: 0x80, Size: 0x8]
	float AbilityDamageTakenMultiplier;//[Offset: 0x88, Size: 0x4]
	float ShootingDamageTakenMultiplier;//[Offset: 0x8c, Size: 0x4]
	float MosquitoDamageTakenMultiplier;//[Offset: 0x90, Size: 0x4]
	float HealingReceivedMultiplier;//[Offset: 0x94, Size: 0x4]
	float LoudnessMultiplier;//[Offset: 0x98, Size: 0x4]
	float ReviveSpeedMultiplier;//[Offset: 0x9c, Size: 0x4]
	float ExperienceGainMultiplier;//[Offset: 0xa0, Size: 0x4]
	float AimSensitivityMultiplier;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: TigerCharacterSingleStatModification
	float AdditiveChange;//[Offset: 0x0, Size: 0x4]
	float MultiplicativeChange;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerCharacterCombinedItemConfiguration.TigerInventoryItemBase.Object
	class TigerInventoryItemBase* CombinedItemClassType;//[Offset: 0x130, Size: 0x28]
	TigerInventoryCombinedItemValue[] Items;//[Offset: 0x158, Size: 0x10]
	class TigerInventoryItemBase GetItemFromCombinedContainer(const enum InBodyType, const enum InPowerKit, const enum InClan);// 0x14b7550

--------------------------------
Class: TigerInventoryCombinedItemValue
	TigerInventoryItemOwnerType Key;//[Offset: 0x0, Size: 0x3]
	class TigerInventoryItemBase* Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerInventoryItemOwnerType
	enum Clan;//[Offset: 0x0, Size: 0x1]
	enum Archetype;//[Offset: 0x1, Size: 0x1]
	enum Gender;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: TigerPlayerClanData.DataAsset.Object
	FText DISPLAYNAME;//[Offset: 0x30, Size: 0x18]
	enum ClanType;//[Offset: 0x48, Size: 0x1]
	Texture2D* IconTexture;//[Offset: 0x50, Size: 0x8]
	Texture2D* LargeIconTexture;//[Offset: 0x58, Size: 0x8]
	class TigerCharacterOutfitConfiguration* CharacterCreationStartingOutfitPath;//[Offset: 0x60, Size: 0x28]
	class TigerCharacterBodyTypeCustomization[] BodyTypeItems;//[Offset: 0xb0, Size: 0x10]
	TigerPowerKit*[] PowerKits;//[Offset: 0xc0, Size: 0x10]
	class TigerUtilityPowerBaseComponent* UtilityPower;//[Offset: 0xd0, Size: 0x8]
	Texture2D* UtilityPowerIcon;//[Offset: 0xd8, Size: 0x8]
	SoundBase* StaggeredByAttackSound;//[Offset: 0xe0, Size: 0x8]
	class MatineeCameraShake* FallShakeLowDrop;//[Offset: 0xe8, Size: 0x8]
	class MatineeCameraShake* FallShakeHighDrop;//[Offset: 0xf0, Size: 0x8]
	TigerAnimationSetAsset* ClanAnimationSet;//[Offset: 0xf8, Size: 0x8]
	bool bBloodDropGlows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float ClanSpecificDiablerizeOffsets;//[Offset: 0x10c, Size: 0x4]
	TigerAnimationSetAsset*[] AdditionalAnimationSets;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: TigerCharacterOutfitConfiguration.TigerInventoryItemBase.Object
	TigerLodSplitMesh SplitMesh;//[Offset: 0x130, Size: 0x78]
	SkeletalMesh* AdditionalMesh;//[Offset: 0x1a8, Size: 0x28]
	TigerCharacterOutfitHoodieVariation[] HoodieVariations;//[Offset: 0x1d0, Size: 0x10]
	<int,MaterialInterface*> Materials;//[Offset: 0x1e0, Size: 0x50]
	TigerCharacterHolsteredWeaponTransforms HolsteredWeaponsTransforms;//[Offset: 0x230, Size: 0x60]
	bool bUseBodyTypeJointScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bUseBodyTypeBlendShapes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool bHoodieUpOnThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	SkeletalMesh* Mesh;//[Offset: 0x298, Size: 0x28]

--------------------------------
Class: TigerLodSplitMesh
	SkeletalMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	SkeletalMesh* Mesh_Lod0;//[Offset: 0x28, Size: 0x28]
	SkeletalMesh* Mesh_NoLod0;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: TigerCharacterOutfitHoodieVariation
	bool bEnableHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	SkeletalMesh* Mesh;//[Offset: 0x8, Size: 0x28]
	<int,MaterialInterface*> Materials;//[Offset: 0x30, Size: 0x50]
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: TigerCharacterCustomizationParameters
	TigerCharacterCustomizationScalarParameter[] Scalars;//[Offset: 0x0, Size: 0x10]
	TigerCharacterCustomizationColorParameter[] Colors;//[Offset: 0x10, Size: 0x10]
	TigerCharacterCustomizationTextureParameter[] Textures;//[Offset: 0x20, Size: 0x10]
	FName MaterialSlotName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerCharacterCustomizationScalarParameter
	enum DynamicMeshType;//[Offset: 0x0, Size: 0x1]
	enum Part;//[Offset: 0x1, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]
	float Value;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerCharacterCustomizationColorParameter
	enum DynamicMeshType;//[Offset: 0x0, Size: 0x1]
	enum Part;//[Offset: 0x1, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]
	LinearColor Color;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: TigerCharacterCustomizationTextureParameter
	enum DynamicMeshType;//[Offset: 0x0, Size: 0x1]
	enum Part;//[Offset: 0x1, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]
	Texture* Texture;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerCharacterHolsteredWeaponTransforms
	Transform MeleeWeaponHolsteredTransform;//[Offset: 0x0, Size: 0x30]
	Transform MeleeWeaponSecondaryHolsteredTransform;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: TigerCharacterBodyTypeCustomization.TigerInventoryItemBase.Object
	TigerCharacterPreset* CharacterPreset;//[Offset: 0x130, Size: 0x28]
	AnimSequence* JointScalings;//[Offset: 0x158, Size: 0x28]
	TigerCharacterBlendShapeScalarValue[] BlendShapeScalarValues;//[Offset: 0x180, Size: 0x10]
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x190, Size: 0x38]

--------------------------------
Class: TigerCharacterPreset.Object
	TigerPreviewerData PreviewerData;//[Offset: 0x28, Size: 0x2d8]
	enum BodyType;//[Offset: 0x300, Size: 0x1]
	enum GetBodyTypeFromHead();// 0x15ba2a0
	TigerCharacterAppearance GetAppearance();// 0x15ba120

--------------------------------
Class: TigerCharacterAppearance
	TigerPersistentOutfitSetup PersistentAppearance;//[Offset: 0x0, Size: 0x38]
	UInt64Property HeadId;//[Size: 0x8]
	int SkinColorIndex;//[Offset: 0x40, Size: 0x4]
	UInt64Property HairId;//[Size: 0x8]
	UInt64Property HairColorId;//[Size: 0x8]
	UInt64Property EyeColorId;//[Size: 0x8]
	UInt64Property TattooId;//[Size: 0x8]
	UInt64Property FacePaintId;//[Size: 0x8]
	UInt64Property HeadgearId;//[Size: 0x8]
	UInt64Property EyewearId;//[Size: 0x8]
	UInt64Property PiercingSetId;//[Size: 0x8]
	UInt64Property EyebrowShapeId;//[Size: 0x8]
	UInt64Property EyebrowColorId;//[Size: 0x8]
	UInt64Property BeardId;//[Size: 0x8]
	UInt64Property BeardColorId;//[Size: 0x8]
	UInt64Property BodyTypeModifierId;//[Size: 0x8]
	enum BodyType;//[Offset: 0xb0, Size: 0x1]
	EmoteIds(UInt64Property)[] EmoteIds;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: TigerPersistentOutfitSetup
	class TigerCharacterOutfitConfiguration* OutfitConfig;//[Offset: 0x0, Size: 0x28]
	UInt64Property OutfitId;//[Size: 0x8]
	int HoodieIndex;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TigerPreviewerData
	class TigerCharacterOutfitConfiguration* Outfit;//[Offset: 0x0, Size: 0x28]
	int OutfitHoodieIndex;//[Offset: 0x28, Size: 0x4]
	class TigerCharacterHeadConfiguration* Head;//[Offset: 0x30, Size: 0x28]
	int SkinColorIndex;//[Offset: 0x58, Size: 0x4]
	class TigerCharacterHairStyleCustomization* HairStyle;//[Offset: 0x60, Size: 0x28]
	class TigerCharacterHairColorCustomization* HairColor;//[Offset: 0x88, Size: 0x28]
	class TigerCharacterBeardCustomization* Beard;//[Offset: 0xb0, Size: 0x28]
	class TigerCharacterBeardColorCustomization* BeardColor;//[Offset: 0xd8, Size: 0x28]
	class TigerCharacterEyeColorCustomization* EyeColor;//[Offset: 0x100, Size: 0x28]
	class TigerCharacterEyebrowCustomization* Eyebrow;//[Offset: 0x128, Size: 0x28]
	class TigerCharacterEyebrowColorCustomization* EyebrowColor;//[Offset: 0x150, Size: 0x28]
	class TigerCharacterTattooCustomization* Tattoo;//[Offset: 0x178, Size: 0x28]
	class TigerCharacterFacePaintCustomization* FacePaint;//[Offset: 0x1a0, Size: 0x28]
	class TigerCharacterHeadgearCustomization* Headgear;//[Offset: 0x1c8, Size: 0x28]
	class TigerCharacterEyewearCustomization* Eyewear;//[Offset: 0x1f0, Size: 0x28]
	class TigerCharacterPiercingSetCustomization* PiercingSet;//[Offset: 0x218, Size: 0x28]
	class TigerCharacterBodyTypeCustomization* BodyTypeModifier;//[Offset: 0x240, Size: 0x28]
	class TigerCharacterEmoteCustomization[] Emotes;//[Offset: 0x268, Size: 0x10]
	class TigerCharacterOutfitConfiguration* CurrentOutfitConfig;//[Offset: 0x278, Size: 0x28]
	class TigerCharacterCombinedItemConfiguration* CombinedItem;//[Offset: 0x2a0, Size: 0x28]

--------------------------------
Class: TigerCharacterHeadConfiguration.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]
	TigerLodSplitMesh SplitMesh;//[Offset: 0x168, Size: 0x78]
	TigerLodSplitMesh SplitNeckMesh;//[Offset: 0x1e0, Size: 0x78]
	PoseAsset* FacePostAsset;//[Offset: 0x258, Size: 0x28]
	AnimSequence* FacePoseSourceAnimation;//[Offset: 0x280, Size: 0x28]
	MaterialInterface*[] BodySkinMaterials;//[Offset: 0x2a8, Size: 0x10]
	class TigerCharacterSkinToneCustomization[] SkinTones;//[Offset: 0x2b8, Size: 0x10]
	FName HeadgearMaleSocket;//[Offset: 0x2c8, Size: 0x8]
	FName HeadgearFemaleSocket;//[Offset: 0x2d0, Size: 0x8]
	FName HeadgearOffsetSocketName;//[Offset: 0x2d8, Size: 0x8]
	FName HeadgearOffsetLocator;//[Offset: 0x2e0, Size: 0x8]
	TigerCharacterHeadHeadgearOffset HeadgearOffset;//[Offset: 0x2e8, Size: 0x18]
	FName EyewearSocket;//[Offset: 0x300, Size: 0x8]
	SkeletalMesh* Mesh;//[Offset: 0x308, Size: 0x28]
	void SetPoseableHeadgear(const TigerCharacterHeadgearCustomization* InHeadgear, TigerCharacterMeshManager* InMeshManager, out const <FString> InFilter);// 0x197e4f0
	void SetPoseableHair(const TigerCharacterHairStyleCustomization* InHair, TigerCharacterMeshManager* InMeshManager, out const <FString> InFilter);// 0x197e4f0
	void SetPoseableBeard(const TigerCharacterBeardCustomization* InBeard, TigerCharacterMeshManager* InMeshManager, out const <FString> InFilter);// 0x197e4f0
	void SetPiercingSlotLocationAndRotation(TigerCharacterMeshManager* InMeshManager, FName InName, Vector InLocation, Rotator InRotation);// 0x197e4f0
	void SetPiercings(const TigerCharacterPiercingSetCustomization* InPiercingSet, TigerCharacterMeshManager* InMeshManager, out const <FString> InFilter);// 0x197e4f0
	void SetEyewearOffset(TigerCharacterMeshManager* MeshManager);// 0x197e4f0
	void GetPiercingSlots(TigerCharacterMeshManager* InMeshManager, out const <FString> InFilter, out <FName,TigerCharacterHeadPiercingSocket> OutSlots);// 0x197e4f0
	void DrawDebugPiercingSlots(TigerCharacterMeshManager* InMeshManager, out const <FString> InFilter);// 0x197e4f0

--------------------------------
Class: TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object

--------------------------------
Class: TigerCharacterHeadgearCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	bool bUsePoseableMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x138, Size: 0x38]
	SkeletalMesh* Mesh;//[Offset: 0x170, Size: 0x28]
	<int,MaterialInterface*> Materials;//[Offset: 0x198, Size: 0x50]
	TigerAnimationFilter* AnimationFilter;//[Offset: 0x1e8, Size: 0x8]
	bool bUseNeckMeshOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bHideBeard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	bool bHideEyewear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	void GatherPiercingFilter(out <FString> InOutPiercingFilter);// 0x197e4f0

--------------------------------
Class: TigerAnimationFilter.DataAsset.Object
	FName[] BonesToFilter;//[Offset: 0x30, Size: 0x10]
	FName[] BlendShapesToFilter;//[Offset: 0x40, Size: 0x10]
	Skeleton* Skeleton;//[Offset: 0x50, Size: 0x8]
	Skeleton* BigRigSkeleton;//[Offset: 0x58, Size: 0x8]
	int[] CurveIdsToFilter;//[Offset: 0x60, Size: 0x10]
	bool[] BoneIdsToFilter;//[Offset: 0x70, Size: 0x10]
	void UpdateFilter();// 0x36b1b50

--------------------------------
Class: TigerCharacterHairStyleCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]
	bool bUseLegacyHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	class AnimInstance* Animation;//[Offset: 0x170, Size: 0x8]
	TigerLodSplitMesh SplitMesh;//[Offset: 0x178, Size: 0x78]
	FName SocketAttachments;//[Offset: 0x1f0, Size: 0x8]
	SkeletalMesh* Mesh;//[Offset: 0x200, Size: 0x28]

--------------------------------
Class: TigerCharacterBeardCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterSkinToneCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]
	LinearColor LightColor;//[Offset: 0x168, Size: 0x10]
	float LightIntensity;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: TigerCharacterHeadHeadgearOffset
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: TigerCharacterPiercingSetCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object

--------------------------------
Class: TigerCharacterHeadPiercingSocket
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: TigerCharacterHairColorCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterBeardColorCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterEyeColorCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterEyebrowCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterEyebrowColorCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterTattooCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterFacePaintCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]

--------------------------------
Class: TigerCharacterEyewearCustomization.TigerCharacterPartOfHeadCustomization.TigerInventoryItemBase.Object
	TigerCharacterCustomizationParameters AdditionalParameters;//[Offset: 0x130, Size: 0x38]
	SkeletalMesh* Mesh;//[Offset: 0x168, Size: 0x28]
	<int,MaterialInterface*> Materials;//[Offset: 0x190, Size: 0x50]
	void GatherPiercingFilter(out <FString> InOutPiercingFilter);// 0x197e4f0

--------------------------------
Class: TigerCharacterEmoteCustomization.TigerInventoryItemBase.Object
	AnimMontage* EmoteMontage;//[Offset: 0x130, Size: 0x8]
	bool bStopsMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float ThumbnailPoseTime;//[Offset: 0x13c, Size: 0x4]

--------------------------------
Class: TigerCharacterBlendShapeScalarValue
	FName Name;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerPowerKit.DataAsset.Object
	enum ArchetypeType;//[Offset: 0x30, Size: 0x1]
	FText DISPLAYNAME;//[Offset: 0x38, Size: 0x18]
	FText ArchetypeKeywordsText;//[Offset: 0x50, Size: 0x18]
	FText FormattedDescription;//[Offset: 0x68, Size: 0x18]
	Color ArchetypeColor;//[Offset: 0x80, Size: 0x4]
	Texture2D* ArchetypeSelectTexture;//[Offset: 0x88, Size: 0x28]
	Material* ArchetypeHighlightMaterial;//[Offset: 0xb0, Size: 0x28]
	Texture2D* ArchetypeBackgroundTexture;//[Offset: 0xd8, Size: 0x28]
	Texture2D* ArchetypeIcon;//[Offset: 0x100, Size: 0x28]
	MediaSource* ArchetypeSelectCinematic;//[Offset: 0x128, Size: 0x8]
	TigerPassiveConfig*[] Passives;//[Offset: 0x130, Size: 0x10]
	TigerCharacterStatModification Stats;//[Offset: 0x140, Size: 0xa8]
	TigerItemId DefaultPerkId;//[Offset: 0x1e8, Size: 0x8]
	enum LeftDiscipline;//[Offset: 0x1f0, Size: 0x1]
	enum RightDiscipline;//[Offset: 0x1f1, Size: 0x1]
	TigerCharacterPreset* DefaultCharacterPreset;//[Offset: 0x1f8, Size: 0x28]
	TigerCharacterPreset* FirstTimeCharacterPreset;//[Offset: 0x220, Size: 0x28]
	TigerCharacterPreset* BotOutfitPresets;//[Offset: 0x248, Size: 0x28]
	TigerCharacterPreset* GetBotPresetByBodyType(enum InGender);// 0x15ba2d0

--------------------------------
Class: TigerItemId
	UInt64Property Value;//[Size: 0x8]

--------------------------------
Class: TigerUtilityPowerBaseComponent.ActorComponent.Object
	FText UtilityName;//[Offset: 0xb0, Size: 0x18]
	FText UtilityDescription;//[Offset: 0xc8, Size: 0x18]
	bool bUseClientBackgroundUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: TigerAnimationSetAsset.DataAsset.Object
	TigerAnimationSet* Set;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerAnimationSet.Object
	TigerAnimationSetAsset*[] ParentSets;//[Offset: 0x28, Size: 0x10]
	<FName,AnimSequence*> Sequences;//[Offset: 0x38, Size: 0x50]
	<FName,AnimMontage*> Montages;//[Offset: 0x88, Size: 0x50]
	<FName,TigerMontageList*> MontageLists;//[Offset: 0xd8, Size: 0x50]
	<FName,BlendSpace*> BlendSpaces;//[Offset: 0x128, Size: 0x50]
	<FName,BlendSpace1D*> BlendSpaces1D;//[Offset: 0x178, Size: 0x50]
	<FName,TigerRandomSequenceList*> RandomSequenceLists;//[Offset: 0x1c8, Size: 0x50]
	<FName,TigerCustomSequenceList*> CustomSequences;//[Offset: 0x218, Size: 0x50]
	<FName,TigerCustomMontageList*> CustomMontages;//[Offset: 0x268, Size: 0x50]
	<FName,TigerCustomBlendSpaceList*> CustomBlendSpaces;//[Offset: 0x2b8, Size: 0x50]
	<FName,TigerCustomBlendSpace1DList*> CustomBlendSpaces1D;//[Offset: 0x308, Size: 0x50]
	int Priority;//[Offset: 0x358, Size: 0x4]

--------------------------------
Class: TigerMontageList.Object
	AnimMontage*[] MontageList;//[Offset: 0x28, Size: 0x10]
	AnimMontage* GetRandomMontage();// 0x1489640

--------------------------------
Class: TigerRandomSequenceList.Object
	RandomPlayerSequenceEntry[] RandomSequenceList;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: RandomPlayerSequenceEntry
	AnimSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	float ChanceToPlay;//[Offset: 0x8, Size: 0x4]
	int MinLoopCount;//[Offset: 0xc, Size: 0x4]
	int MaxLoopCount;//[Offset: 0x10, Size: 0x4]
	float MinPlayRate;//[Offset: 0x14, Size: 0x4]
	float MaxPlayRate;//[Offset: 0x18, Size: 0x4]
	AlphaBlend BlendIn;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: TigerCustomSequenceList.Object

--------------------------------
Class: TigerCustomMontageList.Object

--------------------------------
Class: TigerCustomBlendSpaceList.Object

--------------------------------
Class: TigerCustomBlendSpace1DList.Object

--------------------------------
Class: TigerRangedWeaponComponent.ActorComponent.Object
	delegate OnShowCrosshairAmmoState;//[Offset: 0xb0, Size: 0x10]
	delegate OnReloadStart;//[Offset: 0xc0, Size: 0x10]
	delegate OnReloadFinished;//[Offset: 0xd0, Size: 0x10]
	delegate OnReloadAborted;//[Offset: 0xe0, Size: 0x10]
	delegate OnBurstCompleted;//[Offset: 0xf0, Size: 0x10]
	delegate OnLowAmmo;//[Offset: 0x100, Size: 0x10]
	delegate OnRangedWeaponEquipped;//[Offset: 0x110, Size: 0x10]
	delegate OnAimChanged;//[Offset: 0x120, Size: 0x10]
	TigerBodyPartProjectileDamageModifiersAsset* BodyPartDamageModifiersAsset;//[Offset: 0x130, Size: 0x8]
	TigerPlayer* TigerPlayer;//[Offset: 0x148, Size: 0x8]
	DataTable* RangedWeaponsDatatable;//[Offset: 0x150, Size: 0x8]
	DataTable* LoadedRangedDataTable;//[Offset: 0x158, Size: 0x8]
	StaticMesh* ImpactHelperMesh;//[Offset: 0x160, Size: 0x8]
	AkAudioEvent* FireModeSwitchEvent;//[Offset: 0x168, Size: 0x8]
	TigerRangedWeapon* EquippedWeaponType;//[Offset: 0x170, Size: 0x8]
	AnimMontage* LastFireAnimationMontage;//[Offset: 0x178, Size: 0x8]
	float CurrentFireRateMultiplier;//[Offset: 0x1a0, Size: 0x4]
	enum CurrentSlotForFireSettingIndex;//[Offset: 0x1b0, Size: 0x1]
	int CurrentFireSettingIndex;//[Offset: 0x1b4, Size: 0x4]
	TigerProjectileAreaEffect[] AreaEffectList;//[Offset: 0x1b8, Size: 0x10]
	TimerHandle ReloadWeaponTimerHandle;//[Offset: 0x1e0, Size: 0x8]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 0x1]
	bool bWantsToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb, Size: 0x1]
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	StaticMeshComponent* ImpactHelperMeshComp;//[Offset: 0x210, Size: 0x8]
	float CoolDownOutOfAmmoAudioEvent;//[Offset: 0x250, Size: 0x4]
	int ProjectilesFiredSinceStartFire;//[Offset: 0x264, Size: 0x4]
	TigerAICoordinator* AICoordinator;//[Offset: 0x290, Size: 0x8]
	TigerProjectile* LastFiredProjectile;//[Offset: 0x2c8, Size: 0x8]
	bool WeaponUsesScope();// 0x15c9250
	bool WeaponCanSwitchFireMode();// 0x15c9220
	bool WantsToFire();// 0x15c9200
	void TigerOnShowCrosshairAmmoState__DelegateSignature();// 0x197e4f0
	void TigerOnReloadStart__DelegateSignature();// 0x197e4f0
	void TigerOnReloadFinished__DelegateSignature();// 0x197e4f0
	void TigerOnReloadAborted__DelegateSignature(const bool bInWeaponDropped);// 0x197e4f0
	void TigerOnRangedWeaponEquipped__DelegateSignature();// 0x197e4f0
	void TigerOnLowAmmo__DelegateSignature();// 0x197e4f0
	void TigerOnBurstCompleted__DelegateSignature();// 0x197e4f0
	void TigerOnAimChanged__DelegateSignature(bool bIsAiming);// 0x197e4f0
	bool ShouldUseAimingAnimation();// 0x15c91d0
	void Server_SwitchFireMode();// 0x15c8f80
	void Server_SetFireAudioState(const enum InAudioFireState);// 0x1520210
	void Server_SetClientSideHitDetectionRanged(bool bEnableClientSideHits);// 0x15c8ec0
	void Server_DebugClientHit(int InProjectileId, Vector InMeshOffset, float InLastCorrectionTime, float InDeltaTime);// 0x15c8d10
	void OnRep_CurrentFireSettingIndexChanged(const int InPreviousFireSettingIndex);// 0x15c8bf0
	void OnMontageStartedDuringReload(AnimMontage* Montage);// 0x15c8b60
	void Multicast_UpdateReloadLoopsLeft(const int8 InReloadLoopsDelta);// 0x15c8aa0
	void Multicast_SetFireAudioState(const enum InAudioFireState);// 0x15c8a20
	void Multicast_SetClientSideHitDetectionRanged(bool bEnableClientSideHits);// 0x15c8990
	void Multicast_PlayReloadAnimations(const int8 InReloadLoops, const float InPlayRate);// 0x15c88c0
	void Multicast_PlayPrimingAnimations();// 0x15c88a0
	void Multicast_OnWeaponFired(const Vector_NetQuantize100 InSpawnLocation, float InShootDirPitch, float InShootDirYaw, const float InFireSpread, const TigerRangedRandomState InFireRandomState, bool bInFirstBulletInBurst, int InAmmoInMag, int InFireSettingsIndex);// 0x15c8630
	void Multicast_OnNpcWeaponFired(const Vector_NetQuantize100 InSpawnLocation, const Vector_NetQuantize100 InTargetLocation, const float InFireSpread, const TigerRangedRandomState InFireRandomState);// 0x15c84d0
	void Multicast_AbortReloadAnimation();// 0x1557f30
	bool IsLowOnLoadedAmmo();// 0x15c84a0
	bool IsInReload();// 0x15c8470
	bool IsInFireMode(const enum FireMode);// 0x15c83e0
	bool IsFiring();// 0x15c83c0
	bool IsAiming();// 0x15c8370
	bool HasEquippedOrWantedWeapon();// 0x15c8340
	bool HasAmmo();// 0x15c8310
	float GetWeaponDamageValue();// 0x15c82e0
	float GetReloadDonePercentage();// 0x15c82b0
	int GetMaxAmmo();// 0x15c8140
	int GetLoadedAmmo();// 0x15c8110
	int GetInventoryAmmo();// 0x15c80e0
	class CameraShakeBase GetHipFireCameraShake();// 0x15c80a0
	ForceFeedbackEffect* GetFireForceFeedback();// 0x15c8070
	TigerRangedWeapon* GetEquippedOrWantedWeapon();// 0x15c8040
	float GetCurrentSpread();// 0x15c8010
	float GetCurrentReloadDuration();// 0x15c7fe0
	class TigerProjectile GetCurrentProjectileType();// 0x15c7e60
	TigerFireSettings GetCurrentFireSettings();// 0x15c7d20
	enum GetCurrentFireMode();// 0x15c7cf0
	float GetCurrentAimedFov();// 0x15c7cc0
	enum GetAmmoWarning();// 0x15c7c90
	float GetAimSpeedMultiplier();// 0x15c7ba0
	class CameraShakeBase GetAimedFireCameraShake();// 0x15c7bd0
	void FinishReload();// 0x15c7b80
	void Client_SwitchFireMode(enum InWeaponSlot, int InNewFireModeIndex);// 0x15c7ab0
	void Client_DebugGetClientHit(int InProjectileId);// 0x149c1d0

--------------------------------
Class: TigerBodyPartProjectileDamageModifiersAsset.DataAsset.Object
	<FName,enum> BonesToBodyParts;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerRangedWeapon.TigerWeapon.Object
	FName WeaponName;//[Offset: 0xb0, Size: 0x8]
	enum WeaponType;//[Offset: 0xb8, Size: 0x1]
	FName CharacterReloadAnimationName;//[Offset: 0xbc, Size: 0x8]
	FName[] FireAnimations;//[Offset: 0xc8, Size: 0x10]
	float TimeAfterFireBeforePrimingIsAllowed;//[Offset: 0xd8, Size: 0x4]
	FName CharacterPrimingAnimation;//[Offset: 0xdc, Size: 0x8]
	AnimMontage* WeaponPrimingAnimation;//[Offset: 0xe8, Size: 0x8]
	FName RecoilNoiseBlendspace;//[Offset: 0xf0, Size: 0x8]
	AnimMontage* GunReload;//[Offset: 0xf8, Size: 0x8]
	AnimMontage* GunFireAnimation;//[Offset: 0x100, Size: 0x8]
	CurveFloat* VerticalRecoilCurve;//[Offset: 0x108, Size: 0x8]
	CurveFloat* HorizontalRecoilCurve;//[Offset: 0x110, Size: 0x8]
	CurveFloat* VerticalRecoilMultiplierCurveOverRecoil;//[Offset: 0x118, Size: 0x8]
	CurveFloat* HorizontalRecoilMultiplierCurveOverRecoil;//[Offset: 0x120, Size: 0x8]
	class TigerProjectile* ProjectileClass;//[Offset: 0x128, Size: 0x8]
	AkAudioEvent* StartAimingSound;//[Offset: 0x130, Size: 0x8]
	AkAudioEvent* StopAimingSound;//[Offset: 0x138, Size: 0x8]
	AkAudioEvent* HitWallSound;//[Offset: 0x140, Size: 0x8]
	AkAudioEvent* FireSound;//[Offset: 0x148, Size: 0x8]
	AkAudioEvent* BurstFireSound;//[Offset: 0x150, Size: 0x8]
	float LoopFireAfterFireRateMultiplier;//[Offset: 0x158, Size: 0x4]
	bool bShouldPostLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	bool bIsMinigun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 0x1]
	AkAudioEvent* LowAmmoSound;//[Offset: 0x160, Size: 0x8]
	AkAudioEvent* LastShotSound;//[Offset: 0x168, Size: 0x8]
	AkAudioEvent* OutOfAmmoSound;//[Offset: 0x170, Size: 0x8]
	AkAudioEvent* CoolDownAudioEvent;//[Offset: 0x178, Size: 0x8]
	int AmountOfProjectilesFiredBeforeCooldown;//[Offset: 0x180, Size: 0x4]
	float LowAmmoThresholdPercent;//[Offset: 0x184, Size: 0x4]
	bool bShowVisualAmmoWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	class MatineeCameraShake* CameraShake;//[Offset: 0x190, Size: 0x8]
	class MatineeCameraShake* CameraShakeAimed;//[Offset: 0x198, Size: 0x8]
	ForceFeedbackEffect* FireForceFeedback;//[Offset: 0x1a0, Size: 0x8]
	int ShotsPerTrail;//[Offset: 0x1a8, Size: 0x4]
	int AimedFov;//[Offset: 0x1ac, Size: 0x4]
	bool bShotsArePiercing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	enum AmmoType;//[Offset: 0x1b1, Size: 0x1]
	CurveFloat* DamageDropOffCurve;//[Offset: 0x1b8, Size: 0x8]
	class TigerCameraPreset* CameraPreset;//[Offset: 0x1c0, Size: 0x8]
	class TigerWeaponCrosshairWidget* CrosshairsByFireMode;//[Offset: 0x1c8, Size: 0x8]
	class TigerWeaponCrosshairWidget* AimingCrossHair;//[Offset: 0x1e0, Size: 0x8]
	FName[] SecondaryFireAnimations;//[Offset: 0x1e8, Size: 0x10]
	FName MuzzleSocket;//[Offset: 0x1f8, Size: 0x8]
	class Actor* TracerActor;//[Offset: 0x200, Size: 0x8]
	void PlayLoopingAkEvents(TigerCharacter* InInstigator);// 0x197e4f0
	void OnHitAuthority(TigerCharacter* Instigator, TigerCharacter* Target);// 0x197e4f0
	void OnEndFireAudio(TigerCharacter* InInstigator);// 0x197e4f0
	void OnBeginFireAudio(TigerCharacter* InInstigator);// 0x197e4f0
	Vector CalculateBulletDirection(const Vector InAimDirection, out TigerRangedRandomState InOutRandomState, int InBulletIndex, TigerRangedWeaponComponent* InRangedWeaponComponent);// 0x162c110

--------------------------------
Class: TigerWeapon.Object
	MaterialInterface* RarityMaterial;//[Offset: 0x30, Size: 0x8]
	enum Rarity;//[Offset: 0x38, Size: 0x1]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x40, Size: 0x8]
	SkeletalMesh* OffhandSkeletalMesh;//[Offset: 0x48, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x50, Size: 0x8]
	class TigerAimAssistSettings* AimAssist;//[Offset: 0x58, Size: 0x8]
	class TigerWeaponCrosshairWidget* Crosshair;//[Offset: 0x60, Size: 0x8]
	Texture2D* HUDIcon;//[Offset: 0x68, Size: 0x8]
	CurveFloat* RarityDamageMultiplierCurve;//[Offset: 0x70, Size: 0x8]
	FName WeaponUnequipAnimation;//[Offset: 0x78, Size: 0x8]
	FName WeaponEquipAnimation;//[Offset: 0x80, Size: 0x8]
	FName PrimaryAttachPoint;//[Offset: 0x88, Size: 0x8]
	FName SecondaryAttachPoint;//[Offset: 0x90, Size: 0x8]
	float FearValueMultiplier;//[Offset: 0x98, Size: 0x4]
	float FearDistanceMultiplier;//[Offset: 0x9c, Size: 0x4]
	bool bIsDualWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	UInt64Property PersistentTelemetryID;//[Size: 0x8]

--------------------------------
Class: TigerProjectile.Actor.Object
	SphereComponent* CollisionComp;//[Offset: 0x228, Size: 0x8]
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x230, Size: 0x8]
	ParticleSystemComponent* BulletTrail;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* ProjectileMesh;//[Offset: 0x240, Size: 0x8]
	TigerRangedWeapon* RangedWeaponType;//[Offset: 0x248, Size: 0x8]
	enum HitAudioEnum;//[Offset: 0x258, Size: 0x1]
	bool bDoProjectileCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bIsKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1]
	bool bWillBeReflected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 0x1]
	bool bIsReflected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bWasHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool bIsPooled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x260, Size: 0xc]
	TigerProjectilePool* HomeProjectilePool;//[Offset: 0x270, Size: 0x8]
	TigerRangedHitInfo[] PiercedCharacters;//[Offset: 0x2a0, Size: 0x10]
	TigerCharacter*[] HitCharacters;//[Offset: 0x2b0, Size: 0x10]
	void TriggerValidatedHitEffects(out const HitResult Hit);// 0x197e4f0
	void TriggerInstantaneousHitEffects(out const HitResult Hit);// 0x197e4f0
	void TriggerHitEffects(out const HitResult Hit);// 0x197e4f0
	void OverlappedActor(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x15bfaf0
	void OnReactivate();// 0x197e4f0
	void KillProjectile();// 0x15bf5e0
	bool IsWithinRange(out const Vector Location);// 0x15bf540
	bool IsFriendlyWith(const TigerPlayer* InOther);// 0x15bf4a0
	void HitActor(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x15bf2c0
	void HideTrail();// 0x197e4f0
	bool GetBulletTrailsEnabled();// 0x15bf290
	float GetBulletDamage();// 0x15bf260
	void CreateProjectileParticleSystem(byte InLocalNetRole);// 0x197e4f0
	bool CheckIsCharacterInHitResults(const TigerCharacter* InCharacter);// 0x15bf070

--------------------------------
Class: TigerProjectilePool.Object

--------------------------------
Class: TigerRangedHitInfo
	Vector_NetQuantize100 End;//[Offset: 0x0, Size: 0xc]
	enum BodyPart;//[Offset: 0xc, Size: 0x1]
	TigerCharacter* HitCharacter;//[Offset: 0x10, Size: 0x8]
	int ProjectileId;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TigerCameraPreset.Object
	float FOV;//[Offset: 0x28, Size: 0x4]
	float SpringArmLength;//[Offset: 0x2c, Size: 0x4]
	Vector CameraOffset;//[Offset: 0x30, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x3c, Size: 0xc]
	CurveFloat* TransitionCurveIn;//[Offset: 0x48, Size: 0x8]
	CurveFloat* TransitionCurveOutOverride;//[Offset: 0x50, Size: 0x8]
	CurveFloat* RotatePawnTransition;//[Offset: 0x58, Size: 0x8]
	float SidewaysCameraMirrorTime;//[Offset: 0x60, Size: 0x4]
	Vector CameraLagSpeed;//[Offset: 0x64, Size: 0xc]
	Vector CameraLagMaxDistance;//[Offset: 0x70, Size: 0xc]
	float CameraRotationLagSpeed;//[Offset: 0x7c, Size: 0x4]
	float CameraSensitivityModifier;//[Offset: 0x80, Size: 0x4]
	bool bUseCameraSensitivtyModifierDuringFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	class TigerCameraBehavior* CameraBehavior;//[Offset: 0x88, Size: 0x8]
	class MatineeCameraShake* CameraShakeBehaviour;//[Offset: 0x90, Size: 0x8]
	bool bShortenSpringArmWhenLookingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	float ViewPitchMax;//[Offset: 0x9c, Size: 0x4]
	float ArmLengthInterpSpeed;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: TigerCameraBehavior.Object
	TigerCameraPreset* CameraPreset;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerWeaponCrosshairWidget.TigerWidget.UserWidget.Widget.Visual.Object
	float WeaponSpread;//[Offset: 0x280, Size: 0x4]
	Vector PlayerMovementVelocity;//[Offset: 0x284, Size: 0xc]
	bool bIsAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float PreviewWeaponSpread;//[Offset: 0x294, Size: 0x4]
	TigerWeaponCrosshairSlot[] CrosshairImages;//[Offset: 0x298, Size: 0x10]
	TigerWeaponScalingCrosshairSlot[] CrosshairScalingImages;//[Offset: 0x2a8, Size: 0x10]
	void OnWeaponFired();// 0x197e4f0
	float GetScreenSpaceSpread(const float InFov);// 0x162c670

--------------------------------
Class: TigerWeaponCrosshairSlot
	Vector2D Direction;//[Offset: 0x0, Size: 0x8]
	Vector2D Offset;//[Offset: 0x8, Size: 0x8]
	Vector2D Alignment;//[Offset: 0x10, Size: 0x8]
	SlateBrush Brush;//[Offset: 0x18, Size: 0x88]
	LinearColor Color;//[Offset: 0xa0, Size: 0x10]
	float RenderAngle;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: TigerWeaponScalingCrosshairSlot
	SlateBrush Brush;//[Offset: 0x0, Size: 0x88]
	float RenderAngle;//[Offset: 0x88, Size: 0x4]
	float AdditionalSize;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: TigerAimAssistSettings.Object
	TigerAimAssistModeConfig Modes;//[Offset: 0x28, Size: 0x68]
	Vector2D BaseSlowdownAssistRadiusCm;//[Offset: 0x1c8, Size: 0x8]
	Vector2D BaseSlowdownAssistStrength;//[Offset: 0x1d0, Size: 0x8]
	Vector2D BaseRotationAssistRadiusCm;//[Offset: 0x1d8, Size: 0x8]
	Vector2D BaseRotationAssistStrength;//[Offset: 0x1e0, Size: 0x8]
	float MinRangeCm;//[Offset: 0x1e8, Size: 0x4]
	float MaxRangeCm;//[Offset: 0x1ec, Size: 0x4]
	Vector2D MaxRotationAssistDegreesPerSecond;//[Offset: 0x1f0, Size: 0x8]
	float NoEffectScoreMultiplier;//[Offset: 0x1f8, Size: 0x4]
	float RotationAssistMinimumMoveSpeed;//[Offset: 0x1fc, Size: 0x4]
	float TowardsHeadSlowdownMultiplier;//[Offset: 0x200, Size: 0x4]
	float AwayFromHeadSlowdownMultiplier;//[Offset: 0x204, Size: 0x4]
	float DamagedPreviouslyMultiplier;//[Offset: 0x208, Size: 0x4]
	float DamagedRecentlyMultiplier;//[Offset: 0x20c, Size: 0x4]
	float DamagedRecentlyTime;//[Offset: 0x210, Size: 0x4]
	float MostDamagedPlayerMultiplier;//[Offset: 0x214, Size: 0x4]
	float TargetDownedModifier;//[Offset: 0x218, Size: 0x4]
	float TargetIsPreviousTargetModifier;//[Offset: 0x21c, Size: 0x4]
	float TargetActsAsPlayerModifier;//[Offset: 0x220, Size: 0x4]
	float CloseToHeadMax;//[Offset: 0x224, Size: 0x4]
	bool bShouldAssistWhenVisibleThroughWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool ShouldUseWeaponRangeAsModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	float AdsPreviouslyMultiplier;//[Offset: 0x22c, Size: 0x4]
	float AdsRecentlyMultiplier;//[Offset: 0x230, Size: 0x4]
	float AdsRecentlyTime;//[Offset: 0x234, Size: 0x4]
	float AdsDamageMultiplier;//[Offset: 0x238, Size: 0x4]
	float AdsDamageTime;//[Offset: 0x23c, Size: 0x4]

--------------------------------
Class: TigerAimAssistModeConfig
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	TigerAimAssistEffect SlowdownEffect;//[Offset: 0x8, Size: 0x30]
	TigerAimAssistEffect RotationEffect;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: TigerAimAssistEffect
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bDisableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	TigerAimAssistDistanceMapping Radius;//[Offset: 0x8, Size: 0x10]
	TigerAimAssistDistanceMapping Strength;//[Offset: 0x18, Size: 0x10]
	float MinRangeMultiplier;//[Offset: 0x28, Size: 0x4]
	float MaxRangeMultiplier;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TigerAimAssistDistanceMapping
	CurveFloat* NormalizedDistanceToMultiplier;//[Offset: 0x0, Size: 0x8]
	Vector2D Multiplier;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerRangedRandomState
	UInt64Property RandomState;//[Size: 0x8]

--------------------------------
Class: TigerProjectileAreaEffect
	TigerAreaEffect* AreaEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerAreaEffect.Actor.Object
	ParticleSystem* StartParticleType;//[Offset: 0x228, Size: 0x8]
	ParticleSystem* LoopedParticleType;//[Offset: 0x230, Size: 0x8]
	ParticleSystem* EndParticleType;//[Offset: 0x238, Size: 0x8]
	class DamageType* DamageType;//[Offset: 0x240, Size: 0x8]
	enum DamageCauserType;//[Offset: 0x248, Size: 0x1]
	RuntimeFloatCurve TimeDamageModifierCurve;//[Offset: 0x250, Size: 0x88]
	RuntimeFloatCurve RangeDamageModifierCurve;//[Offset: 0x2d8, Size: 0x88]
	RuntimeFloatCurve TimeHealingModifierCurve;//[Offset: 0x360, Size: 0x88]
	RuntimeFloatCurve RangeHealingModifierCurve;//[Offset: 0x3e8, Size: 0x88]
	SphereComponent* CollisionSphere;//[Offset: 0x470, Size: 0x8]
	float Range;//[Offset: 0x478, Size: 0x4]
	class TigerBuff* DamageBuff;//[Offset: 0x480, Size: 0x8]
	float InitialDamageAmount;//[Offset: 0x488, Size: 0x4]
	float DamageAmount;//[Offset: 0x48c, Size: 0x4]
	class TigerBuff* HealBuff;//[Offset: 0x490, Size: 0x8]
	float InitialHealAmount;//[Offset: 0x498, Size: 0x4]
	float HealAmount;//[Offset: 0x49c, Size: 0x4]
	float TickRate;//[Offset: 0x4a0, Size: 0x4]
	float Duration;//[Offset: 0x4a4, Size: 0x4]
	float Delay;//[Offset: 0x4a8, Size: 0x4]
	float CullDistanceInGunRange;//[Offset: 0x4ac, Size: 0x4]
	bool bShouldAffectCivilians;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	bool bSkipLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 0x1]
	ParticleSystemComponent* LoopedParticleComponent;//[Offset: 0x4b8, Size: 0x8]
	bool bCreatedInGunRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1]
	TigerDamageContext DamageContext;//[Offset: 0x4e0, Size: 0x18]
	void Trigger();// 0x1492400
	void OnVehicleHit(const Actor* InActor);// 0x197e4f0
	void OnTriggerClient();// 0x197e4f0

--------------------------------
Class: TigerBuff.Object
	TigerCharacterStatModification StatModification;//[Offset: 0x30, Size: 0xa8]
	TigerStatusEffect StatusEffect;//[Offset: 0xd8, Size: 0xe]
	float Duration;//[Offset: 0xe8, Size: 0x4]
	bool bDoesTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	float TimeBetweenTicks;//[Offset: 0xf0, Size: 0x4]
	TigerNiagaraAttachment ActivatedNiagaraAttachment;//[Offset: 0xf8, Size: 0x48]
	TigerNiagaraAttachment NiagaraAttachment;//[Offset: 0x140, Size: 0x48]
	TigerNiagaraAttachment[] AdditionalNiagaraAttachments;//[Offset: 0x188, Size: 0x10]
	TigerNiagaraAttachment DeactivatedNiagaraAttachment;//[Offset: 0x198, Size: 0x48]
	bool bOnlySpawnBuffParticleOnLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bShowParticlesOnHiddenEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	bool bAttachToMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 0x1]
	FName AttachPoint;//[Offset: 0x1e4, Size: 0x8]
	bool bBuffParticleTypeAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	ParticleSystem* BuffParticleType;//[Offset: 0x1f0, Size: 0x8]
	bool bSpawnActivatedParticleOnRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	bool bOnlySpawnActivatedParticleOnLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 0x1]
	bool bAttachActivatedParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 0x1]
	bool bActivatedParticleTypeAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fb, Size: 0x1]
	ParticleSystem* ActivatedParticleType;//[Offset: 0x200, Size: 0x8]
	bool bOnlySpawnDeactivatedParticleOnLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	bool bAttachDeactivatedParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	bool bDeactivatedParticleTypeAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1]
	ParticleSystem* DeactivatedParticleType;//[Offset: 0x210, Size: 0x8]
	FName ActivationMontageName;//[Offset: 0x218, Size: 0x8]
	AkAudioEvent* ActivatedSFX;//[Offset: 0x220, Size: 0x8]
	AkAudioEvent* DeactivatedSFX;//[Offset: 0x228, Size: 0x8]
	bool bAllowClientSideBuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bStacks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	bool bOnlyStackWithDifferentCasters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1]
	int MaxStacks;//[Offset: 0x234, Size: 0x4]
	bool bKeepAfterDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	int RemoveBuffOnActions;//[Offset: 0x23c, Size: 0x4]
	bool bShowOnUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	Texture2D* StatusImage;//[Offset: 0x248, Size: 0x8]
	enum StatusType;//[Offset: 0x250, Size: 0x1]
	enum ProgressType;//[Offset: 0x251, Size: 0x1]
	class TigerBuffPostProcess* PostProcessEffect;//[Offset: 0x258, Size: 0x8]
	UInt64Property PersistentTelemetryID;//[Size: 0x8]
	void OnRefreshed(TigerCharacter* InBuffOwner, TigerCharacter* InBuffCaster);// 0x197e4f0
	void OnDeactivated(TigerCharacter* InBuffOwner, TigerCharacter* InBuffCaster);// 0x197e4f0
	void OnActivated(TigerCharacter* InBuffOwner, TigerCharacter* InBuffCaster);// 0x197e4f0
	TigerBuffInstance* FindBuffInstance(TigerCharacter* InBuffOwner, TigerCharacter* InBuffCaster);// 0x1495f40

--------------------------------
Class: TigerBuffInstance.Object
	TigerBuffReplicatedInstanceData BuffReplicatedInstanceData;//[Offset: 0x28, Size: 0x18]
	TigerCharacter* OwnerCharacter;//[Offset: 0x40, Size: 0x8]
	TigerBuff* Buff;//[Offset: 0x48, Size: 0x8]
	ParticleSystemComponent* ActiveBuffParticles;//[Offset: 0x60, Size: 0x8]
	NiagaraComponent* ActiveNiagaraParticles;//[Offset: 0x68, Size: 0x8]
	NiagaraComponent*[] AdditionalActiveNiagaraParticles;//[Offset: 0x70, Size: 0x10]
	TigerCharacter* GetOwningCharacter();// 0x1496270
	NiagaraComponent* GetActiveNiagaraParticles();// 0x1496030
	ParticleSystemComponent* GetActiveBuffParticles();// 0x1496010

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x450, Size: 0x8]
	enum TickBehavior;//[Offset: 0x458, Size: 0x1]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x460, Size: 0xc8]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 0x1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x528, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x554, Size: 0x1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x558, Size: 0x4]
	NiagaraMaterialOverride[] EmitterMaterials;//[Offset: 0x560, Size: 0x10]
	delegate OnSystemFinished;//[Offset: 0x578, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x588, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x590, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x598, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x599, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x59a, Size: 0x1]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0xb6afc0
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0xb6aee0
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0xb6ae10
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0xb6ad40
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0xb6ac70
	void SetVariableObject(FName InVariableName, Object* Object);// 0xb6aba0
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0xb6aad0
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0xb6aa00
	void SetVariableInt(FName InVariableName, int InValue);// 0xb6a930
	void SetVariableFloat(FName InVariableName, float InValue);// 0xb6a860
	void SetVariableBool(FName InVariableName, bool InValue);// 0xb6a790
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0xb6a6c0
	void SetTickBehavior(enum NewTickBehavior);// 0xb6a640
	void SetSeekDelta(float InSeekDelta);// 0xb6a5c0
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0xb6a530
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance);// 0xb6a460
	void SetPaused(bool bInPaused);// 0xb6a3d0
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0xb6a2e0
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0xb6a1f0
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0xb6a110
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0xb6a020
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0xb69ba0
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0xb69f30
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0xb69e50
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0xb69d60
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0xb69c80
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0xb69ba0
	void SetMaxSimTime(float InMaxTime);// 0xb69b20
	void SetGpuComputeDebug(bool bEnableDebug);// 0xb69a90
	void SetForceSolo(bool bInForceSolo);// 0xb69a00
	void SetDesiredAge(float InDesiredAge);// 0xb69980
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0xb698f0
	void SetAutoDestroy(bool bInAutoDestroy);// 0xb69860
	void SetAsset(NiagaraSystem* InAsset);// 0xb697d0
	void SetAllowScalability(bool bAllow);// 0xb69740
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0xb696c0
	void SeekToDesiredAge(float InDesiredAge);// 0xb69640
	void ResetSystem();// 0xb69620
	void ReinitializeSystem();// 0xb69600
	bool IsPaused();// 0xb695d0
	enum GetTickBehavior();// 0xb695b0
	float GetSeekDelta();// 0xb69580
	bool GetPreviewLODDistanceEnabled();// 0xb69560
	int GetPreviewLODDistance();// 0xb69540
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0xb692a0
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0xb693f0
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0xb691b0
	float GetMaxSimTime();// 0xb69180
	bool GetForceSolo();// 0xb69150
	float GetDesiredAge();// 0xb69120
	NiagaraDataInterface* GetDataInterface(FString Name);// 0xb69070
	NiagaraSystem* GetAsset();// 0xb69050
	enum GetAgeUpdateMode();// 0xb69020
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0xb68f50
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0xb68e80

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	NiagaraEffectType* EffectType;//[Offset: 0x38, Size: 0x8]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x48, Size: 0x10]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x58, Size: 0x10]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x68, Size: 0x10]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x78, Size: 0x10]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x88, Size: 0x8]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x90, Size: 0x8]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xa8, Size: 0x218]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2c0, Size: 0xc8]
	Box FixedBounds;//[Offset: 0x388, Size: 0x1c]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float WarmupTime;//[Offset: 0x3a8, Size: 0x4]
	int WarmupTickCount;//[Offset: 0x3ac, Size: 0x4]
	float WarmupTickDelta;//[Offset: 0x3b0, Size: 0x4]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x3b8, Size: 0x10]

--------------------------------
Class: NiagaraEffectType.Object
	enum UpdateFrequency;//[Offset: 0x28, Size: 0x4]
	enum CullReaction;//[Offset: 0x2c, Size: 0x4]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x30, Size: 0x8]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x38, Size: 0x10]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x48, Size: 0x10]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	float MaxDistance;//[Offset: 0x34, Size: 0x4]
	int MaxInstances;//[Offset: 0x38, Size: 0x4]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	UInt32Property QualityLevelMask;//[Size: 0x4]
	UInt32Property SetQualityLevelMask;//[Size: 0x4]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int MinInt;//[Offset: 0xc, Size: 0x4]
	int MaxInt;//[Offset: 0x10, Size: 0x4]
	float MinFloat;//[Offset: 0x14, Size: 0x4]
	float MaxFloat;//[Offset: 0x18, Size: 0x4]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10]
	FName IdName;//[Offset: 0x10, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName Name;//[Offset: 0x1c, Size: 0x8]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int RandomSeed;//[Offset: 0x2c, Size: 0x4]
	enum AllocationMode;//[Offset: 0x30, Size: 0x1]
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28]
	enum SimTarget;//[Offset: 0x88, Size: 0x1]
	Box FixedBounds;//[Offset: 0x8c, Size: 0x1c]
	int MinDetailLevel;//[Offset: 0xa8, Size: 0x4]
	int MaxDetailLevel;//[Offset: 0xac, Size: 0x4]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xb0, Size: 0x14]
	NiagaraPlatformSet Platforms;//[Offset: 0xc8, Size: 0x30]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0xf8, Size: 0x10]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x108, Size: 0x1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x108, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x108, Size: 0x1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x108, Size: 0x1]
	float MaxDeltaTimePerTick;//[Offset: 0x10c, Size: 0x4]
	UInt32Property DefaultShaderStageIndex;//[Size: 0x4]
	UInt32Property MaxUpdateIterations;//[Size: 0x4]
	<SpawnStages(UInt32Property)> SpawnStages;//[Offset: 0x118, Size: 0x50]
	bool bSimulationStagesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
	bool bDeprecatedShaderStagesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 0x1]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x168, Size: 0x1]
	FString UniqueEmitterName;//[Offset: 0x170, Size: 0x10]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x180, Size: 0x10]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x190, Size: 0x10]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x1a0, Size: 0x10]
	NiagaraScript* GPUComputeScript;//[Offset: 0x1b0, Size: 0x8]
	FName[] SharedEventGeneratorIds;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1]
	int UsageIndex;//[Offset: 0x2c, Size: 0x4]
	Guid UsageId;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x78]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xb8, Size: 0x98]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x150, Size: 0x10]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x160, Size: 0x48]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1b8, Size: 0xe0]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x298, Size: 0x10]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x2a8, Size: 0x10]
	void RaiseOnGPUCompilationComplete();// 0xb7a5a0

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10]
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10]
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x78, Size: 0x4]
	UInt32Property PaddedParameterSize;//[Size: 0x4]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x80, Size: 0x10]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2]
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2]
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2]
	uint16 DestSize;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]
	int SrcOffset;//[Offset: 0x20, Size: 0x4]
	int DestOffset;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10]
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableData
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10]
	byte[] OptimizedByteCode;//[Offset: 0x10, Size: 0x10]
	int NumTempRegisters;//[Offset: 0x20, Size: 0x4]
	int NumUserPtrs;//[Offset: 0x24, Size: 0x4]
	byte[] ScriptLiterals;//[Offset: 0x28, Size: 0x10]
	NiagaraVariable[] Attributes;//[Offset: 0x38, Size: 0x10]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0x48, Size: 0x1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0x50, Size: 0x10]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0x60, Size: 0x10]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0x80, Size: 0x10]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0x90, Size: 0x10]
	NiagaraStatScope[] StatScopes;//[Offset: 0xa0, Size: 0x10]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0xb0, Size: 0x10]
	enum LastCompileStatus;//[Offset: 0xc0, Size: 0x1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0xc8, Size: 0x10]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName OwnerName;//[Offset: 0x8, Size: 0x8]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10]
	int NumOutputs;//[Offset: 0x20, Size: 0x4]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8]
	FName Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8]
	FName FriendlyName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10]
	FString DIClassName;//[Offset: 0x10, Size: 0x10]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8]
	FName IterationSource;//[Offset: 0x8, Size: 0x8]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	FName[] OutputDestinations;//[Offset: 0x18, Size: 0x10]
	int MinStage;//[Offset: 0x28, Size: 0x4]
	int MaxStage;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8]
	Guid CompileId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x78]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0xb76ac0
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0xb769d0
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0xb768f0
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0xb765b0
	void SetIntParameter(FString InVariableName, int InValue);// 0xb764d0
	void SetFloatParameter(FString InVariableName, float InValue);// 0xb763e0
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0xb762f0
	void SetBoolParameter(FString InVariableName, bool InValue);// 0xb76210
	Vector GetVectorParameter(FString InVariableName);// 0xb75df0
	Vector4 GetVector4Parameter(FString InVariableName);// 0xb75d30
	Vector2D GetVector2DParameter(FString InVariableName);// 0xb75c70
	Quat GetQuatParameter(FString InVariableName);// 0xb75bb0
	int GetIntParameter(FString InVariableName);// 0xb75a30
	float GetFloatParameter(FString InVariableName);// 0xb75980
	LinearColor GetColorParameter(FString InVariableName);// 0xb758c0
	bool GetBoolParameter(FString InVariableName);// 0xb75810

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8]
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4]
	FName ID;//[Offset: 0x4, Size: 0x8]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc]
	UInt32Property TotalFloatComponents;//[Size: 0x4]
	UInt32Property TotalInt32Components;//[Size: 0x4]
	UInt32Property TotalHalfComponents;//[Size: 0x4]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	enum SimTarget;//[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	UInt32Property FloatComponentStart;//[Size: 0x4]
	UInt32Property Int32ComponentStart;//[Size: 0x4]
	UInt32Property HalfComponentStart;//[Size: 0x4]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: NiagaraTypeLayoutInfo
	FloatComponentByteOffsets(UInt32Property)[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10]
	FloatComponentRegisterOffsets(UInt32Property)[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10]
	Int32ComponentByteOffsets(UInt32Property)[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10]
	Int32ComponentRegisterOffsets(UInt32Property)[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10]
	HalfComponentByteOffsets(UInt32Property)[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10]
	HalfComponentRegisterOffsets(UInt32Property)[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4]
	float Medium;//[Offset: 0x4, Size: 0x4]
	float High;//[Offset: 0x8, Size: 0x4]
	float Epic;//[Offset: 0xc, Size: 0x4]
	float Cine;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30]
	int SortOrderHint;//[Offset: 0x58, Size: 0x4]
	enum RenderResolution;//[Offset: 0x5c, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1]
	UInt32Property SpawnNumber;//[Size: 0x4]
	UInt32Property MaxEventsPerFrame;//[Size: 0x4]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10]
	FName SourceEventName;//[Offset: 0x44, Size: 0x8]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	UInt32Property MinSpawnNumber;//[Size: 0x4]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8]
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x78]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x78, Size: 0x40]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xb8, Size: 0x40]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0xf8, Size: 0x40]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x138, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x158, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x178, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x198, Size: 0x10]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1a8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1c8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1e8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x208, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: NiagaraMaterialOverride
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	UInt32Property MaterialSubIndex;//[Size: 0x4]
	NiagaraRendererProperties* EmitterRendererProperty;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerBuffReplicatedInstanceData
	class TigerBuff* BuffType;//[Offset: 0x0, Size: 0x8]
	int BuffID;//[Offset: 0x8, Size: 0x4]
	float SyncedEndTime;//[Offset: 0xc, Size: 0x4]
	float BuffStrength;//[Offset: 0x10, Size: 0x4]
	int BuffCasterId;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerStatusEffect
	bool bBlockInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBlockOffensiveActions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBlockObjectInteractions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bInvulnerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bLogicHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bDisableSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bDisableClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bDisableDisciplines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bDisableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bDisableHeightenedSenses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bDisableAimGlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bBlockAILogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: TigerNiagaraAttachment
	SoftObjectPath NiagaraPath;//[Offset: 0x0, Size: 0x18]
	FName AttachPointName;//[Offset: 0x20, Size: 0x8]
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	byte AttachLocationRule;//[Offset: 0x40, Size: 0x1]
	bool bOnlySpawnOnLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bUseAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: TigerBuffPostProcess.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	PostProcessComponent* PostProcess;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: TigerDamageContext
	Object* DamagingUObject;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerAICoordinator.ActorComponent.Object
	int AttackingNpcForPlayerLimit;//[Offset: 0xb0, Size: 0x4]
	float SprintTimeUntilReport;//[Offset: 0xb4, Size: 0x4]
	float ClimbTimeUntilReport;//[Offset: 0xb8, Size: 0x4]
	float AirTimeUntilReport;//[Offset: 0xbc, Size: 0x4]
	float SuspicionStateTime;//[Offset: 0xc0, Size: 0x4]
	float ThreatStateTime;//[Offset: 0xc4, Size: 0x4]
	float SuspiciousStateEscapeRadiusSquared;//[Offset: 0xc8, Size: 0x4]
	float ThreatenedStateEscapeRadiusSquared;//[Offset: 0xcc, Size: 0x4]
	float MakeNearbyNPCsSuspiciousRadius;//[Offset: 0xd0, Size: 0x4]
	float FearValueDecreasePerSecond;//[Offset: 0xd4, Size: 0x4]
	float CrimeActionCooldownDistance;//[Offset: 0xd8, Size: 0x4]
	float CrimeActionMasqueradePointThreshold;//[Offset: 0xe0, Size: 0x4]
	float PatrollingHelicopterEventRadius;//[Offset: 0xe4, Size: 0x4]
	float PatrollingHelicopterLowestResponseHeight;//[Offset: 0xe8, Size: 0x4]
	float PatrollingHelicopterEventTimeOut;//[Offset: 0xec, Size: 0x4]
	float PatrollingHelicopterTimeBetweenGunfireEventPositionUpdate;//[Offset: 0xf0, Size: 0x4]
	float TimeInSmokeUntilRemoval;//[Offset: 0xf4, Size: 0x4]
	bool bUseMovementTickets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	TigerAiMovementBudgetAsset* MovementBudgetAsset;//[Offset: 0x100, Size: 0x8]
	TigerAiClaimFireWeaponTicketDurations ClaimFireTicketDurations;//[Offset: 0x108, Size: 0x20]
	bool bPatrollingHelicotpersAreActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	TigerEntityPatrollingHelicopter*[] EntityPatrollingHelicopters;//[Offset: 0x1c0, Size: 0x10]
	TigerAiEntityPlatoon*[] EntityPlatoons;//[Offset: 0x250, Size: 0x10]
	TigerAiSquad*[] Squads;//[Offset: 0x260, Size: 0x10]
	TigerPlayerGrid* PlayerGrid;//[Offset: 0x310, Size: 0x8]
	TigerPlayerActionProcessData[] DelayedPlayerActionProcesses;//[Offset: 0x3e0, Size: 0x10]
	void SetNPCSightModifier(const float Modifier);// 0x1478cf0
	void SetEnableAICoordinator(const bool bEnabled);// 0x1478bb0
	void CacheFearValueThresholds(const TigerFearValueAsset* CivFearValueAsset, const TigerFearValueAsset* PolFearValueAsset);// 0x1478630

--------------------------------
Class: TigerAiMovementBudgetAsset.DataAsset.Object
	<FName,TigerAiMovementBudget> MovementBudgets;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerAiMovementBudget
	int NpcMoveBudget;//[Offset: 0x0, Size: 0x4]
	float MinAllotedMoveTime;//[Offset: 0xc, Size: 0x4]
	float MaxAllotedMoveTime;//[Offset: 0x10, Size: 0x4]
	bool bRestrictMovementTimePerTicket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerFearValueAsset.DataAsset.Object
	<enum,float> FearValueThresholds;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerAiClaimFireWeaponTicketDurations
	float NonShootingClaimDuration;//[Offset: 0x0, Size: 0x4]
	float ChasingPrioritizedTicketWaitTime;//[Offset: 0x4, Size: 0x4]
	float NonChasingPrioritizedTicketWaitTime;//[Offset: 0x8, Size: 0x4]
	float ChaserMaxTicketHoldDuration;//[Offset: 0xc, Size: 0x4]
	float NonChaserMaxTicketHoldDurationAgainstChaser;//[Offset: 0x10, Size: 0x4]
	float NonChaserMaxTicketHoldDurationAgainstNonChaser;//[Offset: 0x14, Size: 0x4]
	float NonChaserMaxTicketHoldDurationAgainstPrioritizedChaser;//[Offset: 0x18, Size: 0x4]
	float NonChaserMaxTicketHoldDurationAgainstPrioritizedNonChaser;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TigerEntityPatrollingHelicopter.TigerEntityHelicopter.Actor.Object
	TigerAISplinePathData PathData;//[Offset: 0x2e0, Size: 0xa0]
	Vector[] GeneratedCirclularPath;//[Offset: 0x380, Size: 0x10]
	<enum,Color> SpotlightColours;//[Offset: 0x390, Size: 0x50]
	Vector CurrentTrackingFlightTarget;//[Offset: 0x3e0, Size: 0xc]
	int NumberOfPointsInCirclularPath;//[Offset: 0x404, Size: 0x4]
	int CurrentSplineWaypointIndex;//[Offset: 0x408, Size: 0x4]
	int CurrentTrackingIndex;//[Offset: 0x40c, Size: 0x4]
	float IdleRotationSpeed;//[Offset: 0x414, Size: 0x4]
	float HoverRotationSpeed;//[Offset: 0x418, Size: 0x4]
	float IdleFlightSpeed;//[Offset: 0x41c, Size: 0x4]
	float HoverFlightSpeed;//[Offset: 0x420, Size: 0x4]
	float LostPlayerStateNewSpotlightTargetRadius;//[Offset: 0x424, Size: 0x4]
	float MaxTimeToSearchForLostPlayer;//[Offset: 0x428, Size: 0x4]
	float CurrentTimeUntilReturnToPatrol;//[Offset: 0x42c, Size: 0x4]
	float MasqueradePointGainFromSpotlightPerSecond;//[Offset: 0x430, Size: 0x4]
	float SpaceBetweenMeshes;//[Offset: 0x434, Size: 0x4]
	float MovementDistanceThresholdSquared;//[Offset: 0x438, Size: 0x4]
	float BelowRoofHeightCutOffTime;//[Offset: 0x43c, Size: 0x4]
	float TimeCurrentTargetWasBelowRoofHeight;//[Offset: 0x440, Size: 0x4]
	float TargetedPlayerHoverCircleRadius;//[Offset: 0x444, Size: 0x4]
	float LostPlayerHoverCircleRadius;//[Offset: 0x448, Size: 0x4]
	float CircleGrowthRate;//[Offset: 0x450, Size: 0x4]
	float MaxTimeToFindGunFireEventCulprit;//[Offset: 0x454, Size: 0x4]
	float TimeToLoseInvisibleBloodhuntTarget;//[Offset: 0x46c, Size: 0x4]
	float DelayUntilPlayTargetSpottingSounds;//[Offset: 0x470, Size: 0x4]
	enum CurrentState;//[Offset: 0x474, Size: 0x1]
	enum CurrentSpotlightState;//[Offset: 0x475, Size: 0x1]
	bool bHasReachedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 0x1]
	bool bNeedToCalculateEntryVectorForTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x477, Size: 0x1]
	bool bWasLastTargetedPlayerBloodHunted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bHasActiveTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	bool bIsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a, Size: 0x1]
	TigerAICoordinator* AICoordinator;//[Offset: 0x480, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x488, Size: 0x8]
	void UpdateSpotlightPositionFromPatrollingLightSweep();// 0x14fa430
	void UpdateClientSpotlight();// 0x14fa410
	void OnStoppedShooting();// 0x197e4f0
	void OnStartedShooting();// 0x197e4f0
	void OnRep_IsFiring();// 0x14f9e30
	float GetSpotlightRadius();// 0x197e4f0

--------------------------------
Class: TigerEntityHelicopter.Actor.Object
	AkAudioEvent* PreparingToFireSound;//[Offset: 0x228, Size: 0x8]
	AkAudioEvent* TargetEnteredSpotlightSound;//[Offset: 0x230, Size: 0x8]
	AkAudioEvent* TargetLeftSpotlightSound;//[Offset: 0x238, Size: 0x8]
	class TigerProjectile* ProjectileClass;//[Offset: 0x240, Size: 0x8]
	class TigerRangedWeapon* WeaponType;//[Offset: 0x248, Size: 0x8]
	TigerRangedWeapon* Weapon;//[Offset: 0x250, Size: 0x8]
	DataTable* RangedWeaponsDatatable;//[Offset: 0x258, Size: 0x8]
	TigerPlayer* TargetedPlayer;//[Offset: 0x268, Size: 0x8]
	SceneComponent* LineOfSightStart;//[Offset: 0x270, Size: 0x8]
	Vector_NetQuantize10 SpotlightEndTarget;//[Offset: 0x284, Size: 0xc]
	SceneComponent* SceneRoot;//[Offset: 0x290, Size: 0x8]
	ChildActorComponent* HelicopterChildActor;//[Offset: 0x298, Size: 0x8]
	float SpotlightMovementSpeed;//[Offset: 0x2a0, Size: 0x4]
	float TargetSpottedDelayBeforeFiring;//[Offset: 0x2b8, Size: 0x4]
	void SetSpotlightForLos(SceneComponent* SpotLightPosition);// 0x14fa350
	void Multicast_PlayAudio(AkAudioEvent* AudioEventToPlay);// 0x14f9b00
	void Multicast_FireProjectile();// 0x14c5b50
	void GetLookAtRotatorForSpotLight(out const Vector SpotLightPosition, out float OutDistance, out Rotator OutLookAtRotator);// 0x14f9690

--------------------------------
Class: TigerAISplinePathData
	Vector[] PathWaypoints;//[Offset: 0x0, Size: 0x10]
	Vector[] PathWaypointsRightVectors;//[Offset: 0x10, Size: 0x10]
	TigerAISplinePathConnection StartingPoint;//[Offset: 0x20, Size: 0x30]
	TigerAISplinePathConnection EndPoint;//[Offset: 0x50, Size: 0x30]
	TigerAISplinePathConnection[] AdditionalPathConnections;//[Offset: 0x80, Size: 0x10]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	int ExtraRows;//[Offset: 0x94, Size: 0x4]
	float RowDistance;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAISplinePathConnection
	int Index;//[Offset: 0x0, Size: 0x4]
	enum[] RestrictedTypes;//[Offset: 0x8, Size: 0x10]
	TigerAiSplinePathHub* ConnectedHub;//[Offset: 0x18, Size: 0x8]
	TigerAISplinePath* OwningSpline;//[Offset: 0x20, Size: 0x8]
	float Weight;//[Offset: 0x28, Size: 0x4]
	bool bAlwaysSwitchSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: TigerAiSplinePathHub.Actor.Object
	TigerAISplinePathConnection[] SplineConnections;//[Offset: 0x228, Size: 0x10]
	float ConnectionRadius;//[Offset: 0x238, Size: 0x4]

--------------------------------
Class: TigerAISplinePath.Actor.Object
	TigerAISplinePathData PathData;//[Offset: 0x228, Size: 0xa0]

--------------------------------
Class: TigerAiEntityPlatoon.Object

--------------------------------
Class: TigerAiSquad.Object

--------------------------------
Class: TigerPlayerGrid.Actor.Object
	TigerPlayerGridCell[] Cells;//[Offset: 0x228, Size: 0x10]
	Vector2D GridSize;//[Offset: 0x238, Size: 0x8]
	int GridRows;//[Offset: 0x240, Size: 0x4]
	int GridColumns;//[Offset: 0x244, Size: 0x4]
	int CellDirectNeighborsToCheck;//[Offset: 0x248, Size: 0x4]
	BoxComponent* GridBoxComponent;//[Offset: 0x250, Size: 0x8]
	bool bShowGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]

--------------------------------
Class: TigerPlayerGridCell
	int[] CellIndexOffsets;//[Offset: 0x0, Size: 0x10]
	Vector2D WorldPosition;//[Offset: 0x10, Size: 0x8]
	int PlayersInCellArea;//[Offset: 0x18, Size: 0x4]
	int ClosestPlayerCellDistance;//[Offset: 0x1c, Size: 0x4]
	TigerPlayer*[] PlayersInCell;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TigerPlayerActionProcessData
	TigerPlayer* TigerPlayer;//[Offset: 0x0, Size: 0x8]
	TigerBaseNPC* NPC;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerBaseNPC.TigerCharacter.Character.Pawn.Actor.Object
	TigerHSensesTargetComponent* HeightenedSensesTargetComponent;//[Offset: 0x880, Size: 0x8]
	TigerNPCAsset* NPCAsset;//[Offset: 0x888, Size: 0x8]
	TigerBloodPotencyComponent* BloodPotencyComponent;//[Offset: 0x890, Size: 0x8]
	TigerNPCVisualAsset* VisualAsset;//[Offset: 0x898, Size: 0x8]
	TigerNpcPropAsset* PropAsset;//[Offset: 0x8a0, Size: 0x8]
	class TigerMasqueradeActionResponse* MasqueradeActionResponse;//[Offset: 0x8a8, Size: 0x8]
	class TigerNPCFacePoseMap* HeadMeshsPoseAssetsClass;//[Offset: 0x8b0, Size: 0x8]
	enum NPCType;//[Offset: 0x8b8, Size: 0x1]
	TigerInteractiveNpcComponent* InteractiveNpcComponent;//[Offset: 0x8c0, Size: 0x8]
	TigerMeshCollection ReplicatedMeshCollection;//[Offset: 0x8c8, Size: 0x30]
	class Object* ReplicatedAnimationInstanceClass;//[Offset: 0x8f8, Size: 0x8]
	TigerAISplinePath* ActiveSplinePath;//[Offset: 0x900, Size: 0x8]
	TigerNPCSpawningBase* Spawner;//[Offset: 0x908, Size: 0x8]
	SkeletalMeshComponentBudgeted* HeightenedSensesHeartMesh;//[Offset: 0x910, Size: 0x8]
	SkeletalMeshComponentBudgeted* InWorldHeartMesh;//[Offset: 0x918, Size: 0x8]
	float LastTimeReactingToLocalPlayerAction;//[Offset: 0x920, Size: 0x4]
	int LastPlayedVoEventId;//[Offset: 0x924, Size: 0x4]
	bool bHasSightOfLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	enum BloodType;//[Offset: 0x930, Size: 0x1]
	enum BloodPotency;//[Offset: 0x931, Size: 0x1]
	TigerAISplinePath*[] StoredSplines;//[Offset: 0x938, Size: 0x10]
	TigerWorldCompositionGrid* StreamingGrid;//[Offset: 0x948, Size: 0x8]
	void QueueVoEvent(out const FName InVoCategory, bool bInShouldMulticast);// 0x1492270
	void PickHeartMeshes();// 0x197e4f0
	void OverrideBloodPotency(const enum InNewBloodPotency);// 0x1491950
	void OnStoppedBeingClosestNpcWithPotencyInHeightenedSenses();// 0x197e4f0
	void OnSawLocalPlayerBreachMasquerade();// 0x197e4f0
	void OnRep_ReplicatedAnimationInstanceClassChanged();// 0x1492250
	void OnRep_BloodType();// 0x1492230
	void OnRep_BloodPotency();// 0x1492210
	void OnRep_AdditionalMeshCollectionChanged();// 0x14921f0
	void OnLostSightOfLocalPlayer(TigerPlayer* InPlayer);// 0x197e4f0
	void OnGainedSightOfLocalPlayer(TigerPlayer* InPlayer);// 0x197e4f0
	void OnBloodTypeChanged(const enum InBloodType);// 0x197e4f0
	void OnBloodPotencyChanged(const enum InBloodPotency);// 0x197e4f0
	void OnBecameClosestNpcWithPotencyInHeightenedSenses();// 0x197e4f0
	void Multicast_VerifySimulationLocation(const Vector InAuthorityLocation);// 0x1491f90
	void Multicast_QueueVoEvent(const int8 InVoCategoryIndex);// 0x1491f10
	void Multicast_ChangeBlood(const enum InNewBloodPotency, const enum InNewBloodType);// 0x1491e40
	TigerAiBaseController* GetTigerAiBaseController();// 0x1491d50
	enum GetBloodType();// 0x1491b80
	enum GetBloodPotency();// 0x1491b60
	void DeactivateHeightenedSensesVisualization();// 0x1491a50
	void AuthoritySetBloodType(const enum InBloodType);// 0x14919d0
	void AuthoritySetBloodPotency(const enum InNewBloodPotency);// 0x1491950
	void AuthoritySetBlood(const enum InNewBloodPotency, const enum InNewBloodType);// 0x1491880
	void ActivateHeightenedSensesVisualization();// 0x1491860

--------------------------------
Class: TigerHSensesTargetComponent.ActorComponent.Object
	float HeartAnimTime;//[Offset: 0xb0, Size: 0x4]
	float HeartRate;//[Offset: 0xb4, Size: 0x4]
	float HeartRateTarget;//[Offset: 0xb8, Size: 0x4]
	float HeartRateNone;//[Offset: 0xbc, Size: 0x4]
	float HeartRateSuspicious;//[Offset: 0xc0, Size: 0x4]
	float HeartRateThreatened;//[Offset: 0xc4, Size: 0x4]
	float HeartRateVariance;//[Offset: 0xc8, Size: 0x4]
	float HeartRateChangeRate;//[Offset: 0xcc, Size: 0x4]
	CurveFloat* HeartAnimRateCurve;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: TigerNPCAsset.DataAsset.Object
	TigerRandomVisualAsset[] NormalizedVisualAssets;//[Offset: 0x30, Size: 0x10]
	TigerNPCBehaviorAsset* BehaviorAsset;//[Offset: 0x40, Size: 0x8]
	TigerGrimoireEntry* GrimoireEntry;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: TigerRandomVisualAsset
	TigerNPCVisualAsset* VisualAsset;//[Offset: 0x0, Size: 0x8]
	float Weight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerNPCVisualAsset.DataAsset.Object
	FName MainTag;//[Offset: 0x30, Size: 0x8]
	FName[] AdditionalTags;//[Offset: 0x38, Size: 0x10]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x48, Size: 0x8]
	SkeletalMesh*[] HeadSkeletalMeshes;//[Offset: 0x50, Size: 0x10]
	SkeletalMesh*[] HairSkeletalMeshes;//[Offset: 0x60, Size: 0x10]
	TigerColorSetAsset*[] ColorSetAssets;//[Offset: 0x70, Size: 0x10]
	TigerLinearColorSetAsset*[] HairColorSetAssets;//[Offset: 0x80, Size: 0x10]
	MaterialInstance* DefaultMaterial;//[Offset: 0x90, Size: 0x8]
	bool bShowHeart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	enum Gender;//[Offset: 0x99, Size: 0x1]
	class AnimInstance* HairAnimationBlueprint;//[Offset: 0xa0, Size: 0x8]
	bool bUseCharacterPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	TigerCharacterPreset* CharacterPreset;//[Offset: 0xb0, Size: 0x28]
	class AnimInstance* AnimationInstanceClass;//[Offset: 0xd8, Size: 0x8]
	enum EmotionalState;//[Offset: 0xe0, Size: 0x1]
	float ChanceForProp;//[Offset: 0xe4, Size: 0x4]
	<TigerNpcPropAsset*,float> PossibleNpcProps;//[Offset: 0xe8, Size: 0x50]
	float WalkSpeed;//[Offset: 0x138, Size: 0x4]
	float WalkTurnSpeed;//[Offset: 0x13c, Size: 0x4]
	float SprintSpeed;//[Offset: 0x140, Size: 0x4]
	float SprintTurnSpeed;//[Offset: 0x144, Size: 0x4]
	float StrafeSpeed;//[Offset: 0x148, Size: 0x4]
	float StrafeTurnSpeed;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: TigerColorSetAsset.DataAsset.Object
	<FName,Color> ColorSets;//[Offset: 0x30, Size: 0x50]
	<FName,float> ScalarParameters;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: TigerLinearColorSetAsset.DataAsset.Object
	<FName,LinearColor> ColorSets;//[Offset: 0x30, Size: 0x50]
	<FName,float> ScalarParameters;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: TigerNpcPropAsset.DataAsset.Object
	FName[] TagsToAddToNpc;//[Offset: 0x30, Size: 0x10]
	TigerAnimationSetAsset* PropAnimationSet;//[Offset: 0x40, Size: 0x8]
	FName[] HeldPropAttachments;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: TigerNPCBehaviorAsset.DataAsset.Object
	class TigerBaseNPC* NPCBlueprint;//[Offset: 0x30, Size: 0x8]
	class TigerMasqueradeActionResponse* MasqueradeActionResponseClass;//[Offset: 0x38, Size: 0x8]
	BehaviorTree* DefaultBehaviorTree;//[Offset: 0x40, Size: 0x8]
	<enum,BehaviorTree*> BehaviorTrees;//[Offset: 0x48, Size: 0x50]
	class ActorComponent[] AdditionalComponentClasses;//[Offset: 0x98, Size: 0x10]
	class TigerWeapon* WeaponClass;//[Offset: 0xa8, Size: 0x8]
	enum NPCType;//[Offset: 0xb0, Size: 0x1]
	enum AnimationMode;//[Offset: 0xb1, Size: 0x1]
	TigerCharacterStatModification BaseStatModifications;//[Offset: 0xb4, Size: 0xa8]
	TigerCharacterStatModification BaseGroupStatModifications;//[Offset: 0x15c, Size: 0xa8]
	bool bUseGroupStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	float OverrideBaseMaxHealth;//[Offset: 0x208, Size: 0x4]

--------------------------------
Class: TigerMasqueradeActionResponse.Object
	float MinFearScaleDistance;//[Offset: 0x28, Size: 0x4]
	float MinFearScaleValue;//[Offset: 0x2c, Size: 0x4]
	float MinMasqueradeScaleDistance;//[Offset: 0x30, Size: 0x4]
	float MinMasqueradeScaleValue;//[Offset: 0x34, Size: 0x4]
	bool bIsDummy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum OnReactToPlayerAction(TigerAIController* TigerAIController, TigerPlayer* TigerPlayer, out const TigerAIPlayerAction PlayerAction, const enum CurrentState, out float FearValue);// 0x197e4f0
	void OnJudgeReaction(TigerAiJudgeController* JudgeAIC, TigerPlayer* Player, out const TigerAIPlayerAction PlayerAction);// 0x197e4f0
	bool IsActionDisciplineRelated(const enum Action);// 0x154e710
	float GetPlayerMasqueradePointsForAction(TigerNPC* InNpc, TigerPlayer* InTigerPlayer, out const TigerAIPlayerAction InPlayerAction);// 0x197e4f0

--------------------------------
Class: TigerAIController.TigerAiBaseController.AIController.Controller.Actor.Object
	FName LureTargetKeyName;//[Offset: 0x3b0, Size: 0x8]
	FName CurrentMasqueradeTargetKeyName;//[Offset: 0x3b8, Size: 0x8]
	FName TargetPositionKeyName;//[Offset: 0x3c0, Size: 0x8]
	FName MasqueradeBreachTargetKey;//[Offset: 0x3c8, Size: 0x8]
	FName BehaviorIsActiveKeyName;//[Offset: 0x3d0, Size: 0x8]
	FName SpawnPointKeyName;//[Offset: 0x3d8, Size: 0x8]
	FName ActiveCAPKeyName;//[Offset: 0x3e0, Size: 0x8]
	BehaviorTree* LureBehaviorTree;//[Offset: 0x3e8, Size: 0x8]
	BehaviorTree* BloodDrainedBehaviorTree;//[Offset: 0x3f0, Size: 0x8]
	BehaviorTree* EmptyBehaviorTree;//[Offset: 0x3f8, Size: 0x8]
	TigerFearValueAsset* FearValueAsset;//[Offset: 0x400, Size: 0x8]
	float OutOfCombatHealthRegenerationDelay;//[Offset: 0x408, Size: 0x4]
	float OutOfCombatHealthRegenerationTickInterval;//[Offset: 0x40c, Size: 0x4]
	float OutOfCombatTickHealthPercentage;//[Offset: 0x410, Size: 0x4]
	float TimeWhenEnteredBloodDrainedState;//[Offset: 0x414, Size: 0x4]
	float CheckForPlayerWeaponsInterval;//[Offset: 0x418, Size: 0x4]
	float CheckForPlayerWeaponsDeviation;//[Offset: 0x41c, Size: 0x4]
	float BaseThreatRadiusForEquippedRanged;//[Offset: 0x420, Size: 0x4]
	float BaseThreatRadiusForEquippedMelee;//[Offset: 0x424, Size: 0x4]
	float FearValue;//[Offset: 0x428, Size: 0x4]
	float MaxFearValue;//[Offset: 0x42c, Size: 0x4]
	float MinCrouchDistanceFromPlayer;//[Offset: 0x430, Size: 0x4]
	float ChanceToFleeWhenEnteringThreatenedState;//[Offset: 0x434, Size: 0x4]
	TigerNpcMovementRestrictionBoundsData* MovementRestrictionBoundsData;//[Offset: 0x468, Size: 0x8]
	TigerNpcMovementRestrictionBoundsData* TargetMovementRestrictionBoundsData;//[Offset: 0x470, Size: 0x8]
	void SetupData(enum InNpcType);// 0x197e4f0
	void SetNewReactionData(out const TigerNpcReactionEvent ReactionEvent);// 0x1478d70
	TigerNpcReactionEvent SetLastReactionData();// 0x1478cc0
	void SetFearValue(const float InFearValue);// 0x1478c40
	void SetCurrentMasqueradeTarget(BlackboardComponent* BBComp, TigerCharacter* InLookAtTarget);// 0x1478ae0
	void RunDefaultBehavior();// 0x1478a30
	void RequestInvestigationTicket(TigerPlayer* TigerPlayer);// 0x14789a0
	bool IsReacting();// 0x1478970
	TigerNPC* GetTigerPawn();// 0x1478930
	float GetMaxFearValue();// 0x1478910
	float GetFearValue();// 0x14788f0
	float GetFearPercentage();// 0x14788c0
	enum GetCurrentBehaviorState();// 0x14788a0
	TigerAICAPBase* GetActiveCAP();// 0x1478870
	void ClearCurrentMasqueradeTarget(BlackboardComponent* BBComp);// 0x1478750
	void CancelLureBehavior();// 0x1478700
	void AdjustFearValue(const float Adjustment);// 0x1478390

--------------------------------
Class: TigerAiBaseController.AIController.Controller.Actor.Object
	Vector SpawnPoint;//[Offset: 0x330, Size: 0xc]
	TigerSightConfigAsset* SightConfigAsset;//[Offset: 0x340, Size: 0x8]
	void UnregisterMovementTicket();// 0x1475210
	float PlayAnimationUnreliable(AnimMontage* Animation);// 0x14750e0
	float PlayAnimationFromNameUnreliable(const FName Animation);// 0x1475040
	bool HasPathToLocation(out const Vector Location);// 0x1474fa0
	bool GetSightProperties(const enum NPCType, out TigerSightConfigProperties OutSightProps);// 0x1474e80
	AISenseConfig_Sight* GetSightConfig();// 0x1474e50
	TigerBaseNPC* GetBaseNpcPawn();// 0x1474e20
	bool FindPointOnAiNavMeshWithinExtent(out const Vector Origin, out const Vector Extent, out Vector OutLocation);// 0x1474ce0

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d8, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d8, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d8, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2e0, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x2e8, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2f0, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f8, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x300, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x308, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x310, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x318, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x3639230
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3638fe0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x3638ad0
	void SetMoveBlockDetection(bool bEnable);// 0x3638a40
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x3638850
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x197e4f0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x3638510
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3638280
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x3638040
	void K2_SetFocus(Actor* NewFocus);// 0x3637ea0
	void K2_SetFocalPoint(Vector FP);// 0x3637e10
	void K2_ClearFocus();// 0x3637df0
	bool HasPartialPath();// 0x3637c10
	PathFollowingComponent* GetPathFollowingComponent();// 0x1496210
	byte GetMoveStatus();// 0x36378c0
	Vector GetImmediateMoveDestination();// 0x3637790
	Actor* GetFocusActor();// 0x3637760
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x36376b0
	Vector GetFocalPoint();// 0x3637670
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x36371d0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x3636eb0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x36516a0
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3651500
	Vector GetPathDestination();// 0x36510f0
	byte GetPathActionType();// 0x36510c0

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 0x80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2bc, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2c0, Size: 0x4]
	UInt32Property DataVersion;//[Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3d0, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	bool bClientRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bDedicatedServerRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bListenServerRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bStandaloneRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	class Actor* NavDataClass;//[Offset: 0x58, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaId;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x3642b30
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x36429f0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x3642900
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x3642830
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x3642760
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x3642690
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x36425b0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x36424d0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x3642400
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x3642320
	bool IsVectorValueSet(out const FName KeyName);// 0x36421b0
	Vector GetValueAsVector(out const FName KeyName);// 0x3642040
	FString GetValueAsString(out const FName KeyName);// 0x3641f60
	Rotator GetValueAsRotator(out const FName KeyName);// 0x3641eb0
	Object* GetValueAsObject(out const FName KeyName);// 0x3641e10
	FName GetValueAsName(out const FName KeyName);// 0x3641d70
	int GetValueAsInt(out const FName KeyName);// 0x3641cd0
	float GetValueAsFloat(out const FName KeyName);// 0x3641c30
	byte GetValueAsEnum(out const FName KeyName);// 0x3641b90
	class Object GetValueAsClass(out const FName KeyName);// 0x3641af0
	bool GetValueAsBool(out const FName KeyName);// 0x3641a50
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x36418c0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x36417d0
	void ClearValue(out const FName KeyName);// 0x3641710

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString Reason);// 0x14bf5b0
	void StartLogic();// 0xd59ac0
	void RestartLogic();// 0xd59ae0
	bool IsRunning();// 0x3642180
	bool IsPaused();// 0x3642150

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x3638b60
	void RequestStimuliListenerUpdate();// 0x3638830
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x36386b0
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x3637b20
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x3637a70
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3637980
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x36377d0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x3637580
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x36371f0
	void ForgetAll();// 0x3637120

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x363da50
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x363d7e0
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x363d4f0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x363d420
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x363d2e0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9c, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x24ab610
	void AIIgnorePlayers();// 0x2b19080

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 0x4]
	float RandomDeviation;//[Offset: 0x64, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x3642250
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x36419b0
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x36415f0

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x364e0f0

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 0x4]
	byte TestPurpose;//[Offset: 0x34, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x364e280
	Vector[] GetResultsAsLocations();// 0x364e070
	Actor*[] GetResultsAsActors();// 0x364dff0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x364df30
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x364de70
	float GetItemScore(int ItemIndex);// 0x364ddd0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x197e4f0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestId, byte MovementResult);// 0x36385e0

--------------------------------
Class: AIRequestID
	UInt32Property RequestId;//[Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x36518c0
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x3651730
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x3650eb0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3650c00
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3650a40
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x3650820
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x36505e0

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: TigerNpcMovementRestrictionBoundsData.Object

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x36513f0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x36512f0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x3651250
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x36511b0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x15490f0
	void Finish(byte WithResult);// 0x3651040
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x3650de0

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x35ad2d0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x35ad080

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 0x8]
	void ReadyForActivation();// 0x35ad2f0
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x197e4f0
	void EndTask();// 0x35acf90

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerNpcReactionEvent
	float Intensity;//[Offset: 0x0, Size: 0x4]
	enum PreState;//[Offset: 0x4, Size: 0x1]
	enum PostState;//[Offset: 0x5, Size: 0x1]
	Vector EventLocation;//[Offset: 0x8, Size: 0xc]
	bool bIsVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerNPC.TigerBaseNPC.TigerCharacter.Character.Pawn.Actor.Object
	delegate OnAnimationModeChanged;//[Offset: 0x9d0, Size: 0x10]
	TigerAICommandComponent* AICommandComponent;//[Offset: 0x9e0, Size: 0x8]
	TigerNpcAccuracyComponent* AccuracyComponent;//[Offset: 0x9e8, Size: 0x8]
	TigerEntityCombatComponent* EntityCombatComponent;//[Offset: 0x9f0, Size: 0x8]
	ParticleSystemComponent* NpcAwarenessComponent;//[Offset: 0x9f8, Size: 0x8]
	TigerCharacter* CurrentTarget;//[Offset: 0xa00, Size: 0x8]
	Vector_NetQuantize CurrentTargetLocation;//[Offset: 0xa08, Size: 0xc]
	TigerCharacter* TargetToShoot;//[Offset: 0xa18, Size: 0x8]
	enum AnimationMode;//[Offset: 0xa20, Size: 0x1]
	enum EmotionalState;//[Offset: 0xa21, Size: 0x1]
	int EmotionalStateRandomPot;//[Offset: 0xa24, Size: 0x4]
	AnimMontage* LuredCancelAnim;//[Offset: 0xa40, Size: 0x8]
	TigerNpcPropComponent* NpcPropComponent;//[Offset: 0xa48, Size: 0x8]
	float BumpTimeInterval;//[Offset: 0xa70, Size: 0x4]
	float HighPotenceBloodChange;//[Offset: 0xa74, Size: 0x4]
	float EarliestHighPotenceBloodTime;//[Offset: 0xa78, Size: 0x4]
	float LastHighPotenceBloodTime;//[Offset: 0xa7c, Size: 0x4]
	float PreferedMinimumDistanceBetweenPotent;//[Offset: 0xa80, Size: 0x4]
	Vector_NetQuantize RagdollImpulse;//[Offset: 0xa84, Size: 0xc]
	TigerNpcReactionData ReactionData;//[Offset: 0xa90, Size: 0xc]
	float MaxYawAngleToShoot;//[Offset: 0xaa0, Size: 0x4]
	float MinTargetIsInfrontDotAngle;//[Offset: 0xaa4, Size: 0x4]
	SharkRandomDeviation DownedStateDuration;//[Offset: 0xaa8, Size: 0x8]
	FName HeartRateParam;//[Offset: 0xab0, Size: 0x8]
	FName BloodAmountParam;//[Offset: 0xab8, Size: 0x8]
	FName HeartSocketName;//[Offset: 0xac0, Size: 0x8]
	FName HeartLocationParam;//[Offset: 0xac8, Size: 0x8]
	float HeartLocationUpdateTime;//[Offset: 0xad0, Size: 0x4]
	void TriggerNpcReactionEvent(out const TigerNpcReactionEvent ReactionEvent);// 0x1564150
	void TigerDelegateNpcAnimationModeChanged__DelegateSignature(enum NewAnimationMode);// 0x197e4f0
	void StopFireWeapon();// 0x1564130
	bool StartFireWeapon(TigerCharacter* InTigerChar);// 0x1564090
	void Server_SetCharacterMeshes(const TigerMeshCollection MeshCollection);// 0x1563fa0
	void OnRep_RagdollImpulseSet();// 0x1563e40
	void OnRep_AnimationModeChanged(const enum LastMode);// 0x1563dc0
	void OnFeedingStart(int FeedingTicksLeft, int MaxFeedingTicks);// 0x197e4f0
	void OnFeedingEnd();// 0x197e4f0
	void OnBurstCompleted();// 0x1563da0
	void Multicast_PlayReactionFromMontage(AnimMontage* InMontage, const float InPlayBackSpeed, const bool bInCanMoveDuringReaction);// 0x1563b70
	void Multicast_PlayReactionFromBlendSpace(BlendSpaceBase* InBlendSpace, const Vector InSamplePoint, const float InPlayBackSpeed, const bool bInCanMoveDuringReaction, const float InBlendOutTime);// 0x15639c0
	void Multicast_PlayMontageFromBlendSpace(BlendSpaceBase* BlendSpace, const Vector SamplePoint, float PlayBackSpeed, const bool bFreezeAtEnd);// 0x1563870
	void Multicast_PlayDeathMontage(const Vector SamplePoint, float PlayBackSpeed);// 0x15637a0
	void Multicast_PlayAnimationWithContextIdle(AnimMontage* InMontage, const FName InContextIdle);// 0x15636d0
	void Multicast_InterruptCap(enum InDetachMethod);// 0x1563650
	void Multicast_DeactivateLure();// 0x1563630
	void Multicast_AuthorityPlayAkEvent(AkAudioEvent* VoiceEvent);// 0x15635a0
	bool IsReacting();// 0x1563570
	bool IsInControl();// 0x15634e0
	bool HasShootingTarget();// 0x15634b0
	Vector GetHeardRoarPosition();// 0x15631c0
	TigerAIController* GetAIController();// 0x1491d50
	void CollideWithOtherCharacter(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1562ea0
	void AuthorityPlayReactionFromMontage(AnimMontage* InMontage, const bool bInCanMoveDuringReaction);// 0x1562d10
	void AuthorityPlayReactionFromBlendSpace(BlendSpaceBase* InBlendSpace, out const Vector InSamplePoint, const bool bInCanMoveDuringReaction, const float InBlendOutTime);// 0x1562b90
	void AuthorityPlayMontageFromBlendSpace(BlendSpaceBase* BlendSpace, out const Vector SamplePoint, const bool bFreezeAtEnd);// 0x1562a70
	void AuthorityPlayDeathMontage(out const Vector SamplePoint);// 0x15629e0
	void AuthorityPlayAkEvent(AkAudioEvent* VoiceEvent);// 0x1562950

--------------------------------
Class: TigerAICommandComponent.ActorComponent.Object
	TigerAiPermanentCap* PermanentCap;//[Offset: 0xf0, Size: 0x8]
	TigerNPC* Owner;//[Offset: 0xf8, Size: 0x8]
	TigerAICommandBase* ActiveCommand;//[Offset: 0x100, Size: 0x8]
	AnimMontage* LastPlayedCapMontage;//[Offset: 0x108, Size: 0x8]
	TigerCommandQueue CommandQueue;//[Offset: 0x110, Size: 0x10]
	FName ContextBaseIdle;//[Offset: 0x120, Size: 0x8]
	void SetContextIdle(const FName ContextName);// 0x1478a50
	void InterruptAndClearCommands();// 0x1478950
	TigerAICommandBase* AddCommand(TigerAICommandBase* Command, TigerAICAPBase* CommandGiver);// 0x14782c0

--------------------------------
Class: TigerAICommandBase.Object
	TigerAIController* Owner;//[Offset: 0x28, Size: 0x8]
	Actor* WorldReferenceActor;//[Offset: 0x30, Size: 0x8]
	float FailSafeMaxTime;//[Offset: 0x38, Size: 0x4]
	void DeactivateCommand(const bool bHasFinished);// 0x14787e0

--------------------------------
Class: TigerAICAPBase.Actor.Object
	TigerNPC*[] NPCUsingCAP;//[Offset: 0x228, Size: 0x10]
	ShapeComponent*[] Colliders;//[Offset: 0x238, Size: 0x10]
	float Cooldown;//[Offset: 0x248, Size: 0x4]
	int NumberOfSlots;//[Offset: 0x24c, Size: 0x4]
	bool bShouldAdjustTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool bAllowExternalProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	bool OnCheckNPCEligibility(TigerNPC* NPC);// 0x197e4f0
	bool CapIsEmpty();// 0x1478720
	void BeginOverlappedActor(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1478410

--------------------------------
Class: TigerAiPermanentCap.TigerAiSpawningCap.TigerAICAPBase.Actor.Object
	TigerAICommandBase*[] Commands;//[Offset: 0x290, Size: 0x10]
	enum EmotionalState;//[Offset: 0x2a0, Size: 0x1]
	FName CapContextBase;//[Offset: 0x2a4, Size: 0x8]
	int CapContextStartingIndex;//[Offset: 0x2ac, Size: 0x4]
	TigerNPCAsset* NpcAssetToSpawn;//[Offset: 0x2b0, Size: 0x8]
	int LoopingStartIndex;//[Offset: 0x2b8, Size: 0x4]
	TigerNPC* PermanentNpc;//[Offset: 0x2bc, Size: 0x8]

--------------------------------
Class: TigerAiSpawningCap.TigerAICAPBase.Actor.Object
	SceneComponent* SceneComp;//[Offset: 0x258, Size: 0x8]
	ChildActorComponent* NPCSpawner;//[Offset: 0x260, Size: 0x8]
	FName SpawningGroup;//[Offset: 0x268, Size: 0x8]
	FName SpawnedNpcMovementGroup;//[Offset: 0x270, Size: 0x8]
	Guid SpawningSubGroupId;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: TigerCommandQueue
	TigerAICommandBase*[] Commands;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerNpcAccuracyComponent.ActorComponent.Object
	float TimeToReachMaxAccuracy;//[Offset: 0xb0, Size: 0x4]
	float TimeToReachMaxInaccuracy;//[Offset: 0xb4, Size: 0x4]
	float MaxAccuracyConeRadius;//[Offset: 0xb8, Size: 0x4]
	float MinAccuracyConeRadius;//[Offset: 0xbc, Size: 0x4]
	float AccuracyDistance;//[Offset: 0xc0, Size: 0x4]
	float MovingTargetAccuracyPenaltyPercentage;//[Offset: 0xc4, Size: 0x4]
	float MinSwooshByAccuracyConeRadius;//[Offset: 0xc8, Size: 0x4]
	float MaxSwooshByAccuracyConeRadius;//[Offset: 0xcc, Size: 0x4]
	float MinSwooshByAccuracyDistance;//[Offset: 0xd0, Size: 0x4]
	bool bShouldKeepAccuracyWhenSwitchingToTargetsAlly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bShouldDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool bShouldMissEveryBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	TigerNPC* Owner;//[Offset: 0xe0, Size: 0x8]
	void OnBurstCompleted();// 0x1567bf0

--------------------------------
Class: TigerEntityCombatComponent.ActorComponent.Object
	float TimeBeforeAttackingNewPlayer;//[Offset: 0xb0, Size: 0x4]
	float ClosestAllowedDistanceToBeSprinting;//[Offset: 0xb4, Size: 0x4]
	float SprintingCooldownDuration;//[Offset: 0xb8, Size: 0x4]
	float MaxLaserLength;//[Offset: 0xbc, Size: 0x4]
	float MaxAngleFromOriginalWeapon;//[Offset: 0xc0, Size: 0x4]
	float LaserInterpolateSpeed;//[Offset: 0xc4, Size: 0x4]
	float LaserInterpolateRuberbandSpeedMultiplier;//[Offset: 0xc8, Size: 0x4]
	FName MaterialScaleName;//[Offset: 0xcc, Size: 0x8]
	FName MaterialFadeLaserName;//[Offset: 0xd4, Size: 0x8]
	bool bHideLaserDuringReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	float NotInCombatFadedLaserLength;//[Offset: 0xe0, Size: 0x4]
	float ReloadingFadedLaserLength;//[Offset: 0xe4, Size: 0x4]
	float FocusedSightLkpMaxDuration;//[Offset: 0xe8, Size: 0x4]
	float FocusedSightLkpRadiusEnabler;//[Offset: 0xec, Size: 0x4]
	TigerNPC* NpcOwner;//[Offset: 0xf0, Size: 0x8]
	StaticMeshComponent* LaserPointer;//[Offset: 0x128, Size: 0x8]
	ParticleSystemComponent* LaserPointerOriginGlowParticleSystem;//[Offset: 0x130, Size: 0x8]
	void OnPerceptionUpdate(Actor* InActor, AIStimulus InStimulus);// 0x14f9c10
	void Multicast_EntityEvent(const enum InEntityEvent);// 0x1495ec0
	void BeginProjectileOverlap(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex, bool bInFromSweep, out const HitResult InSweepResult);// 0x14f9360

--------------------------------
Class: TigerMeshCollection
	TigerNPCVisualAsset* VisualAsset;//[Offset: 0x0, Size: 0x28]
	int8 HeadMeshIndex;//[Offset: 0x28, Size: 0x1]
	int8 HairMeshIndex;//[Offset: 0x29, Size: 0x1]
	int8 ColorSetIndex;//[Offset: 0x2a, Size: 0x1]
	int8 HairColorSetIndex;//[Offset: 0x2b, Size: 0x1]
	int8 PropAssetIndex;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: TigerNpcPropComponent.ActorComponent.Object
	SkeletalMeshComponent* OwnerMeshComp;//[Offset: 0xb0, Size: 0x8]
	TigerPropAttachment[] AttachedProps;//[Offset: 0xb8, Size: 0x10]
	interface classNone[] FreeProps;//[Offset: 0xc8, Size: 0x10]
	bool HasProp(const FName AttachmentIdentifier);// 0x1567af0
	bool HasAnyProp(out const FName[] AttachmentIdentifiers);// 0x1567a30
	bool HasAllProps(out const FName[] AttachmentIdentifiers);// 0x1567970
	MeshComponent* GetPropComponent(const FName Identifier);// 0x15678a0
	void DetachPropWithSetImpulse(const FName AttachmentIdentifier, Vector Impulse, float AngularImpulseStrength);// 0x1567720
	void DetachProp(const FName AttachmentIdentifier, enum DetachMethod);// 0x1567650
	void ClearProps(enum DetachMethod);// 0x15675d0
	MeshComponent* AttachProp(out const TigerPropAttachmentInfo Attachment);// 0x15674b0

--------------------------------
Class: TigerPropAttachment
	FName AttachIdentifier;//[Offset: 0x0, Size: 0x8]
	interface class None* Prop;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerPropAttachmentInfo
	FName AttachIdentifier;//[Offset: 0x0, Size: 0x8]
	StreamableRenderAsset* Prop;//[Offset: 0x8, Size: 0x8]
	FName SocketName;//[Offset: 0x10, Size: 0x8]
	Transform Transform;//[Offset: 0x20, Size: 0x30]
	class MeshComponent* PropCompClass;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: TigerNpcReactionData
	float ReactionExpireTime;//[Offset: 0x0, Size: 0x4]
	float ReactionCompensationAngle;//[Offset: 0x4, Size: 0x4]
	bool bCanMoveDuringReaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SharkRandomDeviation
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: TigerSightConfigAsset.DataAsset.Object
	<enum,TigerSightConfigData> SightData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerSightConfigData
	<enum,TigerSightConfigProperties> SightProperties;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerSightConfigProperties
	float SightRadius;//[Offset: 0x0, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x4, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x8, Size: 0x4]
	float CloseSightRadius;//[Offset: 0xc, Size: 0x4]
	float CloseLoseSightRadius;//[Offset: 0x10, Size: 0x4]
	float ClosePeripheralVisionAngleDegrees;//[Offset: 0x14, Size: 0x4]
	float HeightDifference;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	float CloseSightRadius;//[Offset: 0x5c, Size: 0x4]
	float CloseLoseSightRadius;//[Offset: 0x60, Size: 0x4]
	float ClosePeripheralVisionAngleDegrees;//[Offset: 0x64, Size: 0x4]
	float HeightDifference;//[Offset: 0x68, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x6c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x70, Size: 0x4]
	float PointOfViewBackwardOffset;//[Offset: 0x74, Size: 0x4]
	float NearClippingRadius;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x148, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x14c, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x150, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x158, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x160, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x164, Size: 0x4]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: TigerAIPlayerAction
	enum Action;//[Offset: 0x4, Size: 0x1]
	TigerCharacter* AffectedTarget;//[Offset: 0x8, Size: 0x8]
	Vector Location;//[Offset: 0x10, Size: 0xc]
	bool bUseCustomLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float HearingRangeSquared;//[Offset: 0x20, Size: 0x4]
	float VisionRangeSquared;//[Offset: 0x24, Size: 0x4]
	float MustReactRangeSquared;//[Offset: 0x28, Size: 0x4]
	float FearMultiplier;//[Offset: 0x2c, Size: 0x4]
	float MasqueradeMultiplier;//[Offset: 0x30, Size: 0x4]
	bool bProcessOnlyByAffectedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bMustBeProcessedByAffectedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bDontProcessForAffectedTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bIgnoreInvisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bShouldDistanceScaleFearValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bShouldDistanceScaleMasqueradePoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: TigerAiJudgeController.TigerAiBaseController.AIController.Controller.Actor.Object
	TigerAiJudgeSmComponent* JudgeStateMachineComp;//[Offset: 0x3b0, Size: 0x8]
	TigerSightConfigProperties StandardSightProperties;//[Offset: 0x3b8, Size: 0x1c]
	TigerSightConfigProperties CombatSightProperties;//[Offset: 0x3d4, Size: 0x1c]
	void PlayTimedAnimationTriggers(out const TigerTimedAnimationTrigger[] AnimationTriggers);// 0x147c6a0
	TigerJudge* GetJudgePawn();// 0x1478930

--------------------------------
Class: TigerAiJudgeSmComponent.ActorComponent.Object
	TigerPlayer*[] CurrentlyPerceivedPlayersBySight;//[Offset: 0xb0, Size: 0x10]
	TigerPlayer*[] BloodhuntedPlayersWithinCombatRadius;//[Offset: 0xc0, Size: 0x10]
	class TigerJudgeBaseState* StartingState;//[Offset: 0xd0, Size: 0x8]
	class TigerJudgeBaseState* DownedState;//[Offset: 0xd8, Size: 0x8]
	class TigerJudgeBaseState* FeedingState;//[Offset: 0xe0, Size: 0x8]
	TigerJudgeBaseState* ActiveState;//[Offset: 0xe8, Size: 0x8]
	<class TigerJudgeBaseState,TigerJudgeBaseState*> InstancedStates;//[Offset: 0xf0, Size: 0x50]
	float CombatRadiusSq;//[Offset: 0x140, Size: 0x4]
	bool bIsSeeingAnyBloodhuntedPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	void SwitchToState(class TigerJudgeBaseState NewStateType);// 0x147c750
	void AddMasqueradePointsToSeenPlayers(const float AdjustAmount, const float TimeBetweenAddingPoints);// 0x147c170

--------------------------------
Class: TigerJudgeBaseState.Object
	TigerJudge* JudgePawn;//[Offset: 0x28, Size: 0x8]
	TigerAiJudgeController* JudgeAiController;//[Offset: 0x30, Size: 0x8]
	TigerAiJudgeSmComponent* JudgeStateMachineComp;//[Offset: 0x38, Size: 0x8]
	float MovementSpeed;//[Offset: 0x40, Size: 0x4]
	float TurnSpeed;//[Offset: 0x44, Size: 0x4]
	float StateEntryTime;//[Offset: 0x48, Size: 0x4]
	float JudgeDefaultRotationSpeed;//[Offset: 0x4c, Size: 0x4]
	void OnTick(const float DeltaTime);// 0x197e4f0
	void OnStateCreationSetup();// 0x197e4f0
	void OnExitState(class TigerJudgeBaseState NewState);// 0x197e4f0
	void OnEnterState(class TigerJudgeBaseState OldState);// 0x197e4f0
	float GetDefaultRotationSpeed(const enum RotationMode);// 0x153fba0

--------------------------------
Class: TigerJudge.TigerBaseNPC.TigerCharacter.Character.Pawn.Actor.Object
	TigerJudgeShieldComponent* JudgeShieldComponent;//[Offset: 0x9d0, Size: 0x8]
	TigerJudgeSwordComponent* JudgeSwordComponent;//[Offset: 0x9d8, Size: 0x8]
	TigerWorldMarkerComponent* WorldMarkerComponent;//[Offset: 0x9e0, Size: 0x8]
	class TigerJudgeBaseState* CurrentJudgeState;//[Offset: 0x9e8, Size: 0x8]
	TigerPlayer* FeedingPlayer;//[Offset: 0x9f8, Size: 0x8]
	class TigerEntityJudgeHelicopter* HelicopterClass;//[Offset: 0xa00, Size: 0x8]
	TigerEntityJudgeHelicopter* Helicopter;//[Offset: 0xa08, Size: 0x8]
	TigerJudgeRotationSettings CurrentRotationSettings;//[Offset: 0xa10, Size: 0x8]
	TigerPlayer* CurrentPrimaryTarget;//[Offset: 0xa18, Size: 0x8]
	float DamageCauserCutoffDistanceSq;//[Offset: 0xa20, Size: 0x4]
	TigerTimedAnimationTriggerWrapper AnimationTriggerWrapper;//[Offset: 0xa28, Size: 0x18]
	TigerJudgePlayerDamage[] PlayerDamageCollection;//[Offset: 0xa40, Size: 0x10]
	TigerPlayer* SetPrimaryTarget(TigerPlayer* PrimaryTarget);// 0x15405a0
	void SetJudgeRotationSettings(out const TigerJudgeRotationSettings RotationSettings);// 0x1540500
	void OnRep_CurrentJudgeState(class TigerJudgeBaseState OldState);// 0x15403a0
	void OnJudgeStateChanged(class TigerJudgeBaseState OldState, class TigerJudgeBaseState NewState);// 0x197e4f0
	void Multicast_PlayTimedAnimationTriggers(const TigerTimedAnimationTrigger[] AnimationTriggers);// 0x15400f0
	float GetDamageDoneByPlayer(TigerPlayer* Player);// 0x153fb00

--------------------------------
Class: TigerJudgeShieldComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DeflectEffectOffset;//[Offset: 0xef0, Size: 0xc]
	ParticleSystem* DeflectEffect;//[Offset: 0xf00, Size: 0x8]
	AkAudioEvent* DeflectSound;//[Offset: 0xf08, Size: 0x8]
	float BlockingHalfAngle;//[Offset: 0xf10, Size: 0x4]
	void TriggerDeflectEffect(TigerCharacter* Attacker);// 0x1540710
	void Multicast_TriggerDeflectEffect(TigerCharacter* Attacker);// 0x15402f0

--------------------------------
Class: TigerJudgeSwordComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* CharacterHitEffect;//[Offset: 0x4e0, Size: 0x8]
	AkAudioEvent* CharacterHitSound;//[Offset: 0x4e8, Size: 0x8]
	void SpawnHitEffect(TigerCharacter* Character, out const Vector Offset);// 0x1540640
	void Multicast_SpawnHitEffect(TigerCharacter* Character, const Vector Offset);// 0x1540220

--------------------------------
Class: TigerWorldMarkerComponent.ActorComponent.Object
	class TigerWorldMarker* WorldMarkerActorType;//[Offset: 0xb0, Size: 0x8]
	TigerWorldMarker* WorldMarkerChild;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: TigerWorldMarker.Actor.Object
	class UserWidget* MarkerClass;//[Offset: 0x228, Size: 0x8]
	bool bAutoCreateMapMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bWaitForMapData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	TigerMapMarkerProxy* MapMarkerProxy;//[Offset: 0x238, Size: 0x8]
	SceneComponent* MarkerRoot;//[Offset: 0x240, Size: 0x8]
	bool TryToScheduleCreation();// 0x1630df0
	void OnPlayerControllerBeginPlay();// 0x1630b90
	bool HasMapMarker();// 0x1630630
	void CreateMapMarker();// 0x16300d0
	bool CanBeCreated();// 0x1630000

--------------------------------
Class: TigerMapMarkerProxy.Object
	delegate OnUpdated;//[Offset: 0x28, Size: 0x10]
	bool bIsDynamicIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int MarkerId;//[Offset: 0x3c, Size: 0x4]
	class UserWidget* WidgetType;//[Offset: 0x58, Size: 0x8]
	TigerMapMarkerProxy* Show();// 0x1549b90
	TigerMapMarkerProxy* SetWidgetType(class UserWidget InWidgetType);// 0x1549af0
	TigerMapMarkerProxy* SetRotation(const float NewRotation);// 0x15499e0
	TigerMapMarkerProxy* SetLocation(const Vector WorldLocation);// 0x1549820
	TigerMapMarkerProxy* SetAlignment(const Vector2D NewAlignment);// 0x1549580
	bool IsVisible();// 0x15490f0
	TigerMapMarkerProxy* Hide();// 0x1549090
	class UserWidget GetWidgetType();// 0x1548f80
	float GetRotation();// 0x1548f20
	Vector GetLocation();// 0x1548c90
	Vector2D GetAlignment();// 0x1548bc0

--------------------------------
Class: TigerEntityJudgeHelicopter.TigerEntityHelicopter.Actor.Object
	TigerJudge* Judge;//[Offset: 0x2e0, Size: 0x8]
	float DesiredForwardOffsetFromJudge;//[Offset: 0x2f0, Size: 0x4]
	float DesiredHeight;//[Offset: 0x2f4, Size: 0x4]
	float MaxSpeed;//[Offset: 0x2f8, Size: 0x4]
	float MaxTargetDistance2DFromJudge;//[Offset: 0x2fc, Size: 0x4]
	float MinimumTargetHeight;//[Offset: 0x300, Size: 0x4]
	float MinimumHeightOverJudge;//[Offset: 0x304, Size: 0x4]
	float LoseTargetTime;//[Offset: 0x308, Size: 0x4]
	TimerHandle KillSelfHandle;//[Offset: 0x310, Size: 0x8]
	enum CurrentSpotlightState;//[Offset: 0x318, Size: 0x1]
	bool ShouldFlyAway();// 0x14fa3e0
	void SelectNewTarget(const TigerPlayer*[] PossibleTargets);// 0x14fa040
	bool HasTarget();// 0x14f9910

--------------------------------
Class: TigerJudgeRotationSettings
	enum RotationMode;//[Offset: 0x0, Size: 0x1]
	float RotationSpeed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerTimedAnimationTriggerWrapper
	TigerTimedAnimationTrigger[] AnimationTriggers;//[Offset: 0x0, Size: 0x10]
	float ElapsedTime;//[Offset: 0x10, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerTimedAnimationTrigger
	FName Name;//[Offset: 0x0, Size: 0x8]
	float TriggerTime;//[Offset: 0x8, Size: 0x4]
	enum AnimationType;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TigerJudgePlayerDamage
	TigerPlayer* Player;//[Offset: 0x0, Size: 0x8]
	float[] DamageCollection;//[Offset: 0x8, Size: 0x10]
	float DamageOverLastSecond;//[Offset: 0x18, Size: 0x4]
	float TotalDamage;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TigerGrimoireEntry.DataAsset.Object
	FText Name;//[Offset: 0x30, Size: 0x18]
	FText GameplayText;//[Offset: 0x48, Size: 0x18]
	FText Heading;//[Offset: 0x60, Size: 0x18]
	FText Description;//[Offset: 0x78, Size: 0x18]
	TigerGrimoireDialogueWrapper* Dialogue;//[Offset: 0x90, Size: 0x8]
	FText Summary;//[Offset: 0x98, Size: 0x18]
	FText UnlockSummary;//[Offset: 0xb0, Size: 0x18]
	enum MediaDisplayMode;//[Offset: 0xc8, Size: 0x1]
	Texture2D* Image;//[Offset: 0xd0, Size: 0x28]
	Texture2D* BackgroundImage;//[Offset: 0xf8, Size: 0x28]
	StaticMesh* Mesh;//[Offset: 0x120, Size: 0x28]
	FileMediaSource* Video;//[Offset: 0x148, Size: 0x28]
	enum DefaultState;//[Offset: 0x170, Size: 0x1]
	enum TextContinuationMethod;//[Offset: 0x171, Size: 0x1]
	GrimoireCardMaterialPreset* GrimoireCardPreset;//[Offset: 0x178, Size: 0x8]
	DataTableRowHandle CardQualityRow;//[Offset: 0x180, Size: 0x10]
	DataTableRowHandle CardBorderRow;//[Offset: 0x190, Size: 0x10]
	Texture* FrontCardTexture;//[Offset: 0x1a0, Size: 0x28]
	float DefaultOrderValue;//[Offset: 0x1c8, Size: 0x4]
	float MeshScaleMultiplier;//[Offset: 0x1cc, Size: 0x4]
	FString EntryIdAsString;//[Offset: 0x1d8, Size: 0x10]
	bool bHideEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	TigerGrimoireEntry* ParentEntry;//[Offset: 0x1f0, Size: 0x8]

--------------------------------
Class: TigerGrimoireDialogueWrapper.Object
	TigerNpcDialogueList* DialogueList;//[Offset: 0x28, Size: 0x8]
	FString DialogueKey;//[Offset: 0x30, Size: 0x10]
	FText GetDialogueText();// 0x151ac80

--------------------------------
Class: TigerNpcDialogueList.DataAsset.Object
	FString DialogueIdBase;//[Offset: 0x30, Size: 0x10]
	<FString,TigerNpcDialogue> DialogueLines;//[Offset: 0x40, Size: 0x50]

--------------------------------
Class: TigerNpcDialogue
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FText DialogueHeader;//[Offset: 0x8, Size: 0x18]
	FText[] DialogueText;//[Offset: 0x20, Size: 0x10]
	bool bRandomiseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	enum DialoguePriority;//[Offset: 0x31, Size: 0x1]
	enum IdleAnimation;//[Offset: 0x32, Size: 0x1]
	enum ConditionComparison;//[Offset: 0x33, Size: 0x1]
	TigerDialogueCondition*[] DialogueConditions;//[Offset: 0x38, Size: 0x10]
	enum Repeatability;//[Offset: 0x48, Size: 0x1]
	enum DialogueCategory;//[Offset: 0x49, Size: 0x1]
	bool bIgnoreCategoryRestrictions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	TigerQuestIdentifier QuestToStartId;//[Offset: 0x50, Size: 0x40]
	TigerGrimoireUnlock[] GrimoireUnlocks;//[Offset: 0x90, Size: 0x10]
	bool bSuperfluousAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	AkAudioEvent* DialogueAudio;//[Offset: 0xa8, Size: 0x8]
	AnimMontage* AnimationToPlay;//[Offset: 0xb0, Size: 0x8]
	UInt32Property EventId;//[Size: 0x4]

--------------------------------
Class: TigerDialogueCondition.Object
	bool bFalseCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: TigerQuestIdentifier
	FString QuestLineId;//[Offset: 0x0, Size: 0x10]
	FString QuestId;//[Offset: 0x10, Size: 0x10]
	Guid ObjectiveId;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TigerGrimoireUnlock
	enum UnlockType;//[Offset: 0x0, Size: 0x1]
	TigerGrimoireEntry* Entry;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10]
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	void SetFilePath(FString Path);// 0x2b426e0

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: GrimoireCardMaterialPreset.DataAsset.Object
	float Roughness;//[Offset: 0x30, Size: 0x4]
	float Damage;//[Offset: 0x34, Size: 0x4]
	float ExtraDamage;//[Offset: 0x38, Size: 0x4]
	float ExtraDamageOnEdges;//[Offset: 0x3c, Size: 0x4]
	Vector ExtraDamageMoveScale;//[Offset: 0x40, Size: 0xc]
	Vector BorderRoughnessSpecularity;//[Offset: 0x4c, Size: 0xc]
	float BorderAmount;//[Offset: 0x58, Size: 0x4]
	Color BorderColor;//[Offset: 0x5c, Size: 0x4]
	float BorderRaisedAmount;//[Offset: 0x60, Size: 0x4]
	Vector BorderRoughnessSpecularityMetalic;//[Offset: 0x64, Size: 0xc]
	Vector DirtMaps;//[Offset: 0x70, Size: 0xc]
	Color DirtColor;//[Offset: 0x7c, Size: 0x4]
	Vector DirtMoveXYScale;//[Offset: 0x80, Size: 0xc]
	float DirtHardness;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: DataTableRowHandle
	DataTable* DataTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerBloodPotencyComponent.ActorComponent.Object
	float BloodTypeWeights;//[Offset: 0xb0, Size: 0x4]
	bool bEnableBloodTypeEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bVisualizeBloodTypeNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	TigerBloodPotencyVisualizationConfig* CurrentHeightenedSensesConfig;//[Offset: 0xd0, Size: 0x8]
	TigerBloodPotencyVisualizationConfig* CurrentInWorldConfig;//[Offset: 0xd8, Size: 0x8]
	TigerBloodPotencyVisualizationConfig* HeightenedSensesVisualConfiguration;//[Offset: 0xe0, Size: 0x8]
	TigerBloodPotencyVisualizationConfig* HeightenedSensesVisualConfigurationByBloodType;//[Offset: 0x100, Size: 0x8]
	TigerBloodPotencyVisualizationConfig* InWorldVisualConfiguration;//[Offset: 0x138, Size: 0x8]
	TigerBloodPotencyVisualizationConfig* InWorldVisualConfigurationByBloodType;//[Offset: 0x158, Size: 0x8]
	FName HeartMeshMaximumVisibilityDistanceName;//[Offset: 0x190, Size: 0x8]
	MaterialInstance*[] HsMeshPreviousMaterials;//[Offset: 0x198, Size: 0x10]
	MaterialInstance*[] HsMeshTargetMaterials;//[Offset: 0x1a8, Size: 0x10]
	MaterialInstanceDynamic*[] HsMeshCurrentMaterials;//[Offset: 0x1b8, Size: 0x10]
	SkeletalMeshComponent* HsSkeletalMeshComponent;//[Offset: 0x1c8, Size: 0x8]
	ParticleSystemComponent* HsParticleSystemComponent;//[Offset: 0x1d0, Size: 0x8]
	NiagaraComponent* HsNiagaraComponent;//[Offset: 0x1d8, Size: 0x8]
	MaterialInstance*[] InWorldMeshPreviousMaterials;//[Offset: 0x1e0, Size: 0x10]
	MaterialInstance*[] InWorldMeshTargetMaterials;//[Offset: 0x1f0, Size: 0x10]
	MaterialInstanceDynamic*[] InWorldMeshCurrentMaterials;//[Offset: 0x200, Size: 0x10]
	SkeletalMeshComponent* InWorldSkeletalMeshComponent;//[Offset: 0x210, Size: 0x8]
	ParticleSystemComponent* InWorldParticleSystemComponent;//[Offset: 0x218, Size: 0x8]
	NiagaraComponent* InWorldNiagaraComponent;//[Offset: 0x220, Size: 0x8]
	TigerBaseNPC* NpcOwner;//[Offset: 0x228, Size: 0x8]
	float MaterialInterpolationDuration;//[Offset: 0x240, Size: 0x4]
	void RefreshBloodPotencyVisualization(const bool bInForceRefresh);// 0x1496640

--------------------------------
Class: TigerBloodPotencyVisualizationConfig.DataAsset.Object
	MaterialInstance*[] HeartMeshMaterialTarget;//[Offset: 0x30, Size: 0x10]
	NiagaraSystem* NiagaraPath;//[Offset: 0x40, Size: 0x28]
	ParticleSystem* ParticleSystem;//[Offset: 0x68, Size: 0x8]
	FName ParticleSystemAttachmentSocket;//[Offset: 0x70, Size: 0x8]
	bool bParticleSystemAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: TigerNPCFacePoseMap.Object
	TigerFacePoseData[] HeadMeshsPoseAssets;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TigerFacePoseData
	SkeletalMesh* HeadMesh;//[Offset: 0x0, Size: 0x28]
	PoseAsset* PoseAsset;//[Offset: 0x28, Size: 0x8]
	AnimSequence* PoseSourceAnimation;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerInteractiveNpcComponent.ActorComponent.Object
	class TigerElysiumNpcNameplateWidget* OverheadWidget;//[Offset: 0xb0, Size: 0x8]
	TigerNpcDialogueList* DialogueList;//[Offset: 0xb8, Size: 0x8]
	float DelayBetweenInteractions;//[Offset: 0xc0, Size: 0x4]
	TigerDialogueManager* DialogueManager;//[Offset: 0xc8, Size: 0x8]
	FText NpcName;//[Offset: 0xd0, Size: 0x18]
	FText NpcTitle;//[Offset: 0xe8, Size: 0x18]
	Texture2D* NpcIcon;//[Offset: 0x100, Size: 0x8]
	enum NpcClan;//[Offset: 0x108, Size: 0x1]
	void ResortDialogueLines();// 0x152fcf0
	TigerDialogueManager* GetDialogueManager();// 0x152e9f0
	void BindToPlayerUpdate(TigerPlayerController* InPlayerController);// 0x152dcd0

--------------------------------
Class: TigerDialogueManager.Object
	void SortDialogueLines(const TigerPlayerState* InState);// 0x14d83a0
	bool HasQuestDialogue();// 0x14d7f90
	bool HasMoreDialogue();// 0x14d7f30
	bool HasHighPriorityDialogue();// 0x14d7f00
	enum GetSpeakerClan();// 0x14d7e60
	TigerNpcDialogue GetNextDialoguePack();// 0x14d7dc0
	bool GetNextDialogueLine(out FText OutText, out FText OutQuestDescription);// 0x14d7c40
	int GetCurrentDialogueId();// 0x14d77c0
	bool CanInteract();// 0x14d7420

--------------------------------
Class: TigerElysiumNpcNameplateWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerInteractiveNpcComponent* InteractiveNpcComponent;//[Offset: 0x280, Size: 0x8]
	bool DoesPlayerHaveObjectiveToTalkToNPC();// 0x14f49f0

--------------------------------
Class: TigerPlayerController.PlayerController.Controller.Actor.Object
	delegate OnPersistentPlayerInitialisedEvent;//[Offset: 0x578, Size: 0x10]
	delegate OnGhostModeSet;//[Offset: 0x588, Size: 0x10]
	delegate OnBeginPlay;//[Offset: 0x598, Size: 0x10]
	delegate OnPlayerStateCreated;//[Offset: 0x5a8, Size: 0x10]
	delegate OnClientDownedEnemyPlayer;//[Offset: 0x5b8, Size: 0x10]
	delegate OnCancelPsoCaching;//[Offset: 0x5c8, Size: 0x10]
	delegate OnShowClimbPrompt;//[Offset: 0x5d8, Size: 0x10]
	delegate OnHideClimbPrompt;//[Offset: 0x5e8, Size: 0x10]
	delegate OnClientChallengesCollectionCreated;//[Offset: 0x5f8, Size: 0x10]
	delegate OnControllerConnectionChanged;//[Offset: 0x668, Size: 0x10]
	delegate OnCrossplaySettingLockChanged;//[Offset: 0x678, Size: 0x10]
	TigerLocalAIController* LocalAIController;//[Offset: 0x688, Size: 0x8]
	class TigerLocalAIController* LocalAIControllerClass;//[Offset: 0x690, Size: 0x8]
	TigerLocalAIControllerBase* GameplayBenchmarkController;//[Offset: 0x698, Size: 0x8]
	class TigerLocalAIControllerBase* GameplayBenchmarkControllerClass;//[Offset: 0x6a0, Size: 0x8]
	TigerUserInputBinding* UserInputBindings;//[Offset: 0x6c0, Size: 0x8]
	delegate OnUseGamepadChanged;//[Offset: 0x6c8, Size: 0x10]
	bool bSilentMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	int RedGasAkEventID;//[Offset: 0x6dc, Size: 0x4]
	int CloseToRedGasAkEventID;//[Offset: 0x6e0, Size: 0x4]
	delegate OnItemPickedUp;//[Offset: 0x6f0, Size: 0x10]
	delegate OnInventoryToggle;//[Offset: 0x700, Size: 0x10]
	delegate OnInitialLevelStreamingCompletedDelegate;//[Offset: 0x710, Size: 0x10]
	TigerResurrectComponent* ResurrectComponent;//[Offset: 0x728, Size: 0x8]
	TigerClientInteractiveSpawner* ClientSpawner;//[Offset: 0x730, Size: 0x8]
	TigerPerformanceStates PerformanceStates;//[Offset: 0x738, Size: 0x7c]
	class SpectatorPawn* SpectatingClass;//[Offset: 0x7b8, Size: 0x8]
	TigerMapInfoDataAsset* MapInfoAsset;//[Offset: 0x7c0, Size: 0x8]
	class UserWidget* PlayerMapMarkerClass;//[Offset: 0x7c8, Size: 0x8]
	class TigerUserInputBinding* UserInputSettingsClass;//[Offset: 0x7d0, Size: 0x8]
	class UserWidget* RevealedItemMapMarkerWidgetClass;//[Offset: 0x7d8, Size: 0x8]
	class UserWidget* RevealedItemCompassObjectWidgetClass;//[Offset: 0x7e0, Size: 0x8]
	class TigerWorldMarker* QuestMapMarkerClass;//[Offset: 0x7e8, Size: 0x8]
	class TigerBuffDOT* CrossBowGasDamageForAchievement;//[Offset: 0x7f0, Size: 0x8]
	float ControlRotationSpeedStandingStill;//[Offset: 0x7f8, Size: 0x4]
	CurveFloat* ControlRotationSpeedMovingCurve;//[Offset: 0x800, Size: 0x8]
	float ControlRotationSpeedMoving;//[Offset: 0x808, Size: 0x4]
	float MinControlRotationSpeedMoving;//[Offset: 0x80c, Size: 0x4]
	float InstantControlRotationTimeThreshold;//[Offset: 0x810, Size: 0x4]
	float CycleWeaponsHolsterHoldTime;//[Offset: 0x814, Size: 0x4]
	float SprintCancelTimeOnGamepad;//[Offset: 0x818, Size: 0x4]
	float SprintGamepadInputLimit;//[Offset: 0x81c, Size: 0x4]
	float SprintGamepadInputAngle;//[Offset: 0x820, Size: 0x4]
	float RandomizedDamageScale;//[Offset: 0x828, Size: 0x4]
	float MouseScrollWeaponChangeCooldown;//[Offset: 0x82c, Size: 0x4]
	float TigerStuckTriggerZ;//[Offset: 0x834, Size: 0x4]
	float ClimbingInputZCutOff;//[Offset: 0x838, Size: 0x4]
	float MinimumUpwardClimbAngle;//[Offset: 0x83c, Size: 0x4]
	float MaximumSidewaysClimbDeviation;//[Offset: 0x840, Size: 0x4]
	float ClimbingOverHangZCutOff;//[Offset: 0x844, Size: 0x4]
	float ClimbingHalfAngleInputDifferenceAllowed;//[Offset: 0x848, Size: 0x4]
	bool bOnlyStartClimbIfLookingAtWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 0x1]
	AkAudioEvent* TargetDownedAudioEvent;//[Offset: 0x850, Size: 0x8]
	AkAudioEvent* PlayerDownedAudioEvent;//[Offset: 0x858, Size: 0x8]
	AkAudioEvent* GuidingAudioEvent;//[Offset: 0x860, Size: 0x8]
	AkAudioEvent* DeathNotifierAkAudioEvent;//[Offset: 0x868, Size: 0x8]
	float GuidingAudioCooldown;//[Offset: 0x870, Size: 0x4]
	CurveFloat* GamepadCameraYawStrengthCurve;//[Offset: 0x878, Size: 0x8]
	CurveFloat* GamepadCameraPitchStrengthCurve;//[Offset: 0x880, Size: 0x8]
	CurveFloat* GamepadRangedCameraYawStrengthCurve;//[Offset: 0x888, Size: 0x8]
	CurveFloat* GamepadRangedCameraPitchStrengthCurve;//[Offset: 0x890, Size: 0x8]
	CurveFloat* GamepadAimingCameraYawStrengthCurve;//[Offset: 0x898, Size: 0x8]
	CurveFloat* GamepadAimingCameraPitchStrengthCurve;//[Offset: 0x8a0, Size: 0x8]
	CurveFloat* GamepadCameraYawAccelerationCurve;//[Offset: 0x8a8, Size: 0x8]
	CurveFloat* GamepadCameraPitchAccelerationCurve;//[Offset: 0x8b0, Size: 0x8]
	CurveFloat* GamepadRangedCameraYawAccelerationCurve;//[Offset: 0x8b8, Size: 0x8]
	CurveFloat* GamepadRangedCameraPitchAccelerationCurve;//[Offset: 0x8c0, Size: 0x8]
	CurveFloat* GamepadAimingCameraYawAccelerationCurve;//[Offset: 0x8c8, Size: 0x8]
	CurveFloat* GamepadAimingCameraPitchAccelerationCurve;//[Offset: 0x8d0, Size: 0x8]
	CurveFloat* CurrentGamepadInputCurve;//[Offset: 0x8d8, Size: 0x8]
	CurveFloat* GamepadInputCurveLinear;//[Offset: 0x8e0, Size: 0x8]
	CurveFloat* GamepadInputCurveExponential;//[Offset: 0x8e8, Size: 0x8]
	CurveFloat* GamepadInputCurveExponentialExtreme;//[Offset: 0x8f0, Size: 0x8]
	CurveFloat* GamepadInputCurveSCurve;//[Offset: 0x8f8, Size: 0x8]
	CurveFloat* GamepadInputCurveInvertedSCurve;//[Offset: 0x900, Size: 0x8]
	CurveFloat* GamepadRotationalAimAssistSmoothingCurve;//[Offset: 0x908, Size: 0x8]
	float DisciplineWeaponAbilityTriggerWindow;//[Offset: 0x910, Size: 0x4]
	float HeightenedSensesPadTriggerwindow;//[Offset: 0x914, Size: 0x4]
	float ConsumableWheelTriggerWindow;//[Offset: 0x918, Size: 0x4]
	ForceFeedbackEffect* DamageTakenForceFeedback;//[Offset: 0x920, Size: 0x8]
	float DamageTakenForceFeedbackCooldown;//[Offset: 0x928, Size: 0x4]
	ForceFeedbackEffect* DeathForceFeedback;//[Offset: 0x930, Size: 0x8]
	ForceFeedbackEffect* DownedForceFeedback;//[Offset: 0x938, Size: 0x8]
	ForceFeedbackEffect* SoftLandingForceFeedback;//[Offset: 0x940, Size: 0x8]
	ForceFeedbackEffect* HeavyLandingForceFeedback;//[Offset: 0x948, Size: 0x8]
	TigerSpectatorPawn* TigerSpectatorPawn;//[Offset: 0x950, Size: 0x8]
	float HeavyAttackTriggerTime;//[Offset: 0x958, Size: 0x4]
	float HeavyAttackTriggerTimeGamepad;//[Offset: 0x95c, Size: 0x4]
	enum MusicAudioState;//[Offset: 0x960, Size: 0x1]
	enum BlindedAudioState;//[Offset: 0x961, Size: 0x1]
	enum IndoorAudioState;//[Offset: 0x962, Size: 0x1]
	enum MainMenuAudioState;//[Offset: 0x963, Size: 0x1]
	enum AmbienceAudioState;//[Offset: 0x964, Size: 0x1]
	enum CombatAudioState;//[Offset: 0x965, Size: 0x1]
	enum FeedingAudioState;//[Offset: 0x966, Size: 0x1]
	enum AimGlideAudioState;//[Offset: 0x967, Size: 0x1]
	enum GameModeAudioState;//[Offset: 0x968, Size: 0x1]
	float AssaultBorderMusicDistance;//[Offset: 0x96c, Size: 0x4]
	float RedGasLastWaveAssaultBorderMusicDistance;//[Offset: 0x970, Size: 0x4]
	float RedGasLastStageAssaultBorderMusicDistance;//[Offset: 0x974, Size: 0x4]
	float AmbientMusicTimer;//[Offset: 0x978, Size: 0x4]
	float NoAmbientMusicTimer;//[Offset: 0x97c, Size: 0x4]
	float NoAmbienceMusicTimerInterval;//[Offset: 0x980, Size: 0x4]
	float AmbientMusicTimerInterval;//[Offset: 0x984, Size: 0x4]
	TigerPaperDoll* PaperDoll;//[Offset: 0x988, Size: 0x8]
	TigerInteractionControllerComponent* InteractionControllerComponent;//[Offset: 0x990, Size: 0x8]
	TigerClientSeasonalRewardCollection* ClientSeasonalRewardCollection;//[Offset: 0x998, Size: 0x8]
	TigerClientChallengesCollection* ClientChallengesCollection;//[Offset: 0x9a0, Size: 0x8]
	TigerClientPlayerProgressionRewardCollection* ClientPlayerProgressionRewardCollection;//[Offset: 0x9a8, Size: 0x8]
	TigerCollectibleSystem* CollectibleComponent;//[Offset: 0x9b0, Size: 0x8]
	TigerQuestSystem* QuestComponent;//[Offset: 0x9b8, Size: 0x8]
	TigerDamageFeedbackComponent* DamageFeedbackComponent;//[Offset: 0x9c0, Size: 0x8]
	TSSClientComponent* AntiCheatTssComponent;//[Offset: 0x9c8, Size: 0x8]
	TigerGameModeFeatureRespawn* RespawnFeature;//[Offset: 0x9d0, Size: 0x8]
	TigerNetworkGraphDelegates* NetworkGraphDelegates;//[Offset: 0x9d8, Size: 0x8]
	enum OverrideMusicAudioState;//[Offset: 0x9e0, Size: 0x1]
	class TigerActionBuffer* ActionBufferClass;//[Offset: 0x9e8, Size: 0x8]
	TigerActionBuffer* ActionBuffer;//[Offset: 0x9f0, Size: 0x8]
	TigerPlayer* TigerPlayerPawn;//[Offset: 0xa08, Size: 0x8]
	TigerMapGameData* MapGameData;//[Offset: 0xa18, Size: 0x8]
	TigerInWorldIconController* InWorldIconController;//[Offset: 0xa20, Size: 0x8]
	TigerPingControllerComponent* PingControllerComponent;//[Offset: 0xa28, Size: 0x8]
	TigerContextualHelpComponent* ContextualHelpComponent;//[Offset: 0xa30, Size: 0x8]
	TigerEmoteControllerComponent* EmoteControllerComponent;//[Offset: 0xa38, Size: 0x8]
	TigerChatComponent* ChatComponent;//[Offset: 0xa40, Size: 0x8]
	TigerAimAssist* AimAssist;//[Offset: 0xa48, Size: 0x8]
	TigerGamepad* GamepadEffect;//[Offset: 0xa50, Size: 0x8]
	float StickynessTimeoutDuration;//[Offset: 0xb1c, Size: 0x4]
	float EngagementTimeoutDuration;//[Offset: 0xb20, Size: 0x4]
	TigerMapMarkerProxy* PlayerMapMarkerProxy;//[Offset: 0xb28, Size: 0x8]
	InputComponent* GhostInputComponent;//[Offset: 0xb38, Size: 0x8]
	InputComponent* SpectateInputComponent;//[Offset: 0xb40, Size: 0x8]
	InputComponent* HUDInputComponent;//[Offset: 0xb48, Size: 0x8]
	TigerWorldCompositionGrid* StreamingGrid;//[Offset: 0xb50, Size: 0x8]
	enum PreviouslyEquippedRangedSlot;//[Offset: 0xb5a, Size: 0x1]
	float MouseSidewaysSprintSafetyAngle;//[Offset: 0xb9c, Size: 0x4]
	float PitchSensitivityModifier;//[Offset: 0xba0, Size: 0x4]
	float YawSensitivityModifier;//[Offset: 0xba4, Size: 0x4]
	float PitchAccelerationDeadZone;//[Offset: 0xba8, Size: 0x4]
	float YawAccelerationDeadZone;//[Offset: 0xbac, Size: 0x4]
	float PitchRangedAccelerationDeadZone;//[Offset: 0xc08, Size: 0x4]
	float YawRangedAccelerationDeadZone;//[Offset: 0xc0c, Size: 0x4]
	bool bUndoAccelerationInDeadZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 0x1]
	TigerNPCCheatCommandsAsset* NPCCheatCommandsAsset;//[Offset: 0xc20, Size: 0x28]
	TigerNPCCheatCommandsAsset* NPCCheatCommands;//[Offset: 0xc48, Size: 0x8]
	TigerItemCheatCommandsAsset* ItemCheatCommandsAsset;//[Offset: 0xc50, Size: 0x28]
	TigerItemCheatCommandsAsset* ItemCheatCommands;//[Offset: 0xc78, Size: 0x8]
	TigerNPCInstantSpawner* NpcCheatSpawner;//[Offset: 0xc80, Size: 0x8]
	TigerWheelWidget* CurrentWheelWidget;//[Offset: 0xc88, Size: 0x8]
	TigerVendorComponent* ElysiumVendorComponent;//[Offset: 0xc90, Size: 0x8]
	float ToggleAimBufferTime;//[Offset: 0xcf8, Size: 0x4]
	bool bPawnRotatesWithCameraWhileIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfc, Size: 0x1]
	bool bUseTurnInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfd, Size: 0x1]
	bool bPrintRightGamepadAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfe, Size: 0x1]
	FText KilledBloodHuntedPlayerText;//[Offset: 0xd28, Size: 0x18]
	float TimeUntilKeyIsHeld;//[Offset: 0xd54, Size: 0x4]
	float HoldTimeToOpenSettings;//[Offset: 0xd58, Size: 0x4]
	float HoldTimeToNotQuickUseFavorite;//[Offset: 0xd5c, Size: 0x4]
	TigerSHPBMarker*[] DiscoveredSHPBMarkers;//[Offset: 0xd78, Size: 0x10]
	void WaitForPersistantPlayerStateInitialisation(delegate OnLoaded);// 0x15a78e0
	void UseWeaponAbility();// 0x15a78c0
	void TryReload();// 0x15a78a0
	void ToggleShowCombatStatus();// 0xb7a5a0
	void TigerTrackLocomotionData();// 0xb7a5a0
	void TigerToggleServerGunSoundRpcs();// 0xb7a5a0
	void TigerToggleOutlines();// 0xb7a5a0
	void TigerToggleElysiumMobility();// 0xb7a5a0
	void TigerToggleDebugWallGrind(const bool bInShouldPrintVelocity, const bool bInShowVisualDebug, const bool bInDebugVFX, const bool bInShowSimulation);// 0x15a7720
	void TigerToggleCrosshairDebug();// 0xb7a5a0
	void TigerToggleCharacterCard();// 0xb7a5a0
	void TigerTestSpawnMechanic();// 0x15a7700
	void TigerTeleportToActor(FString InActorClassName, const int InIndex);// 0x15a7620
	void TigerTakeDamage(const float DamageAmount);// 0x15a75a0
	void TigerSwitchCharacter(int InCharacterSlot);// 0x15a7510
	void TigerStuck(float DropHeightInMeters);// 0x14c0a00
	void TigerStopServerProfiler();// 0x15a74f0
	void TigerStopServerNetworkProfiler();// 0xb7a5a0
	void TigerStartServerProfiler(const float Duration);// 0x15a7470
	void TigerStartServerNetworkProfiler(const float InDuration);// 0x14c0a00
	void TigerSpectate();// 0x15a7450
	void TigerSpawnBotsFromServer(InNumberOfBotsToSpawn(UInt32Property) InNumberOfBotsToSpawn);// 0x15a73c0
	void TigerSpawnBotsFromClient(InNumberOfBotsToSpawn(UInt32Property) InNumberOfBotsToSpawn);// 0x15a7330
	void TigerSpamAction(const enum InActionType, float InSpamInterval);// 0x15a7260
	void TigerSkipSpawnCountdownTimer();// 0x15a7240
	void TigerShowPlayers(const int InShowPlayers);// 0x15a71b0
	void TigerShowNPCToPlayerSightData(const float InScreenDuration);// 0x14c0a00
	void TigerShowJumpLength(const float DebugDrawDuration);// 0x14c0a00
	void TigerShowFreeRunningVolumes();// 0xb7a5a0
	void TigerShowDPS();// 0xb7a5a0
	void TigerShowClimbPrompt__DelegateSignature();// 0x197e4f0
	void TigerShowCAPs(const float DebugDrawDuration);// 0x15a7130
	void TigerShowBotStateInfo(const bool bInShow);// 0x149f8f0
	void TigerSetServerRespawn(int RespawnType);// 0x14c0500
	void TigerSetSafeZoneMarginRelative(const float InWidthRel, const float InHeightRel);// 0x15a7060
	void TigerSetSafeZoneMarginPixel(const float InWidthPix, const float InHeightPix);// 0x15a7060
	void TigerSetPlayerIsReadyToPlay();// 0xb7a5a0
	void TigerSetMuteAudio(bool bInShouldMute);// 0x15a6fd0
	void TigerSetLocalTimeDilation(const float InFactor);// 0x14c0a00
	void TigerSetLocalPawnTimeDilation(const float InFactor);// 0x14c0a00
	void TigerSetHolyIncenseSpeedMultiplier(const float InSpeedMultiplier);// 0x14c0a00
	void TigerSetHolyIncenseElapsedTime(const float InTotalElapsedTime);// 0x14c0a00
	void TigerServerLogSignificance();// 0x15a6fb0
	void TigerServerConsoleExec(FString InExecString);// 0x14c16c0
	void TigerSendPlayerServerPose(float InInterval);// 0x14c0a00
	void TigerSavePlayerLocation();// 0xb7a5a0
	void TigerRevive();// 0xb7a5a0
	void TigerResurrectMember(const float InOffsetX, const float InOffsetY, const float InOffsetZ);// 0x15a6e90
	void TigerRestoreMasquerade();// 0xb7a5a0
	void TigerResetDialogues();// 0xb7a5a0
	void TigerResetDialogueCategories();// 0xb7a5a0
	void TigerReinitializeDailyChallenges();// 0xb7a5a0
	void TigerRebindBoundConsoleCommand(const FString NewConsoleCommand);// 0x14c16c0
	void TigerPrintTraversalState(const float InScreenTime);// 0x14c0a00
	void TigerPrintServerTickRate();// 0x15a6e70
	void TigerPrintNumberOfPlayersInGame();// 0x15a6e50
	void TigerPrintCurrentAnimationSetsUsed(const float ScreenDuration);// 0x14c0a00
	void TigerPlayerLocalBenchmarkEnable(bool bInNowEnabled);// 0x15a6dc0
	void TigerPlayerLocalAIEnable(bool bInNowEnabled);// 0x15a6d30
	void TigerOnTakenDamage__DelegateSignature();// 0x197e4f0
	void TigerOnCrossplaySettingLockChanged__DelegateSignature(bool bSettingIsLocked);// 0x197e4f0
	void TigerNextSpawn();// 0xb7a5a0
	void TigerLogState(bool bShouldLog);// 0x149f8f0
	void TigerLogAllSyncedMasqueradeInstances(const float InScreenDuration);// 0x14c0a00
	void TigerLoadPlayerLocation();// 0xb7a5a0
	void TigerLoadLocalStoreConfig(const enum InStoreCategoryType, FString InFilePath);// 0x1570280
	void TigerKickMe();// 0x15a6d10
	void TigerHideClimbPrompt__DelegateSignature();// 0x197e4f0
	void TigerGetNpcCount();// 0x15a6cf0
	void TigerGetMovingNpcCount();// 0x15a6cd0
	void TigerGetActorCount(FString InActorClassName);// 0x15a6c30
	void TigerFreeze(double InSeconds);// 0x15a6bb0
	void TigerFakeMatchmakingReady(int InGameModeIndex);// 0x15a6b20
	void TigerFakeLaunchActivity(FString InSoloOrGroup);// 0x14c0250
	void TigerEndMatch();// 0x15a6b00
	void TigerEnableServerAutoStats();// 0x15a6ae0
	void TigerDumpLocomotionData();// 0xb7a5a0
	void TigerDisableGamepad();// 0xb7a5a0
	void TigerDeleteCharacterSlot(byte InCharacterSlot);// 0x15a6a60
	void TigerDebugTraversalStates(const bool bInEnableTraversalDebugging, const bool bInPrintStatesToScreen, const float InDebugLedgeGrabTime);// 0x15a6930
	void TigerDebugPrintRootMotionFlags();// 0xb7a5a0
	void TigerDebugPreMatchState();// 0x15a6910
	void TigerDebugPlayerProjectilePooling(int InShouldShowPoolMovements);// 0x15a6880
	void TigerDebugLoadingStates();// 0x15a6860
	void TigerDebugHolyIncense();// 0x15a6840
	void TigerDebugGameFlowStates();// 0xb7a5a0
	void TigerDebugDrawNpcMovementRestrictionBounds(const float InDebugDrawLifetime);// 0x15a67c0
	void TigerDebugCharacterSpeed();// 0xb7a5a0
	void TigerDebugCharacterPath(const float Duration);// 0x14c0a00
	void TigerDeactivateMasqueradeConsequence(FString InConsequenceName);// 0x14c0250
	void TigerCancelPsoCaching__DelegateSignature();// 0x197e4f0
	void TigerCameraUrl();// 0xb7a5a0
	void TigerBuildVersion();// 0x15a67a0
	void TigerBuildScreenshotMap();// 0x15a6780
	void TigerBotGodAll(const bool InGod);// 0x15a66f0
	void TigerBotGod(const int InBotIndex, const bool InGod);// 0x15a6620
	void TigerBecomeBloodhunted();// 0xb7a5a0
	void TigerBackendUrl();// 0x15a6600
	void TigerAllBecomeBloodhunted();// 0xb7a5a0
	void TigerAddItem(FString ItemName, const int Count);// 0x14c0420
	void TigerActivateMasqueradeConsequence(FString InConsequenceName);// 0x14c0250
	void StickynessTargetOrPlayerDefeated(Controller* InInstigatorController);// 0x15a6570
	void StartAttackMouse();// 0x15a6550
	void StartAttackGamepad();// 0x15a6530
	void ShutdownServer();// 0x15a6510
	void ShowMouseCursor(const bool bInShouldStopAlternateAction);// 0x15a6480
	bool ShouldPlayForceFeedback();// 0xb69560
	bool ShouldHoldJumpToClimb();// 0x15a6450
	void SetupAsBot(TigerPlayerState* inTigerPlayerState);// 0x15a63c0
	void SetPlayerIsReadyToPlay();// 0x15a63a0
	void SetInCinematic(bool bCinematicState);// 0x15a6310
	void SetHUDInputEnabled(const bool bIsEnabled, const bool bInShouldStopAlternateAction);// 0x15a61b0
	void SetHoveredDpadNavNode(TigerUIDPadNavNode* InDPadNavNode);// 0x15a6280
	void SetGamepadLightColor(out const Color InColor, bool bInShouldPulse, float InPulseTime);// 0x15a6080
	void SetFogDensity(float Value);// 0x15a6000
	void SetActiveFindSessionInstance(TigerFindSessionAsync* FindSessionInstance);// 0x15a5f70
	void Server_ToggleElysiumMobility();// 0x15a5f20
	void Server_TigerTrackLocomotionData();// 0x15a5ed0
	void Server_TigerToggleServerGunSoundRpcs();// 0x15a5e80
	void Server_TigerToggleDebugWallGrind(const bool bInShouldPrintVelocity, const bool bInShowVisualDebug, const bool bInDebugVFX, const bool bInShowSimulation);// 0x15a5cb0
	void Server_TigerTestSpawnMechanic();// 0x15a5c60
	void Server_TigerTeleportPlayer(const Vector Location, const Rotator Rotation);// 0x15a5b70
	void Server_TigerTakeDamage(const float DamageAmount);// 0x15a5ab0
	void Server_TigerStuck(float DropHeightInMeters);// 0x15a59f0
	void Server_TigerStopServerProfiler();// 0x15a59a0
	void Server_TigerStopServerNetworkProfiler();// 0x15a5950
	void Server_TigerStartServerProfiler(const float Duration);// 0x15a5890
	void Server_TigerStartServerNetworkProfiler(const float InDuration);// 0x15a57d0
	void Server_TigerSkipSpawnCountdownTimer();// 0x15a5780
	void Server_TigerShowNPCToPlayerSightData(const float InScreenDuration);// 0x15a56c0
	void Server_TigerShowCaps(const float DebugDrawLength);// 0x15a5600
	void Server_TigerShowBotStateInfo(const bool bInShow);// 0x15a5540
	void Server_TigerServerConsoleExec(FString InExecString);// 0x15a5480
	void Server_TigerSendPlayerServerPose(float InInterval);// 0x15a53c0
	void Server_TigerRevive();// 0x15a5370
	void Server_TigerRestoreMasquerade();// 0x15a5320
	void Server_TigerPrintTraversalState(float InScreenTime);// 0x15a5260
	void Server_TigerPrintServerTickRate();// 0x15a5210
	void Server_TigerPrintNumberOfPlayersInGame();// 0x15a51c0
	void Server_TigerNextSpawn();// 0x15a5170
	void Server_TigerLogSignificance();// 0x15a5120
	void Server_TigerLoadLocalStoreConfig(const enum InStoreCategoryType, FString InFilePath);// 0x15a5030
	void Server_TigerEndMatch();// 0x15a4fe0
	void Server_TigerDumpLocomotionData();// 0x15a4f90
	void Server_TigerDebugTraversalStates(const bool bInEnableTraversalDebugging, const bool bInPrintStatesToScreen, const float InDebugLedgeGrabTime);// 0x15a4e40
	void Server_TigerDebugPrematchState();// 0x15a4df0
	void Server_TigerDebugLoadingStates();// 0x15a4da0
	void Server_TigerDebugDrawPlayerGrid(const float DebugDrawLifetime);// 0x15a4ce0
	void Server_TigerDebugDrawNpcMovementRestrictionBounds(const float InDebugDrawLifetime);// 0x15a4c20
	void Server_TigerDebugCharacterPath(const float Duration);// 0x15a4b60
	void Server_TigerDeactivateMasqueradeConsequence(FString InConsequenceName);// 0x15a4aa0
	void Server_TigerBecomeBloodhunted(bool bInAllPlayers);// 0x15a49e0
	void Server_TigerAddItem(TigerItemAsset* ItemAsset, const int RequestedCount, const enum InItemSourceID);// 0x15a48a0
	void Server_TigerActivateMasqueradeConsequence(FString InConsequenceName);// 0x15a47e0
	void Server_TeleportToMapLocation(const Vector2D Location);// 0x15a4730
	void Server_TeleportToActor(FString InActorClassName, const int InIndex);// 0x15a4620
	void Server_StopUsingConsumable();// 0x15a45d0
	void Server_StopFireWeapon();// 0x15a4580
	void Server_StopBlocking();// 0x15a4530
	void Server_StopAiming();// 0x15a44e0
	void Server_StartHeavySwing(bool bDisabledRootMotion);// 0x15a4420
	void Server_StartBlocking();// 0x15a43d0
	void Server_StartAiming();// 0x15a4380
	void Server_Spectate();// 0x15a4330
	void Server_SpawnBots(int InNumberOfBotsToSpawn);// 0x15a4270
	void Server_ShutdownServer();// 0x15a4220
	void Server_SetRespawn(int RespawnType);// 0x15a4160
	void Server_SetPlayerIsReadyToPlay();// 0x15a4110
	void Server_SetMatchmakingID(int InMatchmakingID);// 0x15a4080
	void Server_SetLastPlayedMatchGameMode(const FString[] InPlayerIds, int InGameModeIndex, FString InGameModeId);// 0x15a3f20
	void Server_ResetDialogues();// 0x15a3ed0
	void Server_RequestNewSpawnLocation(const Vector InDesiredSpawnLocation);// 0x15a3e20
	void Server_ReloadWeapon(byte InRequestId);// 0x15a3d70
	void Server_MarkDialogueAsRead(const int InDialogueId, FString InNpcIdentifier, const byte InCategory, TigerBaseNPC* InteractingCharacter);// 0x15a3bd0
	void Server_LeaveMatchAndRequestMatchStats();// 0x15a3b80
	void Server_KillSelf();// 0x15a3b30
	void Server_KickMe();// 0x15a3ae0
	void Server_Jump();// 0x15a3a90
	void Server_GhostFollowPrevPlayer();// 0x15a3a40
	void Server_GhostFollowNextPlayer();// 0x15a39f0
	void Server_GetNpcCount();// 0x15a39a0
	void Server_GetMovingNpcCount();// 0x15a3950
	void Server_GetActorCount(FString InActorClassName);// 0x15a3890
	void Server_FireWeaponMulti(int InFirstProjectileId, const Vector_NetQuantize10 InPreviousCharacterLocation, const TigerFireProjectileDataInterpolated[] InProjectiles);// 0x15a3740
	void Server_FireWeapon(int InProjectileId, const Vector_NetQuantize10 InPreviousCharacterLocation, const TigerFireProjectileData InProjectile);// 0x15a35f0
	void Server_FakeMatchmakingReady(int InGameModeIndex);// 0x15a3530
	void Server_EquipWeapon(enum WeaponSlot, bool bInstantSwitch, byte RequestId);// 0x15a33e0
	void Server_EnableServerAutoStats();// 0x15a33c0
	void Server_EnableLootBox(TigerLootBox* LootBox);// 0x15a3300
	void Server_DiscoveredSHPB(TigerSHPBMarker* DiscoveredMarker);// 0x15a3240
	void Server_ClientReportRangedWeaponHits(const TigerRangedHitInfo[] InHits);// 0x15a3180
	void Server_ClientReportRangedWeaponHit(const TigerRangedHitInfo InHit);// 0x15a30d0
	void Server_Cheat_UpdateSeasonProgress(int InExpToAdd, int InLevelsToAdd);// 0x15a2fd0
	void Server_Cheat_UnlockVanityItem(FString InItemName);// 0x15a2f10
	void Server_Cheat_UnlockItemsInCategory(const FName InCategoryName);// 0x15a2e50
	void Server_Cheat_UnlockAllPerks();// 0x15a2e00
	void Server_Cheat_ToggleNoAggro();// 0x15a2db0
	void Server_Cheat_ToggleGod();// 0x15a2d60
	void Server_Cheat_ToggleFreeReload();// 0x15a2d10
	void Server_Cheat_TigerSetSessionProgressToBattlepassLevel(const int InLevel, const bool bInShouldOwnBattlepass);// 0x15a2c10
	void Server_Cheat_TigerCompleteNextTierMastery();// 0x15a2bc0
	void Server_Cheat_TigerCompleteNextChallengeWeekly();// 0x15a2b70
	void Server_Cheat_TigerCompleteNextChallengeMastery();// 0x15a2b20
	void Server_Cheat_TigerCompleteNextChallengeDaily();// 0x15a2ad0
	void Server_Cheat_TigerChallengeSetProgressMastery(FString InChallengeName, const int InProgressValue);// 0x15a29c0
	void Server_Cheat_SubmitChallengeProgress();// 0x15a2970
	void Server_Cheat_SpawnNpcsInCircle(const FName InNpcType, const Vector InLocation, const int InCount);// 0x15a2820
	void Server_Cheat_SpawnNpc(const FName NPCType, const Vector Location, const enum InPotency, const enum InBloodType);// 0x15a2690
	void Server_Cheat_Slomo(float NewTimeDilation);// 0x15a25d0
	void Server_Cheat_ShowArchetypeLevelExp();// 0x15a2580
	void Server_Cheat_SetPlayerLevel(int InPlayerLevel);// 0x15a24c0
	void Server_Cheat_SetMatchesPlayed(const int InNumberMatches);// 0x15a2400
	void Server_Cheat_SetHolyIncenseElapsedTime(const float InTotalElapsedTime, const float InSpeedMultiplier);// 0x15a2300
	void Server_Cheat_SetBotGodAll(const bool InGod);// 0x15a2240
	void Server_Cheat_SetBotGod(const int InBotIndex, const bool InGod);// 0x15a2140
	void Server_Cheat_SetArchetypeLevel(int InArchetypeLevel);// 0x15a2080
	void Server_Cheat_ResetDialogueCategories();// 0x15a2030
	void Server_Cheat_RemoveHolyIncense();// 0x15a1fe0
	void Server_Cheat_RegisterGrimoireEntryAsUnread(const InGrimoireEntryId(UInt32Property) InGrimoireEntryId);// 0x15a1f20
	void Server_Cheat_RegisterGrimoireEntryAsUnlocked(const InGrimoireEntryId(UInt32Property) InGrimoireEntryId);// 0x15a1e60
	void Server_Cheat_RegisterGrimoireEntryAsLocked(const InGrimoireEntryId(UInt32Property) InGrimoireEntryId);// 0x15a1da0
	void Server_Cheat_MatchAddPlayerExp(int InPlayerExp);// 0x15a1ce0
	void Server_Cheat_MatchAddArchetypeExp(int InArchetypeExp);// 0x15a1c20
	void Server_Cheat_IncrementPremiumCurrency(InAmountToAdd(UInt64Property) InAmountToAdd);// 0x15a1b60
	void Server_Cheat_ForceOnlineError(const TigerOnlineErrorCode InErrorCode);// 0x15a1a70
	void Server_Cheat_DisableDisciplineCost();// 0x15a1a20
	void Server_Cheat_DestroyNpcWithinRadius(const float InRadius, bool bInExludeDebugTarget);// 0x15a1910
	void Server_Cheat_DebugHolyIncense();// 0x15a18c0
	void Server_Cheat_Crash();// 0x15a1870
	void Server_Cheat_ChangeRespawnLifeTokens(const int InChange);// 0x15a17b0
	void Server_Cheat_BringMeHome();// 0x15a1760
	void Server_Cheat_AddSoftCurrency(int InAmount, InCurrencyId(UInt64Property) InCurrencyId);// 0x15a1660
	void Server_Cheat_ActivateEvent(InEventid(UInt32Property) InEventid, bool InActivate);// 0x15a1560
	void Server_CancelHeavyAttack();// 0x15a1510
	void Server_ActivateCarAlarm(const TigerAIPlayerAction InPlayerAction);// 0x15a13d0
	void Server_AbortReloadWeapon(byte InRequestId, bool bInClientDropped);// 0x15a12d0
	void Server_AbortChannelingDiscipline(enum DisciplineEnum);// 0x15a1220
	void SavePendingRewardsToDisplay();// 0x15a1200
	void ResetInventoryKeyHoldTime();// 0x15a11e0
	void ResetGamepadLightColor();// 0x15a11c0
	void ResetActions();// 0x15a11a0
	void RemoveNavControllerRoot();// 0x15a1180
	void ReleaseWeaponAbility();// 0x15a1160
	void RefreshEquippedWeapon();// 0x15a1140
	void RecordShockwaveWallAchievementProgress(int InDamageBlocked, const TigerShockwaveWall* InShockwaveWall);// 0x15a1070
	int PostEventPersistent(AkAudioEvent* InEvent);// 0x15a0fd0
	int PostEventControllerSpeaker(AkAudioEvent* InEvent);// 0x15a0f30
	void PingClosestResurrectAltar();// 0x15a0f10
	void OnToggleMainMenu();// 0x197e4f0
	void OnToggleInventory();// 0x197e4f0
	void OnPreMatchAssetsLoadedMulti__DelegateSignature();// 0x197e4f0
	void OnPreMatchAssetsLoaded__DelegateSignature();// 0x197e4f0
	void OnPlayerStateCreated__DelegateSignature(TigerPlayerState* TigerPlayerState);// 0x197e4f0
	void OnPersistentPlayerInitialisedSingle__DelegateSignature(TigerPlayerController* PlayerController);// 0x197e4f0
	void OnPersistentPlayerInitialised__DelegateSignature(TigerPlayerController* PlayerController);// 0x197e4f0
	void OnPersistentPlayerInitialised();// 0x15a0dd0
	void OnLastWaveFinished();// 0x15a0db0
	void OnItemPickedUp__DelegateSignature(TigerItemAsset* Item, int Count);// 0x197e4f0
	void OnInventoryToggled__DelegateSignature();// 0x197e4f0
	void OnInitialLevelStreamingCompleted__DelegateSignature();// 0x197e4f0
	void OnInGameMenuToggled(bool bIsOpen);// 0x197e4f0
	void OnGhostModeSet__DelegateSignature(bool bIsGhostModeEnabled);// 0x197e4f0
	void OnDownedEnemyPlayer__DelegateSignature(TigerPlayer* InPlayer);// 0x197e4f0
	void OnControllerConnectionChanged__DelegateSignature(bool InConnected, int InControllerId);// 0x197e4f0
	void OnClientChallengesCollectionCreated__DelegateSignature();// 0x197e4f0
	void OnClanLevelUpdated__DelegateSignature(OldLevel(UInt32Property) OldLevel, NewLevel(UInt32Property) NewLevel);// 0x197e4f0
	void OnBeginPlay__DelegateSignature();// 0x197e4f0
	void OnApplicationFocusChanged(bool bIsFocused);// 0x15a0d20
	void OnAimUpdated(bool bIsAiming);// 0x15a0c90
	void MarkDialogueAsRead(const int InDialogueId, FString InNpcIdentifier, const byte InCategory);// 0x15a0b70
	TigerSharedMouseCursor* MakeSharedMouseCursor();// 0x15a0b40
	void KillSelf();// 0x15a0b20
	bool IsWheelUIOpen();// 0x15a0af0
	bool IsUsingCrosshairDebug();// 0x15a0770
	bool IsSpectating();// 0x15a0ac0
	bool IsRootDPadFocussed(const TigerUIDPadNavNode* InNode);// 0x15a0a00
	bool IsRespawnFeatureEnabled();// 0x15a09d0
	bool IsProbablyUsingGamepadInput();// 0x15a09b0
	bool IsPreSpawnStreamingDone();// 0x15a0980
	void IsPreMatchAssetsLoadedAsync(out const delegate InDelegate);// 0x15a08d0
	bool IsLocalBot();// 0x15a08b0
	bool IsInTutorial();// 0x15a0880
	bool IsInTransferFromMatch();// 0x15a0850
	bool IsInMatch();// 0x15a0820
	bool IsInElysium();// 0x15a07f0
	bool IsInCinematic();// 0x15a07d0
	bool IsInBenchmark();// 0x15a07a0
	bool IsGhostModeEnabled();// 0x15a0770
	void InGameMenuToggled(bool bIsOpen);// 0x15a06e0
	void HideMouseCursor();// 0x15a06c0
	bool HasWeaponForSlot(enum Slot);// 0x15a0630
	bool HasRangedWeaponCurrentlyEquipped();// 0x15a0600
	bool HasLocalPlayerSpawned();// 0x15a05e0
	bool HasLoadedRewards();// 0x15a05b0
	bool HasBegunPlay();// 0x15a0580
	void HandlePreSpawnLoadingCheckTimerTick();// 0x15a0530
	void HandleGameplaySettingsChanged(out const TigerGameplaySettings InGameplaySettings);// 0x15a0470
	TigerSpectatorPawn* GetTigerSpectatorPawn();// 0x15a0410
	TigerPlayerState* GetTigerPlayerState();// 0x96a5d0
	TigerPlayer* GetTigerPlayer();// 0x15a03f0
	TigerPersistentPlayerState* GetTigerPersistentPlayerState();// 0x15a03c0
	TigerMatchHUD* GetTigerMatchHUD();// 0x15a0390
	TigerGameInstance* GetTigerGameInstance();// 0x15a0360
	TigerElysiumHUD* GetTigerElysiumHUD();// 0x15a0330
	TigerHUD* GetTigerBaseHUD();// 0x15a0300
	Vector2D GetRightStickAnalogValues();// 0x15a02c0
	TigerPromptCollectionWidget* GetPromptCollection();// 0x15a0290
	TigerMapGameData* GetMapGameData();// 0x15a0270
	Vector2D GetLeftStickAnalogValues();// 0x15a0230
	TigerUIDPadNavNode* GetLastValidNode();// 0x15a0200
	bool GetHoldForInventory();// 0x15a01d0
	TigerUIDPadNavNode* GetHighlightedNode();// 0x15a01a0
	TigerDisciplineComponent* GetDisciplineComponenet();// 0x15a0170
	TigerUIDPadNavNode* GetCurrentScreenRoot();// 0x15a0110
	enum GetCurrentlyEquippedSlot();// 0x15a0140
	bool GetCrossPlaySettingLock();// 0x15a00f0
	TigerContextualHelpComponent* GetContextualHelpComponent();// 0x15a00d0
	TigerClientSeasonalRewardCollection* GetClientSeasonalRewardCollection();// 0x15a00b0
	TigerClientPlayerProgressionRewardCollection* GetClientPlayerProgressionRewardCollection();// 0x15a0090
	TigerClientChallengesCollection* GetClientChallengesCollection();// 0x15a0070
	Vector2D GetAnalogueCursorDelta();// 0x15a0030
	TigerAimAssist* GetAimAssist();// 0x15a0010
	TigerFindSessionAsync* GetActiveFindSessionInstance();// 0x159ffe0
	void FlushSpecificInputValue(out const FName InActionName, bool bInIsAxis);// 0x159fee0
	void FlushInputValues();// 0x159fec0
	bool EquipWeaponForSlot(const enum Slot, const bool bInstantSwitch, const bool bNotifyServer);// 0x159fda0
	void EngagementWasDefeated(Controller* InInstigatorController);// 0x159fd10
	void EngagementTargetDefeated(Controller* InInstigatorController);// 0x159fc80
	void EnableGhostMode();// 0xb7a5a0
	void EnabledDpadDirections(out const enum[] InDirections);// 0x159fbd0
	void EnableAllDpadDirections();// 0x159fbb0
	void DpadCustomMoveDirection(const enum InDirection);// 0x159fb30
	void DisableGhostMode();// 0xb7a5a0
	void DisableDpadDirections(out const enum[] InDirections);// 0x159fa80
	void DisableAllDpadDirections();// 0x159fa60
	bool DesiresAiming();// 0x159fa30
	void Debug_ShowCharacterCard();// 0x197e4f0
	void Client_StopBlocking();// 0x159fa10
	void Client_StickynessOnHit(TigerPlayer* InDamagedPlayer);// 0x159f980
	void Client_ShowWinScreen(int8 InPlayerPlacement);// 0x159f900
	void Client_ShowDeathScreen(int8 InPlayerPlacement, int8 InNumGroupsAtStart, int InPlayerStateId, enum InKillerType, bool bInReturnToElysiumOnClose);// 0x159f760
	void Client_ShowCrosshairNotifications(const enum[] InCrosshairNotifications);// 0x159f6c0
	void Client_ShowCrosshairNotification(enum InCrosshairNotification);// 0x159f640
	void Client_ShowArchetypeLevelExp(int64 InLevel, int64 InExp);// 0x159f570
	void Client_SetPlayerSpawnLocation(const Vector InSpawnLocation);// 0x159f4f0
	void Client_SetMatchStats(const TigerMatchStats MatchStats);// 0x159f2a0
	void Client_SetLastPlayedMatchGameMode(int InGameModeIndex, FString InGameModeId);// 0x159f1c0
	void Client_SetIsBenchmarkController(bool bInIsBenchmarkController);// 0x159f130
	void Client_SetCameraRotation(const float InYaw, const float InPitch);// 0x159f060
	void Client_SendMapSelectionInformation(const TigerClientSpawnLocationInfo[] InSpawnInformation);// 0x159efc0
	void Client_RecordCachedAchievementProgress(const FName InAchievementName, const float InCachedGasDamage);// 0x159eee0
	void Client_ReceiveLootBoxContentUpdate(TigerLootBox* LootBox, const TigerItemData[] ReceivedItemList);// 0x159edf0
	void Client_PrintString(FString InMessage, const float InScreenDuration, const bool bInWriteToLog, const Color InColor, const bool bInNewerOntop);// 0x159ec20
	void Client_OnPlayerPickedUpArtifact(const int InPlayerStateId, const TigerArtifactAsset* InArtifactAsset);// 0x159eb50
	void Client_OnPlayerKicked(const TigerOnlineErrorCode InErrorCode);// 0x159eaa0
	void Client_OnPlayerDeath(const int InPlayerStateId, const int InInstigatorStateId, const bool bIsPlayerInSameGroup);// 0x159e990
	void Client_OnMedalAwardedNamed(FString InAwardedMatchMedalName, FString InPlayerName, enum InPlatformType);// 0x159e850
	void Client_OnMedalAwarded(FString InAwardedMatchMedalName);// 0x159e7b0
	void Client_OnEliminatedPlayer(int InPlayerStateId, const bool bInWasBloodHunted);// 0x159e6e0
	void Client_OnDownedPlayer(TigerPlayer* InDownedPlayer, const bool bInBloodHunted, const TigerDamageContext InDamageContext);// 0x159e580
	void Client_OnAssistEvent(int InPlayerStateId, int InReceivedExperience);// 0x159e4b0
	void Client_InvalidateReadyToPlayStateAndRequestRecheck(int InNumExpectedPlayerStates);// 0x159e420
	void Client_HighlightItem(TigerItemWorldRepresentation* Item);// 0x159e390
	void Client_HandleBenchmarkTestsStarted(FString InOutputFile);// 0x159e2f0
	void Client_HandleBenchmarkTestsFinished();// 0x159e2d0
	void Client_GainedSeasonExperience(enum InEvent, int InReceivedExperience, int InExperienceGained, TigerCharacter* InEventTiedCharacter, int InPlayerStateId);// 0x159e130
	void Client_FinishReloadWeapon(byte InRequestId, enum InSlot, uint16 InAmmoInWeapon, uint16 InAmmoInInventory);// 0x159dfe0
	void Client_EquipWeaponFailed(enum WeaponSlot, byte RequestId);// 0x159df10
	void Client_DebugDrawShapes(const TigerNetworkedDebugShape[] Shapes);// 0x159ddf0
	void Client_DebugDrawShape(const TigerNetworkedDebugShape Shape);// 0x159dd60
	void Client_Debug_DrawServerProjectileSpawnLocation(const Vector ProjectileSpawnLocation);// 0x159de90
	void Client_AbortReloadWeapon(byte InRequestId, enum InSlot, uint16 InAmmoInWeapon, uint16 InAmmoInInventory);// 0x159dc10
	void ClearNavControllerNodeState();// 0x159dbf0
	bool CheckShouldShowClimbPrompt();// 0x159dbc0
	void Cheat_ToggleUIVisibility();// 0xb7a5a0
	bool CanUseFavorite();// 0x159daf0
	bool CanUpdateChallengesInElysium();// 0xb69560
	void CancelFindSession(const enum InCancelReason);// 0x159db40
	void CancelDesireAiming();// 0x159db20
	void AttackRelease();// 0x159dad0
	void AssignNewNavControllerRoot(TigerUIDPadNavNode* InNewRoot, TigerUIDPadNavNode* InStartingNode);// 0x159da00

--------------------------------
Class: TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnCustomNavigateTree;//[Offset: 0x280, Size: 0x10]
	delegate OnNodeHighlight;//[Offset: 0x290, Size: 0x10]
	delegate OnNodeUnHighlight;//[Offset: 0x2a0, Size: 0x10]
	delegate OnNodeInteraction;//[Offset: 0x2b0, Size: 0x10]
	bool DebugDrawLinesInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	float DebugLinesOpacity;//[Offset: 0x2c4, Size: 0x4]
	float DebugArrowHeadLength;//[Offset: 0x2c8, Size: 0x4]
	bool bUseLastChild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool bUseWeighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	bool bCanBeSelectedWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce, Size: 0x1]
	bool bCanMoveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cf, Size: 0x1]
	bool bCanMoveRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bCanMoveDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bCanMoveLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bShouldGenerateByLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	float LineTraceDirectionLeniency;//[Offset: 0x2d4, Size: 0x4]
	bool bCanTraceUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bCanTraceRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bCanTraceDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	bool bCanTraceLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]
	bool bShouldGenerateDirectionalRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	TigerUIDPadNavNode* UpNode;//[Offset: 0x2e0, Size: 0x8]
	TigerUIDPadNavNode* RightNode;//[Offset: 0x2e8, Size: 0x8]
	TigerUIDPadNavNode* DownNode;//[Offset: 0x2f0, Size: 0x8]
	TigerUIDPadNavNode* LeftNode;//[Offset: 0x2f8, Size: 0x8]
	TigerUIDPadNavNode* ParentNode;//[Offset: 0x300, Size: 0x8]
	bool bShouldGenerateChildRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	TigerUIDPadNavNode*[] ChildNodes;//[Offset: 0x310, Size: 0x10]
	TigerUIDPadNavNode* LastHighlightedNode;//[Offset: 0x320, Size: 0x8]
	TigerUIDPadNavNode* LastHighlightedChildNode;//[Offset: 0x328, Size: 0x8]
	bool bIsHighlighted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool bIsHighlightDPadFocussed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	Widget* SwitcherSlotWidget;//[Offset: 0x350, Size: 0x8]
	TigerPlayerController* OwningPlayerController;//[Offset: 0x358, Size: 0x8]
	TigerGameInstance* GameInstance;//[Offset: 0x368, Size: 0x8]
	void SetUnHighlighted();// 0x160d5e0
	void SetTravelInAllDirections(const bool InValue);// 0x160d550
	void SetSelectableWhileHidden(bool bInSelectableWhenHidden);// 0x160d4c0
	void SetNavigationEnabled(const bool bInNavigationEnabled);// 0x160d430
	void SetLineTraceValue(const enum InDirection, const bool InValue);// 0x160d360
	void SetLineTraceLeniency(const float InValue);// 0x160d2e0
	void SetLineTraceInAllDirections(const bool InValue);// 0x160d250
	void SetLastHighlightedChild(TigerUIDPadNavNode* InNode);// 0x160d1c0
	void SetInteracted();// 0x160d1a0
	void SetIfShouldUseLineTrace(bool Value);// 0x160d120
	void SetIfShouldUseDirectionalRefs(bool Value);// 0x160d090
	void SetHighlighted();// 0x160d070
	void SetDirectionalRef(const enum InDirection, TigerUIDPadNavNode* InNode);// 0x160cfa0
	void SetChildNodes(TigerUIDPadNavNode*[] InNodes);// 0x160ce60
	void OnUnHightlight();// 0x197e4f0
	void OnInteraction();// 0x197e4f0
	void OnHighlight();// 0x197e4f0
	bool IsValidNode();// 0x160c630
	bool IsDPadFocussed();// 0x160c2c0
	bool IsDPadFocussableConditionsMet();// 0x160c290
	bool HasNodeInTree(TigerUIDPadNavNode* InNode);// 0x160c1f0
	TigerUIDPadNavNode* GetLastHighlightedChild();// 0x160bc40
	int GetIndexFromChildRef(const TigerUIDPadNavNode* InNode);// 0x160b780
	TigerUIDPadNavNode* GetDirectionalRef(const enum InDirection);// 0x160b200
	float GetCustomScore(TigerUIDPadNavNode* InCurrentNode);// 0x160b160
	TigerUIDPadNavNode*[] GetChildNodes();// 0x160b0a0
	TigerUIDPadNavNode* GetChildAtIndex(const int InIndex);// 0x160b000
	Vector2D[] GetAdjacentEdgeCentres();// 0x160acd0
	void GenerateTree();// 0x160acb0
	static void GenerateDirectionalRefsFromList(out const TigerUIDPadNavNode*[] InOutNodesToGenerate, out const byte InOrientation);// 0x160abb0
	void EnableTravelInDirections(const enum[] InDirections);// 0x160a670
	void EnableLineTraceInDirections(const enum[] InDirections);// 0x160a580
	void DisableTravelInDirections(const enum[] InDirections);// 0x160a490
	void DisableLineTraceInDirections(const enum[] InDirections);// 0x160a3a0

--------------------------------
Class: TigerGameInstance.GameInstance.Object
	AkAudioEvent* MusicPlayAkEvent;//[Offset: 0x1a8, Size: 0x8]
	delegate OnTitleScreenClosed;//[Offset: 0x1b0, Size: 0x10]
	delegate OnGameStateSetEvent;//[Offset: 0x1c0, Size: 0x10]
	delegate OnGameModesUpdated;//[Offset: 0x1d0, Size: 0x10]
	delegate OnGameModesMetricsUpdated;//[Offset: 0x1e0, Size: 0x10]
	delegate OnRankConfigSet;//[Offset: 0x1f0, Size: 0x10]
	delegate OnMatched;//[Offset: 0x200, Size: 0x10]
	delegate OnUnmatched;//[Offset: 0x210, Size: 0x10]
	FString JoinErrorString;//[Offset: 0x220, Size: 0x10]
	enum ForceGameActivityOnJoiningElysium;//[Offset: 0x230, Size: 0x1]
	class TigerDisciplineConfigs* DisciplineConfigsClassPtr;//[Offset: 0x240, Size: 0x28]
	class Object* DisciplineConfigsClass;//[Offset: 0x268, Size: 0x8]
	TigerPlayerClanData*[] AvailablePlayerClans;//[Offset: 0x270, Size: 0x10]
	TigerExpRequirements* SeasonExpRequirements;//[Offset: 0x280, Size: 0x8]
	TigerExpRequirements* ArchetypeExpRequirements;//[Offset: 0x288, Size: 0x8]
	TigerExpRequirements* PlayerExpRequirements;//[Offset: 0x290, Size: 0x8]
	TigerTitleListAsset* TitleList;//[Offset: 0x298, Size: 0x8]
	class TigerOnlineStatusMessages* OnlineStatusMessagesClass;//[Offset: 0x2a0, Size: 0x8]
	TigerSaveGame* CurrentSaveGame;//[Offset: 0x2a8, Size: 0x8]
	TigerPreloadedNiagaraSystems* PreloadedNiagaraSystems;//[Offset: 0x2b0, Size: 0x8]
	TigerLoadingScreenUI* LoadingScreen;//[Offset: 0x2b8, Size: 0x8]
	DataTable* ToLoadRangedDataTable;//[Offset: 0x2c0, Size: 0x8]
	delegate OnLoadingScreenFullyOpaque;//[Offset: 0x2e0, Size: 0x10]
	TigerCharacterPreset*[] BotCharacterPresets;//[Offset: 0x340, Size: 0x10]
	bool bBotsIgnorePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool bEnableBotsAsClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	bool bOnlyBotsAliveEndsMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352, Size: 0x1]
	bool bIsJoiningMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 0x1]
	bool bIsMatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	bool bHasShownTitleScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x355, Size: 0x1]
	bool bIsRetryingTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x356, Size: 0x1]
	FString BotAutoJoinServer;//[Offset: 0x358, Size: 0x10]
	int LoadingScreenZValue;//[Offset: 0x368, Size: 0x4]
	class TigerLoadingScreenUI* BlackLoadingScreenWidget;//[Offset: 0x370, Size: 0x28]
	TigerGameModeLoadingScreens* GameModeLoadingScreens;//[Offset: 0x398, Size: 0x8]
	DataTable* SoftCurrencies;//[Offset: 0x3a0, Size: 0x8]
	delegate OnFindMatchFailed;//[Offset: 0x3a8, Size: 0x10]
	class TigerGeneralUserSettings* GeneralUserSettingsClass;//[Offset: 0x3b8, Size: 0x8]
	TigerGeneralUserSettings* GeneralUserSettings;//[Offset: 0x3c0, Size: 0x8]
	class TigerSessionSeeker* SessionSeekerClass;//[Offset: 0x3c8, Size: 0x8]
	TigerQuestCollection* QuestCollection;//[Offset: 0x3d0, Size: 0x8]
	TigerMasterChallengesConfigAsset* MasteryChallenges;//[Offset: 0x3d8, Size: 0x8]
	TigerTestChallengesConfigAsset* TestChallenges;//[Offset: 0x3e0, Size: 0x8]
	TigerMatchStatMedalRequirements* MatchStatMedalRequirements;//[Offset: 0x3e8, Size: 0x8]
	TigerRankConfigAsset* RankConfig;//[Offset: 0x3f0, Size: 0x8]
	TigerPartyService* PartyService;//[Offset: 0x3f8, Size: 0x8]
	TigerPlayerDataService* PlayerDataService;//[Offset: 0x400, Size: 0x8]
	TigerConfigService* ConfigService;//[Offset: 0x408, Size: 0x8]
	TigerInboxService* InboxService;//[Offset: 0x410, Size: 0x8]
	TigerStoreService* StoreService;//[Offset: 0x418, Size: 0x8]
	TigerConsoleService* ConsoleService;//[Offset: 0x420, Size: 0x8]
	TigerVotingSystemClient* VotingSystemClient;//[Offset: 0x428, Size: 0x8]
	TigerPremiumCurrencyManager* PremiumCurrencyManager;//[Offset: 0x438, Size: 0x8]
	TigerCursor* SoftwareCursor;//[Offset: 0x440, Size: 0x8]
	TigerPartyManager* PartyManager;//[Offset: 0x448, Size: 0x8]
	TigerVotingContext* VotingContext;//[Offset: 0x450, Size: 0x8]
	TigerAuthenticationManager* AuthenticationManager;//[Offset: 0x458, Size: 0x8]
	TigerTelemetryEventHandler* TelemetryEventHandler;//[Offset: 0x460, Size: 0x8]
	TigerStatisticsGatherer* StatisticsGatherer;//[Offset: 0x468, Size: 0x8]
	TigerPushConnectionManager* PushConnectionManager;//[Offset: 0x470, Size: 0x8]
	TigerPlatformEntitlementsManager* PlatformEntitlementsManager;//[Offset: 0x478, Size: 0x8]
	TigerGameModesConfigCache* GameModesConfigCache;//[Offset: 0x480, Size: 0x8]
	TigerGameModesMetricsCache* GameModesMetricsCache;//[Offset: 0x488, Size: 0x8]
	TigerArchetypeRewardData* ArchetypePerkRewards;//[Offset: 0x490, Size: 0x8]
	TigerPreloadedClasses* PreloadedClasses;//[Offset: 0x5a0, Size: 0x8]
	enum LastSelectedGroupingMode;//[Offset: 0x5a8, Size: 0x1]
	int LastPlayedMatchGameModeIndex;//[Offset: 0x5ac, Size: 0x4]
	FString LastPlayedMatchGameModeId;//[Offset: 0x5b0, Size: 0x10]
	<FString,enum> MapNamesToMapIDs;//[Offset: 0x5c0, Size: 0x50]
	FString SharkmobUserName;//[Offset: 0x610, Size: 0x10]
	DataTable* BotNameTable;//[Offset: 0x620, Size: 0x8]
	TigerDsBackendAgent* DsBackendAgent;//[Offset: 0x6c8, Size: 0x8]
	SharkAccounts* AccountSystem;//[Offset: 0x6d0, Size: 0x8]
	TigerAmmoAsset*[] AmmoPickupItems;//[Offset: 0x6d8, Size: 0x10]
	TigerPersistentPlayerState*[] PlayerStatesToCheckForUnownedItems;//[Offset: 0x6e8, Size: 0x10]
	TigerSeasonConfig ClientSeasonConfig;//[Offset: 0x6f8, Size: 0x3b0]
	TigerSessionSeeker* SessionSeeker;//[Offset: 0xac0, Size: 0x8]
	TigerEventSystem* EventSystem;//[Offset: 0xb20, Size: 0x8]
	void WaitForCurrentMatchStats(int TimeoutSecs, out const delegate Delegate);// 0x150b4e0
	void Unmatched();// 0x150b4c0
	bool TravelToSession(FString InSessionURL, out const enum InSessionType);// 0x150b3c0
	void TransferToPartyElysium();// 0x197e4f0
	void TransferToElysium();// 0x197e4f0
	void ToggleTutorialMenu();// 0x197e4f0
	void ToggleMatchMeny();// 0x197e4f0
	void TigerSetPlatformType(const enum InPlatformType);// 0x1474b00
	void TigerSetDemoCinematicOutfit(FString InOutfitName);// 0x14c0250
	void TigerSetDemoAppearanceItemById(FString InDatabaseId);// 0x14c0250
	void TigerSetDemoAppearance(FString AppearanceText);// 0x14c0250
	void TigerResetDemoAppearance();// 0xb7a5a0
	void TigerOnTitleScreenClosed__DelegateSignature();// 0x197e4f0
	void TigerOnRankConfigSet__DelegateSignature();// 0x197e4f0
	void TigerFakeGameActivity(FString InGameActivityType);// 0x14c16c0
	void TigerDemoPlay(FString InRecordingName);// 0x14c0250
	void StartPushConnection();// 0x150b2a0
	void ShowPostMatchScreen(const bool bInShouldLeaveParty);// 0x197e4f0
	bool ShouldDebugGameFlow();// 0x150b280
	void SetLastPlayedMatchGameMode(FString InLastPlayedMatchGameModeId, int InLastPlayedMatchGameModeIndex);// 0x150b1a0
	void ReturnToElysium();// 0x197e4f0
	void ReturnToCharacterSelectionDispatcher();// 0x197e4f0
	void ReturnToBootWithError(FString InError);// 0x197e4f0
	void RetryTutorial();// 0x197e4f0
	void ReceivePartyInvitation(const TigerPartyInvite* Invite, const TigerUser* Host);// 0x197e4f0
	void ReceiveInvitation(out const TigerGroupInvitation Invitation, TigerPlayerState* Inviter);// 0x197e4f0
	void PostLoadMapWithWorld();// 0x197e4f0
	void PostEndOfLoadingTelemetry();// 0x150b180
	void OnWinScreenShown();// 0x197e4f0
	void OnUnmatched__DelegateSignature();// 0x197e4f0
	void OnMatchStatsReceivedMulticastDelegate__DelegateSignature(bool bTimedOut);// 0x197e4f0
	void OnMatchStatsReceivedDelegate__DelegateSignature(bool bTimedOut);// 0x197e4f0
	void OnMatched__DelegateSignature();// 0x197e4f0
	void OnLoadingScreenHidden();// 0x150b160
	void OnLoadingScreenFullyOpaque__DelegateSignature();// 0x197e4f0
	void OnGameStateSet__DelegateSignature(TigerGameState* InGameState);// 0x197e4f0
	void OnGameModesUpdated__DelegateSignature();// 0x197e4f0
	void OnGameModesMetricsUpdated__DelegateSignature();// 0x197e4f0
	void OnFindMatchFailed__DelegateSignature();// 0x197e4f0
	void Matched();// 0x150b140
	void LaunchTutorialNative();// 0x150b120
	void LaunchTransferFromMatch();// 0x150b100
	void KickToLoginScreen();// 0x197e4f0
	void JoinSessionThroughUrl(FString SessionURL);// 0x197e4f0
	bool IsMatched();// 0x150b0e0
	bool IsJoiningMatch();// 0x150b090
	bool IsAllowedToOpenMainMenu();// 0x197e4f0
	bool HasCurrentMatchStats();// 0x150af90
	bool HasCompletedBattlepass(const int InCurrentSeasonLevel);// 0x150aef0
	void HandleOnDisplaySettingsApplied();// 0x150aeb0
	TigerWeatherController* GetWeatherController();// 0x150ae80
	TigerVoipTalkerState* GetVoipTalkerState();// 0x150ae30
	LinearColor GetUIColor(const enum UIColor, const enum ColorSpace);// 0x197e4f0
	TigerTitleListAsset* GetTitleList();// 0x150ae10
	TigerCursor* GetTigerSoftwareCursor();// 0x150add0
	TigerTestChallengesConfigAsset* GetTestChallengeConfig();// 0x150adb0
	TigerTelemetryEventHandler* GetTelemetryEventHandler();// 0x150ad80
	TigerStatisticsGatherer* GetStatisticsGatherer();// 0x150ad50
	FString GetSharkmobUserName();// 0x150ad20
	TigerExpRequirements* GetSeasonExpRequirements();// 0x150acd0
	DateTime GetSeasonEndDate();// 0x150ac90
	Texture2D* GetSeasonBannerTexture();// 0x150aba0
	TigerRankConfigAsset* GetRankConfig();// 0x150ab80
	TigerQuestCollection* GetQuestCollection();// 0x150ab60
	TigerPremiumCurrencyManager* GetPremiumCurrencyManager();// 0x150ab30
	TigerExpRequirements* GetPlayerExpRequirements();// 0x150ab10
	TigerPartyManager* GetPartyManager();// 0x150aab0
	TigerMatchStatMedalRequirements* GetMatchStatMedalRequirements();// 0x150aa90
	TigerMasterChallengesConfigAsset* GetMasteryChallengeConfig();// 0x150aa70
	TigerGameModeLoadingScreens* GetLoadingScreenAssets();// 0x150aa50
	TigerMatchStats GetLastMatchStats();// 0x150a970
	bool GetHasSetRankConfig();// 0x150a940
	TigerEventSystem* GetEventSystem();// 0x150a750
	FString GetDefaultPartyGameModeId();// 0x150a6d0
	TigerCharacterAppearance GetDefaultCharacterAppearanceForArchetype(enum InArchetypeType);// 0x150a630
	enum GetCurrentSessionType();// 0x150a600
	TigerLoadingScreenUI* GetCurrentLoadingScreen();// 0x150a5e0
	enum GetClanTypeFromArchetypeType(enum InArchetypeType);// 0x150a550
	TigerPlayerClanData* GetClanDataFromArchetypeType(enum InArchetypeType);// 0x150a4c0
	TigerPlayerClanData* GetClanData(enum Clan);// 0x150a430
	DateTime GetBattlepassStartDate();// 0x150a3c0
	TigerItemId GetBattlepassItemId();// 0x150a3a0
	DateTime GetBattlepassEndDate();// 0x150a360
	enum GetBattlepassActiveState();// 0x150a330
	TigerPlayerClanData*[] GetAvailableClans();// 0x150a2b0
	TigerAuthenticationManager* GetAuthenticationManager();// 0x150a290
	TigerArchetypeRewardData* GetArchetypePerkRewards();// 0x150a270
	TigerExpRequirements* GetArchetypeExpRequirements();// 0x150a250
	TigerPowerKit* GetArchetypeData(enum InArchetypeType);// 0x150a1c0
	void GameStateSet();// 0x197e4f0
	void DebugOnWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x150a000
	void DebugOnWorldBeginTearDown(World* World);// 0x1509f70
	void DebugOnStreamingStarted(TigerWorldCompositionCellComponent* Cell);// 0x1509f70
	void DebugOnPreWorldFinishDestroy(World* World);// 0x1509f70
	void DebugOnPostWorldCreation(World* World);// 0x1509f70
	void DebugOnPostWorldCleanUp(World* World, bool bSessionEnded, bool bCleanupResources);// 0x150a000
	void DebugOnMapPreLoad(FString InNameOfMapToLoad);// 0x14c0250
	void DebugOnMapPostLoad(World* InNewWorld);// 0x1509f70
	void DebugOnInitialStreamingFinished();// 0xb7a5a0
	void DebugOnGameStateChanged(enum InOldState, enum InNewState);// 0x1509ea0
	void DebugOnCharacterStartedLoading();// 0xb7a5a0
	void DebugOnCharacterFinishedLoading();// 0xb7a5a0
	void CreateLoadingScreenForGameMode(class GameModeBase InGameModePath, float InFadeInTime);// 0x1509d50
	void CreateBlackLoadingScreen();// 0x1509d30
	void CloseWinScreen();// 0x197e4f0
	void CloseTitleScreen();// 0x197e4f0
	void CloseMatchMenu();// 0x197e4f0
	void CheckOnlyBotsAliveEndsMatch();// 0x1509cb0
	void CheckForBotsAsClients();// 0x1509c90
	void CheckBotsIgnorePlayer();// 0x1509c70
	void Cheat_QuitTutorial();// 0x197e4f0
	void CharacterCustomizationLoadingStarted__DelegateSignature();// 0x197e4f0
	void CharacterCustomizationLoadingFinished__DelegateSignature();// 0x197e4f0
	void CallOnTitleScreenClosed();// 0x1509c50

--------------------------------
Class: TigerDisciplineConfigs.Object
	<enum,class TigerActiveDisciplineConfig> Configs;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	int MaxLevel;//[Offset: 0x108, Size: 0x4]
	FText CooldownText;//[Offset: 0x110, Size: 0x18]
	FText CooldownSuffix;//[Offset: 0x128, Size: 0x18]
	int MaxCharges;//[Offset: 0x140, Size: 0x4]
	float[] RechargeTimes;//[Offset: 0x148, Size: 0x10]
	float[] CooldownTimes;//[Offset: 0x158, Size: 0x10]
	bool bShouldRotateTowardsCameraOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bShouldRotateTowardsCameraOnRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool bShouldFinishCameraTransitionsOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool bAllowFreeLookCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	float MovementMultiplier;//[Offset: 0x16c, Size: 0x4]
	float GravityMultiplier;//[Offset: 0x170, Size: 0x4]
	float PrimaryAINoiseEventRange;//[Offset: 0x174, Size: 0x4]
	float SecondaryAINoiseEventRange;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: TigerDisciplineConfigBase.Object
	Texture2D* UIIcon;//[Offset: 0x30, Size: 0x8]
	FText DisciplineName;//[Offset: 0x38, Size: 0x18]
	FText DisciplineDescription;//[Offset: 0x50, Size: 0x18]
	FText DisciplineSummary;//[Offset: 0x68, Size: 0x18]
	bool bIsClanAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bEnablesGroupMemberHealthBars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	enum ActivationActionReported;//[Offset: 0x82, Size: 0x1]
	class TigerDisciplineBase* DisciplineClass;//[Offset: 0x88, Size: 0x8]
	enum AllowedActions;//[Offset: 0x90, Size: 0x4]
	uint16 ActionsThatShouldCancelDiscipline;//[Offset: 0xd0, Size: 0x2]
	bool bShouldAutomaticallyUseCameraPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	class TigerCameraPreset* PreparationCameraPreset;//[Offset: 0xd8, Size: 0x8]
	class TigerCameraPreset* CameraPreset;//[Offset: 0xe0, Size: 0x8]
	class TigerCameraPreset* CameraPresetIndoor;//[Offset: 0xe8, Size: 0x8]
	class TigerWeaponCrosshairWidget* Crosshair;//[Offset: 0xf0, Size: 0x8]
	MediaSource* PreviewVideo;//[Offset: 0xf8, Size: 0x8]
	UInt64Property PersistentTelemetryID;//[Size: 0x8]
	void GetLevelInfo(out TigerDisciplineLevelInfo[] LevelInfo);// 0x14e12a0

--------------------------------
Class: TigerDisciplineBase.Object
	TigerCharacter* Owner;//[Offset: 0x28, Size: 0x8]
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0x30, Size: 0x8]
	TigerActiveDisciplineConfig* BaseConfig;//[Offset: 0x38, Size: 0x8]
	int PowerLevel;//[Offset: 0x58, Size: 0x4]
	float AIUseDuration;//[Offset: 0x64, Size: 0x4]
	float AIMinCooldownDuration;//[Offset: 0x68, Size: 0x4]
	float AIMaxCooldownDuration;//[Offset: 0x6c, Size: 0x4]
	bool UsesChargesUI();// 0x14d84a0
	bool UsesCharges();// 0x14d8470
	bool ShouldUseCameraPresetWhenActive();// 0x14d8370
	bool HasPreparationCameraPreset();// 0x14d7f60
	bool HasCharge();// 0x14d7ee0
	bool HasCameraPreset();// 0x14d7eb0
	TigerPlayer* GetTigerPlayer();// 0x14d7e80
	bool GetShouldDisplayActiveTimeLeft();// 0x14d7e40
	class TigerCameraPreset GetPreparationCameraPreset();// 0x14d7e00
	int GetMaxCharges();// 0x14d7c10
	int GetCharges();// 0x14d77a0
	class TigerCameraPreset GetCameraPreset();// 0x14d7760

--------------------------------
Class: TigerDisciplineComponent.ActorComponent.Object
	TigerDisciplineConfigs* DisciplineConfigs;//[Offset: 0xb0, Size: 0x8]
	SoundBase* DisciplineFailSound;//[Offset: 0xb8, Size: 0x8]
	delegate OnDisciplineUsedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate OnActivatedDisciplineDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate OnDeactivatedDisciplineDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate OnDisciplineUnlocked;//[Offset: 0xf0, Size: 0x10]
	AkAudioEvent* TraversalSkillCameOffCooldownAkAudioEvent;//[Offset: 0x100, Size: 0x8]
	AkAudioEvent* ArchetypeSkillCameOffCooldownAkAudioEvent;//[Offset: 0x108, Size: 0x8]
	TigerScouterCharacterData ScouterCharacterData;//[Offset: 0x110, Size: 0x30]
	float ScoutingMaxDistanceFromOwner;//[Offset: 0x140, Size: 0x4]
	class TigerBuffShackles* PrimaryShacklesBuff;//[Offset: 0x148, Size: 0x8]
	class TigerBuff* SecondaryShacklesBuff;//[Offset: 0x150, Size: 0x8]
	float WeaponRarityDamageMultipliers;//[Offset: 0x158, Size: 0x4]
	TigerPlayer* Player;//[Offset: 0x170, Size: 0x8]
	<enum,TigerDisciplineBase*> Disciplines;//[Offset: 0x200, Size: 0x50]
	bool WantsToStrafe();// 0x14de310
	void UnlockDisciplineSlot(const enum InDisciplineSlot);// 0x14de290
	void UnlockDiscipline(const enum InDisciplineType);// 0x14de210
	enum TryUseDiscipline(enum Slot);// 0x14de180
	void TryToAbortHoldingDiscipline();// 0x14de160
	void TryToAbortChannelingDiscipline();// 0x14de140
	enum TryReleaseDiscipline(const enum InSlot);// 0x14de0b0
	void TigerDelegateDisciplineUsed__DelegateSignature(enum InDisciplineSlot);// 0x197e4f0
	void TigerDelegateDisciplineUnlocked__DelegateSignature(enum InDisciplineSlot);// 0x197e4f0
	void TigerDelegateDeactivatedDiscipline__DelegateSignature(enum InDiscipline);// 0x197e4f0
	void TigerDelegateActivatedDiscipline__DelegateSignature(enum InDiscipline);// 0x197e4f0
	void Server_UseDiscipline(const DisciplineUse InDisciplineUse);// 0x14ddfb0
	void Server_TryToInterruptActiveDiscipline(const enum InAction);// 0x14ddf00
	void Server_TryToAbortHoldingDiscipline();// 0x14ddeb0
	void Server_TryToAbortChannelingDiscipline();// 0x14dde60
	void Server_SetPreparingDiscipline(const enum InDisciplineType);// 0x14dddb0
	void Server_SetCrosshairHitLocation(const Vector InLocation);// 0x14ddd10
	void Server_ReleaseDiscipline(const DisciplineUse InDisciplineUse);// 0x14ddc10
	void Server_ForceInterruptActiveDiscipline(const enum InDiscipline);// 0x14ddb60
	void Server_AnimTriggerNotify(const DisciplineUse InDisciplineUse);// 0x14dda60
	void NotifyDisciplineEvent(enum Discipline, enum Event);// 0x14dd990
	void Multicast_UseSucceeded(const DisciplineUse DisciplineUse);// 0x14dd8b0
	void Multicast_TryToInterruptActiveDiscipline(const enum InAction);// 0x14dd820
	void Multicast_TryToAbortHoldingDiscipline();// 0x14dd800
	void Multicast_TryToAbortChannelingDiscipline();// 0x14dd7e0
	void Multicast_SucceededAdditional(const DisciplineUse InDisciplineUse, bool bInSendReliableToAllTargets, byte InEventFlags);// 0x14dd680
	void Multicast_ReleaseSucceeded(const DisciplineUse DisciplineUse);// 0x14dd5a0
	void Multicast_OnHeavyLanding();// 0x14dd580
	void Multicast_ForceInterruptActiveDiscipline(const enum InDiscipline);// 0x14dd500
	void LockDisciplineSlot(const enum InDisciplineSlot);// 0x14dd480
	void LockDiscipline(const enum InDisciplineType);// 0x14dd400
	bool IsRecharging(enum DisciplineToGet);// 0x14dd370
	bool IsOnGlobalCoolDown();// 0x14dd340
	bool IsDisciplineUnlocked(enum DisciplineType);// 0x14dd2b0
	bool IsDisciplineAtMaxPowerLevel(enum DisciplineType);// 0x14dd220
	bool IsDisciplineActive(enum DisciplineType);// 0x14dd190
	bool IsAnyWeaponAbilityActive();// 0x14dd160
	bool IsAnyDisciplinePreparing();// 0x14dd130
	bool IsAnyDisciplineActive();// 0x14dd100
	void GetUnlockedDisciplines(out enum[] OutUnlockedDisciplines);// 0x14dd050
	Texture2D* GetUIIconForSlot(enum Slot);// 0x14dcfc0
	Texture2D* GetUIIconForDiscipline(enum Discipline);// 0x14dcf30
	enum GetSlotForDiscipline(const TigerDisciplineBase* Discipline);// 0x14dce90
	float GetRechargeSecondsLeft(enum DisciplineToGet);// 0x14dce00
	float GetRechargePercentage(enum DisciplineToGet);// 0x14dcd70
	TigerDisciplineBase* GetPreparingDiscipline();// 0x14dcd40
	FText GetNameForDiscipline(enum Discipline);// 0x14dcc50
	int GetDisciplinePowerLevel(enum DisciplineType);// 0x14dcbc0
	int GetDisciplineMaxPowerLevel(enum DisciplineType);// 0x14dcb30
	enum GetDisciplineForSlot(enum Slot);// 0x14dcaa0
	TigerDisciplineConfigBase* GetDisciplineConfigBySlot(enum InSlot);// 0x14dca10
	TigerDisciplineConfigBase* GetDisciplineConfig(enum Discipline);// 0x14dc980
	TigerDisciplineBase* GetDiscipline(enum DisciplineToGet);// 0x14dc8f0
	FText GetDescriptionForDiscipline(enum Discipline);// 0x14dc800
	float GetCooldownSecondsLeft(enum DisciplineToGet);// 0x14dc770
	float GetCooldownPercentageBySlot(enum Slot);// 0x14dc6e0
	float GetCooldownPercentage(enum DisciplineToGet);// 0x14dc650
	enum[] GetClanDisciplinesSortedByUnlockLevel();// 0x14dc5c0
	enum GetBlockingDiscipline();// 0x14dc5a0
	enum GetAllowedBlockedDisciplineType();// 0x14dc580
	TigerDisciplineBase* GetAllowedBlockedDiscipline();// 0x14dc550
	TigerDisciplineBase* GetActiveDiscipline();// 0x14dc520
	void EquipDiscipline(enum Slot, enum Discipline);// 0x14dc450
	void Client_UseSucceeded(const DisciplineUse DisciplineUse);// 0x14dc370
	void Client_UseFailed(const DisciplineUse InDisciplineUse, const enum InReason, const float InServerCooldownLeft);// 0x14dc220
	void Client_UseAnimTriggeredFailed(const DisciplineUse InDisciplineUse);// 0x14dc140
	void Client_UpdateDisciplineLevel(enum DisciplineType, int PowerLevel);// 0x14dc070
	void Client_TryToAbortHoldingDiscipline();// 0x14dc050
	void Client_TryToAbortChannelingDiscipline();// 0x14dc030
	void Client_SucceededAdditional(const DisciplineUse DisciplineUse, byte EventFlags, TigerPlayer* DisciplineOwner);// 0x14dbee0
	void Client_SendScoutedCharacterToGroupMember(TigerCharacter* InScoutedCharacter, const float InTime);// 0x14dbe10
	void Client_ReleaseSucceeded(const DisciplineUse DisciplineUse);// 0x14dbd30
	void Client_ReleaseFailed(const DisciplineUse InDisciplineUse, const enum InReason, const float InServerCooldownLeft);// 0x14dbbe0
	void Client_ReduceCooldowns(const float InMultiplierToReduceBy, const enum InReductionTypes);// 0x14dbb10
	void Client_MomentumUpdateCooldowns();// 0x14dbaf0
	void Client_LockDiscipline(enum DisciplineType);// 0x14dba70
	void Client_LockAllDisciplines();// 0x14dba50
	void Client_CancelCooldowns();// 0x14dba30
	void Client_CancelCooldown(enum DisciplineType);// 0x14db9b0
	void AuthorityReduceCooldowns(const float InAmount, const enum InReductionType);// 0x14db8e0
	void AddScoutedCharacter(TigerCharacter* InScoutedCharacter, const float InTime);// 0x14db810

--------------------------------
Class: TigerScouterCharacterData
	TigerScoutedCharacter[] ScoutedCharacters;//[Offset: 0x0, Size: 0x10]
	TigerScoutedCharacter[] GroupScoutedCharacters;//[Offset: 0x10, Size: 0x10]
	class UserWidget* ScoutedPlayerMapMarkerClass;//[Offset: 0x20, Size: 0x8]
	class UserWidget* ScoutedNpcMapMarkerClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerScoutedCharacter
	TigerCharacter* ScoutedCharacter;//[Offset: 0x0, Size: 0x8]
	TigerMapMarkerProxy* MarkerProxy;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerBuffShackles.TigerBuff.Object
	class TigerCharacterEffect* ActiveEffect;//[Offset: 0x268, Size: 0x8]
	FName ShacklesStaggerAnimationName;//[Offset: 0x270, Size: 0x8]
	float DamageToDeal;//[Offset: 0x278, Size: 0x4]

--------------------------------
Class: TigerCharacterEffect.Object
	void ApplyWithTarget(TigerCharacter* Character, TigerCharacter* Target);// 0x197e4f0
	void ApplyWithSocket(TigerCharacter* Character, FName SocketName);// 0x197e4f0
	void Apply(TigerCharacter* Character);// 0x197e4f0

--------------------------------
Class: DisciplineUse
	enum DisciplineUsed;//[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector Direction;//[Offset: 0x10, Size: 0xc]
	TigerCharacter*[] Targets;//[Offset: 0x20, Size: 0x10]
	Vector DisciplineSpecificVector1;//[Offset: 0x30, Size: 0xc]
	Vector DisciplineSpecificVector2;//[Offset: 0x3c, Size: 0xc]
	bool bDisciplineSpecificBool1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bDisciplineSpecificBool2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: TigerDisciplineLevelInfo
	FText StatName;//[Offset: 0x0, Size: 0x18]
	float[] StatChanges;//[Offset: 0x18, Size: 0x10]
	FText StatChangeSuffix;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: TigerPartyInvite.Object
	TigerInviteId ID;//[Offset: 0x28, Size: 0x10]
	TigerPersistentPlayerID HostId;//[Offset: 0x38, Size: 0x10]
	enum HostChannel;//[Offset: 0x48, Size: 0x1]
	FString HostDisplayName;//[Offset: 0x50, Size: 0x10]
	void Init_Mock(enum InHostChannel, FString InHostDisplayName);// 0x1570280

--------------------------------
Class: TigerInviteId

--------------------------------
Class: TigerExpRequirements.Object
	TigerExpLevelRequirements ExpLevelRequirements;//[Offset: 0x28, Size: 0x18]
	bool IsEndlessLevel(const int InLevel);// 0x150afc0
	int GetSeasonLevelCount();// 0x150acf0
	int GetLevelFromExp(const int Exp);// 0x150a9b0
	int GetExpFromLevel(const int Level);// 0x150a770
	bool ClampAtMaxLevel();// 0x9661c0

--------------------------------
Class: TigerExpLevelRequirements
	int[] ExpRequirements;//[Offset: 0x0, Size: 0x10]
	bool bClampAtMaxLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int ExpRequirementIncreasePostMaxLevel;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerTitleListAsset.DataAsset.Object
	FText[] TitlesByLevel;//[Offset: 0x30, Size: 0x10]
	FText GetTitleFromPlayer(TigerPlayerState* Player);// 0x1602550

--------------------------------
Class: TigerOnlineStatusMessages.Object
	FText DefaultMessage;//[Offset: 0x28, Size: 0x18]
	FText DefaultAccountMessage;//[Offset: 0x40, Size: 0x18]
	FText DefaultSystemMessage;//[Offset: 0x58, Size: 0x18]
	FText DefaultServerMessage;//[Offset: 0x70, Size: 0x18]
	TigerOnlineStatusMessageEntry[] Messages;//[Offset: 0x88, Size: 0x10]
	<enum,FText> ErrorCategoryTitles;//[Offset: 0x98, Size: 0x50]
	FText GetTitleForCategory(const enum InErrorCategory);// 0x156afb0
	FText GetMessageForError(const TigerOnlineErrorCode InErrorCode);// 0x156ad60

--------------------------------
Class: TigerOnlineErrorCode
	enum Category;//[Offset: 0x0, Size: 0x1]
	int ID;//[Offset: 0x4, Size: 0x4]
	int ErrorPriority;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerOnlineStatusMessageEntry
	TigerOnlineErrorCode ErrorCode;//[Offset: 0x0, Size: 0xc]
	FText Message;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TigerSaveGame.SaveGame.Object
	TigerPersistentCharacterID LastUsedCharacterId;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: TigerPersistentCharacterID
	byte SlotIndex;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: TigerPreloadedNiagaraSystems.DataAsset.Object
	delegate OnLoadedAllAssetsEvent;//[Offset: 0x30, Size: 0x10]
	NiagaraSystem*[] Systems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerLoadingScreenUI.UserWidget.Widget.Visual.Object
	delegate OnFadeInCompleteEvent;//[Offset: 0x260, Size: 0x10]
	delegate OnFadeOutCompleteEvent;//[Offset: 0x270, Size: 0x10]
	float FadeInTime;//[Offset: 0x280, Size: 0x4]
	TigerLoadingScreenAsset* LoadingScreenAsset;//[Offset: 0x288, Size: 0x8]
	class GameModeBase* GameModePath;//[Offset: 0x290, Size: 0x28]
	int AkPlayingId;//[Offset: 0x2b8, Size: 0x4]
	void StartFadeOut();// 0x197e4f0
	void StartFadeIn();// 0x197e4f0
	void RaiseFadeOutComplete();// 0x1544bd0
	void RaiseFadeInComplete();// 0x1544bb0
	void OnFadeOutComplete__DelegateSignature();// 0x197e4f0
	void OnFadeInComplete__DelegateSignature();// 0x197e4f0
	TigerLoadingScreenToolTip[] GetAllToolTips();// 0x197e4f0
	void FadeOut();// 0x15443e0
	void FadeIn();// 0x15443c0
	void DisplayTooltipWithHeaderText(out const FText InHeaderText);// 0x197e4f0
	void DisplayToolTip(out const TigerLoadingScreenToolTip InToolTip);// 0x197e4f0
	void ChangeStatusText(out const FText InText);// 0x197e4f0

--------------------------------
Class: TigerLoadingScreenAsset.Object
	AkAudioEvent* StartAudioEvent;//[Offset: 0x28, Size: 0x28]
	class TigerLoadingScreenUI* LoadingScreenWidget;//[Offset: 0x50, Size: 0x28]
	void PrepareAssets(out SoftObjectPath[] OutAssetsToLoad);// 0x197e4f0

--------------------------------
Class: TigerLoadingScreenToolTip
	FText HeaderText;//[Offset: 0x0, Size: 0x18]
	FText ToolTipText;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: TigerUser.Object
	delegate OnDisplayNameChanged;//[Offset: 0x28, Size: 0x10]
	FString DISPLAYNAME;//[Offset: 0x38, Size: 0x10]
	TigerPersistentPlayerID ID;//[Offset: 0x48, Size: 0x10]
	void SetDisplayName(FString InName);// 0x16149b0
	void OnDisplayNameChangedDelegate__DelegateSignature(FString InName);// 0x197e4f0
	static TigerUser* MakeUserFromLocalPlayer(Object* InWorldContextObject);// 0x1613760
	enum GetPlayerChannel();// 0x1612f50
	TigerPersistentPlayerID GetPersistentPlayerID();// 0x1612f10
	FString GetDisplayName();// 0x1612e40

--------------------------------
Class: TigerGameModeLoadingScreens.DataAsset.Object
	<class GameModeBase,TigerLoadingScreenAsset*> LoadingScreenAssets;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerGeneralUserSettings.Object
	delegate OnStreamerOptionChanged;//[Offset: 0x28, Size: 0x10]
	AkAudioEvent* EnableAtmosMixEvent;//[Offset: 0x38, Size: 0x8]
	AkAudioEvent* EnableHeadphonesEvent;//[Offset: 0x40, Size: 0x8]
	delegate OnQualityOptionChanged;//[Offset: 0x48, Size: 0x10]
	delegate OnDisplaySettingsApplied;//[Offset: 0x58, Size: 0x10]
	delegate OnGraphicsSettingsApplied;//[Offset: 0x68, Size: 0x10]
	delegate OnLanguageTextSettingChanged;//[Offset: 0x78, Size: 0x10]
	delegate OnGameplaySettingsChanged;//[Offset: 0x88, Size: 0x10]
	TigerSaveSubSystem* SaveSubSystem;//[Offset: 0xa0, Size: 0x8]
	TigerStreamerModeSettings UserStreamerModeSettings;//[Offset: 0xa8, Size: 0x10]
	TigerStreamerModeSettings DefaultStreamerModeSettings;//[Offset: 0xb8, Size: 0x10]
	TigerAudioSettings UserAudioSettings;//[Offset: 0xc8, Size: 0x78]
	TigerAudioSettings DefaultAudioSettings;//[Offset: 0x140, Size: 0x78]
	TigerLanguageSettings UserLanguageSettings;//[Offset: 0x1b8, Size: 0x28]
	TigerLanguageSettings DefaultLanguageSettings;//[Offset: 0x1e0, Size: 0x28]
	TigerGameplaySettings UserGameplaySettings;//[Offset: 0x208, Size: 0x14]
	TigerGameplaySettings DefaultGameplaySettings;//[Offset: 0x21c, Size: 0x14]
	FString[] AvailableTextLanguages;//[Offset: 0x230, Size: 0x10]
	FString[] AvailableAudioLanguages;//[Offset: 0x240, Size: 0x10]
	<FString,FString> LanguageDisplayName;//[Offset: 0x250, Size: 0x50]
	TigerDisplaySettings TempDisplaySettings;//[Offset: 0x2b0, Size: 0x34]
	TigerDisplaySettings UserDisplaySettings;//[Offset: 0x2e4, Size: 0x34]
	TigerDisplaySettings DefaultDisplaySettings;//[Offset: 0x318, Size: 0x34]
	TigerGraphicsSettings TempGraphicsSettings;//[Offset: 0x388, Size: 0x48]
	TigerGraphicsSettings UserGraphicsSettings;//[Offset: 0x3d0, Size: 0x48]
	TigerGraphicsSettings DefaultGraphicsSettings;//[Offset: 0x418, Size: 0x48]
	TigerGraphicsSettingsPS5 TempGraphicsSettingsPS5;//[Offset: 0x460, Size: 0x10]
	TigerGraphicsSettingsPS5 UserGraphicsSettingsPS5;//[Offset: 0x470, Size: 0x10]
	TigerGraphicsSettingsPS5 DefaultGraphicsSettingsPS5;//[Offset: 0x480, Size: 0x10]
	bool WillNeedRestart();// 0x1517010
	void UpdateAvailableResolutions();// 0x1516fd0
	void ToggleUseCrossplay();// 0x1516df0
	void ToggleSwapOutDefaultWeapon();// 0x1516dd0
	void ToggleShouldShowMedals();// 0x1516db0
	void ToggleRotateMinimap();// 0x1516d90
	void ToggleMuteGeneralChat();// 0x1516d70
	void ToggleClearNewNotificationOnMenuExit();// 0x1516d50
	bool ShouldUseCrossplay();// 0x1516b90
	bool ShouldPromptRevertTimer();// 0x1516b60
	bool ShouldClearNewNotificationOnMenuExit();// 0x1516b30
	void SetXeSSQualityLevel(enum InQualityLevel);// 0x1516ab0
	void SetWindowMode(const int InWindowMode);// 0x1516a20
	void SetVolumetricFogQuality(const int InQualityLevel);// 0x1516990
	void SetVoipOutputDevice(FString InVoipOutputDevice);// 0x15168f0
	void SetVoipInputDevice(FString InVoipInputDevice);// 0x1516850
	void SetVoiceChatVolume(const float InVolume);// 0x15167d0
	void SetVisualEffectQuality(const int InQualityLevel);// 0x1516740
	void SetViewDistanceQuality(const int InQualityLevel);// 0x15166b0
	void SetVideoVolume(const float InVolume);// 0x1516630
	void SetUseSubtitles(const bool bInUsed);// 0x15165a0
	void SetUsePushToTalk(const bool bInUse);// 0x1516510
	void SetUseLightShafts(const bool bInUseLightShaft);// 0x1516480
	void SetUseFilmGrain(const bool bInIsEnabled);// 0x15163f0
	void SetUseFavoriteFallback(const bool InUseFavoriteFallback);// 0x1516360
	void SetUseFavorite(const bool InUseFavorite);// 0x15162d0
	void SetUseChromaticAberration(const bool bInIsEnabled);// 0x1516240
	void SetTextureQuality(const int InQualityLevel);// 0x15161b0
	void SetTextureFilteringQuality(const int InQualityLevel);// 0x1516120
	void SetTextLanguage(FString InLanguage);// 0x1516080
	void SetSubSurfaceScatteringQuality(const int InQualityLevel);// 0x1515ff0
	void SetStreamerModeLevel(const enum InStreamerModeLevel);// 0x1515f70
	void SetShadowQuality(const int InQualityLevel);// 0x1515ee0
	void SetSfxVolume(const float InVolume);// 0x1515e60
	void SetScreenSpaceReflectionQuality(const int InQualityLevel);// 0x1515dd0
	void SetScramblePlayersMode(const bool bInEnablePlayerScramble);// 0x1515d40
	void SetResolutionScale(const float InScale);// 0x1515cc0
	void SetResolution(out const IntPoint InResolution);// 0x1515c30
	void SetQualityPreset(const int InQualityLevel);// 0x1515ba0
	void SetMuteInMatchMusic(const bool bInShouldMuteInMatchMusic);// 0x1515b10
	void SetMusicVolume(const float InVolume);// 0x1515a90
	void SetMotionBlurQuality(const int InQualityLevel);// 0x1515a00
	void SetMicVolume(const float InVolume);// 0x1515980
	void SetMaterialQuality(const int InQualityLevel);// 0x15158f0
	void SetMasterVolume(const float InVolume);// 0x1515870
	void SetLightingQuality(const int InQualityLevel);// 0x15157e0
	void SetLensFlareQuality(const int InQualityLevel);// 0x1515750
	void SetHideMatchId(const bool bInHideMatchId);// 0x15156c0
	void SetHideCurrency(const bool bInHideCurrency);// 0x1515630
	void SetGamma(const float InGamma);// 0x15155b0
	void SetFsrSharpening(const float InSharpeningAmount);// 0x1515530
	void SetFsrQualityLevel(const enum InQualityLevel);// 0x15154b0
	void SetFsr2Sharpening(const float InSharpeningAmount);// 0x1515430
	void SetFsr2QualityLevel(enum InQuality);// 0x15153b0
	void SetFrameRateLimit(const float InFrameRateLimit);// 0x1515330
	void SetFoliageQuality(const int InQualityLevel);// 0x15152a0
	void SetFavoriteUseTime(const float InFavoriteUseTime);// 0x1515220
	void SetEnableVSync(const bool bInEnableVSync);// 0x1515100
	void SetEnableVoiceChat(const bool bInEnabled);// 0x1515190
	void SetEnableFrameRateSmoothing(const bool bInIsEnabled);// 0x1515070
	void SetEnableDolbyAtmos(const bool bInShouldEnableDolbyAtmos);// 0x1514fe0
	void SetDlssQualityLevel(enum InQuality);// 0x1514f60
	void SetDisablePlayerMessages(const bool bInDisablePlayerMessages);// 0x1514ed0
	void SetDisableNotifications(const bool bInDisableNotifications);// 0x1514e40
	void SetDisableMiniMap(const bool bInDisableMiniMap);// 0x1514db0
	void SetDisableKillFeed(const bool bInDisableKillFeed);// 0x1514d20
	void SetDialogueVolume(const float InVolume);// 0x1514ca0
	void SetDamageNumberBehaviour(const enum InBehaviour);// 0x1514c20
	void SetControllerSpeakerVolume(const float InVolume);// 0x1514ba0
	void SetClanAreaMusicVolume(const float InVolume);// 0x1514b20
	void SetBloomQuality(const int InQualityLevel);// 0x1514a90
	void SetAudioOutputDevice(FString InDeviceInfo);// 0x15149f0
	void SetAudioMixPreset(FString InMixPresetName);// 0x1514950
	void SetAudioLanguage(FString InLanguage);// 0x15148b0
	void SetAntiAliasingQuality(const int InQualityLevel);// 0x1514820
	void SetAnonymousMode(const bool bInEnableAnonymousMode);// 0x1514790
	void SetAmbientOcclusionQuality(const int InQualityLevel);// 0x1514700
	void SetAllowBackgroundAudio(const bool bInShouldAllowBackgroundAudio);// 0x1514670
	void SaveSelectedAudioOutput();// 0x1514650
	void SaveGraphicsSettings();// 0x1514630
	void SaveDisplaySettings();// 0x1514610
	void SaveAudioSettings();// 0x15145f0
	void ResetStreamerModeSettings();// 0x15145d0
	void ResetLanguageSettings();// 0x15145b0
	void ResetGraphicsSettings();// 0x1514590
	void ResetGameplaySettings();// 0x1514570
	void ResetDisplaySettings();// 0x1514550
	void ResetAudioSettings();// 0x1514530
	void ResetAudioOutputDevice();// 0x1514510
	void ReapplyUserGraphicsSettings();// 0x15144f0
	void ReapplyUserDisplaySettings();// 0x15144d0
	bool IsXeSSQualityLevelAvailable();// 0x15143b0
	bool IsXeSSModuleLoaded();// 0x1514380
	bool IsXeSSAvailableOnHardware();// 0x1514350
	bool IsResolutionScaleAvailable();// 0x1514320
	bool IsResolutionAvailable(out const IntPoint InResolution, const byte InWindowMode);// 0x1514240
	bool IsPlatformPS5();// 0x1514210
	bool IsFsrSharpeningAvailable();// 0x15141e0
	bool IsFsrQualityLevelAvailable();// 0x15141b0
	bool IsFsr2SharpeningAvailable();// 0x1514180
	bool IsFsr2QualityLevelAvailable();// 0x1514150
	bool IsFsr2ModuleLoaded();// 0x1514120
	bool IsDlssQualityLevelAvailable();// 0x15140f0
	bool IsDlssModuleLoaded();// 0x15140c0
	bool IsDlssAvailableOnHardware();// 0x1514090
	bool HasNonDefaultGraphicsSettings();// 0x1514060
	bool HasNonDefaultDisplaySettings();// 0x1514030
	bool HasGraphicsChanges();// 0x1514000
	bool HasDisplayChanges();// 0x1513fd0
	byte GetTempWindowMode();// 0x1513fa0
	FString[] GetNonDefaultGraphicsSettings();// 0x1513da0
	FString[] GetNonDefaultDisplaySettings();// 0x1513d20
	float GetFavoriteUseTime();// 0x1513cc0
	enum GetDamageNumberBehaviour();// 0x1513c90
	int GetCurrentFrameRateLimitOption();// 0x1513c60
	bool GetAvailableResolutionsForWindowMode(out IntPoint[] OutResolutions, const byte InWindowMode);// 0x1513b60
	int FindCurrentQualityPreset();// 0x1513b30
	void DiscardResolutionChanges();// 0x1513b10
	void DiscardGraphicsSettings();// 0x1513af0
	void DiscardDisplaySettings();// 0x1513ad0
	bool CanUseFavoriteFallback();// 0x1513aa0
	bool CanUseFavorite();// 0x1513a70
	void ApplyStreamerSettings(const bool bInShouldSaveSettings);// 0x15139e0
	void ApplyGraphicsSettings(const bool bInShouldSaveSettings);// 0x1513950
	void ApplyDisplaySettings(const bool bInShouldSaveSettings);// 0x15138c0

--------------------------------
Class: TigerSaveSubSystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: TigerStreamerModeSettings
	enum StreamerModeLevel;//[Offset: 0x0, Size: 0x1]
	bool bEnableAnonymousMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEnablePlayerScramble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bDisableKillFeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bDisableMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bDisableNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bDisablePlayerMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bHidePlayerCurrency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bHideMatchId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int SavedVersion;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerAudioSettings
	float MasterVolume;//[Offset: 0x0, Size: 0x4]
	float SFXVolume;//[Offset: 0x4, Size: 0x4]
	float MusicVolume;//[Offset: 0x8, Size: 0x4]
	float VideoVolume;//[Offset: 0xc, Size: 0x4]
	float ClanAreaMusicVolume;//[Offset: 0x10, Size: 0x4]
	float DialogueVolume;//[Offset: 0x14, Size: 0x4]
	float VoiceChatVolume;//[Offset: 0x18, Size: 0x4]
	float MicVolume;//[Offset: 0x1c, Size: 0x4]
	float ControllerSpeakerVolume;//[Offset: 0x20, Size: 0x4]
	bool bEnableVoiceChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bAllowBackgroundAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool bEnableDolbyAtmos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
	bool bMuteInMatchMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString VoipInputDevice;//[Offset: 0x30, Size: 0x10]
	FString VoipOutputDevice;//[Offset: 0x40, Size: 0x10]
	FString AudioOutputDevice;//[Offset: 0x50, Size: 0x10]
	FString MixPresetName;//[Offset: 0x60, Size: 0x10]
	int SavedVersion;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: TigerLanguageSettings
	FString AudioLanguage;//[Offset: 0x0, Size: 0x10]
	FString TextLanguage;//[Offset: 0x10, Size: 0x10]
	bool bUseSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int SavedVersion;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: TigerGameplaySettings
	enum DamageNumberBehaviour;//[Offset: 0x0, Size: 0x1]
	bool bSwapOutDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bMuteGeneralChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bDisplayMedals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bRotateMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bUseCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bUseInventoryFavorite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	float QuickUseMaxHoldTime;//[Offset: 0x8, Size: 0x4]
	bool bUseInventoryFavoriteFallbacks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bClearNewNotificationsOnMenuExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int SavedVersion;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerDisplaySettings
	int ResolutionX;//[Offset: 0x0, Size: 0x4]
	int ResolutionY;//[Offset: 0x4, Size: 0x4]
	float ResolutionScale;//[Offset: 0x8, Size: 0x4]
	int WindowMode;//[Offset: 0xc, Size: 0x4]
	float Gamma;//[Offset: 0x10, Size: 0x4]
	float FrameRateLimit;//[Offset: 0x14, Size: 0x4]
	float FrameRateLimitOverride;//[Offset: 0x18, Size: 0x4]
	bool bEnableFrameRateSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bEnableVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	enum FsrQualityLevel;//[Offset: 0x1e, Size: 0x1]
	float FsrSharpening;//[Offset: 0x20, Size: 0x4]
	enum Fsr2QualityLevel;//[Offset: 0x24, Size: 0x1]
	float Fsr2Sharpening;//[Offset: 0x28, Size: 0x4]
	enum DlssQualityLevel;//[Offset: 0x2c, Size: 0x1]
	enum XeSSQualityLevel;//[Offset: 0x2d, Size: 0x1]
	int SavedVersion;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TigerGraphicsSettings
	TigerGraphicsQualityPreset QualityPreset;//[Offset: 0x0, Size: 0x44]
	int SavedVersion;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: TigerGraphicsQualityPreset
	int ViewDistanceQuality;//[Offset: 0x0, Size: 0x4]
	int MaterialQuality;//[Offset: 0x4, Size: 0x4]
	int TextureQuality;//[Offset: 0x8, Size: 0x4]
	int TextureFilteringQuality;//[Offset: 0xc, Size: 0x4]
	int VisualEffectQuality;//[Offset: 0x10, Size: 0x4]
	int FoliageQuality;//[Offset: 0x14, Size: 0x4]
	int LightingQuality;//[Offset: 0x18, Size: 0x4]
	int VolumetricFogQuality;//[Offset: 0x1c, Size: 0x4]
	int AmbientOcclusionQuality;//[Offset: 0x20, Size: 0x4]
	int ScreenSpaceReflectionQuality;//[Offset: 0x24, Size: 0x4]
	int ShadowQuality;//[Offset: 0x28, Size: 0x4]
	int AntiAliasingQuality;//[Offset: 0x2c, Size: 0x4]
	int SubSurfaceScatteringQuality;//[Offset: 0x30, Size: 0x4]
	int MotionBlurQuality;//[Offset: 0x34, Size: 0x4]
	int BloomQuality;//[Offset: 0x38, Size: 0x4]
	int LensFlareQuality;//[Offset: 0x3c, Size: 0x4]
	bool bUseChromaticAberration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bUseFilmGrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bUseLightShafts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: TigerGraphicsSettingsPS5
	enum QualityPreset;//[Offset: 0x0, Size: 0x1]
	float Gamma;//[Offset: 0x4, Size: 0x4]
	bool bUseMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bUseChromaticAberration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bUseFilmGrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bEnableVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	int SavedVersion;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerSessionSeeker.Object
	delegate OnSessionFound;//[Offset: 0x28, Size: 0x10]
	delegate OnMatched;//[Offset: 0x38, Size: 0x10]
	delegate OnCouldNotFindSession;//[Offset: 0x48, Size: 0x10]
	delegate OnJoiningSession;//[Offset: 0x58, Size: 0x10]
	delegate OnCouldNotJoinSession;//[Offset: 0x68, Size: 0x10]
	Object* WorldContextObject;//[Offset: 0x78, Size: 0x8]
	TigerGameInstance* GameInstance;//[Offset: 0x80, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x88, Size: 0x8]
	TigerBpFindSessionSelectedSession SelectedSession;//[Offset: 0x90, Size: 0x110]
	enum Status;//[Offset: 0x1a0, Size: 0x1]
	void SessionFound(out const TigerBpFindSessionSelectedSession InSelectedSession);// 0x15db410
	void SeekBPImpl(FString InGameModeId, int InGameModeIndex, enum InSessionType);// 0x197e4f0
	void Seek(FString InGameModeId, int InGameModeIndex, enum InSessionType, bool bInLeaveParty);// 0x15db2a0
	void OnSessionFoundDelegate__DelegateSignature();// 0x197e4f0
	void OnPartySessionAvailable();// 0x15db1f0
	void OnMatchedDelegate__DelegateSignature();// 0x197e4f0
	void OnLeftParty(out const TigerParty InParty);// 0x15db030
	void OnLeaderChanged();// 0x15db010
	void OnJoiningSessionDelegate__DelegateSignature();// 0x197e4f0
	void OnCreateGameSessionFailed();// 0x15dac60
	void OnCouldNotJoinSessionDelegate__DelegateSignature();// 0x197e4f0
	void OnCouldNotFindSessionDelegate__DelegateSignature();// 0x197e4f0
	void JoiningSession();// 0x15daff0
	void JoinBPImpl();// 0x197e4f0
	void Join();// 0x15dafd0
	void Init(Object* InWorldContextObject, TigerPlayerController* InPlayerController, bool bInJoinImmediately);// 0x15dae90
	enum GetCurrentSessionType();// 0x15dadf0
	static TigerSessionSeeker* CreateSessionSeeker(Object* InWorldContextObject, class TigerSessionSeeker InSessionSeekerClass, TigerPlayerController* InPlayerController, bool bInJoinImmediately);// 0x15daca0
	void CouldNotJoinSession();// 0x15dac80
	void CouldNotFindSession();// 0x15dac60
	void Cancel();// 0x15dac40

--------------------------------
Class: TigerBpFindSessionSelectedSession

--------------------------------
Class: TigerParty
	TigerPartyId ID;//[Offset: 0x0, Size: 0x10]
	FString[] PlayerIds;//[Offset: 0x10, Size: 0x10]
	FString LeaderPlayerId;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TigerPartyId
	Guid Guid;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerQuestCollection.DataAsset.Object
	<FString,TigerQuestline*> QuestLines;//[Offset: 0x30, Size: 0x50]
	TigerQuestline* GetQuestLineWithId(FString InQuestlineId);// 0x15c4bc0
	enum GetQuestlineCategoryFromId(FString InQuestlineId);// 0x15c4c70
	void GetAllQuestlinesWithCategory(const enum InCategory, TigerQuestline*[] OutQuestlines);// 0x15c4330

--------------------------------
Class: TigerQuestline.Object
	enum Category;//[Offset: 0x28, Size: 0x1]
	DateTime ExpiryDate;//[Offset: 0x30, Size: 0x8]
	FText Title;//[Offset: 0x38, Size: 0x18]
	FString[] OrderedKeys;//[Offset: 0x50, Size: 0x10]
	<FString,TigerQuest*> Quests;//[Offset: 0x60, Size: 0x50]
	int SeasonId;//[Offset: 0xb0, Size: 0x4]
	bool bWhitelistedForUrgentDialogue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bRemoveAfterLockDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	DateTime LockDate;//[Offset: 0xb8, Size: 0x8]
	TigerItemId BattlePassItemId;//[Offset: 0xc0, Size: 0x8]
	UInt32Property EventId;//[Size: 0x4]
	bool HasExpiry();// 0x15c4ed0
	void GetQuestsAndIdsSeparated(out FString[] OutIds, out TigerQuest*[] OutQuests);// 0x15c4d20
	TigerQuest* GetQuestByKey(FString InKey);// 0x15c4990
	TigerQuest* GetQuestByIndex(const int InIndex);// 0x15c48f0
	int GetNumOfCompletedQuests();// 0x15c4830
	void GetExpiryTime(TigerEventSystem* InEventSystem, out DateTime OutTime);// 0x15c46e0
	FString GetEventTitle(TigerEventSystem* InEventSystem);// 0x15c4600
	DateTime GetEventStartDate(TigerEventSystem* InEventSystem);// 0x15c4570
	DateTime GetEventEndDate(TigerEventSystem* InEventSystem);// 0x15c44e0

--------------------------------
Class: TigerQuest.Object
	delegate OnProgressChangedEvent;//[Offset: 0x28, Size: 0x10]
	delegate OnQuestCompletedEvent;//[Offset: 0x38, Size: 0x10]
	delegate OnQuestObjectiveCompletedEvent;//[Offset: 0x48, Size: 0x10]
	delegate OnQuestObjectiveSetCompleteEvent;//[Offset: 0x58, Size: 0x10]
	FText QuestName;//[Offset: 0x68, Size: 0x18]
	FText QuestSubheading;//[Offset: 0x80, Size: 0x18]
	FText FlavourText;//[Offset: 0x98, Size: 0x18]
	TigerQuestObjectiveSet*[] ObjectiveSets;//[Offset: 0xb0, Size: 0x10]
	TigerItemId[] RewardIds;//[Offset: 0xc0, Size: 0x10]
	TigerGrimoireUnlock GrimoireUnlock;//[Offset: 0xd0, Size: 0x10]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bStartsNextQuest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	FString NextQuestLineId;//[Offset: 0xe8, Size: 0x10]
	FString NextQuestId;//[Offset: 0xf8, Size: 0x10]
	TigerQuestIdentifier QuestLookupIdentifier;//[Offset: 0x108, Size: 0x40]
	TigerPlayerController* OwningPlayerController;//[Offset: 0x148, Size: 0x8]
	void OnQuestObjectiveSetCompletedEvent__DelegateSignature(const TigerQuest* Quest, const TigerQuestObjectiveSet* ObjectiveSet);// 0x197e4f0
	void OnQuestObjectiveCompletedEvent__DelegateSignature(const TigerQuest* Quest, const TigerQuestObjective* Objective);// 0x197e4f0
	void OnQuestCompletedEvent__DelegateSignature(const TigerQuest* Quest);// 0x197e4f0
	void OnProgressChangedEvent__DelegateSignature(const TigerQuest* Quest);// 0x197e4f0
	void OnObjectiveSetCompleted(const TigerQuestObjectiveSet* InTigerObjectiveSet);// 0x15c50e0
	void OnObjectiveCompleted(const TigerQuestObjective* InTigerObjective);// 0x15c4f30
	TigerItemId GetRarestRewardAsItemId();// 0x15c4e90
	TigerInventoryItemBase* GetRarestRewardAsInventoryItem();// 0x15c4e60
	TigerQuestIdentifier GetQuestIdentifier();// 0x15c4a40
	int GetNumberOfObjectives();// 0x15c48c0
	int GetNumberOfCompletedObjectives();// 0x15c4890
	TigerQuestObjective*[] GetIncompleteObjectivesFromActiveSet();// 0x15c47b0
	TigerQuestObjective*[] GetCompleteObjectivesFromActiveSet();// 0x15c4460
	void GetAllIncompleteActiveAndCompleteObjectives(out TigerQuestObjective*[] OutIncompleteActiveObjectives, out TigerQuestObjective*[] OutCompleteObjectives);// 0x15c4210
	TigerQuestObjectiveSet* GetActiveObjectiveSet();// 0x15c41e0

--------------------------------
Class: TigerQuestObjectiveSet.Object
	TigerQuestObjective*[] Objectives;//[Offset: 0x28, Size: 0x10]
	bool bSetComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	TigerQuest* ParentQuest;//[Offset: 0x40, Size: 0x8]
	TigerPlayerController* OwningPlayerController;//[Offset: 0x48, Size: 0x8]
	void OnQuestObjectiveSetComplete();// 0x15c52d0
	void OnObjectiveCompleted(const TigerQuestObjective* InObjective);// 0x15c5050
	int GetNumberOfCompleteObjectives();// 0x15c4860

--------------------------------
Class: TigerQuestObjective.Object
	FText Description;//[Offset: 0x28, Size: 0x18]
	FText FlavourText;//[Offset: 0x40, Size: 0x18]
	enum MapType;//[Offset: 0x58, Size: 0x1]
	TigerChallenge* Objective;//[Offset: 0x60, Size: 0x8]
	bool bPlayAnimationOnInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	AnimMontage* QuestMontage;//[Offset: 0x70, Size: 0x8]
	bool bStopsMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	Guid ID;//[Offset: 0x7c, Size: 0x10]
	TigerQuest* ParentQuest;//[Offset: 0x90, Size: 0x8]
	TigerQuestObjectiveSet* ParentObjectiveSet;//[Offset: 0x98, Size: 0x8]
	TigerPlayerController* OwningPlayerController;//[Offset: 0xa0, Size: 0x8]
	void OnObjectiveCompleted(const TigerChallenge* InTigerChallenge);// 0x15c4fc0
	bool IsAvailableOnMap();// 0x15c4f00

--------------------------------
Class: TigerChallenge.Object
	delegate OnValueChangedEvent;//[Offset: 0x30, Size: 0x10]
	delegate OnChallengeCompletedEvent;//[Offset: 0x40, Size: 0x10]
	delegate OnChallengeTierCompletedEvent;//[Offset: 0x50, Size: 0x10]
	World* World;//[Offset: 0x60, Size: 0x8]
	TigerPlayerController* OwningPlayerController;//[Offset: 0x68, Size: 0x8]
	int PreSessionValue;//[Offset: 0x70, Size: 0x4]
	FText ChallengeDisplayName;//[Offset: 0x78, Size: 0x18]
	FText ChallengeGameDisplayName;//[Offset: 0x90, Size: 0x18]
	FText ChallengeManualDescription;//[Offset: 0xa8, Size: 0x18]
	int DefaultTargetValue;//[Offset: 0xc0, Size: 0x4]
	int[] DefaultTieredTargetValues;//[Offset: 0xc8, Size: 0x10]
	bool bInOneGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bWithoutDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool bCanProgressInElysium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	int TargetValue;//[Offset: 0xdc, Size: 0x4]
	FText Description;//[Offset: 0xe0, Size: 0x18]
	UInt64Property ChallengeTypeTelemetryID;//[Size: 0x8]
	bool bChallengeCompleteEventRaised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bTierCompleteEventRaised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bUseTiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	UInt32Property CurrentTier;//[Size: 0x4]
	UInt32Property NumberOfTiers;//[Size: 0x4]
	bool WithoutTakingDamage();// 0x14a4970
	void SetCurrentValue(int NewValue);// 0x14a48e0
	void ResetFromTakingDamage();// 0x14a48c0
	void OnValueChangedEvent__DelegateSignature(const TigerChallenge* Challenge);// 0x197e4f0
	void OnChallengeTierCompletedEvent__DelegateSignature(const TigerChallenge* Challenge);// 0x197e4f0
	void OnChallengeCompletedEvent__DelegateSignature(const TigerChallenge* Challenge);// 0x197e4f0
	bool IsTierComplete();// 0x14a47b0
	bool IsSingleMatch();// 0x14a4780
	bool IsComplete();// 0x14a46f0
	bool HasTiers();// 0x14a46d0
	bool HasCompletedAllTiers();// 0x14a4640
	FText GetVariableName();// 0x14a4460
	int GetTargetValueOfLastTier();// 0x14a43e0
	int GetTargetValueOfCurrentTier();// 0x14a4370
	int GetTargetValueByTier(const int InTier);// 0x14a42a0
	int GetTargetValue();// 0x14a4280
	TigerQuestIdentifier GetQuestIds();// 0x14a3b90
	float GetProgressAcrossAllTiers();// 0x14a3b50
	float GetProgress();// 0x14a3b10
	int GetPreSessionValue();// 0x14a3af0
	int GetNumberOfTiers();// 0x14a3a30
	FText GetDescription();// 0x14a3730
	int GetCurrentValueClamped();// 0x14a36d0
	int GetCurrentValue();// 0x14a36a0
	int GetCurrentTier();// 0x14a3660
	FText GetClanRequirementsText();// 0x197e4f0
	FString GetChallengeName();// 0x14a3520
	FText GetChallengeGameDisplayName();// 0x14a34f0
	FText GetChallengeDisplayName();// 0x14a33f0
	int[] GetAllTargetValues();// 0x14a31b0
	FText BuildDescriptionText();// 0x197e4f0
	void AdvanceTier();// 0x14a3190
	void AdvanceChallenge();// 0x14a3170

--------------------------------
Class: TigerEventSystem.Object
	<FString,TigerEventConfig> EventConfigsMap;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: TigerEventConfig
	FString EventName;//[Offset: 0x0, Size: 0x10]
	FString EventsJson;//[Offset: 0x10, Size: 0x10]
	<FString,FString> EventTitle;//[Offset: 0x20, Size: 0x50]
	<FString,FString> EventDescription;//[Offset: 0x70, Size: 0x50]
	<FString,FString> EventBannerImageURL;//[Offset: 0xc0, Size: 0x50]
	enum EventType;//[Offset: 0x110, Size: 0x1]
	TigerEventConfig_ChallengeInstanceDefinition[] EventChallengeDefinitions;//[Offset: 0x118, Size: 0x10]
	TigerEventConfig_Rewards[] EventRewards;//[Offset: 0x128, Size: 0x10]
	enum Timeframe;//[Offset: 0x138, Size: 0x1]
	TigerEventConfig_Repeating EventRepeatingPeriod;//[Offset: 0x140, Size: 0x18]
	DateTime EventLifeTimeStart;//[Offset: 0x158, Size: 0x8]
	DateTime EventLifeTimeEnd;//[Offset: 0x160, Size: 0x8]
	int PromotionPeriodInDays;//[Offset: 0x168, Size: 0x4]
	int CooloffPeriodInDays;//[Offset: 0x16c, Size: 0x4]
	bool EventActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	UInt32Property EventId;//[Size: 0x4]

--------------------------------
Class: TigerEventConfig_ChallengeInstanceDefinition
	TigerChallengeTypeID ChallengeStorageID;//[Offset: 0x0, Size: 0x4]
	TigerChallengeTypeID ChallengeTypeID;//[Offset: 0x4, Size: 0x4]
	TigerItemId RewardId;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerChallengeTypeID
	UInt32Property UID;//[Size: 0x4]

--------------------------------
Class: TigerEventConfig_Rewards
	TigerItemId[] ItemIds;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerEventConfig_Repeating
	enum RepeatingPeriod;//[Offset: 0x0, Size: 0x1]
	DateTime ActiveStart;//[Offset: 0x8, Size: 0x8]
	DateTime ActiveEnd;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerMasterChallengesConfigAsset.DataAsset.Object
	TigerMasteryChallengesConfig Config;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerMasteryChallengesConfig
	TigerMasterChallengeCollection[] Seasons;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerMasterChallengeCollection.TigerChallengeConfigCollection
	UInt32Property SeasonId;//[Size: 0x4]
	<enum,TigerNestedMasteryInstanceDefinitionArray> ChallengeDefinitionsBySubcategory;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: TigerChallengeConfigCollection
	TigerItemId[] SequentialRewardIds;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerNestedMasteryInstanceDefinitionArray
	TigerMasteryChallengeInstanceDefinition[] ChallengeDefinitions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerMasteryChallengeInstanceDefinition.TigerChallengeInstanceDefinition
	TigerChallengeTypeID ChallengeTypeID;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TigerChallengeInstanceDefinition
	TigerChallengeTypeID ChallengeStorageID;//[Offset: 0x8, Size: 0x4]
	TigerItemId[] RewardIds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerTestChallengesConfigAsset.DataAsset.Object
	TigerTestChallengesConfig Config;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: TigerTestChallengesConfig
	TigerTestChallengeCollection TestChallenges;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: TigerTestChallengeCollection.TigerChallengeConfigCollection
	TigerTestChallengeInstanceDefinition[] ChallengeDefinitions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerTestChallengeInstanceDefinition.TigerChallengeInstanceDefinition
	TigerChallengeTypeID ChallengeTypeID;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TigerMatchStatMedalRequirements.DataAsset.Object
	TigerPlayerMedalTiers Eliminations;//[Offset: 0x30, Size: 0x10]
	TigerPlayerMedalTiers Assists;//[Offset: 0x40, Size: 0x10]
	TigerPlayerMedalTiers Diableries;//[Offset: 0x50, Size: 0x10]
	TigerPlayerMedalTiers DamageDealt;//[Offset: 0x60, Size: 0x10]
	TigerPlayerMedalTiers Placement;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: TigerPlayerMedalTiers
	int bronze;//[Offset: 0x0, Size: 0x4]
	int silver;//[Offset: 0x4, Size: 0x4]
	int gold;//[Offset: 0x8, Size: 0x4]
	int Ruby;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerRankConfigAsset.DataAsset.Object
	TigerRankConfig Config;//[Offset: 0x30, Size: 0x28]
	int GetNextRankId(int InCurrentRp);// 0x15c8210
	int GetNextRankFloor(int InCurrentRp);// 0x15c8170
	int GetCurrentRankId(int InCurrentRp);// 0x15c7f40
	int GetCurrentRankFloor(int InCurrentRp);// 0x15c7ea0
	int GetCurrentMatchFee(int InCurrentRp);// 0x15c7dc0
	int[] GetAllRankThreshholds();// 0x15c7c10

--------------------------------
Class: TigerRankConfig
	TigerRankConfig_RankLevel[] RankLevels;//[Offset: 0x0, Size: 0x10]
	TigerRankConfig_RankPointGain RankPointGain;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TigerRankConfig_RankLevel
	FString Name;//[Offset: 0x0, Size: 0x10]
	int RankPointsThreshold;//[Offset: 0x10, Size: 0x4]
	int MatchFee;//[Offset: 0x14, Size: 0x4]
	TigerItemId[] RewardItemIds;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerRankConfig_RankPointGain
	int Eliminations;//[Offset: 0x0, Size: 0x4]
	TigerRankConfig_Placement[] Placements;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerRankConfig_Placement
	int Gain;//[Offset: 0x0, Size: 0x4]
	int MinPlacement;//[Offset: 0x4, Size: 0x4]
	int MaxPlacement;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerPartyService.Object

--------------------------------
Class: TigerPlayerDataService.Object
	TigerRequestUtility* TigerRequestUtility;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: TigerRequestUtility.Object

--------------------------------
Class: TigerConfigService.Object
	TigerRequestUtility* TigerRequestUtility;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerInboxService.Object

--------------------------------
Class: TigerStoreService.Object

--------------------------------
Class: TigerConsoleService.Object

--------------------------------
Class: TigerVotingSystemClient.Object

--------------------------------
Class: TigerPremiumCurrencyManager.Object
	TigerStoreService* StoreService;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerCursor.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnCursorVisiblityChange;//[Offset: 0x280, Size: 0x10]
	enum GlobalVisibility;//[Offset: 0x290, Size: 0x1]
	void SetCursorVisibility(const enum InVisibility);// 0x14d82c0
	bool IsCursorVisible();// 0x197e4f0
	void ForceRefreshMouseVisibility();// 0x197e4f0

--------------------------------
Class: TigerPartyManager.Object
	delegate OnInviteReceived;//[Offset: 0x28, Size: 0x10]
	delegate OnInviteRemoved;//[Offset: 0x38, Size: 0x10]
	delegate OnJoinedParty;//[Offset: 0x48, Size: 0x10]
	delegate OnJoinedPartyFailed;//[Offset: 0x58, Size: 0x10]
	delegate OnLeftParty;//[Offset: 0x68, Size: 0x10]
	delegate OnMemberJoinedParty;//[Offset: 0x78, Size: 0x10]
	delegate OnMemberLeftParty;//[Offset: 0x88, Size: 0x10]
	delegate OnLeaderChanged;//[Offset: 0x98, Size: 0x10]
	delegate OnInviteAccepted;//[Offset: 0xa8, Size: 0x10]
	delegate OnInviteDeclined;//[Offset: 0xb8, Size: 0x10]
	delegate OnClientInviteDecline;//[Offset: 0xc8, Size: 0x10]
	delegate OnPartyUpdated;//[Offset: 0xd8, Size: 0x10]
	delegate OnInviteFailed;//[Offset: 0xe8, Size: 0x10]
	delegate OnAcceptInviteFailed;//[Offset: 0xf8, Size: 0x10]
	delegate OnSessionAvailable;//[Offset: 0x108, Size: 0x10]
	delegate OnCreateGameSessionFailed;//[Offset: 0x118, Size: 0x10]
	delegate OnPartyMaxMemberSizeUpdated;//[Offset: 0x128, Size: 0x10]
	delegate OnPartyPlayerStateAdded;//[Offset: 0x138, Size: 0x10]
	TigerGameInstance* GameInstance;//[Offset: 0x168, Size: 0x8]
	TigerUser*[] PartyMembers;//[Offset: 0x170, Size: 0x10]
	TigerPartyInvite*[] Invites;//[Offset: 0x180, Size: 0x10]
	float TravelTimeoutSeconds;//[Offset: 0x190, Size: 0x4]
	float MaxInviteAgeSeconds;//[Offset: 0x194, Size: 0x4]
	int MaxInvites;//[Offset: 0x198, Size: 0x4]
	TigerPartyService* PartyService;//[Offset: 0x1c8, Size: 0x8]
	<FString,double> LatestInviteAttemptTimestamps;//[Offset: 0x268, Size: 0x50]
	float DefaultInviteCooldown;//[Offset: 0x2c8, Size: 0x4]
	float DeclinedInviteCooldown;//[Offset: 0x2cc, Size: 0x4]
	bool TravelToPartyElysium();// 0x1570ca0
	void TigerPartyPlatformInvite(const FString InPlayerId, enum InPlayerChannel);// 0x1570b70
	void TigerPartyInvite(const FString InPlayerId, enum InPlayerChannel);// 0x1570b70
	void TigerPartyFailJoinParty();// 0xb7a5a0
	void TigerPartyDump();// 0xb7a5a0
	void TigerPartyBindPlatformTest();// 0xb7a5a0
	void SetLastPlayedMatchGameModeForAllMembers(int InGameModeIndex, FString InGameModeId);// 0x1570a00
	void RequestPartyUpdate();// 0x1570990
	void RequestPartyCheck();// 0x1570970
	void RemoveInvitesOfPlayer(out const TigerPersistentPlayerID InPlayerId);// 0x15708c0
	void RemoveExpiredInvites();// 0x15708a0
	bool PartyHasSelectedElysium();// 0x1570870
	void OnSessionAvailableDelegate__DelegateSignature();// 0x197e4f0
	void OnPlayerStateAdded__DelegateSignature(TigerPlayerState* InPlayerState);// 0x197e4f0
	void OnPartyUpdatedDelegate__DelegateSignature();// 0x197e4f0
	void OnPartyMaxMemberSizeUpdatedDelegate__DelegateSignature();// 0x197e4f0
	void OnMemberLeftDelegate__DelegateSignature(out const TigerPartyId InPartyId, FString InDepartingPlayerId);// 0x197e4f0
	void OnMemberJoinedDelegate__DelegateSignature(out const TigerPartyId InPartyId, FString InJoiningPlayerId);// 0x197e4f0
	void OnLeftPartyDueToBlockedPlayerDelegate__DelegateSignature(TigerPartyManager* InPartyManager);// 0x197e4f0
	void OnLeftPartyDelegate__DelegateSignature(out const TigerParty InParty);// 0x197e4f0
	void OnLeaderChangedDelegate__DelegateSignature();// 0x197e4f0
	void OnJoinPartyFailedDelegate__DelegateSignature(enum InJoinedPartyFailedReason);// 0x197e4f0
	void OnJoinedPartyDelegate__DelegateSignature(out const TigerParty InParty);// 0x197e4f0
	void OnInviteFailedDelegate__DelegateSignature();// 0x197e4f0
	void OnInviteDeclinedDelegate__DelegateSignature(out const TigerInviteId InInviteId);// 0x197e4f0
	void OnInviteActionDelegate__DelegateSignature(const TigerPartyInvite* InInvite);// 0x197e4f0
	void OnInviteAcceptedDelegate__DelegateSignature(out const TigerInviteId InInviteId);// 0x197e4f0
	void OnCreateGameSessionFailedDelegate__DelegateSignature();// 0x197e4f0
	void OnAcceptInviteFailedDelegate__DelegateSignature(out const TigerInviteId InInviteId);// 0x197e4f0
	void LeaveParty();// 0x1570810
	bool IsPartyFull();// 0x15707b0
	bool IsLeader(FString InPlayerId);// 0x1570700
	bool IsJoiningParty();// 0x15706d0
	bool IsJoiningOrInParty();// 0x1570670
	bool IsInParty();// 0x1570640
	void InviteByPlayerIdWithUserData(out const TigerPersistentPlayerID InPlayerId, enum InAccountChannel, FString InUserData);// 0x15704f0
	void InviteByPlayerId(out const TigerPersistentPlayerID InPlayerId, enum InPlayerChannel);// 0x15703f0
	void Invite(TigerUser* InUser);// 0x1570360
	bool InMaintenanceMode();// 0x1570260
	void HandlePlayerStateAdded(TigerPlayerState* InPlayerState);// 0x15701d0
	TigerPartyId GetPartyId();// 0x1570160
	int GetMaxPartyMembers();// 0x1570140
	float GetInvitePlayerCooldown(out const TigerPersistentPlayerID InPlayerId);// 0x1570080
	void DeclineInvite(const TigerPartyInvite* InInvite);// 0x156ff20
	void CreateGameSession(out const TigerBpFindSessionSelectedSession InGameSession);// 0x156fce0
	void AcceptInvite(const TigerPartyInvite* InInvite);// 0x156fbb0

--------------------------------
Class: TigerVotingContext.Object
	delegate OnVotingStateReceived;//[Offset: 0x28, Size: 0x10]
	delegate OnVotePlaced;//[Offset: 0x38, Size: 0x10]
	void OnVotingStateReceived__DelegateSignature(bool bInSuccess);// 0x197e4f0
	void OnVotePlaced__DelegateSignature(enum InVotingCategory, int InOptionIndex, bool bInSuccess);// 0x197e4f0
	bool HasReceivedVoteState();// 0x1628210
	int GetWinningVotePercentForCategory(enum InVotingCategory);// 0x1628180
	int GetWinningVoteIndexForCategory(enum InVotingCategory);// 0x16280f0
	FString[] GetVoteDetailsForCategoryAndIndex(enum InVotingCategory, int InOptionIndex, bool bInPreviousResult);// 0x1627c20
	Timespan GetTimeSpanUntilFinalizes(Object* InWorldObjectReference);// 0x1627b90
	Timespan GetTimeSpanUntilCloses(Object* InWorldObjectReference);// 0x1627b00
	int GetCurrentVoteIndexForCategory(enum InVotingCategory, const bool bInPreviousVote);// 0x1627a30
	void FetchVotingStateInternal(Object* InWorldObjectReference);// 0x16279a0
	void FetchVotingState(Object* InWorldObjectReference);// 0x1627910
	void DoVote(enum InVotingCategory, int InOptionIndex, Object* InWorldObjectReference);// 0x1627780

--------------------------------
Class: TigerAuthenticationManager.TigerAuthenticationManagerBase.Object
	bool bEnableSharkmobAccountLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	TigerGameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	bool IsSharkmobAccountLoginsEnabled();// 0x1491e20
	FString GetUserLocation();// 0x1491d80
	enum GetAuthenticatedChannel();// 0x1491b40

--------------------------------
Class: TigerAuthenticationManagerBase.Object

--------------------------------
Class: TigerTelemetryEventHandler.Object
	SharkTelemetry* SharkTelemetry;//[Offset: 0x30, Size: 0x8]
	TigerTelemetryService* TelemetryService;//[Offset: 0x38, Size: 0x8]
	TigerGameInstance* GameInstance;//[Offset: 0x40, Size: 0x8]
	void SettingsChanged();// 0x15f4210
	void OnGameStateSet(TigerGameState* InGameState);// 0x15f4120
	void HandleJsonTelemetry(FString InJsonTelemetry);// 0x15f3e30
	void GraphicsSettingsChanged(out const TigerGraphicsSettings InGraphicsSettings, out const TigerGraphicsSettingsPS5 InGraphicsSettingsPS5);// 0x15f3bf0
	void CacheTransactionalData(out const TigerPersistentPlayerTransactionalData InTransactionalData);// 0x15f39e0

--------------------------------
Class: TigerGameState.GameStateBase.Info.Actor.Object
	delegate OnWeatherScenarioChangedEvent;//[Offset: 0x278, Size: 0x10]
	int[] FakeMatchmakingDelayGameModeIndices;//[Offset: 0x288, Size: 0x10]
	delegate OnPrePlayerStateRemoved;//[Offset: 0x2b8, Size: 0x10]
	Guid MatchID;//[Offset: 0x2c8, Size: 0x10]
	TigerHolyIncense* HolyIncense;//[Offset: 0x2d8, Size: 0x8]
	float SynchronizedTime;//[Offset: 0x2e4, Size: 0x4]
	class TigerWeatherScenarioData* WeatherScenarioClass;//[Offset: 0x2f8, Size: 0x8]
	TigerWeatherScenarioData* WeatherScenario;//[Offset: 0x300, Size: 0x8]
	FString ServerId;//[Offset: 0x358, Size: 0x10]
	enum CurrentScalabilityTarget;//[Offset: 0x368, Size: 0x1]
	bool UnsubscribeOnPlayerStateGameDataChanged(const int InPlayerId, out const delegate InDelegate);// 0x1516ed0
	TigerPlayerState* TryGetPlayerStateFromID(out const TigerPersistentPlayerID InID);// 0x1516e10
	void TigerPrintServerScalabilityTarget();// 0xb7a5a0
	void TigerDisplayServerId();// 0xb7a5a0
	bool SubscribeOnPlayerStateGameDataChanged(const int InPlayerId, out const delegate InDelegate);// 0x1516c50
	void PlayerStateRemoved__DelegateSignature(TigerPlayerState* InPlayerState);// 0x197e4f0
	void OnWeatherScenarioChanged__DelegateSignature(TigerWeatherScenarioData* WeatherScenarioData);// 0x197e4f0
	void OnRep_WeatherScenarioClass();// 0x15144b0
	void OnRep_SynchronizedTime();// 0x1514490
	void OnRep_FakeMatchmakingDelayRemovedForGameModeIndex();// 0x1514470
	void OnPlayerStateGameDataChangeDelegate__DelegateSignature();// 0x197e4f0
	void OnPlayerStateGameDataChanged__DelegateSignature();// 0x197e4f0
	void Multicast_SynchronizeTime(float InNewSynchronizedTime);// 0x15143e0
	float GetSynchronizedTimeNonInterpolated();// 0x1513f70
	float GetSynchronizedTime();// 0x1513f40
	TigerPlayerStateGameData GetPlayerStateDataCopy(int InPlayerId);// 0x1513e20
	Guid GetMatchId();// 0x1513cf0

--------------------------------
Class: TigerWeatherScenarioData.DataAsset.Object
	FName DebugName;//[Offset: 0x30, Size: 0x8]
	bool bOverrideServerReplicationCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CullDistance;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: TigerPlayerStateGameData
	TigerPlayerState* WeakPlayerState;//[Offset: 0x0, Size: 0x8]
	int PlayerId;//[Offset: 0x8, Size: 0x4]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	TigerCharacterCardData CardData;//[Offset: 0x20, Size: 0x78]
	int RankedPoints;//[Offset: 0x98, Size: 0x4]
	int64 PlayerLevel;//[Offset: 0xa0, Size: 0x8]
	enum PlatformType;//[Offset: 0xa8, Size: 0x1]
	FString FakePlayerName;//[Offset: 0xb0, Size: 0x10]
	TigerPersistentPlayerID PersistentPlayerID;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: TigerCharacterCardData
	class TigerCharacterIconCustomization* CharacterIcon;//[Offset: 0x0, Size: 0x28]
	class TigerCharacterCardShapeCustomization* CharacterCardShape;//[Offset: 0x28, Size: 0x28]
	class TigerCharacterCardBackgroundCustomization* CharacterCardBackground;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: TigerCharacterIconCustomization.TigerPlayerCardCustomization.TigerInventoryItemBase.Object
	Texture2D* CharacterIcon;//[Offset: 0x130, Size: 0x28]

--------------------------------
Class: TigerPlayerCardCustomization.TigerInventoryItemBase.Object

--------------------------------
Class: TigerCharacterCardShapeCustomization.TigerPlayerCardCustomization.TigerInventoryItemBase.Object
	Texture2D* CardShapeMask;//[Offset: 0x130, Size: 0x28]

--------------------------------
Class: TigerCharacterCardBackgroundCustomization.TigerPlayerCardCustomization.TigerInventoryItemBase.Object
	Texture2D* CardBackground;//[Offset: 0x130, Size: 0x28]

--------------------------------
Class: TigerHolyIncense.Actor.Object
	delegate OnAssaultFinished;//[Offset: 0x228, Size: 0x10]
	TigerScriptedTexture* Texture;//[Offset: 0x238, Size: 0x8]
	TigerGasOverlay* SlateGasOverlay;//[Offset: 0x240, Size: 0x8]
	ProceduralMeshComponent* ProceduralMesh;//[Offset: 0x248, Size: 0x8]
	TigerHolyIncenseWaveComponent* WaveComponent;//[Offset: 0x250, Size: 0x8]
	SplineComponent* LevelBorder;//[Offset: 0x258, Size: 0x8]
	float WallMinHeight;//[Offset: 0x260, Size: 0x4]
	float WallMaxHeight;//[Offset: 0x264, Size: 0x4]
	ProceduralMeshComponent* PreviewMesh;//[Offset: 0x268, Size: 0x8]
	MaterialInterface* GasMaterial;//[Offset: 0x270, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x278, Size: 0x8]
	Vector2D[] InitialVertices;//[Offset: 0x280, Size: 0x10]
	TigerHaven* FinalHaven;//[Offset: 0x290, Size: 0x8]
	float NumVerticesPerKilometer;//[Offset: 0x298, Size: 0x4]
	enum ValidForGameType;//[Offset: 0x29c, Size: 0x1]
	float InitialArea;//[Offset: 0x2a0, Size: 0x4]
	float InitialCircumference;//[Offset: 0x2a4, Size: 0x4]
	bool UpdateAndRenderSlateGasOverlay(TigerGasOverlay* InGasOverlay);// 0x1525370
	void SetGasMaterial(MaterialInterface* InMaterial);// 0x15252c0
	bool RenderToTexture();// 0x1525290
	void PreviewWallMesh();// 0xb7a5a0
	bool IsLocationInsideHolyIncense(out const Vector2D InLocation, const bool bInIncludeScheduledWave);// 0x1524770
	TigerGasOverlay* InitializeScriptedTexture(SlateBrush InWaveBrush, SlateBrush InTargetBrush, SlateBrush InWavePolyBrush, SlateBrush InTargetPolyBrush);// 0x1523e00
	TextureRenderTarget2D* InitializeRenderTexture();// 0x1523dd0
	float GetTimeSecondsUntilCurrentWaveBegins();// 0x1523d50
	float GetSecondsUntilCurrentWaveEnds();// 0x1523ce0
	float GetDistanceToBorder(out const Vector2D Location, const bool bIncludeScheduledWave, out Vector2D OutClosestLocation, out Vector2D OutClosestNormal);// 0x1523b20
	float GetCurrentDamageInterval();// 0x1523a20
	float GetCurrentDamageAmount();// 0x15239f0
	bool GetClosestLocationOnNextWaveWall(out const Vector2D Location, out Vector2D OutClosestLocation, out bool bIsOutsidePlayableArea);// 0x1523790
	void ForceBlueprintInitialise();// 0x197e4f0

--------------------------------
Class: TigerGasOverlay.Widget.Visual.Object
	SlateBrush WaveTextureBrush;//[Offset: 0x108, Size: 0x88]
	SlateBrush TargetTextureBrush;//[Offset: 0x190, Size: 0x88]
	SlateBrush WavePolyTextureBrush;//[Offset: 0x218, Size: 0x88]
	SlateBrush TargetPolyTextureBrush;//[Offset: 0x2a0, Size: 0x88]
	TigerPlayerController* PlayerController;//[Offset: 0x328, Size: 0x8]
	void UpdateGeomtery();// 0x1516ff0

--------------------------------
Class: TigerScriptedTexture.TigerWidget.UserWidget.Widget.Visual.Object
	TextureRenderTarget2D* ScriptedTexture;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x488, Size: 0x8]
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x490, Size: 0x10]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x4a0, Size: 0x10]
	BoxSphereBounds LocalBounds;//[Offset: 0x4b0, Size: 0x1c]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x4d0, Size: 0x10]
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0xe7f9f0
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0xe7f730
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0xe7f410
	bool IsMeshSectionVisible(int SectionIndex);// 0xe7f370
	int GetNumSections();// 0xe7ed80
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0xe7e680
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0xe7e320
	void ClearMeshSection(int SectionIndex);// 0xe7d950
	void ClearCollisionConvexMeshes();// 0xe7d930
	void ClearAllMeshSections();// 0xe7d910
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0xe7d5e0

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10]
	ProcIndexBuffer(UInt32Property)[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10]
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x1c]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	ProcMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	Color Color;//[Offset: 0x28, Size: 0x4]
	Vector2D UV0;//[Offset: 0x2c, Size: 0x8]
	Vector2D UV1;//[Offset: 0x34, Size: 0x8]
	Vector2D UV2;//[Offset: 0x3c, Size: 0x8]
	Vector2D UV3;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TigerHolyIncenseWaveComponent.ActorComponent.Object
	delegate OnWaveStartMovement;//[Offset: 0xb0, Size: 0x10]
	delegate OnWaveStopped;//[Offset: 0xc0, Size: 0x10]
	delegate OnWaveRevealed;//[Offset: 0xd0, Size: 0x10]
	int FallbackSeed;//[Offset: 0xe0, Size: 0x4]
	int FallbackHavenSeed;//[Offset: 0xe4, Size: 0x4]
	bool bTestFallbackSeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	DataTable*[] WaveDataTables;//[Offset: 0xf0, Size: 0x10]
	<FString,DataTable*> CustomDataTables;//[Offset: 0x100, Size: 0x50]
	CurveFloat* WaveProgressSmoothingCurve;//[Offset: 0x150, Size: 0x8]
	int NumAvoidancePoints;//[Offset: 0x158, Size: 0x4]
	bool bRetraceInnerAndOuterMapPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	float MapGradientThickness;//[Offset: 0x160, Size: 0x4]
	float TickCollisionAndMapTextureInterval;//[Offset: 0x164, Size: 0x4]
	float CircumferenceKmForMinimumVFXVertices;//[Offset: 0x168, Size: 0x4]
	float CircumferenceKmForMaximumVFXVertices;//[Offset: 0x16c, Size: 0x4]
	int MinimumVFXVertices;//[Offset: 0x170, Size: 0x4]
	int MaximumVFXVertices;//[Offset: 0x174, Size: 0x4]
	bool bUseInteriorTriangulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bUseFallbackTriangulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	MaterialParameterCollection* RedGasParameterCollection;//[Offset: 0x180, Size: 0x8]
	int MinimumSimulatedVertices;//[Offset: 0x188, Size: 0x4]
	int MaximumSimulatedVertices;//[Offset: 0x18c, Size: 0x4]
	bool bRedistributeVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bOutputWaveGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	int RepeatWaveGeneration;//[Offset: 0x194, Size: 0x4]
	float DataSendingTime;//[Offset: 0x198, Size: 0x4]
	int GasVertexPackets;//[Offset: 0x19c, Size: 0x4]
	int LastPacketID;//[Offset: 0x1a0, Size: 0x4]
	TigerWaveData[] Waves;//[Offset: 0x1a8, Size: 0x10]
	TigerHolyIncenseSettings Settings;//[Offset: 0x1b8, Size: 0x28]
	TigerRevealedWave[] RevealedWaves;//[Offset: 0x1e0, Size: 0x10]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x1f0, Size: 0x8]
	TigerHolyIncense* HolyIncense;//[Offset: 0x1f8, Size: 0x8]
	float AssaultStartTime;//[Offset: 0x204, Size: 0x4]
	float DefaultOverlapToleranceCm;//[Offset: 0x258, Size: 0x4]
	float OverlapToleranceIncreasePerWaveCm;//[Offset: 0x25c, Size: 0x4]
	float OverlapToleranceFailureIncrementCm;//[Offset: 0x260, Size: 0x4]
	float OverlapToleranceMinimumCm;//[Offset: 0x264, Size: 0x4]
	int OverlapToleranceFailuresBeforeIncrement;//[Offset: 0x268, Size: 0x4]
	int OverlapTestingPerformanceVertexCount;//[Offset: 0x26c, Size: 0x4]
	float OverlapInterpStepDistanceCm;//[Offset: 0x270, Size: 0x4]
	float OverlapMaximumInterpSteps;//[Offset: 0x274, Size: 0x4]
	void TigerOnWaveStopped__DelegateSignature();// 0x197e4f0
	void TigerOnWaveStartMovement__DelegateSignature();// 0x197e4f0
	void TigerOnWaveRevealed__DelegateSignature();// 0x197e4f0
	void OnRep_Settings();// 0x15250d0
	void OnRep_RevealedWaves();// 0x15250b0
	void OnMatchSettingsSet();// 0x1524f60
	void Multicast_SettingsChanged(const TigerHolyIncenseSettings NewSettings);// 0x1524d40
	void Multicast_SetElapsedAssaultTime(const float InElapsedTime, const float InTimeMultiplier);// 0x1524c70
	void Multicast_RevealWave(const TigerRevealedWave InPartiallyRevealedWave);// 0x1524bb0
	void Multicast_BeginAssaults(const float StartTime);// 0x1524920
	void MatchStateChanged(enum OldMatchState, enum NewMatchState);// 0x1524850
	float GetWaveProgress();// 0x1523d80
	int GetNumberOfWaves();// 0x1523cc0
	int GetCurrentWaveIndex();// 0x1523a50
	float GetCurrentCircumference();// 0x15239c0
	float GetCurrentArea();// 0x15239a0

--------------------------------
Class: TigerWaveData
	TigerRevealedWave RevealData;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: TigerRevealedWave
	TigerHaven* RevealedHaven;//[Offset: 0x0, Size: 0x8]
	int Index;//[Offset: 0x8, Size: 0x4]
	TigerWaveVertexIndexedPosition[] Positions;//[Offset: 0x10, Size: 0x10]
	int TotalVerts;//[Offset: 0x20, Size: 0x4]
	float RevealTimeSeconds;//[Offset: 0x24, Size: 0x4]
	float SpreadStartSeconds;//[Offset: 0x28, Size: 0x4]
	float SpreadDurationSeconds;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TigerHaven.Actor.Object
	FString OverrideFinalHavenIdentifier;//[Offset: 0x228, Size: 0x10]
	SplineComponent* HolyIncenseOuterSpline;//[Offset: 0x238, Size: 0x8]
	SplineComponent* HolyIncenseInnerSpline;//[Offset: 0x268, Size: 0x8]
	bool bUseInnerHolyIncenseSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]

--------------------------------
Class: TigerWaveVertexIndexedPosition
	int VertexIndex;//[Offset: 0x0, Size: 0x4]
	Vector2D FinalPosition;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: TigerHolyIncenseSettings
	enum BalanceMode;//[Offset: 0x0, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	TigerHolyIncenseWaveTimings[] Timings;//[Offset: 0x8, Size: 0x10]
	FString DataTableOverride;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerHolyIncenseWaveTimings
	int WaveID;//[Offset: 0x0, Size: 0x4]
	float WaitTime;//[Offset: 0x4, Size: 0x4]
	float ClosingTime;//[Offset: 0x8, Size: 0x4]
	float IncreaseTimePerPlayerAlive;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SharkTelemetry.Object
	SharkTelemetrySettings TelemetryApplicationSettings;//[Offset: 0x38, Size: 0x50]
	SharkTelemtryEventData[] BufferedEvents;//[Offset: 0xa0, Size: 0x10]
	GameInstance* GameInstance;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: SharkTelemetrySettings
	FString DomainURL;//[Offset: 0x0, Size: 0x10]
	FString SecretKey;//[Offset: 0x10, Size: 0x10]
	FString ApplicationName;//[Offset: 0x20, Size: 0x10]
	FString ApplicationID;//[Offset: 0x30, Size: 0x10]
	int DefaultRequestRetryCount;//[Offset: 0x40, Size: 0x4]
	int ChunkDispatchMaxBodySizeBytes;//[Offset: 0x44, Size: 0x4]
	int ChunkDispatchAmountThreshold;//[Offset: 0x48, Size: 0x4]
	float ChunkDispatchTimeSecondsThreshold;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SharkTelemtryEventData
	Struct* StaticPropertyStruct;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TigerTelemetryService.Object

--------------------------------
Class: TigerPersistentPlayerTransactionalData
	int64 SeasonId;//[Offset: 0x0, Size: 0x8]
	int64 SeasonLevel;//[Offset: 0x8, Size: 0x8]
	int64 SeasonLevelExp;//[Offset: 0x10, Size: 0x8]
	int SeasonPlacementExpBonusPercentage;//[Offset: 0x18, Size: 0x4]
	TigerPersistentInventoryItem[] InventoryItems;//[Offset: 0x20, Size: 0x10]
	TigerPersistentOutfitSetup[] Outfits;//[Offset: 0x30, Size: 0x10]
	TigerPersistentArchetypeTransactionalData[] ArchetypeData;//[Offset: 0x40, Size: 0x10]
	float Rating;//[Offset: 0x50, Size: 0x4]
	int RankPoints;//[Offset: 0x54, Size: 0x4]
	int64 PremiumCurrencyBalance;//[Offset: 0x58, Size: 0x8]
	int64 PlayerLevel;//[Offset: 0x70, Size: 0x8]
	int64 PlayerLevelExp;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerPersistentInventoryItem
	class TigerInventoryItemBase* ItemClassPath;//[Offset: 0x0, Size: 0x28]
	int Count;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TigerPersistentArchetypeTransactionalData
	int64 ArchetypeLevel;//[Offset: 0x0, Size: 0x8]
	int64 ArchetypeLevelExp;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerStatisticsGatherer.Actor.Object
	<FString,float> AnimationSequences;//[Offset: 0x228, Size: 0x50]
	float ProcessingCullDistance;//[Offset: 0x278, Size: 0x4]
	int MaxComponentProcessingCountPerFrame;//[Offset: 0x27c, Size: 0x4]
	bool bVisualizeProcessedComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]

--------------------------------
Class: TigerPushConnectionManager.Object
	TigerGameInstance* GameInstance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerPlatformEntitlementsManager.Object
	TigerConsoleService* ConsoleService;//[Offset: 0x38, Size: 0x8]
	void HandleOnEntitlementUpdateEvent();// 0x158f540

--------------------------------
Class: TigerGameModesConfigCache.Object
	TigerGameModesConfigBranch BranchConfiguration;//[Offset: 0x28, Size: 0x30]
	FString GameModesConfigBranchName;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: TigerGameModesConfigBranch
	int SeasonId;//[Offset: 0x0, Size: 0x4]
	bool IsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FString Name;//[Offset: 0x8, Size: 0x10]
	int Revision;//[Offset: 0x18, Size: 0x4]
	TigerGameModeConfig[] GameModes;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TigerGameModeConfig
	FString ID;//[Offset: 0x0, Size: 0x10]
	bool Hidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Name;//[Offset: 0x18, Size: 0x10]
	FString Body;//[Offset: 0x28, Size: 0x10]
	FString TileUrl;//[Offset: 0x38, Size: 0x10]
	DateTime ActiveStart;//[Offset: 0x48, Size: 0x8]
	DateTime ActiveEnd;//[Offset: 0x50, Size: 0x8]
	bool bHasDateRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	TigerGameModeMinMax PlayerLevelRequirement;//[Offset: 0x60, Size: 0x10]
	TigerBotfillingConfig Botfilling;//[Offset: 0x70, Size: 0x8]
	TigerGameModeMinMax PlayerCount;//[Offset: 0x78, Size: 0x10]
	enum GroupMode;//[Offset: 0x88, Size: 0x1]
	int GroupSize;//[Offset: 0x8c, Size: 0x4]
	enum MatchMode;//[Offset: 0x90, Size: 0x1]
	enum SESSIONTYPE;//[Offset: 0x94, Size: 0x4]
	TigerDsSettings DsSettings;//[Offset: 0x98, Size: 0x290]
	FString TelemetryID;//[Offset: 0x328, Size: 0x10]
	bool bCrossplayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]

--------------------------------
Class: TigerGameModeMinMax
	int64 Min;//[Offset: 0x0, Size: 0x8]
	int64 Max;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerBotfillingConfig
	bool AutofillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool RefillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float Difficulty;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerDsSettings

--------------------------------
Class: TigerGameModesMetricsCache.Object

--------------------------------
Class: TigerArchetypeRewardData.DataAsset.Object
	TigerArchetype Archetypes;//[Offset: 0x30, Size: 0x10]
	TigerItemId[] GetRewardsInLevelRange(enum InType, int InLowerLevel, int InUpperLevel);// 0x148de80
	TigerItemId[] GetRewardsBeforeLevel(enum InType, int InLevel);// 0x148dd70
	TigerItemId[] GetRewardsAfterLevel(enum InType, int InLevel);// 0x148dc60
	TigerItemId[] GetRewards(enum InType);// 0x148db80
	TigerItemId GetRewardForLevel(enum InType, int InLevel);// 0x148daa0
	bool GetNextLevelReward(enum InType, int InLevel, out TigerArchetypeReward OutArchetypeReward);// 0x148d970
	TigerArchetypeReward[] GetLevelRewards(enum InType);// 0x148d890
	void GetFirstAndLastRewardLevels(enum InType, out int OutFirstRewardLevel, out int OutLastRewardLevel);// 0x148d770
	int FindRewardUnlockLevel(const enum InType, const TigerInventoryItemBase* InRewardItem);// 0x148d5c0

--------------------------------
Class: TigerArchetypeReward
	int Level;//[Offset: 0x0, Size: 0x4]
	TigerItemId ItemId;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerArchetype
	TigerArchetypeReward[] Rewards;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerPreloadedClasses.Object

--------------------------------
Class: TigerDsBackendAgent.Object
	FString DsAgentType;//[Offset: 0x38, Size: 0x10]
	float HeartbeatIntervalSeconds;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SharkAccounts.Object
	ShAccountSettings* Settings;//[Offset: 0x88, Size: 0x8]
	void SharkUsernameRegisteredQueryCallback__DelegateSignature(bool bInSuccess, bool bIsAvailable, bool bIsProfanity, FString InUsername);// 0x197e4f0
	void SharkLoginCallback__DelegateSignature(SharkLoginResult InResult);// 0x197e4f0
	void SharkEmailRegisteredQueryCallback__DelegateSignature(bool bInSuccess, bool bInRegistered, FString InEmail);// 0x197e4f0
	void SharkAccountActionCallback__DelegateSignature(SharkAccountActionResult InResult);// 0x197e4f0
	void SendRegistrationVerificationCode(FString InEmail, delegate InCallback);// 0x34c8b70
	void RegisterAndLogin(SharkAccountRegistrationData InRegistrationData, delegate InCallback);// 0x34c8930
	void QueryUsernameRegisterStatus(FString InUsername, delegate InCallback);// 0x34c87e0
	void QueryEmailRegisterStatus(FString InEmail, delegate InCallback);// 0x34c8690
	void PlatformLogin(delegate InCallback, bool bIsSharkmobAccountLoginEnabled);// 0x34c85a0
	void Login(FString InEmail, FString InPassword, delegate InCallback);// 0x34c83d0

--------------------------------
Class: ShAccountSettings.DeveloperSettings.Object
	bool LogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FString SandboxUrl;//[Offset: 0x40, Size: 0x10]
	FString ProductionUrl;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: SharkLoginResult.SharkAccountActionResult
	FString UserName;//[Offset: 0x30, Size: 0x10]
	FString OpenId;//[Offset: 0x40, Size: 0x10]
	FString Token;//[Offset: 0x50, Size: 0x10]
	FString PfKey;//[Offset: 0x60, Size: 0x10]
	FString Pf;//[Offset: 0x70, Size: 0x10]
	FString SharkmobToken;//[Offset: 0x80, Size: 0x10]
	enum AuthenticationChannelId;//[Offset: 0x90, Size: 0x1]
	bool IsNewAccount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]

--------------------------------
Class: SharkAccountActionResult
	bool Success;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString InternalErrorMessage;//[Offset: 0x8, Size: 0x10]
	FString InternalThirdPartyErrorMessage;//[Offset: 0x18, Size: 0x10]
	int ErrorCode;//[Offset: 0x28, Size: 0x4]
	int ThirdPartyErrorCode;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: SharkAccountRegistrationData
	FString Email;//[Offset: 0x0, Size: 0x10]
	FString Password;//[Offset: 0x10, Size: 0x10]
	int RegionId;//[Offset: 0x20, Size: 0x4]
	FString UserName;//[Offset: 0x28, Size: 0x10]
	FString VerificationCode;//[Offset: 0x38, Size: 0x10]
	int RecieveEmail;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: TigerAmmoAsset.TigerItemAsset.DataAsset.Object
	enum AmmoType;//[Offset: 0x130, Size: 0x1]
	SlateColor AmmoColor;//[Offset: 0x138, Size: 0x28]

--------------------------------
Class: TigerItemAsset.DataAsset.Object
	StaticMesh* StaticMesh;//[Offset: 0x38, Size: 0x8]
	enum ItemType;//[Offset: 0x40, Size: 0x1]
	enum ItemRarity;//[Offset: 0x41, Size: 0x1]
	FText Name;//[Offset: 0x48, Size: 0x18]
	FText ShortName;//[Offset: 0x60, Size: 0x18]
	int MaxStackSize;//[Offset: 0x78, Size: 0x4]
	int DropFromStackCount;//[Offset: 0x7c, Size: 0x4]
	bool DropExistingItemsOfTypeOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	FText Description;//[Offset: 0x88, Size: 0x18]
	TigerItemAsset* LowerRarity;//[Offset: 0xa0, Size: 0x8]
	int SortWithinCategoryAscending;//[Offset: 0xa8, Size: 0x4]
	FText TooltipItemType;//[Offset: 0xb0, Size: 0x18]
	Texture2D* UIIcon;//[Offset: 0xc8, Size: 0x8]
	Texture2D* HUDIcon;//[Offset: 0xd0, Size: 0x8]
	class TigerWeapon* WeaponClass;//[Offset: 0xd8, Size: 0x8]
	class TigerBuff* ItemBuff;//[Offset: 0xe0, Size: 0x8]
	bool bShouldAutoPickUpItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bTriggerBuffOnItemPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bRemoveBuffOnItemDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bShouldClearItemOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	AkAudioEvent* PingWantVoiceAudioEvent;//[Offset: 0xf0, Size: 0x8]
	AkAudioEvent* PingHaveVoiceAudioEvent;//[Offset: 0xf8, Size: 0x8]
	AkAudioEvent* PingHereVoiceAudioEvent;//[Offset: 0x100, Size: 0x8]
	AkAudioEvent* PickUpAudioEvent;//[Offset: 0x108, Size: 0x8]
	UInt64Property PersistentTelemetryID;//[Size: 0x8]
	TigerGrimoireEntry* EntryToUnlock;//[Offset: 0x118, Size: 0x8]
	FString EntryId;//[Offset: 0x120, Size: 0x10]
	enum GetWeaponType();// 0x153b370
	TigerWeapon* GetWeaponClassDefaultObject();// 0x153b240
	Texture2D* GetHUDIcon();// 0x153adf0
	FText GetDescription();// 0x153ad60
	bool CanBeDropped();// 0x153aae0

--------------------------------
Class: TigerPersistentPlayerState.ActorComponent.Object
	delegate OnDailyChallengesInitializedEvent;//[Offset: 0x108, Size: 0x10]
	delegate OnRewardsLoaded;//[Offset: 0x118, Size: 0x10]
	delegate OnClientTransactionalPlayerDataChangedEvent;//[Offset: 0x128, Size: 0x10]
	delegate OnClientPlayerInventoryChanged;//[Offset: 0x138, Size: 0x10]
	delegate OnSelectedCharacterChanged;//[Offset: 0x148, Size: 0x10]
	delegate OnChallengeProgressUpdated;//[Offset: 0x158, Size: 0x10]
	delegate OnQuestsRemoved;//[Offset: 0x168, Size: 0x10]
	delegate OnSeasonLevelGained;//[Offset: 0x1c0, Size: 0x10]
	delegate OnplayerDataUpdatedForRequeue;//[Offset: 0x1e0, Size: 0x10]
	TigerThrallSystem* PlayerThrallSystem;//[Offset: 0x1f0, Size: 0x8]
	TigerCollectibleSystem* PlayerCollectibleSystem;//[Offset: 0x1f8, Size: 0x8]
	Object* ServerCallbacks;//[Offset: 0x210, Size: 0x8]
	SharkUserId SharkmobUserId;//[Offset: 0x338, Size: 0x10]
	TigerPersistentPlayerID PersistentPlayerID;//[Offset: 0x348, Size: 0x10]
	enum AccountChannel;//[Offset: 0x398, Size: 0x1]
	int RankPoints;//[Offset: 0x39c, Size: 0x4]
	TigerPersistentPlayerCharacter[] CachedPlayerCharacters;//[Offset: 0x4f8, Size: 0x10]
	<FString,TigerQuestline*> ActiveQuests;//[Offset: 0x508, Size: 0x50]
	<FString,TigerQuestline*> CompletedQuests;//[Offset: 0x558, Size: 0x50]
	<FString,float> LocationTimeHistory;//[Offset: 0x5a8, Size: 0x50]
	<enum,TigerChallengeCategoryMap> Challenges;//[Offset: 0x6a8, Size: 0x50]
	FString CachedPlatformEntitlementsToken;//[Offset: 0x738, Size: 0x10]
	void UnlockNextSubEntryOfEntry(const FString InGrimoireEntryId, bool bInRandomize, bool bInForce);// 0x15810b0
	void TryLoginAutomatically(out const TigerLoginQueueToken InLoginQueueToken, Object* InCallbacks);// 0x1580fb0
	bool TryGetSelectedCharacter(out TigerPersistentPlayerCharacter OutSelectedCharacter);// 0x1580e90
	void TransactionalPlayerDataChanged__DelegateSignature(out const TigerPersistentPlayerTransactionalData TransactionalPlayerData);// 0x197e4f0
	void TigerDelegateChallengeProgressUpdated__DelegateSignature(bool bInNewDefinitions);// 0x197e4f0
	void SwitchCharacter(out const TigerPersistentCharacterID InCharacterSlot);// 0x1580e00
	bool SetCallbackObject(Object* Callbacks);// 0x1580d60
	void Server_UpdatePlatformEntitlementToken(FString InPlatformEntitlementToken);// 0x1580cc0
	void Server_UpdatePersistentThralls();// 0x1580c70
	void Server_UpdateOngoingCollectibles();// 0x1580c20
	void Server_UpdateLocationHistory(FString InLocationName, const float InTimeSpentAtLocation);// 0x1580b10
	void Server_UpdateGrimoireSuggestedArticlesData(const InDay(UInt32Property) InDay, const FString[] InEntryIds);// 0x15809e0
	void Server_UpdateActiveThrallMissions();// 0x1580990
	void Server_SwitchCharacter(TigerPersistentCharacterID InCharacterSlot);// 0x15808e0
	void Server_StartNewQuest(FString InQuestlineId, FString InQuestId);// 0x15807c0
	void Server_ResetReadDialogue();// 0x1580770
	void Server_ReinitializeDailyChallenges();// 0x1580750
	void Server_RegisterGrimoireEntryListAsRead(const InGrimoireEntryIdList(UInt32Property)[] InGrimoireEntryIdList, const bool bInForce);// 0x1580630
	void Server_RegisterGrimoireEntryAsRead(const InGrimoireEntryId(UInt32Property) InGrimoireEntryId, const bool bInForce);// 0x1580530
	void Server_RefreshPremiumCurrencyBalance();// 0x15804e0
	void Server_MatchPlayerDataUpdate();// 0x1580490
	void Server_MarkDialogueAsRead(const int InDialogueId, FString InNpcIdentifier, const byte InCategory);// 0x1580330
	void Server_ForceCompleteQuestActiveObjectiveSet(FString InQuestlineId, FString InQuestId);// 0x1580210
	void Server_ForceCompleteQuest(FString InQuestlineId, FString InQuestId);// 0x15800f0
	void Server_DeleteCharacter(const TigerPersistentCharacterID InCharacterSlot);// 0x1580040
	void Server_CreateCharacter(const TigerPersistentPlayerCharacter InCharacter);// 0x157ff30
	void Server_ClearQuests();// 0x157fee0
	void Server_ClearQuestLine(FString InQuestlineId, const bool bRemoveFromCompleteQuestsToo);// 0x157fdc0
	void Server_ClearQuest(FString InQuestlineId, FString InQuestId, const bool bRemoveFromCompleteQuestsToo);// 0x157fc40
	void Server_ChangeOutfit(InOutfitId(UInt64Property) InOutfitId);// 0x157fb80
	void Server_BuyStoreEntries(const TigerMetaStoreBuyPayload InMetaStoreBuyPayload, FString InPlatformEntitlementsToken, const int InClientPurchaseId);// 0x157fa10
	void Server_BuyItem(const TigerItemId InItemId, const TigerItemId InSoftCurrencyId, int InPurchaseId);// 0x157f8c0
	void SelectCharacter(out const TigerPersistentCharacterID InCharacterId);// 0x157f830
	void RegisterUnlockedGrimoireSubEntriesAsRead(const FString InGrimoireParentEntryId);// 0x157f740
	void RegisterGrimoireEntryAsUnlocked(const FString InGrimoireEntryId, bool bInForce);// 0x157f610
	void RegisterGrimoireEntryAsRead(const FString InGrimoireEntryId, const bool bInForce);// 0x157f4e0
	void PlayerInventoryChanged__DelegateSignature(TigerPersistentPlayerState* InPersistentPlayerState);// 0x197e4f0
	void PlayerCharacterChanged__DelegateSignature(TigerPersistentPlayerState* InPersistentPlayerState);// 0x197e4f0
	void OverridePlayerArchetypeForBenchmark(enum InArchetypeType);// 0x157f460
	void OnWeeklyChallengeValueChanged(const TigerChallenge* InChallenge);// 0x1509f70
	void OnTestChallengeValueChanged(const TigerChallenge* InChallenge);// 0x1509f70
	void OnSeasonLevelGained__DelegateSignature();// 0x197e4f0
	void OnRewardsLoaded__DelegateSignature();// 0x197e4f0
	void OnRep_RankPoints();// 0x157f400
	void OnRep_PlayerId();// 0x157f440
	void OnRep_DailyChallenges();// 0x157f420
	void OnRep_AccountChannel();// 0x157f400
	void OnQuestsRemoved__DelegateSignature();// 0x197e4f0
	void OnPlayerStateReplicatedToPlayerController(TigerPlayerState* InPlayerState);// 0x157f370
	void OnPlayerDataUpdatedForRequeue__DelegateSignature();// 0x197e4f0
	void OnPlayerDataUpdated__DelegateSignature();// 0x197e4f0
	void OnPlatformLoginResultReceived(SharkLoginResult InLoginResult);// 0x157f000
	void OnMutedStatusChanged__DelegateSignature(out const TigerMuteInfo InMuteInfo);// 0x197e4f0
	void OnMasteryChallengeValueChanged(const TigerChallenge* InChallenge);// 0x1509f70
	void OnLegalDocumentAccepted(enum InDocumentType);// 0x157ef80
	void OnInitialised__DelegateSignature();// 0x197e4f0
	void OnGetPlayerCharactersMulti__DelegateSignature(out const TigerPersistentPlayerCharacter[] InCharacters, FString InErrorString);// 0x197e4f0
	void OnGetPlayerCharacters__DelegateSignature(out const TigerPersistentPlayerCharacter[] InCharacters, FString InErrorString);// 0x197e4f0
	void OnDailyChallengeValueChanged(const TigerChallenge* InChallenge);// 0x1509f70
	void OnDailyChallengesInitialized__DelegateSignature();// 0x197e4f0
	void OnAllLegalDocumentsAccepted();// 0x157ef60
	void LoginWithSharkmobAccount(Object* InCallbacks, out const TigerLoginQueueToken InLoginQueueToken, out const SharkLoginResult InLoginDetails);// 0x157ed60
	bool IsQuestComplete(FString InQuestlineId, FString InQuestId);// 0x157ec60
	bool IsQuestActive(FString InQuestlineId, FString InQuestId);// 0x157eb60
	bool IsItemInPlayerInventory(out const class TigerInventoryItemBase ItemClassPath);// 0x157ea90
	bool HasReachedSeasonMaxLevel();// 0x157ea60
	bool HasReachedPlayerMaxLevel();// 0x157ea30
	bool HasLoadedChallenges();// 0x157ea00
	bool HasLoadedChallengeOfCategory(const enum InCategory);// 0x157e8a0
	bool HasCurrentSeasonBattlepass();// 0x157e870
	bool HasCompletedInitialisation();// 0x157e840
	void HandlePlatformAccountUpsell(Object* InWorldContextObject, LatentActionInfo InLatentInfo);// 0x157e750
	bool GrimoireEntryHasState(FString InGrimoireEntryId, const enum InState);// 0x157e660
	enum GetVersionCheckStatus();// 0x157e640
	TigerPersistentPlayerTransactionalData GetTransactionalPlayerData();// 0x157e1f0
	SharkUserId GetSharkmobUserId();// 0x157e610
	TigerPersistentPlayerCharacter GetSelectedCharacter();// 0x157e5e0
	TigerQuest*[] GetQuestsFromQuestlineOrdered(FString InQuestlineId, const bool InReverseCompletedQuests);// 0x157e4a0
	TigerQuestline* GetQuestlineFromId(const FString InQuestlineId);// 0x157e3a0
	TigerPersistentPlayerID GetPlayerId();// 0x157e370
	TigerPersistentPlayerData GetPlayerData();// 0x157e340
	void GetPlayerCharacters(out const delegate InDelegate);// 0x157e290
	enum GetPlayerChannel();// 0x157e270
	enum GetOnlinePrivilegeCheckStatus();// 0x157e250
	byte GetNumCharacterSlots();// 0x157e220
	TigerPersistentPlayerTransactionalData GetMutableTransactionalPlayerData();// 0x157e1f0
	enum GetLoginStatus();// 0x157e1d0
	int GetInventoryItemCount(out const class TigerInventoryItemBase ItemClassPath);// 0x157e100
	TigerSuggestedArticlesData GetGrimoireSuggestedArticlesData();// 0x157e010
	enum GetGrimoireEntryState(FString InGrimoireEntryId);// 0x157df60
	TigerGrimoireEntryStatusStruct[] GetGrimoireEntries();// 0x157dee0
	void GetCurrentSeasonLevelExperience(out float OutLevelCurrentExperience, out float OutExperienceRequiredBetweenLevels);// 0x157de00
	int GetCurrentSeasonLevel();// 0x157ddd0
	void GetCurrentPlayerLevelExperience(out float OutLevelCurrentExperience, out float OutExperienceRequiredBetweenLevels);// 0x157dcf0
	int GetCurrentPlayerLevel();// 0x157dcc0
	int GetCurrentArchetypeLevel();// 0x157dc90
	TigerChallenge*[] GetClosestChallengesToComplete(const int InNrOfChallenges, const bool bInOnlyDailyChallenges);// 0x157db80
	enum GetArchetypeType();// 0x157db50
	int GetArchetypeLevelByType(enum InType);// 0x157dac0
	TigerPersistentArchetypeTransactionalData GetArchetypeDataForCharacterId(out const TigerPersistentCharacterID InCharacterId);// 0x157da10
	FString[] GetAllQuestlineIdsOrdered();// 0x157d990
	TigerQuest* GetActiveQuestWithId(FString InQuestlineId, FString InQuestId);// 0x157d810
	void GetActiveQuestIds(out TigerQuestIdentifier[] InOutActiveQuests);// 0x157d6f0
	bool FindOutfitSetup(out const class TigerInventoryItemBase OutfitClassPath, out TigerPersistentOutfitSetup OutfitSetup);// 0x157d590
	void DeleteCharacter(out const TigerPersistentCharacterID InCharacterSlot);// 0x157d500
	void CreateCharacter(out const TigerPersistentPlayerCharacter InCharacter);// 0x157d400
	void Client_UpdateSeasonConfig(const TigerSeasonConfig InSeasonConfig, const DateTime InServerTime, bool bInDefer);// 0x157d2b0
	void Client_UpdateRankConfig(TigerRankConfigAsset* InRankConfig);// 0x157d220
	void Client_UpdateEventConfigStates(const TigerEventConfigClientState InEventConfig);// 0x157d0e0
	void Client_UpdateEventConfigData(const TigerEventConfigClientVisibleData InEventData);// 0x157cfc0
	void Client_UpdateChallengeOfCategory(const enum InCategory, const TigerChallengeTypeID InChallengeStorageID, const int InNewValue);// 0x157ceb0
	void Client_SetMuteStatus(const TigerMuteInfo InMuteInfo);// 0x157ce00
	void Client_SeasonLevelGained();// 0x157cdb0
	void Client_RefreshPremiumCurrencyBalanceResponse(const bool bInSuccess, const InBalance(UInt64Property) InBalance);// 0x157cce0
	void Client_PostUpdateChallenge(const int InNewValue, TigerChallenge* InChallenge, const enum InCategory);// 0x157cbd0
	void Client_OnTransactionalPlayerDataUpdated(const TigerPersistentPlayerTransactionalData TransactionalData);// 0x157ca60
	void Client_OnSeasonProgressUpdated(const TigerPersistentPlayerTransactionalData InTransactionalData);// 0x157c8f0
	void Client_OnPlayerDataUpdated(const TigerPersistentPlayerData InPlayerData, const TigerPersistentPlayerCardData InUpdatedPlayerCardData, const byte InEnqueueFlags);// 0x157c790
	void Client_OnInitialPlayerDataReceived();// 0x157c770
	void Client_OnCharacterUpdated(const TigerPersistentPlayerCharacter CharacterInfo);// 0x157c680
	void Client_OnBuyStoreEntriesResponse(const int InClientPurchaseId, const TigerBuyStoreEntryResponsePayload InBuyResponse, const DateTime InSeasonStartDate);// 0x157c540
	void Client_NewQuestStarted(FString InQuestlineId);// 0x157c4a0
	void Client_NewItemRecievedInInventory(const TigerItemId[] InPersistentItemIds);// 0x157c400
	void Client_NewGrimoireEntryViewed(InGrimoireEntryId(UInt32Property) InGrimoireEntryId);// 0x157c370
	void Client_DeleteCharacterResponse(bool bInCharacterWasDeleted, const TigerPersistentCharacterID InCharacterSlot);// 0x157c2a0
	void Client_CreateCharacterResponse(bool bInCharacterWasCreated, const TigerPersistentPlayerCharacter InCharacter);// 0x157c150
	void Client_BuyItemResponse(const bool bInSuccess, const TigerItemId InItemId, FString InErrorString, int InPurchaseId);// 0x157bfd0
	void CheckVersionValidity(Object* Callbacks);// 0x157bf40
	void CheckOnlinePrivileges(Object* InCallbacks);// 0x157beb0
	void BuyStoreEntries(out const TigerMetaStoreBuyPayloadElement[] InEntriesToBuy, out const delegate InBuyDelegate);// 0x157bd90
	void BuyItemResultDelegate__DelegateSignature(bool bSuccess, out const TigerItemId InItemId, FString InErrorString);// 0x197e4f0
	void BuyItem(out const TigerItemId InItemId, out const TigerItemId InSoftCurrencyId, out const delegate InDelegate);// 0x157bc30

--------------------------------
Class: TigerThrallSystem.ActorComponent.Object
	TigerLocalThrallData*[] PlayerThralls;//[Offset: 0xc8, Size: 0x10]
	<int,TigerLocalThrallMissionData*> LocalActiveMissions;//[Offset: 0xe0, Size: 0x50]
	void UpdateMissionTurns(const int InMissionId, const int InIncreaseTurns);// 0x15fbb20
	void SetMissionStatus(const int InMissionId, const bool bActive);// 0x15fba50
	bool RemoveThrallFromMission(const int InMissionId, enum InThrallId);// 0x15fb980
	bool RemoveThrallBySlot(const byte InSlotIndex);// 0x15fb8f0
	void OnMissionComplete__DelegateSignature(TigerLocalThrallMissionData* LocalMissionData);// 0x197e4f0
	bool HasThrall(const enum InThrallId);// 0x15fb390
	bool HasMissionId(const int InMissionId);// 0x15fb2f0
	int GetSharedXP();// 0x15fb0d0
	TigerThrallMission* GetRandomMission();// 0x15fb0a0
	TigerLocalThrallData* GetMutableThrallBySlot(const int InSlotIndex);// 0x15fb000
	TigerLocalThrallData* GetMutableThrallById(const enum InThrallId);// 0x15faf70
	TigerThrallMission* GetMissionForId(int InID);// 0x15faed0
	TigerLocalThrallData*[] GetAllThralls();// 0x15fac20
	TigerThrallMission*[] GetAllMissions();// 0x15faba0
	bool AssignThrallToMission(const int InMissionId, enum InThrallId);// 0x15fa310

--------------------------------
Class: TigerLocalThrallMissionData.Object
	delegate OnMissionProgression;//[Offset: 0x28, Size: 0x10]
	delegate OnMissionComplete;//[Offset: 0x38, Size: 0x10]
	TigerThrallMission* BaseMissionData;//[Offset: 0x48, Size: 0x8]
	TigerThrallSystem* ThrallSystem;//[Offset: 0x50, Size: 0x8]
	TigerPersistentMissionData PersistentMissionData;//[Offset: 0x58, Size: 0x20]
	void OnMissionTurnProgression__DelegateSignature(TigerLocalThrallMissionData* LocalMissionData);// 0x197e4f0
	void OnMissionComplete__DelegateSignature(TigerLocalThrallMissionData* LocalMissionData, enum SuccessRating);// 0x197e4f0
	void IncrementMissionByOneTurn();// 0x1544950

--------------------------------
Class: TigerThrallMission.DataAsset.Object
	int MissionId;//[Offset: 0x30, Size: 0x4]
	FName MissionName;//[Offset: 0x34, Size: 0x8]
	TigerThrallMissionObjective MissionObjective;//[Offset: 0x40, Size: 0x38]
	TigerThrallMissionMapMarkerData* MissionMarkers;//[Offset: 0x78, Size: 0x8]
	ThrallMissionRequirements MissionStatRequirements;//[Offset: 0x80, Size: 0x18]
	TigerThrallMissionReward MissionRewards;//[Offset: 0x98, Size: 0x18]
	int MissionLength;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: TigerThrallMissionObjective
	enum MissionType;//[Offset: 0x0, Size: 0x4]
	enum ObjectiveType;//[Offset: 0x4, Size: 0x4]
	FName ObjectiveName;//[Offset: 0x8, Size: 0x8]
	FString ObjectiveDescription;//[Offset: 0x10, Size: 0x10]
	enum[] SuccessStatIds;//[Offset: 0x20, Size: 0x10]
	int PercentReductionIfDiscovered;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TigerThrallMissionMapMarkerData.DataAsset.Object
	TigerThrallMissionMapMarker MissionMarker;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: TigerThrallMissionMapMarker
	Vector2D Position;//[Offset: 0x0, Size: 0x8]
	Texture2D* Icon;//[Offset: 0x8, Size: 0x8]
	Vector2D Size;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ThrallMissionRequirements
	int MinRequiredThalls;//[Offset: 0x0, Size: 0x4]
	int MaxRequiredThralls;//[Offset: 0x4, Size: 0x4]
	TigerThrallStats TotalRequiredStats;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerThrallStats
	int[] Stats;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerThrallMissionReward
	int XpReward;//[Offset: 0x0, Size: 0x4]
	TigerThrallMissionRewardItem[] Rewards;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerThrallMissionRewardItem
	class TigerInventoryItemBase* ItemClassPath;//[Offset: 0x0, Size: 0x28]
	int Count;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TigerPersistentMissionData
	int MissionId;//[Offset: 0x0, Size: 0x4]
	enum[] ThrallsOnMission;//[Offset: 0x8, Size: 0x10]
	int Progress;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TigerLocalThrallData.Object
	TigerBaseThrallData* BaseData;//[Offset: 0x28, Size: 0x8]
	TigerPersistentThrallData PersistentData;//[Offset: 0x30, Size: 0x30]
	void SetStats(const TigerThrallStats InStats);// 0x1544f00
	void SetStat(const enum InType, const int InValue);// 0x1544e30
	void RemoveAbility(const enum InAbility);// 0x1544bf0
	bool HasAbility(const enum InAbility);// 0x1544890
	TigerThrallUpgradeScreenInformation GetUpgradeScreenInfo();// 0x1544810
	TigerThrallStats GetThrallStats();// 0x1544780
	enum GetThrallId();// 0x15447e0
	TigerThrallStats GetMutableThrallStats();// 0x1544780
	TigerThrallDetailsScreenInformation GetDetailsScreenInfo();// 0x15445d0
	TigerThrallCharacterCardInformation GetCharacterCardInfo();// 0x1544400
	void DecreaseStatModifierTurnsByOne();// 0x1544380
	TigerThrallStats CalculateTrueStats();// 0x1544300
	int CalculateTotalInjuryLevel();// 0x15442d0
	void AddStats(const TigerThrallStats InStatsToAdd);// 0x15441f0
	void AddStat(const enum InType, const int InToAdd);// 0x1544120
	void AddAbility(const enum InAbility);// 0x15440a0

--------------------------------
Class: TigerBaseThrallData.DataAsset.Object
	enum ThrallId;//[Offset: 0x30, Size: 0x1]
	FText ThrallName;//[Offset: 0x38, Size: 0x18]
	FText ThrallDescription;//[Offset: 0x50, Size: 0x18]
	FText ThrallHintText;//[Offset: 0x68, Size: 0x18]
	Texture2D*[] ThrallPortraits;//[Offset: 0x80, Size: 0x10]
	FText ThrallKeepsakeName;//[Offset: 0x90, Size: 0x18]
	Texture2D* ThrallKeepsakePortrait;//[Offset: 0xa8, Size: 0x8]
	TigerThrallStats StartingStats;//[Offset: 0xb0, Size: 0x10]
	TigerGrimoireEntry* GrimoireEntry;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: TigerPersistentThrallData
	TigerThrallStats ThrallStats;//[Offset: 0x0, Size: 0x10]
	byte ThrallAbilities;//[Offset: 0x10, Size: 0x1]
	enum ThrallId;//[Offset: 0x11, Size: 0x1]
	int8 ThrallInjuryLevel;//[Offset: 0x12, Size: 0x1]
	int8 ThrallRating;//[Offset: 0x13, Size: 0x1]
	TigerThrallStatModifier[] ThrallStatModifiers;//[Offset: 0x18, Size: 0x10]
	int ThrallExp;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TigerThrallStatModifier
	int InjuryLevel;//[Offset: 0x0, Size: 0x4]
	FText ModifierName;//[Offset: 0x8, Size: 0x18]
	UInt32Property TurnsRemaining;//[Size: 0x4]
	TigerThrallStats StatModifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TigerThrallUpgradeScreenInformation
	int[] ThrallStatsArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerThrallDetailsScreenInformation
	FText ThrallInjuries;//[Offset: 0x0, Size: 0x18]
	FText ThrallDescription;//[Offset: 0x18, Size: 0x18]
	FText ThrallHintText;//[Offset: 0x30, Size: 0x18]
	Texture2D* ThrallKeepsakePortrait;//[Offset: 0x48, Size: 0x8]
	int[] ThrallStatsArray;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TigerThrallCharacterCardInformation
	FText ThrallName;//[Offset: 0x0, Size: 0x18]
	Texture2D* ThrallPortrait;//[Offset: 0x18, Size: 0x8]
	int ThrallExp;//[Offset: 0x20, Size: 0x4]
	float ThrallExpNormalised;//[Offset: 0x24, Size: 0x4]
	float ThrallHealthNormalised;//[Offset: 0x28, Size: 0x4]
	TigerThrallAbility[] ThrallAbilities;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerThrallAbility
	FText AbilityName;//[Offset: 0x0, Size: 0x18]
	Texture2D* AbilityIcon;//[Offset: 0x18, Size: 0x8]
	enum AbilityId;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: TigerCollectibleSystem.ActorComponent.Object
	class TigerExperienceEvent* CollectiblePickupExpEvent;//[Offset: 0xb0, Size: 0x8]
	TigerItemAsset* GenericCollectibleItemAsset;//[Offset: 0xb8, Size: 0x8]
	void Server_AwardCollectible(const TigerCollectibleData* InCollectible);// 0x147c750
	void ProcessCollectible(out const FText InCollectibleId);// 0x14c65d0
	TigerCollectibleData* GetCollectibleWithName(out const FText InCollectibleName);// 0x14c5dc0
	void Client_ProcessCollectible(const InCollectibleId(UInt32Property) InCollectibleId);// 0x14c5a30

--------------------------------
Class: TigerCollectibleData.DataAsset.Object
	UInt32Property CollectibleId;//[Size: 0x4]
	FText CollectibleName;//[Offset: 0x38, Size: 0x18]
	FText CollectibleDescription;//[Offset: 0x50, Size: 0x18]
	int TotalRequired;//[Offset: 0x68, Size: 0x4]
	TigerGrimoireEntry* GrimoireEntryToUnlock;//[Offset: 0x70, Size: 0x8]
	TigerCollectibleGrimoireEntrySet* GrimoireEntrySet;//[Offset: 0x78, Size: 0x8]
	TigerItemId[] RewardIds;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: TigerCollectibleGrimoireEntrySet.DataAsset.Object
	TigerGrimoireEntry*[] Set;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerExperienceEvent.Object
	int BaseExperienceGain;//[Offset: 0x28, Size: 0x4]
	Texture2D* EventIcon;//[Offset: 0x30, Size: 0x8]
	FText Description;//[Offset: 0x38, Size: 0x18]
	void GetExperienceAmount(TigerPlayer* Player, TigerCharacter* EventTiedCharacter, enum BalanceMode, out int OutOwnPlayerExperienceGain, out int OutExperienceToAddToEveryGroupMemberIncludingSelf);// 0x14feeb0
	int GetBalanceModeExperience(const enum InBalanceMode);// 0x14fee20

--------------------------------
Class: TigerLoginQueueToken
	FString Content;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerPersistentPlayerCharacter
	TigerPersistentCharacterID UniqueCharacterID;//[Offset: 0x0, Size: 0x1]
	TigerPersistentPlayerCharacterData Data;//[Offset: 0x8, Size: 0xe0]
	int64 LastUsedAt;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: TigerPersistentPlayerCharacterData
	enum ArchetypeType;//[Offset: 0x0, Size: 0x1]
	TigerCharacterAppearance CharacterAppearance;//[Offset: 0x8, Size: 0xc8]
	SelectedPerks(UInt64Property)[] SelectedPerks;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: TigerMetaStoreBuyPayload
	TigerMetaStoreBuyPayloadElement[] EntriesToBuy;//[Offset: 0x0, Size: 0x10]
	UInt32Property TotalCost;//[Size: 0x4]

--------------------------------
Class: TigerMetaStoreBuyPayloadElement
	UInt64Property EntryToBuy;//[Size: 0x8]
	int QuantityToBuy;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SharkUserId
	FString ID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerChallengeCategoryMap
	<TigerChallengeTypeID,TigerChallenge*> Challenges;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerMuteInfo
	bool bIsMuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte Reason;//[Offset: 0x1, Size: 0x1]
	FString EndsAt;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerPersistentPlayerData
	TigerQuestPersistentProgress QuestProgress;//[Offset: 0x0, Size: 0x50]
	TigerChallengePersistentProgressMap ChallengeMap;//[Offset: 0x50, Size: 0x50]
	TigerPersistentSeasonGameModeStats SeasonGameModeStats;//[Offset: 0xa0, Size: 0x58]
	TigerPersistentSeasonMatchMedalStats SeasonMedalStats;//[Offset: 0xf8, Size: 0x18]
	TigerLocationPersistentProgress LocationProgress;//[Offset: 0x110, Size: 0x50]
	int MatchesPlayed;//[Offset: 0x160, Size: 0x4]
	int[] MatchesPlayedPerArchetype;//[Offset: 0x168, Size: 0x10]
	TigerGrimoireEntryStatusStruct[] GrimoireEntries;//[Offset: 0x178, Size: 0x10]
	int[] ReadDialogues;//[Offset: 0x188, Size: 0x10]
	TigerPersistentThrallData[] PersistentThrallData;//[Offset: 0x198, Size: 0x10]
	TigerPersistentMissionData[] PersistentThrallMissions;//[Offset: 0x1a8, Size: 0x10]
	TigerPersistentCollectibleData[] PersistentCollectibleData;//[Offset: 0x1b8, Size: 0x10]
	int SharedThrallExp;//[Offset: 0x1c8, Size: 0x4]
	TigerSuggestedArticlesData GrimoireSuggestedArticlesData;//[Offset: 0x1d0, Size: 0x18]
	TigerReadDialogueCategoryWrapper[] ReadDialogueCategoriesContainer;//[Offset: 0x1e8, Size: 0x10]

--------------------------------
Class: TigerQuestPersistentProgress
	<FString,TigerQuestLinePersistentProgress> Progress;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerQuestLinePersistentProgress
	<FString,TigerQuestPersistentProgressEntry> Progress;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerQuestPersistentProgressEntry
	bool bHasDistributedReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	TigerQuestObjectivePersistentProgressEntry[] ObjectivesProgress;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerQuestObjectivePersistentProgressEntry
	FString Guid;//[Offset: 0x0, Size: 0x10]
	int Progress;//[Offset: 0x10, Size: 0x4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerChallengePersistentProgressMap
	<enum,TigerChallengePersistentProgress> ChallengeProgress;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerChallengePersistentProgress
	<TigerChallengeTypeID,TigerChallengePersistentProgressEntry> Progress;//[Offset: 0x0, Size: 0x50]
	int Date;//[Offset: 0x50, Size: 0x4]
	int LastRewardTrackIndex;//[Offset: 0x54, Size: 0x4]
	int[] LastRewardTrackIndices;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: TigerChallengePersistentProgressEntry
	int Progress;//[Offset: 0x0, Size: 0x4]
	int Tier;//[Offset: 0x4, Size: 0x4]
	bool bHasDistributedReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIsPersistentChallenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	int LastTierRewardDistributed;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerPersistentSeasonGameModeStats
	<FString,TigerPersistentGameModeMatchStats> GameModeStats;//[Offset: 0x0, Size: 0x50]
	int64 SeasonId;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: TigerPersistentGameModeMatchStats
	TigerSeasonMatchStat[] Stats;//[Offset: 0x0, Size: 0x10]
	int MatchesPlayed;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerSeasonMatchStat
	int SeasonTotal;//[Offset: 0x0, Size: 0x4]
	int SeasonBest;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerPersistentSeasonMatchMedalStats
	MatchMedalCount[] MatchMedalCounts;//[Offset: 0x0, Size: 0x10]
	int64 SeasonId;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MatchMedalCount
	FString MedalName;//[Offset: 0x0, Size: 0x10]
	UInt32Property Count;//[Size: 0x4]

--------------------------------
Class: TigerLocationPersistentProgress
	<FString,TigerLocationPersistentProgressEntry> Progress;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerLocationPersistentProgressEntry
	FString LocationName;//[Offset: 0x0, Size: 0x10]
	float TimeSpentInLocation;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerGrimoireEntryStatusStruct
	UInt32Property EntryId;//[Size: 0x4]
	byte State;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: TigerPersistentCollectibleData
	UInt32Property CollectibleId;//[Size: 0x4]
	byte CollectibleCount;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: TigerSuggestedArticlesData
	int Day;//[Offset: 0x0, Size: 0x4]
	FString[] EntryIds;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerReadDialogueCategoryWrapper
	FString NpcIdentifier;//[Offset: 0x0, Size: 0x10]
	byte[] ReadCategories;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerSeasonConfig
	UInt32Property ID;//[Size: 0x4]
	DateTime SeasonStartDate;//[Offset: 0x8, Size: 0x8]
	DateTime SeasonEndDate;//[Offset: 0x10, Size: 0x8]
	DateTime BattlepassStartDate;//[Offset: 0x18, Size: 0x8]
	DateTime BattlepassEndDate;//[Offset: 0x20, Size: 0x8]
	TigerItemId BattlePassItemId;//[Offset: 0x28, Size: 0x8]
	UInt32Property BattlePassPrice;//[Size: 0x4]
	Texture2D* BattlepassBannerTexture;//[Offset: 0x38, Size: 0x28]
	TigerItemIdWithPrice[] SpecialItemPrices;//[Offset: 0x60, Size: 0x10]
	TigerSeasonConfig_RewardTier[] FreeRewards;//[Offset: 0x70, Size: 0x10]
	TigerSeasonConfig_RewardTier[] BattlepassRewards;//[Offset: 0x80, Size: 0x10]
	TigerSeasonConfig_RewardTier[] PlayerLevelRewards;//[Offset: 0x90, Size: 0x10]
	TigerSeasonConfig_ArchetypeRewards ArchetypeLevelRewards;//[Offset: 0xa0, Size: 0xa0]
	TigerSeasonConfig_WeeklyChallengeCollection[] WeeklyChallenges;//[Offset: 0x140, Size: 0x10]
	TigerItemId DailyChallengeExpReward;//[Offset: 0x150, Size: 0x8]
	TigerItemId PersistentDailyChallengeTokenReward;//[Offset: 0x158, Size: 0x8]
	TigerSeasonConfig_DailyRewardCollection DailyRewards;//[Offset: 0x160, Size: 0x20]
	FName DefaultVendorSubLevelName;//[Offset: 0x180, Size: 0x8]
	TigerItemId SoftCurrencyMatchRewardItemId;//[Offset: 0x188, Size: 0x8]
	float SoftCurrencyMatchRewardMultiplier;//[Offset: 0x190, Size: 0x4]
	RuntimeFloatCurve SoftCurrencyPlacementBonus;//[Offset: 0x198, Size: 0x88]
	TigerSeasonExperiences SeasonExperiences;//[Offset: 0x220, Size: 0xf8]
	TigerPlayerExperiences PlayerExperiences;//[Offset: 0x318, Size: 0x50]
	TigerExpLevelRequirements SeasonExpRequirements;//[Offset: 0x368, Size: 0x18]
	TigerExpLevelRequirements ArchetypeExpRequirements;//[Offset: 0x380, Size: 0x18]
	TigerExpLevelRequirements PlayerExpRequirements;//[Offset: 0x398, Size: 0x18]

--------------------------------
Class: TigerItemIdWithPrice
	TigerItemId ItemId;//[Offset: 0x0, Size: 0x8]
	TigerItemPrice Price;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerItemPrice
	int Amount;//[Offset: 0x0, Size: 0x4]
	TigerItemId SoftCurrencyId;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerSeasonConfig_RewardTier
	TigerItemId[] ItemIds;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerSeasonConfig_ArchetypeRewards
	TigerSeasonConfig_Archetypes Archetypes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerSeasonConfig_Archetypes
	TigerSeasonConfig_RewardTier[] Rewards;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerSeasonConfig_WeeklyChallengeCollection.TigerChallengeConfigCollection
	TigerWeeklyChallengeInstanceDefinition[] ChallengeDefinitions;//[Offset: 0x18, Size: 0x10]
	DateTime UnlockDate;//[Offset: 0x28, Size: 0x8]
	DateTime LockDate;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerWeeklyChallengeInstanceDefinition.TigerChallengeInstanceDefinition
	TigerChallengeTypeID ChallengeTypeID;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TigerSeasonConfig_DailyRewardCollection
	TigerItemId[] TrackRewardIds;//[Offset: 0x0, Size: 0x10]
	TigerSeasonConfig_DailyFinalReward[] DailyFinalRewardWeeks;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerSeasonConfig_DailyFinalReward
	TigerItemId DailyFinalRewardIds;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerSeasonExperiences
	<enum,TigerPlayerEventToSeasonExperienceSource> PlayerEventBasedExperiences;//[Offset: 0x0, Size: 0x50]
	int[] TopPlacementExperience;//[Offset: 0x50, Size: 0x10]
	TigerSeasonExperienceSourceModifiers ExperienceSourceModifiers;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TigerPlayerEventToSeasonExperienceSource
	enum ExperienceSource;//[Offset: 0x0, Size: 0x1]
	int ExperienceAmount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerSeasonExperienceSourceModifiers
	int ExperienceCap;//[Offset: 0x0, Size: 0x4]
	float ExperienceMultiplier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerPlayerExperiences
	TigerPlayerMedalTiers ExperienceSourceModifiers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerEventConfigClientState
	<SerializedActivationStates_Key(UInt32Property),enum> SerializedActivationStates;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerEventConfigClientVisibleData
	<SerializedEventData_Key(UInt32Property),TigerEventConfigClientEventData> SerializedEventData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerEventConfigClientEventData
	<FString,FString> Title;//[Offset: 0x0, Size: 0x50]
	<FString,FString> Description;//[Offset: 0x50, Size: 0x50]
	<FString,FString> BannerImageURL;//[Offset: 0xa0, Size: 0x50]
	DateTime StartDate;//[Offset: 0xf0, Size: 0x8]
	DateTime EndDate;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: TigerPersistentPlayerCardData
	TigerItemId CharacterIconId;//[Offset: 0x0, Size: 0x8]
	TigerItemId CharacterCardShapeMaskId;//[Offset: 0x8, Size: 0x8]
	TigerItemId CharacterCardBackgroundTextureId;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerBuyStoreEntryResponsePayload
	TigerItemId[] BoughtItems;//[Offset: 0x0, Size: 0x10]
	BoughtItemQuantities(UInt32Property)[] BoughtItemQuantities;//[Offset: 0x10, Size: 0x10]
	enum ResponseCode;//[Offset: 0x20, Size: 0x1]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: TigerGroupInvitation
	TigerGroupId GroupID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerGroupId
	Guid ID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerWeatherController.Actor.Object
	<FName,SkyOverrides> WorldSpecificOverrides;//[Offset: 0x228, Size: 0x50]
	SkyTextures GetWorldSkyTextureOverride(const FName InWeatherScenarioName);// 0x162c830
	PostProcessOverrides GetPostProcessOverride(const FName InWeatherScenarioName);// 0x162c590
	enum GetFogVariationOverride(const FName InWeatherScenarioName);// 0x162c4f0

--------------------------------
Class: SkyTextures
	TextureCube* SkyTextureOverride;//[Offset: 0x0, Size: 0x28]
	TextureCube* FlowmapTextureOverride;//[Offset: 0x28, Size: 0x28]
	TextureCube* SkyLightTextureOverride;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: PostProcessOverrides
	float Temperature;//[Offset: 0x0, Size: 0x4]
	float Tint;//[Offset: 0x4, Size: 0x4]
	LinearColor Saturation;//[Offset: 0x8, Size: 0x10]
	LinearColor Contrast;//[Offset: 0x18, Size: 0x10]
	LinearColor Gamma;//[Offset: 0x28, Size: 0x10]
	LinearColor Gain;//[Offset: 0x38, Size: 0x10]
	LinearColor Offset;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SkyOverrides
	SkyTextures SkyTexturesOverride;//[Offset: 0x0, Size: 0x78]
	enum FogVariationOverride;//[Offset: 0x78, Size: 0x1]
	PostProcessOverrides PostProcessOverride;//[Offset: 0x7c, Size: 0x58]

--------------------------------
Class: TigerVoipTalkerState.Object
	delegate InputDeviceChanged;//[Offset: 0x28, Size: 0x10]
	delegate OutputDeviceChanged;//[Offset: 0x38, Size: 0x10]
	void VoipDeviceChanged__DelegateSignature();// 0x197e4f0
	bool IsPlayerTalking(out const TigerPersistentVoipID InPlayerId);// 0x36be4b0
	bool IsPlayerBlocked(out const TigerPersistentVoipID InPlayerId);// 0x36be3f0
	bool HasAcknowledgedPlayerHasJoined(out const TigerPersistentVoipID InPlayerId);// 0x36be330
	FText[] GetOutputDevices();// 0x36be300
	FText[] GetInputDevices();// 0x36be2d0
	bool AcknowledgedPlayerHasJoined(out const TigerPersistentVoipID InPlayerId, const bool bInReset);// 0x36be1d0

--------------------------------
Class: TigerMatchStats
	TigerPlayerMatchStats PlayerMatchStats;//[Offset: 0x0, Size: 0x38]
	TigerPlayerMatchMetaStats OwnPlayerStats;//[Offset: 0x38, Size: 0x48]
	TigerProgressedChallengeWrapper[] ProgressedChallenges;//[Offset: 0x80, Size: 0x10]
	byte InitialGroupCount;//[Offset: 0x90, Size: 0x1]
	enum GroupingMode;//[Offset: 0x91, Size: 0x1]
	enum MatchMode;//[Offset: 0x92, Size: 0x1]
	Guid MatchID;//[Offset: 0x94, Size: 0x10]
	FString MatchReporterId;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: TigerPlayerMatchStats
	enum KillerType;//[Offset: 0x0, Size: 0x1]
	FString KillerName;//[Offset: 0x8, Size: 0x10]
	int PlayerScore;//[Offset: 0x18, Size: 0x4]
	TigerPlayerPostMatchScreenHighlightStat Placement;//[Offset: 0x1c, Size: 0xc]
	TigerPlayerPostMatchScreenHighlightStat[] Stats;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TigerPlayerPostMatchScreenHighlightStat
	int MatchStatValue;//[Offset: 0x0, Size: 0x4]
	float SeasonAverage;//[Offset: 0x4, Size: 0x4]
	enum MatchStatType;//[Offset: 0x8, Size: 0x1]
	bool bIsNewSeasonBest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerPlayerMatchMetaStats
	TigerSeasonSessionExperience SeasonSessionExperienceAccumulated;//[Offset: 0x0, Size: 0x18]
	int SeasonExpBeforeSession;//[Offset: 0x18, Size: 0x4]
	int ArchetypeExpBeforeSession;//[Offset: 0x1c, Size: 0x4]
	int ArchetypeExperienceAccumulated;//[Offset: 0x20, Size: 0x4]
	enum ArchetypeType;//[Offset: 0x24, Size: 0x1]
	int SoftCurrencyBeforeSession;//[Offset: 0x28, Size: 0x4]
	int SoftCurrencyAccumulated;//[Offset: 0x2c, Size: 0x4]
	TigerItemId SoftCurrencyItemId;//[Offset: 0x30, Size: 0x8]
	int PlayerExpBeforeSession;//[Offset: 0x38, Size: 0x4]
	int PlayerExperienceAccumulated;//[Offset: 0x3c, Size: 0x4]
	int RpBeforeSession;//[Offset: 0x40, Size: 0x4]
	int RpAccumulated;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: TigerSeasonSessionExperience
	int[] SeasonExperienceAccumulatedSources;//[Offset: 0x0, Size: 0x10]
	int SeasonExperienceAccumulated;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerProgressedChallengeWrapper
	FText ChallengeName;//[Offset: 0x0, Size: 0x18]
	FText ChallengeVariableName;//[Offset: 0x18, Size: 0x18]
	FText ChallengeDescription;//[Offset: 0x30, Size: 0x18]
	FString ChallengeTypeName;//[Offset: 0x48, Size: 0x10]
	int TargetValue;//[Offset: 0x58, Size: 0x4]
	int PostSessionProgress;//[Offset: 0x5c, Size: 0x4]
	int PreSessionProgress;//[Offset: 0x60, Size: 0x4]
	enum ChallengeType;//[Offset: 0x64, Size: 0x1]
	bool bHasTiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	int Tier;//[Offset: 0x68, Size: 0x4]
	int[] TieredTargetValues;//[Offset: 0x70, Size: 0x10]
	TigerChallengeTypeID ChallengeTypeID;//[Offset: 0x80, Size: 0x4]
	TigerInventoryItemBase* ChallengeReward;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerWorldCompositionCellComponent.SceneComponent.ActorComponent.Object
	ShapeComponent* ShapeComponent;//[Offset: 0x1f8, Size: 0x8]
	TigerWorldCompositionCellComponent*[] SubCellComponents;//[Offset: 0x200, Size: 0x10]
	TigerWorldCompositionGrid* WorldGrid;//[Offset: 0x210, Size: 0x8]
	FName StreamLevelPath;//[Offset: 0x218, Size: 0x8]
	void HandleOnLevelUnloaded();// 0x1630610
	void HandleOnLevelLoaded();// 0x16305f0

--------------------------------
Class: TigerWorldCompositionGrid.Actor.Object
	delegate OnCellStartedLoadingEvent;//[Offset: 0x228, Size: 0x10]
	delegate OnCellFinishedLoadingEvent;//[Offset: 0x238, Size: 0x10]
	delegate OnCellStartedUnloadingEvent;//[Offset: 0x248, Size: 0x10]
	delegate OnCellFinishedUnloadingEvent;//[Offset: 0x258, Size: 0x10]
	enum Layout;//[Offset: 0x268, Size: 0x1]
	Vector GridExtent;//[Offset: 0x26c, Size: 0xc]
	int LevelDepth;//[Offset: 0x278, Size: 0x4]
	float CellTriggerSizeBias;//[Offset: 0x27c, Size: 0x4]
	World*[] BlackListedLevels;//[Offset: 0x280, Size: 0x10]
	World*[] AdditionalLevels;//[Offset: 0x290, Size: 0x10]
	World*[] AlwaysLoadedLevels;//[Offset: 0x2a0, Size: 0x10]
	TigerWorldCompositionCellComponent* RootCellComponent;//[Offset: 0x2b0, Size: 0x8]
	TigerWorldCompositionCellComponent*[] LoadingCells;//[Offset: 0x2b8, Size: 0x10]
	TigerWorldCompositionCellComponent*[] LoadedCells;//[Offset: 0x2c8, Size: 0x10]
	TigerWorldCompositionCellComponent*[] UnloadingCells;//[Offset: 0x2d8, Size: 0x10]
	TigerRecentlyStreamedCellEntries[] RecentlyLoadedCells;//[Offset: 0x2e8, Size: 0x10]
	TigerRecentlyStreamedCellEntries[] RecentlyUnloadedCells;//[Offset: 0x2f8, Size: 0x10]
	TigerStreamingPlayer[] StreamingPlayers;//[Offset: 0x308, Size: 0x10]
	void PrespawnStreamingFinished__DelegateSignature();// 0x197e4f0
	void HandleOnCellStartedUnloadingEvent(TigerWorldCompositionCellComponent* Cell);// 0x1630560
	void HandleOnCellStartedLoadingEvent(TigerWorldCompositionCellComponent* Cell);// 0x16304d0
	void HandleOnCellFinishedUnloadingEvent(TigerWorldCompositionCellComponent* Cell);// 0x1630440
	void HandleOnCellFinishedLoadingEvent(TigerWorldCompositionCellComponent* Cell);// 0x16303b0
	void CellStartedUnloading__DelegateSignature(TigerWorldCompositionCellComponent* Cell);// 0x197e4f0
	void CellStartedLoading__DelegateSignature(TigerWorldCompositionCellComponent* Cell);// 0x197e4f0
	void CellFinishedUnloading__DelegateSignature(TigerWorldCompositionCellComponent* Cell);// 0x197e4f0
	void CellFinishedLoading__DelegateSignature(TigerWorldCompositionCellComponent* Cell);// 0x197e4f0

--------------------------------
Class: TigerRecentlyStreamedCellEntries
	TigerWorldCompositionCellComponent* Cell;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerStreamingPlayer
	PlayerController* PlayerController;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerLocalAIController.TigerLocalAIControllerBase.AIController.Controller.Actor.Object
	float FleeMaxDistanceSquared;//[Offset: 0x528, Size: 0x4]
	float FacingConeHalfAngle;//[Offset: 0x52c, Size: 0x4]
	float MinimumAcceptableHeadshotDamageMultiplier;//[Offset: 0x530, Size: 0x4]
	float HeadshotChance;//[Offset: 0x534, Size: 0x4]
	class TigerBuff[] BuffsOnSelfToIgnoreTargetsList;//[Offset: 0x538, Size: 0x10]
	class TigerBuff[] BuffsOnTargetsToIgnoreList;//[Offset: 0x548, Size: 0x10]
	TigerPlayerState* TigerPlayerState;//[Offset: 0x560, Size: 0x8]
	bool SetMainStateWandering();// 0x1544e00
	bool SetMainStateInBloodVein();// 0x1544dd0
	bool SetBBMainState(enum InNewState);// 0x1544c70

--------------------------------
Class: TigerLocalAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x330, Size: 0x8]
	TigerInteractionControllerComponent* InteractionControllerComponent;//[Offset: 0x338, Size: 0x8]
	float LowShieldThreshold;//[Offset: 0x340, Size: 0x4]
	TigerPlayerController* LocalPlayerController;//[Offset: 0x368, Size: 0x8]
	float SightRange;//[Offset: 0x370, Size: 0x4]
	float LoseSightModifier;//[Offset: 0x374, Size: 0x4]
	float VisionAngleDegrees;//[Offset: 0x378, Size: 0x4]
	float AimOffsetAmount;//[Offset: 0x37c, Size: 0x4]
	float AimAccuracy;//[Offset: 0x380, Size: 0x4]
	float MinimumAcceptableDamageMultiplier;//[Offset: 0x384, Size: 0x4]
	TigerPlayerCameraManager* TigerPlayerCameraManager;//[Offset: 0x388, Size: 0x8]
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x390, Size: 0x8]
	AIPerceptionComponent* AIPerceptionComp;//[Offset: 0x398, Size: 0x8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x3a0, Size: 0x8]
	MovementComponent* PlayerMovComp;//[Offset: 0x3a8, Size: 0x8]
	PathFollowingComponent* PathFollowingComp;//[Offset: 0x3b0, Size: 0x8]
	Pawn* LocalPawn;//[Offset: 0x3b8, Size: 0x8]
	TigerPlayer* PlayerPawn;//[Offset: 0x3c0, Size: 0x8]
	Actor* BotHasJustBeenHitBy;//[Offset: 0x3e0, Size: 0x8]
	<enum,TigerAIWeaponUseDesc> WeaponUseDescs;//[Offset: 0x3e8, Size: 0x50]
	<Actor*,float> TemporaryIgnoredTargets;//[Offset: 0x450, Size: 0x50]
	TigerCharacter* FocusCharacter;//[Offset: 0x4b0, Size: 0x8]
	float LowHealthThreshold;//[Offset: 0x4dc, Size: 0x4]
	float BotDifficulty;//[Offset: 0x500, Size: 0x4]
	Actor*[] PerceivedActors;//[Offset: 0x510, Size: 0x10]
	void SetTargetPosition(Vector InNewPosition, enum TargetType);// 0x1544fe0
	void SetLureTarget(Object* InNewLureTarget, enum TargetType);// 0x1544d00
	void LocalUnPossess();// 0x1544a30
	void LocalPossess(Pawn* InPawn);// 0x15449a0
	TigerPlayerController* GetPlayerController();// 0x15447c0

--------------------------------
Class: TigerInteractionControllerComponent.ActorComponent.Object
	delegate OnTargetInteractionChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnTargetInteractionBlocked;//[Offset: 0xc0, Size: 0x10]
	delegate OnAddNearbyInteraction;//[Offset: 0xd0, Size: 0x10]
	delegate OnRemoveNearbyInteraction;//[Offset: 0xe0, Size: 0x10]
	HashedNPCsToTalkTo(UInt32Property)[] HashedNPCsToTalkTo;//[Offset: 0x108, Size: 0x10]
	float DiablerizeDotProductCutOff;//[Offset: 0x118, Size: 0x4]
	float HeldInputInteractionTime;//[Offset: 0x11c, Size: 0x4]
	float InteractionLineTraceLength;//[Offset: 0x120, Size: 0x4]
	float InteractionLineTraceThickness;//[Offset: 0x124, Size: 0x4]
	bool AllowAutomaticPickUpBehindPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	float AutoPickUpCoolDown;//[Offset: 0x12c, Size: 0x4]
	Vector AutoPickUpBoxVolumeExtents;//[Offset: 0x130, Size: 0xc]
	float CloseInteractionSphereSize;//[Offset: 0x13c, Size: 0x4]
	float CloseInteractionCheckInterval;//[Offset: 0x140, Size: 0x4]
	TigerPlayerController* TigerPC;//[Offset: 0x148, Size: 0x8]
	TigerPlayer* TigerPlayerPawn;//[Offset: 0x150, Size: 0x8]
	TigerCharacter* TargetCharacter;//[Offset: 0x168, Size: 0x8]
	TigerCharacter* TrainerTarget;//[Offset: 0x170, Size: 0x8]
	TigerItemWorldRepresentation* InteractionItem;//[Offset: 0x178, Size: 0x8]
	TigerItemWorldRepresentation* LastAutoPickupItem;//[Offset: 0x180, Size: 0x8]
	TigerInteractiveObject* TargetInteractiveObject;//[Offset: 0x188, Size: 0x8]
	TigerBaseNPC* PotentialFeedingTarget;//[Offset: 0x190, Size: 0x8]
	OverlapResult[] TriggerVolumeOverlaps;//[Offset: 0x1a8, Size: 0x10]
	HitResult[] InteractionSweepResults;//[Offset: 0x1c8, Size: 0x10]
	HitResult[] InteractionTraceResults;//[Offset: 0x1e8, Size: 0x10]
	OverlapResult[] AutoPickUpInteractionOverlaps;//[Offset: 0x208, Size: 0x10]
	TigerBaseNPC* CachedVendor;//[Offset: 0x24c, Size: 0x8]
	void StopVendorInteraction();// 0x152a860
	void StopObjectInteraction();// 0x152a840
	bool ShouldBeInDialogueCameraState();// 0x152a7e0
	void SetShouldBeInDialogueCameraState();// 0x152a7c0
	void Server_StopVendorInteraction();// 0x152a770
	void Server_StopPhysicalInteraction(const enum InStoppedInteraction);// 0x152a6c0
	void Server_StopObjectInteraction(TigerInteractiveObject* Target);// 0x152a600
	void Server_StopJudgeFeed();// 0x152a5b0
	void Server_StopFeeding();// 0x152a560
	void Server_StartVendorInteraction(TigerBaseNPC* InInteractingCharacter);// 0x152a4a0
	void Server_StartRevive(TigerPlayer* Target);// 0x152a3e0
	void Server_StartObjectInteraction(TigerInteractiveObject* InTarget);// 0x152a320
	void Server_StartJudgeFeed(TigerJudge* Target);// 0x152a260
	void Server_StartFeeding(TigerBaseNPC* InTargetCharacter);// 0x152a1a0
	void Server_StartDiablerize(TigerPlayer* Target);// 0x152a0e0
	void RemoveNPCToTalkTo(out const FText InNPCName);// 0x1529f20
	void OnRemoveNearbyInteraction__DelegateSignature(TigerInteractiveObject* InInteractionObject);// 0x197e4f0
	void OnInteractionChanged__DelegateSignature(enum InInteraction);// 0x197e4f0
	void OnInteractionBlocked__DelegateSignature(TigerInteractiveObject* InInteractionObject);// 0x197e4f0
	void OnAddNearbyInteraction__DelegateSignature(TigerInteractiveObject* InInteractionObject);// 0x197e4f0
	bool NeedsToTalkToNPC(out const FText InNPCName);// 0x1529a80
	TigerCharacter* GetInteractionCharacter();// 0x15295c0
	enum GetActiveOrTargetInteraction();// 0x1529590
	void Client_SuccessfulObjectInteraction(TigerInteractiveObject* InTarget);// 0x147c750
	void Client_RemoveNPCToTalkTo(const InHashedNPCName(UInt32Property) InHashedNPCName);// 0x15294e0
	void Client_InvalidateTimedObjectInteraction();// 0x14eaf80
	void Client_FailedObjectInteraction(TigerInteractiveObject* InTarget);// 0x1529450
	void Client_AddNPCToTalkTo(const InHashedNPCName(UInt32Property) InHashedNPCName);// 0x15293c0

--------------------------------
Class: TigerInteractiveObject.Actor.Object
	bool bHasInteractionTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bHasEnterVolumeTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	bool bHasShootingTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1]
	FText InteractionText;//[Offset: 0x238, Size: 0x18]
	BoxComponent* InteractionVolume;//[Offset: 0x250, Size: 0x8]
	BoxComponent* EnterVolume;//[Offset: 0x258, Size: 0x8]
	BoxComponent* ShootingVolume;//[Offset: 0x260, Size: 0x8]
	float InteractionTime;//[Offset: 0x268, Size: 0x4]
	bool bIsInteractibleFromBehind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	bool bIsAutoInteracted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1]
	SceneComponent* SceneRoot;//[Offset: 0x270, Size: 0x8]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	TigerItemAsset* IsUnlockedBy;//[Offset: 0x288, Size: 0x8]
	bool bConsumeItemOnUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	enum InteractionState;//[Offset: 0x291, Size: 0x1]
	float CurrentInteractionTimeLeft;//[Offset: 0x294, Size: 0x4]
	UInt64Property PersistentTelemetryID;//[Size: 0x8]
	void UpdateDuration(float DeltaSeconds);// 0x15306f0
	void Unlock(bool bInConsumeUnlockItem);// 0x1530660
	void SleepInteraction();// 0xbc1190
	void OnUnlocked();// 0x197e4f0
	void OnRep_Interaction(enum OldState);// 0x152fba0
	void OnJumpToFinalState();// 0x197e4f0
	void OnInteractionBlocked();// 0x197e4f0
	void OnInteract(enum ActivatedTrigger);// 0x152fb20
	void Multicast_SetInteractionState(enum NewState);// 0x152faa0
	bool IsLocked();// 0x152f9b0
	void Interact(enum InActivatedTrigger, TigerInteractionControllerComponent* InInteracter);// 0x152f830
	bool HasDuration();// 0x152f600
	enum GetInteractionState();// 0x152eb00
	void Client_Unlock();// 0x14c5b50
	bool CanPlayerUnlock(TigerPlayer* InPlayer);// 0x152dd60
	void CancelInteraction(TigerInteractionControllerComponent* Interacter);// 0x152de00
	void BeginOverlappedProjectile(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x152daa0
	void BeginOverlappedCharacter(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x152d870

--------------------------------
Class: TigerItemWorldRepresentation.Actor.Object
	TigerCompassMarkerWidget* CompassMarker;//[Offset: 0x230, Size: 0x8]
	TigerItemAsset* ItemType;//[Offset: 0x240, Size: 0x8]
	DataTable* RangedWeaponsDatatable;//[Offset: 0x248, Size: 0x8]
	TigerMapMarkerProxy* MarkerProxy;//[Offset: 0x260, Size: 0x8]
	int ItemCount;//[Offset: 0x268, Size: 0x4]
	StaticMeshComponent* Mesh;//[Offset: 0x270, Size: 0x8]
	TigerItemCluster* ItemCluster;//[Offset: 0x278, Size: 0x8]
	UInt32Property ItemClusterUID;//[Size: 0x4]
	TigerLootSpawner* LootSpawner;//[Offset: 0x288, Size: 0x8]
	enum ItemSourceID;//[Offset: 0x290, Size: 0x1]
	void SetItemOutlineVisible(const bool ShowOutline);// 0x197e4f0
	void SetItemAsset(TigerItemAsset* NewItemType, const int NewItemCount);// 0x1540430
	void OnHitGroundAfterDropBP();// 0x197e4f0
	void OnHitGroundAfterDrop();// 0x1540380
	void OnFinalTransformReceived(out const Transform InFinalTransform);// 0x197e4f0

--------------------------------
Class: TigerCompassMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	Vector MarkerWorldLocation;//[Offset: 0x280, Size: 0xc]
	Texture2D* MarkerTexture;//[Offset: 0x290, Size: 0x8]
	enum MarkerType;//[Offset: 0x298, Size: 0x1]
	void SetColorBasedOnPlayerIndex(const byte InIndex);// 0x197e4f0
	float GetRelativeAngleOnCompass();// 0x14c60a0

--------------------------------
Class: TigerItemCluster.Actor.Object
	class TigerItemWorldRepresentation* ItemActorClass;//[Offset: 0x228, Size: 0x8]
	ItemClusterArray Items;//[Offset: 0x230, Size: 0x120]
	TigerItemWorldRepresentation*[] ItemActors;//[Offset: 0x350, Size: 0x10]
	void Multicast_UpdateItemCount(const InItemClusterUID(UInt32Property) InItemClusterUID, const int InNewItemCount);// 0x153b6b0
	void Multicast_SetFinalLocation(const InItemClusterUID(UInt32Property) InItemClusterUID, const Vector_NetQuantize10 InFinalLocation);// 0x153b5e0

--------------------------------
Class: ItemClusterArray.FastArraySerializer
	TigerClusteredItem[] Items;//[Offset: 0x108, Size: 0x10]
	TigerItemCluster* Parent;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: TigerClusteredItem.FastArraySerializerItem
	Transform Transform;//[Offset: 0x20, Size: 0x30]
	Vector_NetQuantize100 Velocity;//[Offset: 0x50, Size: 0xc]
	TigerItemAsset* Item;//[Offset: 0x60, Size: 0x8]
	UInt32Property ItemCount;//[Size: 0x4]
	UInt32Property ItemUID;//[Size: 0x4]
	int PlayerIdWhoDroppedItem;//[Offset: 0x70, Size: 0x4]
	enum ItemSource;//[Offset: 0x74, Size: 0x1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerLootSpawner.Actor.Object
	TigerItemLootTable* LootTable;//[Offset: 0x228, Size: 0x8]
	byte GameTypeFilter;//[Offset: 0x230, Size: 0x1]
	bool bShouldReceiveItemsFromLootLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	TigerRandomizedLootResult[] AssignedLoot;//[Offset: 0x248, Size: 0x10]
	SphereComponent* LootLocationCollider;//[Offset: 0x258, Size: 0x8]
	TigerLootLocation* AssignedLootLocation;//[Offset: 0x260, Size: 0x8]
	TigerItemWorldRepresentation*[] SpawnedItems;//[Offset: 0x268, Size: 0x10]
	bool IsValidForCurrentGameType();// 0x15490c0
	int GetCurrentItemCount();// 0x1548bf0

--------------------------------
Class: TigerItemLootTable.DataAsset.Object
	TigerItemLootEntry[] Items;//[Offset: 0x30, Size: 0x10]
	TigerSubItemLootTable[] SubLootTables;//[Offset: 0x40, Size: 0x10]
	<TigerLootTableKey,TigerGeneratedLootTable> GeneratedSubsets;//[Offset: 0x50, Size: 0x50]
	TigerGeneratedLootTable EntireLootTable;//[Offset: 0xa0, Size: 0x130]
	bool bIsLootBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	void DebugChances();// 0xb7a5a0

--------------------------------
Class: TigerItemLootEntry
	TigerItemAsset* ItemAsset;//[Offset: 0x0, Size: 0x8]
	int MinItemCount;//[Offset: 0x8, Size: 0x4]
	int MaxItemCount;//[Offset: 0xc, Size: 0x4]
	float Weight;//[Offset: 0x10, Size: 0x4]
	TigerItemLootTable* SpawnsWith;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TigerSubItemLootTable
	TigerItemLootTable* SubLootTable;//[Offset: 0x0, Size: 0x8]
	enum MinimumRarity;//[Offset: 0x8, Size: 0x1]
	enum MaximumRarity;//[Offset: 0x9, Size: 0x1]
	float WeightMultiplier;//[Offset: 0xc, Size: 0x4]
	float WeightMultiplierByRarity;//[Offset: 0x10, Size: 0x4]
	float OverrideTotalWeight;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: TigerGeneratedLootTable
	TigerItemLootEntry[] Items;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerLootTableKey

--------------------------------
Class: TigerRandomizedLootResult
	TigerItemAsset* PrimaryItem;//[Offset: 0x0, Size: 0x8]
	int PrimaryItemCount;//[Offset: 0x8, Size: 0x4]
	TigerItemAsset* SecondaryItem;//[Offset: 0x10, Size: 0x8]
	int SecondaryItemCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TigerLootLocation.Volume.Brush.Actor.Object
	TigerLootLocationConfiguration* Configuration;//[Offset: 0x260, Size: 0x8]
	FText EnteringAreaMainText;//[Offset: 0x268, Size: 0x18]
	FText EnteringAreaSubText;//[Offset: 0x280, Size: 0x18]
	Texture2D* EnteringAreaTextBackground;//[Offset: 0x298, Size: 0x8]
	TigerLootSpawner*[] OverlappingLootSpawners;//[Offset: 0x2a0, Size: 0x10]
	TigerLootSpawner*[] AlwaysOverlappingLootSpawner;//[Offset: 0x2b0, Size: 0x10]
	byte GameTypeFilter;//[Offset: 0x2c0, Size: 0x1]
	float EnteringPromptCooldown;//[Offset: 0x2cc, Size: 0x4]
	void OnEndOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x15491e0
	void OnBeginOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x1549110

--------------------------------
Class: TigerLootLocationConfiguration.DataAsset.Object
	TigerLootLocationEntry[] LocationEntries;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerLootLocationEntry
	TigerItemLootTable* LootTable;//[Offset: 0x0, Size: 0x8]
	int MinimumItemCount;//[Offset: 0x8, Size: 0x4]
	int MaximumItemCount;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OverlapResult
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x8, Size: 0x8]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerPlayerCameraManager.PlayerCameraManager.Actor.Object
	float MinSpringArmLengthWhenLookingUp;//[Offset: 0x27c0, Size: 0x4]
	float BaseTurnRate;//[Offset: 0x27c4, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x27c8, Size: 0x4]
	class TigerCameraPreset* CameraPresetsAdditive;//[Offset: 0x27d0, Size: 0x8]
	MatineeCameraShake* AdditiveCameraShakeInstances;//[Offset: 0x27f0, Size: 0x8]
	MatineeCameraShake* CurrentPresetShakeBehaviour;//[Offset: 0x2810, Size: 0x8]
	TigerFullscreenFXManager* FullscreenFXManager;//[Offset: 0x2818, Size: 0x8]
	CurveFloat* RecoilResetCurve;//[Offset: 0x2820, Size: 0x8]
	CurveFloat* RecoilResetSpeedCurve;//[Offset: 0x2828, Size: 0x8]
	float TimeBeforeRecoilReset;//[Offset: 0x2830, Size: 0x4]
	float OverlapCheckInterval;//[Offset: 0x2834, Size: 0x4]
	CurveFloat* VerticalRecoilCurve;//[Offset: 0x2838, Size: 0x8]
	CurveFloat* HorizontalRecoilCurve;//[Offset: 0x2840, Size: 0x8]
	TigerPlayer* TigerPlayer;//[Offset: 0x2848, Size: 0x8]
	TigerPlayerController* TigerPlayerController;//[Offset: 0x2850, Size: 0x8]
	CurveFloat* DefaultTransitionCurve;//[Offset: 0x2860, Size: 0x8]
	TigerCameraPreset* CameraPresetOverride;//[Offset: 0x2868, Size: 0x8]
	TigerCameraPreset* CameraPresetIndoorOverride;//[Offset: 0x2870, Size: 0x8]
	TigerSpringArmComponent* CurrentSpringArm;//[Offset: 0x2878, Size: 0x8]
	TigerCameraBehavior* CurrentCameraBehavior;//[Offset: 0x2880, Size: 0x8]
	TigerCameraPreset* PreviousCameraPreset;//[Offset: 0x2888, Size: 0x8]
	TigerCameraBehavior*[] CachedCameraBehaviors;//[Offset: 0x28c8, Size: 0x10]
	TigerAdditiveCameraBehavior*[] AdditiveCameraBehaviors;//[Offset: 0x28d8, Size: 0x10]
	CurveFloat* SelectPresetTransitionCurve(TigerCameraPreset* InPreviousPreset, TigerCameraPreset* InNewPreset);// 0x197e4f0
	void OverrideCameraPreset(class TigerCameraPreset CameraPresetClass, float Duration, class TigerCameraPreset CameraPresetClassIndoor);// 0x15a0df0
	void OnChangingCameraPreset(class TigerCameraPreset InCurrentCameraPresetClass, class TigerCameraPreset InNewCameraPresetClass);// 0x197e4f0
	bool HasActiveCameraAnimations();// 0x15a0550
	Actor* GetViewTargetBlueprint();// 0x15a0440
	void ForceFinishCurrentCameraTransition();// 0x159ffc0
	class TigerCameraPreset EvaluateCameraPreset();// 0x197e4f0

--------------------------------
Class: TigerFullscreenFXManager.ActorComponent.Object
	TigerPlayerController* Controller;//[Offset: 0xb0, Size: 0x8]
	Material* TimedPostFXMaterial;//[Offset: 0xc0, Size: 0x8]
	MaterialParameterCollection* TimedPostFXCollection;//[Offset: 0xc8, Size: 0x8]
	FName TimedPostFXCollectionName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: TigerSpringArmComponent.SceneComponent.ActorComponent.Object
	Vector Offset;//[Offset: 0x1f8, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x204, Size: 0xc]
	float Length;//[Offset: 0x210, Size: 0x4]
	float LengthIncreaseSmoothing;//[Offset: 0x214, Size: 0x4]
	float LengthDecreaseSmoothing;//[Offset: 0x218, Size: 0x4]
	float ProbeSize;//[Offset: 0x21c, Size: 0x4]
	float CollisionPadding;//[Offset: 0x220, Size: 0x4]
	float HideCharacterBelowLength;//[Offset: 0x224, Size: 0x4]
	float RotationSmoothing;//[Offset: 0x228, Size: 0x4]
	Vector AxisLagMaxDistance;//[Offset: 0x22c, Size: 0xc]
	Vector AxisLagSpeed;//[Offset: 0x238, Size: 0xc]
	Vector BoxBounds;//[Offset: 0x244, Size: 0xc]
	float SidewaysLerpSpeed;//[Offset: 0x250, Size: 0x4]
	float SidewaysCurveExpPow;//[Offset: 0x254, Size: 0x4]
	float ComplexSweepPart;//[Offset: 0x258, Size: 0x4]
	TigerStepUpOffset StepUpOffset;//[Offset: 0x25c, Size: 0x2c]
	StaticMeshComponent*[] CurrentNearObjectFadeToggledObjects;//[Offset: 0x2b8, Size: 0x10]

--------------------------------
Class: TigerStepUpOffset
	float TangentInterpSpeed;//[Offset: 0x0, Size: 0x4]
	float TangentMax;//[Offset: 0x4, Size: 0x4]
	float SlopeInterpSpeed;//[Offset: 0x8, Size: 0x4]
	float DeltaInterpSpeed;//[Offset: 0xc, Size: 0x4]
	float InterpSpeed;//[Offset: 0x10, Size: 0x4]
	float MaxOffset;//[Offset: 0x14, Size: 0x4]
	float MaxTimeStep;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TigerAdditiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: TigerAIWeaponUseDesc
	float MinDistSquared;//[Offset: 0x0, Size: 0x4]
	float MaxDistSquared;//[Offset: 0x4, Size: 0x4]
	float FallbackThreshold;//[Offset: 0x8, Size: 0x4]
	float ApproachThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerUserInputBinding.Object
	delegate OnPresetChanged;//[Offset: 0x28, Size: 0x10]
	delegate OnSettingChangedFromPreset;//[Offset: 0x38, Size: 0x10]
	delegate OnInputBindingsReset;//[Offset: 0x48, Size: 0x10]
	delegate OnInputBindingChanged;//[Offset: 0x58, Size: 0x10]
	delegate OnAxisInputBindingChanged;//[Offset: 0x68, Size: 0x10]
	TigerCustomizableKeybindsDataAsset* CustomizableKeybindsDataAsset;//[Offset: 0x118, Size: 0x8]
	TigerInputBindings UserInputs;//[Offset: 0x120, Size: 0x50]
	TigerInputBindings DefaultInputs;//[Offset: 0x170, Size: 0x50]
	TigerDebugInputBindings DebugInputs;//[Offset: 0x1c0, Size: 0x40]
	class TigerWeaponCycleStyle[] WeaponCycleStyles;//[Offset: 0x200, Size: 0x10]
	class TigerWeaponCycleStyle[] WeaponCycleStylesGamepad;//[Offset: 0x210, Size: 0x10]
	FString BoundConsoleCommand;//[Offset: 0x220, Size: 0x10]
	CurveFloat* SensitivityCurve;//[Offset: 0x230, Size: 0x8]
	CurveFloat* SensitivityCurveGamepad;//[Offset: 0x238, Size: 0x8]
	TigerInputSettings InputSettings;//[Offset: 0x240, Size: 0xd4]
	TigerInputSettings DefaultInputSettings;//[Offset: 0x314, Size: 0xd4]
	TigerInputPresetDataAsset* InputPresetData;//[Offset: 0x3e8, Size: 0x8]
	int UsedInputPreset;//[Offset: 0x3f0, Size: 0x4]
	class TigerWeaponCycleStyle* DefaultWeaponCycleStyle;//[Offset: 0x3f8, Size: 0x8]
	bool bIsSwitchingPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	void UseHorizontalMovementForLevitationChanged(const bool bInShouldUseHorizontalMovement);// 0x1615110
	void SwitchWeaponCycleStyle(const FText InWeaponCycleStyle, const bool bInForGamepad);// 0x1614f50
	void SwitchInputPreset(const int InInputPresetToUse);// 0x1614ec0
	void SetShowAdvancedOptions(const bool bInShouldShowAdvancedOptions);// 0x1614e30
	void SetRumbleIntensity(const float InIntensity);// 0x1614db0
	void SetInputCurve(const int InCurveOption);// 0x1614d20
	void SetEnableHoldToCrouchGamepad(const bool InEnabled);// 0x1614c90
	void SetEnableAimAssistSlowDown(const bool InEnabled);// 0x1614c00
	void SetEnableAimAssistRotation(const bool InEnabled);// 0x1614b70
	void SetEnableAdaptiveTriggerVibration(const bool InEnabled);// 0x1614a50
	void SetEnableAdaptiveTriggers(const bool InEnabled);// 0x1614ae0
	void SetDeadZone(const float InDeadZone);// 0x1614930
	void SetDampenZone(const float InZoneMin);// 0x16148b0
	void SetDampenTime(const float InTime);// 0x1614830
	void SetDampenEnabled(const bool InEnabled);// 0x16147a0
	void SetBoostZone(const float InZoneMin);// 0x1614720
	void SetBoostTime(const float InTime);// 0x16146a0
	void SetBoostEnabled(const bool InEnabled);// 0x1614610
	void SetBoostDelayTime(const float InTime);// 0x1614590
	void SetAimAssistSlowDown(const float InStrength);// 0x1614510
	void SetAimAssistRotation(const float InStrength);// 0x1614490
	void ScopedSensitivityChangedY(const float InSensitivity, const bool bInForGamepad);// 0x16143b0
	void ScopedSensitivityChangedX(const float InSensitivity, const bool bInForGamepad);// 0x16142d0
	void ResetSettings();// 0x16142b0
	void ResetKeybinds(const bool bInResetKeyboard, const bool bInResetGamepad);// 0x16141e0
	void RebindKey(const int ActionMappingIndex, out const InputActionKeyMapping NewBinding, bool bInSwapKeysOnConflict);// 0x1614020
	void RebindAxisKey(const int ActionMappingIndex, out const InputAxisKeyMapping InNewBinding, bool bInSwapKeysOnConflict);// 0x1613e60
	void MasterSensitivityChangedY(const float InSensitivity, const bool bInForGamepad);// 0x1613c60
	void MasterSensitivityChangedX(const float InSensitivity, const bool bInForGamepad);// 0x1613b80
	void LoadInputDefaults();// 0x1613740
	void InvertYAxisChanged(const bool bInInverted, const bool bInForGamepad);// 0x1613440
	void InvertXAxisChanged(const bool bInInverted, const bool bInForGamepad);// 0x1613370
	void HoldJumpToClimbChanged(const bool bInHoldJumpToClimb, const bool bInForGamepad);// 0x1613200
	void HoldForInventoryChanged(const bool bInShouldHold, const bool bInForGamepad);// 0x1613130
	void HoldForHeightenedSensesChanged(const bool bInShouldHold);// 0x16130a0
	void HoldForAimDownSightsChanged(const bool bInShouldHold);// 0x1613010
	class TigerWeaponCycleStyle GetUsedWeaponCycleStyle(const bool bInForGamepad);// 0x1612f80
	void GetConflictingActionDisplayNames(out const Key InNewKey, out const FName InInputName, out FText[] OutActions, const float InAxisScale, const bool bInIsAxis);// 0x1612bd0
	FText GetBindableActionName(out const FName InName, out bool bOutNameFound, const float InAxisScale, const bool bInIsAxis);// 0x16129c0
	bool DoesKeyConflict(out const Key InNewKey, out const FName InInputName, const float InAxisScale, const bool bInIsAxis);// 0x16127e0
	void DampenVerticalStrengthChanged(const float InStrength);// 0x1612760
	void DampenVerticalScopedStrengthChanged(const float InStrength);// 0x16126e0
	void DampenVerticalADSStrengthChanged(const float InStrength);// 0x1612660
	void DampenHorizontalStrengthChanged(const float InStrength);// 0x16125e0
	void DampenHorizontalScopedStrengthChanged(const float InStrength);// 0x1612560
	void DampenHorizontalADSStrengthChanged(const float InStrength);// 0x16124e0
	void BoostVerticalStrengthChanged(const float InStrength);// 0x1612340
	void BoostVerticalScopedStrengthChanged(const float InStrength);// 0x16122c0
	void BoostVerticalADSStrengthChanged(const float InStrength);// 0x1612240
	void BoostHorizontalStrengthChanged(const float InStrength);// 0x16121c0
	void BoostHorizontalScopedStrengthChanged(const float InStrength);// 0x1612140
	void BoostHorizontalADSStrengthChanged(const float InStrength);// 0x16120c0
	void AutoSprintChanged(const bool bInAutoSprint);// 0x1612030
	void AimingSensitivityChangedY(const float InSensitivity, const bool bInForGamepad);// 0x1611f50
	void AimingSensitivityChangedX(const float InSensitivity, const bool bInForGamepad);// 0x1611e70

--------------------------------
Class: TigerCustomizableKeybindsDataAsset.DataAsset.Object
	<FName,TigerCustomizableKeybindData> KeybindData;//[Offset: 0x30, Size: 0x50]
	<FName,TigerCustomizableAxisKeybindData> AxisKeybindData;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: TigerCustomizableKeybindData
	FText DISPLAYNAME;//[Offset: 0x0, Size: 0x18]
	bool DebugOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool AllowDebugOnConsoleShipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool NotGamepadRebindable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: TigerCustomizableAxisKeybindData
	FText DISPLAYNAME;//[Offset: 0x0, Size: 0x18]
	FText OptionalReverseDisplayName;//[Offset: 0x18, Size: 0x18]
	bool DebugOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool AllowDebugOnConsoleShipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: TigerWeaponCycleStyle.Object
	int WeaponSlotsToCycle;//[Offset: 0x28, Size: 0x4]
	FText UiName;//[Offset: 0x30, Size: 0x18]
	int WrapSlotValue(const int InSlotAsInt);// 0x16151a0
	bool IsValidWeaponSlotToCycle(const enum InWeaponSlot);// 0x16136b0
	enum IntToSlot(const int InSlotAsInt);// 0x16132d0
	enum DetermineNextWeaponSlot(TigerPlayerController* InPlayerController, enum InDirection);// 0x197e4f0

--------------------------------
Class: TigerInputBindings
	InputActionKeyMapping[] KeyboardMouseMappings;//[Offset: 0x0, Size: 0x10]
	InputAxisKeyMapping[] KeyboardMouseAxisMappings;//[Offset: 0x10, Size: 0x10]
	InputActionKeyMapping[] GamepadMappings;//[Offset: 0x20, Size: 0x10]
	InputAxisKeyMapping[] GamepadAxisMappings;//[Offset: 0x30, Size: 0x10]
	int GamepadPresetId;//[Offset: 0x40, Size: 0x4]
	int SavedVersion;//[Offset: 0x44, Size: 0x4]
	int GamepadSavedVersion;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: TigerDebugInputBindings
	InputActionKeyMapping[] DebugActionMappings;//[Offset: 0x0, Size: 0x10]
	InputAxisKeyMapping[] DebugAxisMappings;//[Offset: 0x10, Size: 0x10]
	InputActionKeyMapping[] ConsoleShippingDebugActionMappings;//[Offset: 0x20, Size: 0x10]
	InputAxisKeyMapping[] ConsoleShippingDebugAxisMappings;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerInputSettings
	TigerControllerSettings KeyboardMouseSettings;//[Offset: 0x0, Size: 0x30]
	TigerControllerSettings GamepadSettings;//[Offset: 0x30, Size: 0x30]
	TigerGamepadSpecificSettings GamepadSpecificSettings;//[Offset: 0x60, Size: 0x6c]
	bool bUseAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	bool bHoldForHeightenedSenses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 0x1]
	bool bHoldToAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 0x1]
	bool bUseHorizontalMovementForLevitation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf, Size: 0x1]
	int SavedVersion;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: TigerControllerSettings
	int WeaponCyclePreset;//[Offset: 0x0, Size: 0x4]
	TigerSensitivitySetting SensitivitySettings;//[Offset: 0x4, Size: 0x20]
	bool bInvertedYAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bInvertedXAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bHoldJumpToClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool bHoldForInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
	int GamepadSavedVersion;//[Offset: 0x28, Size: 0x4]
	int KeyboardMouseSavedVersion;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TigerSensitivitySetting
	float MasterSensitivityX;//[Offset: 0x0, Size: 0x4]
	float MasterSensitivityY;//[Offset: 0x4, Size: 0x4]
	float HorizontalSensitivity;//[Offset: 0x8, Size: 0x4]
	float VerticalSensitivity;//[Offset: 0xc, Size: 0x4]
	float AimingSensitivityX;//[Offset: 0x10, Size: 0x4]
	float AimingSensitivityY;//[Offset: 0x14, Size: 0x4]
	float ScopedSensitivityX;//[Offset: 0x18, Size: 0x4]
	float ScopedSensitivityY;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TigerGamepadSpecificSettings
	float DeadZone;//[Offset: 0x0, Size: 0x4]
	int InputCurve;//[Offset: 0x4, Size: 0x4]
	float RumbleIntensity;//[Offset: 0x8, Size: 0x4]
	bool bEnableAimAssistSlowDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bEnableAimAssistRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float AimAssistSlowdownPercent;//[Offset: 0x10, Size: 0x4]
	float AimAssistRotationPercent;//[Offset: 0x14, Size: 0x4]
	bool bEnableAdaptiveTriggers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bEnableAdaptiveTriggerVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bEnableHoldToCrouchGamepad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bShowAdvancedOptions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bEnableDampen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float DampenHorizontalStrength;//[Offset: 0x20, Size: 0x4]
	float DampenVerticalStrength;//[Offset: 0x24, Size: 0x4]
	float DampenHorizontalADSStrength;//[Offset: 0x28, Size: 0x4]
	float DampenVerticalADSStrength;//[Offset: 0x2c, Size: 0x4]
	float DampenHorizontalScopedStrength;//[Offset: 0x30, Size: 0x4]
	float DampenVerticalScopedStrength;//[Offset: 0x34, Size: 0x4]
	float DampenTime;//[Offset: 0x38, Size: 0x4]
	float DampenZone;//[Offset: 0x3c, Size: 0x4]
	bool bEnableBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float BoostHorizontalStrength;//[Offset: 0x44, Size: 0x4]
	float BoostVerticalStrength;//[Offset: 0x48, Size: 0x4]
	float BoostHorizontalADSStrength;//[Offset: 0x4c, Size: 0x4]
	float BoostVerticalADSStrength;//[Offset: 0x50, Size: 0x4]
	float BoostHorizontalScopedStrength;//[Offset: 0x54, Size: 0x4]
	float BoostVerticalScopedStrength;//[Offset: 0x58, Size: 0x4]
	float BoostZone;//[Offset: 0x5c, Size: 0x4]
	float BoostRampTime;//[Offset: 0x60, Size: 0x4]
	float BoostDelayTime;//[Offset: 0x64, Size: 0x4]
	int SavedVersion;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: TigerInputPresetDataAsset.DataAsset.Object
	<int,TigerInputPresetData> InputPresets;//[Offset: 0x30, Size: 0x50]
	<Key> NonRebindableInputsPS5;//[Offset: 0x80, Size: 0x50]
	<Key> NonRebindableInputsGamepad;//[Offset: 0xd0, Size: 0x50]
	int[] GetInputPresetsArray();// 0x1612e90

--------------------------------
Class: TigerInputPresetData
	FText PresetName;//[Offset: 0x0, Size: 0x18]
	FString ConfigFileName;//[Offset: 0x18, Size: 0x10]
	bool bUseAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bHoldForHeightenedSenses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bHoldForInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: TigerResurrectComponent.ActorComponent.Object
	delegate OnResurrectStartedEvent;//[Offset: 0xb0, Size: 0x10]
	delegate OnResurrectInterruptedEvent;//[Offset: 0xc0, Size: 0x10]
	int TokenCount;//[Offset: 0xd0, Size: 0x4]
	TigerPlayer* MyPawnToResurrect;//[Offset: 0xe8, Size: 0x8]
	void Server_ResurrectGroupMember(const Vector InLocation, const Rotator InRotator);// 0x15d4140
	void ResurrectGroupMember(const Vector InRespawnLocation, const Rotator InRespawnRotation);// 0x15d4060
	void OnResurrectStartedEvent__DelegateSignature(TigerPlayerState* InResurrectingPlayerState, float InTotalRespawnTime);// 0x197e4f0
	void OnResurrectInterruptedEvent__DelegateSignature(TigerPlayerState* InResurrectingPlayerState);// 0x197e4f0
	int GetTokenCount();// 0x15d3df0
	void Client_ResurrectionStarted(TigerPlayerState* InResurrectingPlayerState, float InTotalRespawnTime);// 0x15d3720
	void Client_ResurrectionInterrupted(TigerPlayerState* InResurrectingPlayerState);// 0x1529450

--------------------------------
Class: TigerClientInteractiveSpawner.Actor.Object
	<PendingCreationQueue_Key(UInt32Property),ClientSpawnData> PendingCreationQueue;//[Offset: 0x2d8, Size: 0x50]
	void Server_ValidateInteraction(TigerInteractionControllerComponent* InInteractor, InClientObjectUID(UInt32Property) InClientObjectUID);// 0x14c6b60
	void Server_OnIntercationComplete(InClientObjectId(UInt32Property) InClientObjectId);// 0x14c6ad0
	void Server_DropOffItemLocationStartInteraction(InClientObjectUID(UInt32Property) InClientObjectUID);// 0x14c6a40
	void OnRestartPlayer(Controller* InNewPlayer);// 0x14c6420
	void OnClientObjectDestroyed(Actor* InDestroyedActor);// 0x14c6350
	void Client_SpawnInteractiveObjects(const ClientSpawnData[] InSpawnList);// 0x14c5b70
	void Client_RestartLevel();// 0x14c5b50
	void Client_ResetInteraction(InClientObjectUID(UInt32Property) InClientObjectUID);// 0x14c5ac0
	void Client_OnInteractionValidated(TigerInteractionControllerComponent* InInteractor, InClientObjectUID(UInt32Property) InClientObjectUID, bool InSuccess);// 0x14c5920
	void Client_DropOffItemLocationDropOffComplete(InClientObjectUID(UInt32Property) InClientObjectUID);// 0x14c5890
	void Client_DestroyInteractiveObjects(const InDestroyList(UInt32Property)[] InDestroyList);// 0x14c57f0

--------------------------------
Class: ClientSpawnData
	UInt32Property ClientUid;//[Size: 0x4]
	class Object* SpawnClass;//[Offset: 0x8, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	byte[] ClassSpecificData;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerPerformanceStates
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	TigerPerformanceStateLatchData ServerPerformance;//[Offset: 0x4, Size: 0x10]
	TigerPerformanceStateLatchData FramesPerSecond;//[Offset: 0x14, Size: 0x10]
	TigerPerformanceStateLatchData PacketLoss;//[Offset: 0x24, Size: 0x10]
	TigerPerformanceStateLatchData Latency;//[Offset: 0x34, Size: 0x10]
	TigerPerformanceStateLatchData LatencyVariation;//[Offset: 0x44, Size: 0x10]
	TigerPerformanceStateLatchData RefreshRate;//[Offset: 0x54, Size: 0x10]
	TigerPerformanceStateLatchData PsoCompilation;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: TigerPerformanceStateLatchData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerMapInfoDataAsset.DataAsset.Object
	TigerMapInfo[] MapInfoList;//[Offset: 0x30, Size: 0x10]
	TigerMapInfo DefaultMapInfo;//[Offset: 0x40, Size: 0xb8]
	class UserWidget* PointOfInterestWidgetType;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: TigerMapInfo
	MapLandmarkPoint FirstLandmark;//[Offset: 0x0, Size: 0x18]
	MapLandmarkPoint SecondLandmark;//[Offset: 0x18, Size: 0x18]
	Texture2D* MapTexture;//[Offset: 0x30, Size: 0x8]
	FString LevelName;//[Offset: 0x38, Size: 0x10]
	PointOfInterest[] PointsOfInterest;//[Offset: 0x48, Size: 0x10]
	Vector2D MinimapSize;//[Offset: 0x58, Size: 0x8]
	float CachedScale;//[Offset: 0x60, Size: 0x4]
	<class UserWidget,enum> BotMarkerTypes;//[Offset: 0x68, Size: 0x50]

--------------------------------
Class: MapLandmarkPoint
	FName LandmarkName;//[Offset: 0x0, Size: 0x8]
	Vector2D PositionInWorld;//[Offset: 0x8, Size: 0x8]
	Vector2D PositionOnMap;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: PointOfInterest
	FText Name;//[Offset: 0x0, Size: 0x18]
	Texture2D* Image;//[Offset: 0x18, Size: 0x8]
	Vector2D MapPosition;//[Offset: 0x20, Size: 0x8]
	FText TooltipTitle;//[Offset: 0x28, Size: 0x18]
	LinearColor TooltipTitleColor;//[Offset: 0x40, Size: 0x10]
	FText TooltipDescription;//[Offset: 0x50, Size: 0x18]
	enum LootRarity;//[Offset: 0x68, Size: 0x1]
	class TigerPingBase* PingType;//[Offset: 0x70, Size: 0x8]
	class TigerHighTierLootGroup* HighTierLootGroup;//[Offset: 0x78, Size: 0x28]

--------------------------------
Class: TigerPingBase.DataAsset.Object
	int MaxConcurrentPings;//[Offset: 0x30, Size: 0x4]
	bool bBecomesPermanentOnInterest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bInstanceSupportsHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float LifeTimeInSeconds;//[Offset: 0x38, Size: 0x4]
	float MaxDistance;//[Offset: 0x3c, Size: 0x4]
	float MaxActorDistanceFromMarker;//[Offset: 0x40, Size: 0x4]
	class TigerPingWorldInstanceUI* WidgetClass;//[Offset: 0x48, Size: 0x8]
	class TigerPingBase[] ExclusiveWithPingClasses;//[Offset: 0x50, Size: 0x10]
	Texture2D* Icon;//[Offset: 0x60, Size: 0x8]
	Texture2D* InterestedResponseIcon;//[Offset: 0x68, Size: 0x8]
	Texture2D* NotInterestedResponseIcon;//[Offset: 0x70, Size: 0x8]
	FText Name;//[Offset: 0x78, Size: 0x18]
	FText Description;//[Offset: 0x90, Size: 0x18]
	FText InterestedResponse;//[Offset: 0xa8, Size: 0x18]
	FText NotInterestedResponse;//[Offset: 0xc0, Size: 0x18]
	AkAudioEvent* NotificationAudioEvent;//[Offset: 0xd8, Size: 0x8]
	AkAudioEvent* VoiceAudioEvent;//[Offset: 0xe0, Size: 0x8]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool ShouldRemovePing(const Actor* InContextActor);// 0x15869b0
	FText GetTooltipName(out const TigerPingContext InContext);// 0x1586810
	TigerPingNotificationUIData GetResponseText(out const TigerPingContext InContext, bool bInIsInterested);// 0x197e4f0
	TigerPingNotificationUIData GetNotificationUIData(out const TigerPingContext InContext);// 0x197e4f0
	TigerPingIconData GetIconData(out const TigerPingContext InContext);// 0x1586750
	bool EvaluateWorldActor(TigerPlayerState* InPlayerState, out const HitResult InHitResult, out TigerPingWorldNetData OutPingData, out Actor* OutOverrideActor);// 0x197e4f0

--------------------------------
Class: TigerPingWorldInstanceUI.TigerInWorldWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPingClientData* PingData;//[Offset: 0x2c8, Size: 0x8]
	void OnPlayerResponse(out const TigerPingResponse InResponse);// 0x197e4f0
	void OnPingDataUpdated(const TigerPingClientData* InPingData);// 0x197e4f0
	void ApplyIconDataToImage(Image* InImageWidget, TigerUIColorSet* InColorSet);// 0x158d160

--------------------------------
Class: TigerInWorldWidget.TigerWidget.UserWidget.Widget.Visual.Object
	Vector WorldLocation;//[Offset: 0x280, Size: 0xc]
	Vector ComponentOffset;//[Offset: 0x28c, Size: 0xc]
	Vector2D ViewportPosition;//[Offset: 0x298, Size: 0x8]
	TigerInWorldWidget* InnerWidget;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* ComponentToFollow;//[Offset: 0x2a8, Size: 0x8]
	Widget*[] PlayerDistanceScalingWidgets;//[Offset: 0x2b0, Size: 0x10]
	bool bWasOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bIsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool bLimitRotationAngleToSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	bool bSupportsHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c3, Size: 0x1]
	bool bShowDistanceMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool bConstrainWidgetToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	bool bCheckIfObscructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6, Size: 0x1]
	void UpdatePlayerDistanceScalingWidgets();// 0x197e4f0
	void UpdateOffScreenState(float InRotationDegrees);// 0x197e4f0
	bool ShouldShowDistanceMarker();// 0x153ba90
	void OnWidgetObstructed(bool bInIsObstructed);// 0x197e4f0
	void OnScreenStateChanged(bool bInIsOnScreen);// 0x197e4f0
	void OnInWorldFocusLost();// 0x197e4f0
	void OnInWorldFocusGained();// 0x197e4f0
	void OnInnerWidgetChanged();// 0x197e4f0
	void FollowActor(Actor* InActor);// 0x153acd0
	TigerInWorldWidget* CreateInnerWidget(class TigerInWorldWidget InWidgetClass);// 0x153ac30
	void AddPlayerDistanceScalingWidget(Widget* InWidget);// 0x153a900

--------------------------------
Class: TigerPingClientData.DataAsset.Object
	class TigerPingBase* PingClass;//[Offset: 0x38, Size: 0x8]
	TigerPlayerState* OwningPlayerState;//[Offset: 0x40, Size: 0x8]
	TigerPingContext Context;//[Offset: 0x48, Size: 0x10]
	Vector WorldLocation;//[Offset: 0x64, Size: 0xc]
	bool bIsLocalPlayerInterested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool IsPlayerInterested(byte InPlayerGroupIndex);// 0x1586920

--------------------------------
Class: TigerPingContext
	DataAsset* Asset;//[Offset: 0x0, Size: 0x8]
	int Argument;//[Offset: 0x8, Size: 0x4]
	byte TelemetryTypeId;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TigerPingResponse
	byte PlayerGroupIndex;//[Offset: 0x0, Size: 0x1]
	bool bIsInterested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerUIColorSet.DataAsset.Object
	LinearColor ColorArray;//[Offset: 0x30, Size: 0x10]
	LinearColor GetColor(enum UIColor, enum ColourSpace);// 0x15238c0

--------------------------------
Class: TigerPingNotificationUIData
	FText NotificationText;//[Offset: 0x0, Size: 0x18]
	TigerPingIconData IconData;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerPingIconData
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]
	enum TintColor;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TigerPingWorldNetData.TigerPingNotificationNetData
	Vector WorldLocation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: TigerPingNotificationNetData
	class TigerPingBase* PingClass;//[Offset: 0x0, Size: 0x8]
	TigerPingContext Context;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerHighTierLootGroup.Object
	LinearColor TextColor;//[Offset: 0x28, Size: 0x10]
	LinearColor GetTextColor();// 0x1523d10

--------------------------------
Class: TigerBuffDOT.TigerBuff.Object
	class DamageType* DamageType;//[Offset: 0x268, Size: 0x8]
	float DamagePerTick;//[Offset: 0x270, Size: 0x4]
	bool bPlayHitAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bSpawnBloodDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	bool bUseCasterAsInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]

--------------------------------
Class: TigerSpectatorPawn.SpectatorPawn.DefaultPawn.Pawn.Actor.Object
	TigerSpringArmComponent* SpringArm;//[Offset: 0x2b0, Size: 0x8]
	delegate OnSpectateeChanged;//[Offset: 0x2b8, Size: 0x10]
	delegate OnEnoughStreamingDoneToSpectate;//[Offset: 0x2c8, Size: 0x10]
	TigerPlayerState* CurrentSpectatee;//[Offset: 0x2d8, Size: 0x8]
	TigerPlayer* CurrentSpectateePlayer;//[Offset: 0x2e0, Size: 0x8]
	bool bIsWaitingForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	float LastSpectateeSwitchTime;//[Offset: 0x2ec, Size: 0x4]
	float MaxLoadingScreenTime;//[Offset: 0x2f0, Size: 0x4]
	void Server_SpectateAdjacentGroupMember(enum InDirection);// 0x15e34f0
	void Server_RequestSpectateeLocation();// 0x15e34d0
	void Server_EndSpectate();// 0x15e3480
	void OnStreamingCellLoaded(TigerWorldCompositionCellComponent* InCell);// 0x15e32c0
	void OnSpectateeChanged__DelegateSignature(TigerPlayerState* InSpectatee, TigerPlayerState* InPreviousSpectatee);// 0x197e4f0
	void OnEnoughStreamingDoneToSpectate__DelegateSignature();// 0x197e4f0
	TigerPlayer* GetCurrentSpectatedPlayer();// 0x15e3130
	void Client_ChangeSpectatee(TigerPlayerState* InPlayerState, const Vector_NetQuantize10 InPlayerLocation);// 0x15e3040

--------------------------------
Class: TigerPaperDoll.Actor.Object
	TigerCharacterMeshManager* MeshManager;//[Offset: 0x228, Size: 0x8]
	TigerPlayerState* TigerPlayerState;//[Offset: 0x230, Size: 0x8]
	TigerNpcPropComponent* PropComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* PlayerAttachment;//[Offset: 0x240, Size: 0x8]
	SkeletalMeshComponent* BodySkelMesh;//[Offset: 0x248, Size: 0x8]
	SkeletalMeshComponent* HeadSkelMesh;//[Offset: 0x250, Size: 0x8]
	SkeletalMeshComponent* HoodieSkelMesh;//[Offset: 0x258, Size: 0x8]
	SkeletalMeshComponent* HairSkelMesh;//[Offset: 0x260, Size: 0x8]
	SkeletalMeshComponent* HeadgearMesh;//[Offset: 0x268, Size: 0x8]
	SkeletalMeshComponent* EyewearMesh;//[Offset: 0x270, Size: 0x8]
	SkeletalMeshComponent* BeardSkelMesh;//[Offset: 0x278, Size: 0x8]
	SkeletalMeshComponent* BodyAdditionalMesh;//[Offset: 0x280, Size: 0x8]
	TigerPreviewerData StartupAppearance;//[Offset: 0x288, Size: 0x2d8]
	bool bRegisterWithPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	TigerCharCustomizationComponent* CharacterCustomization;//[Offset: 0x568, Size: 0x8]
	TigerPlayerClanData* PlayerClan;//[Offset: 0x570, Size: 0x8]
	CameraComponent* CameraComponent;//[Offset: 0x578, Size: 0x8]
	class AnimInstance* PlayerAnimInstanceClass;//[Offset: 0x580, Size: 0x8]
	SceneCaptureComponent2D* SceneCapture;//[Offset: 0x588, Size: 0x8]
	TigerPlayerCameraManager* CameraManager;//[Offset: 0x590, Size: 0x8]
	bool bUseFreeCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	float DefaultCameraLerpSpeed;//[Offset: 0x59c, Size: 0x4]
	Vector CamerasOffset;//[Offset: 0x5a0, Size: 0xc]
	Vector CameraTargetOffset;//[Offset: 0x624, Size: 0xc]
	delegate OnStartupAppearanceApplied;//[Offset: 0x630, Size: 0x10]
	void ShowPaperdollFromCharacter(TigerCharacter* Character);// 0x156c200
	void ShowPaperDoll();// 0x156c1e0
	void ShowCharacter(out const TigerPersistentPlayerCharacter Character);// 0x156c0e0
	void SetPlayerState(TigerPlayerState* InPlayerState);// 0x156bfc0
	void SetCameraTargetOffset(out const Vector InCameraTargetOffset, bool bAnimateCamera);// 0x156bc60
	void SetCameraFocus(enum CustomizePart, bool bAnimateCamera);// 0x156bb90
	void SetAppearanceFromPlayerState(TigerPlayerState* InPlayerState);// 0x156bb00
	void SetAppearanceDataWithItemOverride(out const TigerPreviewerData InPreviewAppearance, enum InClanType, class TigerInventoryItemBase InItemOverrideClass);// 0x156b920
	void SetAppearanceAndOutfit(TigerPreviewerData InAppearance, out const class Object InOutfitClassPath);// 0x156b7e0
	void SetAppearanceAndClan(out const TigerPreviewerData InAppearance, const TigerPlayerClanData* InClanData, delegate InDelegate);// 0x156b680
	void SetAppearance(out const TigerPreviewerData InAppearance);// 0x156b5d0
	void PreNewCharacterSelected();// 0x197e4f0
	void PostNewCharacterSelected();// 0x197e4f0
	void OnStartupAppearanceApplied__DelegateSignature();// 0x197e4f0
	void OnDynamicAppearanceLoaded__DelegateSignature();// 0x197e4f0
	void HidePaperdoll();// 0x156b0d0
	TigerAnimInstance* GetTigerAnimInstance();// 0x156af80
	enum GetBodyType();// 0x156ad30
	void ApplyStartupAppearance(TigerCharCustomizationComponent* InCustomizationComponent);// 0x156a7f0
	bool ApplyEditorAppearance(TigerCharCustomizationComponent* CustomizationComponent);// 0x156a750

--------------------------------
Class: TigerCharCustomizationComponent.ActorComponent.Object
	delegate OnAppearanceChanged;//[Offset: 0xb0, Size: 0x10]
	TigerCharacterMeshManager* MeshManager;//[Offset: 0xd0, Size: 0x8]
	TigerCharacterCustomizationParameters[] AdditionalParametersToApply;//[Offset: 0xd8, Size: 0x10]
	enum MeshQuality;//[Offset: 0xf9, Size: 0x1]
	void SetMeshManager(TigerCharacterMeshManager* MeshManager);// 0x14bfec0
	void SetAppearanceByPreviewDataAsync(out const TigerPreviewerData NewAppearance);// 0x14bfe10
	void SetAppearanceByPreviewData(out const TigerPreviewerData NewAppearance);// 0x14bfd60
	void OnAppearanceChangedMulticast__DelegateSignature();// 0x197e4f0
	bool HasAppearanceBeenSet();// 0x14bf8d0
	TigerCharacterOutfitConfiguration* GetOutfitConfigurationByPath(out const class Object OutfitClassPath);// 0x14bf800
	TigerPreviewerData GetAppearanceData();// 0x14bf650

--------------------------------
Class: TigerAnimInstance.AnimInstance.Object
	enum EquippedWeaponType;//[Offset: 0x2b8, Size: 0x1]
	bool bOwnerIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	PoseAsset* FacePoseAsset;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* FacePoseAnimation;//[Offset: 0x2c8, Size: 0x8]
	BlendSpace* BlockStanceBlendSpace;//[Offset: 0x2d0, Size: 0x8]
	AnimSequence* BodyModifierJointScalings;//[Offset: 0x2d8, Size: 0x8]
	TigerAnimationSetAsset* DefaultAnimationSet;//[Offset: 0x330, Size: 0x8]
	class TigerFaceCurvesAnimationMap* FaceCurvesAnimationMap;//[Offset: 0x338, Size: 0x8]
	FName[] AvailableFaceCurves;//[Offset: 0x340, Size: 0x10]
	TigerAnimationFilter* FacialAnimationFilter;//[Offset: 0x350, Size: 0x8]
	TigerAnimationSetCollection* AnimationSetCollection;//[Offset: 0x358, Size: 0x8]
	TigerAnimationSetCollection* PreviousAnimationSetCollection;//[Offset: 0x360, Size: 0x8]
	AnimMontage* LatestFacialAnim;//[Offset: 0x368, Size: 0x8]
	Vector Velocity;//[Offset: 0x370, Size: 0xc]
	Vector PreviousVelocity;//[Offset: 0x37c, Size: 0xc]
	float Speed;//[Offset: 0x388, Size: 0x4]
	float Direction;//[Offset: 0x38c, Size: 0x4]
	float AimAnglePitch;//[Offset: 0x390, Size: 0x4]
	float AimAngleYaw;//[Offset: 0x394, Size: 0x4]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	bool bIsBlocking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 0x1]
	bool bIsMontagePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 0x1]
	float MaxRootYawOffset;//[Offset: 0x3a4, Size: 0x4]
	float MaxAimingRootYawOffset;//[Offset: 0x3a8, Size: 0x4]
	float RootYawOffset;//[Offset: 0x3ac, Size: 0x4]
	float SmoothCharacterYaw;//[Offset: 0x3b0, Size: 0x4]
	float CharacterYawLastTick;//[Offset: 0x3b4, Size: 0x4]
	float CharacterYawChangeOverFrame;//[Offset: 0x3b8, Size: 0x4]
	float CharacterDeltaYawSmooth;//[Offset: 0x3bc, Size: 0x4]
	void WeaponTypeBranch(out enum WeaponType);// 0x1489990
	void UpdateAnimNotifyIKAlphaBlendOnBones(float DeltaTime);// 0x1489910
	void TurnInPlace(const bool bInIsStandingOnGround);// 0x1489880
	void OnSuccessfulMeleeHit();// 0x197e4f0
	void OnSettle(out const TigerSettleEvent SettleEvent);// 0x197e4f0
	void OnMeleeAttack(const int InAttackIndex);// 0x197e4f0
	void OnInitiateAnimationBlueprint();// 0x197e4f0
	void OnFootstep(bool bIsLeftFoot, float FootstepDuration);// 0x197e4f0
	void OnFiredWeapon(bool bInSecondaryWeaponFired);// 0x197e4f0
	void OnChangeAnimationSet();// 0x197e4f0
	bool IsActiveMontageRootMotion();// 0x1489780
	AnimSequence* GetSequence(FName SequenceName);// 0x14896e0
	AnimMontage* GetRandomMontage(FName MontageListName);// 0x14895a0
	TigerRandomSequenceList* GetRandomAnimationSequenceList(FName SequenceListName);// 0x1489500
	TigerRandomSequenceList* GetPreviousRandomAnimationSequenceList(FName SequenceListName);// 0x1489460
	BlendSpace* GetPreviousBlendSpace(FName BlendSpaceName);// 0x14893c0
	AnimMontage* GetMontage(FName InMontageName);// 0x1489320
	void GetFaceAnimSlotsWithActiveCurves(out FName OutSlot0, out FName OutSlot1, out FName OutSlot2, out FName OutSlot3);// 0x14890e0
	AnimSequence* GetFaceAnimationForCurve(out const FName CurveName);// 0x1489280
	BlendSpace1D* GetBlendSpace1D(FName BlendSpace1DName);// 0x1488fa0
	BlendSpace* GetBlendSpace(FName BlendSpaceName);// 0x1489040
	TigerAnimationSetAsset* GetAnimSetAssetFromWeaponClass(class TigerWeapon InWeaponClass);// 0x197e4f0
	bool GetAnimNotifyIKDataForBone(const FName BoneName, out TigerAnimNotifyIKData IKData);// 0x1488e70
	void ApplyBlendShapeScalarValues(out const TigerCharacterBlendShapeScalarValue[] InBlendShapeScalarValues);// 0x1488dc0
	void AddSets(TigerAnimationSetCollection* SetCollection);// 0x197e4f0
	void AbortFacialAnimCallback();// 0x1488d10
	void AbortAnimation(const float BlendOutTime, AnimMontage* AnimationMontage, bool bStopAllIfNullMontage);// 0x1488bf0

--------------------------------
Class: TigerFaceCurvesAnimationMap.Object
	<FName,AnimSequence*> CurveAnimations;//[Offset: 0x28, Size: 0x50]
	<FName,AnimMontage*> FaceMontages;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: TigerAnimationSetCollection.Object
	TigerAnimationSet* ResultSet;//[Offset: 0x28, Size: 0x8]
	TigerAnimationSet*[] AnimationSets;//[Offset: 0x30, Size: 0x10]
	void AddSet(const TigerAnimationSetAsset* Asset);// 0x1488d30

--------------------------------
Class: TigerSettleEvent
	byte SettleEventEnum;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: TigerAnimNotifyIKData
	Vector IKTarget;//[Offset: 0x0, Size: 0xc]
	Vector RelativeTargetJointTarget;//[Offset: 0xc, Size: 0xc]
	float CurrentIKAlphaBlend;//[Offset: 0x18, Size: 0x4]
	bool bShouldBeUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: TigerClientSeasonalRewardCollection.Object
	TigerClientSeasonalRewardTier*[] Tiers;//[Offset: 0x28, Size: 0x10]
	int BattlePassPrice;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: TigerClientSeasonalRewardTier.Object
	TigerItemId[] FreeRewardIds;//[Offset: 0x28, Size: 0x10]
	TigerItemId[] PremiumRewardIds;//[Offset: 0x38, Size: 0x10]
	bool IsDoubleUISize();// 0x15dafa0

--------------------------------
Class: TigerClientChallengesCollection.Object
	TigerClientRewardTrackWeeklyChallenges*[] WeeklyChallenges;//[Offset: 0x28, Size: 0x10]
	TigerClientRewardTrackDailyChallenges* DailyChallenges;//[Offset: 0x38, Size: 0x8]
	TigerClientRewardTrackMasteryChallenges*[] MasteryChallenges;//[Offset: 0x40, Size: 0x10]
	TigerClientRewardTrackTestChallenges* TestChallenges;//[Offset: 0x50, Size: 0x8]
	TigerInventoryItemBase* GetRewardTiedToChallengeOfCategory(const enum InCategory, const TigerChallenge* InChallenge, const int InTier);// 0x14a40d0
	TigerInventoryItemBase* GetRewardTiedToChallenge(const TigerChallenge* InChallenge, const int InTier);// 0x14a4000
	TigerItemId GetRewardIdTiedToChallenge(const TigerChallenge* InChallenge, const int InTier);// 0x14a3db0
	int GetPercentageCompletionOfCategory(const enum InCategory);// 0x14a3a60
	bool AllowTestChallenges();// 0xb69560

--------------------------------
Class: TigerClientRewardTrackWeeklyChallenges.TigerClientRewardTrackTransientChallenges.TigerClientRewardTrackChallenges.Object
	DateTime UnlockDate;//[Offset: 0x58, Size: 0x8]
	DateTime LockDate;//[Offset: 0x60, Size: 0x8]
	bool IsUnlocked();// 0x14a47e0
	bool HasExpired();// 0x14a46a0
	Timespan GetTimeRemainingToUnlock();// 0x14a4420

--------------------------------
Class: TigerClientRewardTrackTransientChallenges.TigerClientRewardTrackChallenges.Object
	TigerChallengeTypeID[] ChallengeStorageIDs;//[Offset: 0x38, Size: 0x10]
	TigerItemId[] RewardIdForSpecificChallenge;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: TigerClientRewardTrackChallenges.Object
	int RewardHighlightIndex;//[Offset: 0x28, Size: 0x4]
	TigerPersistentPlayerState* PersistentPlayerState;//[Offset: 0x30, Size: 0x8]
	bool IsComplete();// 0x14a4720
	TigerInventoryItemBase* GetRewardTiedToSpecificChallengeByIndex(int InChallengeIndex);// 0x14a41e0
	TigerItemId GetRewardIdTiedToSpecificChallengeByIndex(int InChallengeIndex);// 0x14a3e80
	int GetNumCompletedChallenges();// 0x14a3970
	int GetNumChallenges();// 0x14a37e0
	float GetCompletionPercentage();// 0x14a35a0
	enum GetChallengeCategory();// 0xe64e20
	TigerChallenge* GetChallengeByIndex(int InChallengeIndex);// 0x14a3350

--------------------------------
Class: TigerClientRewardTrackDailyChallenges.TigerClientRewardTrackChallenges.Object
	TigerItemId[] RewardIds;//[Offset: 0x38, Size: 0x10]
	TigerChallengeTypeID[] DailyChallengeIDs;//[Offset: 0x48, Size: 0x10]
	TigerItemId DailyChallengeExpReward;//[Offset: 0x58, Size: 0x8]
	TigerItemId PersistentDailyChallengeTokenReward;//[Offset: 0x60, Size: 0x8]
	bool bIsFirstChallengePersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	TigerInventoryItemBase* GetRewardByIndex(int InRewardIndex);// 0x14a3d10

--------------------------------
Class: TigerClientRewardTrackMasteryChallenges.TigerClientRewardTrackChallenges.Object
	<enum,TigerNestedSubCategoryContainer> Challenges;//[Offset: 0x38, Size: 0x50]
	TigerItemId GetRewardIdTiedToSpecificChallengeByIndexOfSubcategory(const enum InSubCategory, int InChallengeIndex);// 0x14a3f20
	int GetNumCompletedChallengesOfSubCategory(const enum InSubCategory);// 0x14a39a0
	int GetNumChallengesOfSubCategory(const enum InSubCategory);// 0x14a38e0
	<enum,int> GetNumChallengesBySubCategory();// 0x14a3810
	int GetCompletionPercentageOfSubcategory(const enum InSubCategory);// 0x14a35d0
	TigerChallenge* GetChallengeFromSubCategoryByIndex(const enum InSubCategory, int InChallengeIndex);// 0x14a3420

--------------------------------
Class: TigerNestedSubCategoryContainer
	TigerChallengeTypeID[] ChallengeStorageIDs;//[Offset: 0x0, Size: 0x10]
	TigerItemId[] RewardIdForSpecificChallenge;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerClientRewardTrackTestChallenges.TigerClientRewardTrackTransientChallenges.TigerClientRewardTrackChallenges.Object

--------------------------------
Class: TigerClientPlayerProgressionRewardCollection.Object

--------------------------------
Class: TigerQuestSystem.ActorComponent.Object
	void Server_GatherQuestLocations();// 0x14c0b80
	void OnQuestObjectiveComplete(const TigerQuest* InQuest, const TigerQuestObjective* InCompleteObjective);// 0x15c5200
	void OnQuestComplete(const TigerQuest* InCompleteQuest);// 0x15c5170
	void Client_SetCachedQuestLocations(const TigerQuestItemLocationDetails[] InCachedQuestMapLocations);// 0x15c4110
	void Client_OnQuestStarted(const TigerQuestIdentifier InIdentifier);// 0x15c3ed0
	void Client_OnQuestObjectiveStarted(const TigerQuestIdentifier InIdentifier, const bool bHasServerShownNotification);// 0x15c3c50
	void Client_OnQuestObjectiveComplete(const TigerQuestIdentifier InIdentifier);// 0x15c3a10
	void Client_OnQuestComplete(const TigerQuestIdentifier InIdentifier);// 0x15c37d0

--------------------------------
Class: TigerQuestItemLocationDetails
	TigerQuestIdentifier QuestIdentifier;//[Offset: 0x0, Size: 0x40]
	Vector Location;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: TigerDamageFeedbackComponent.ActorComponent.Object
	<class DamageType> ProjectileFeedbackDamageTypes;//[Offset: 0xb0, Size: 0x50]
	LinearColor GetHitmarkerColor(const bool bInWasDowned, const bool bInWasKilled, const bool bInWasCriticalHit, const bool bInHasExtraHealth, const float InRangedDamageFalloffPercent);// 0x14d7a00
	LinearColor GetDamageTextColor(const bool bInWasDowned, const bool bInWasKilled, const bool bInWasCriticalHit, const bool bInHasExtraHealth, const float InRangedDamageFalloffPercent);// 0x14d77f0
	void Client_ShowOutgoingValidatedFeedback(const TigerDamageNumberData InData, const DamageEvent InDamageEvent, TigerCharacter* InDamagedCharacter, const bool bInShowEffects);// 0x14d7510

--------------------------------
Class: TigerDamageNumberData
	Vector_NetQuantize HitLocationOffset;//[Offset: 0x0, Size: 0xc]
	int16 TotalDamageDealt;//[Offset: 0xc, Size: 0x2]
	int16 HealthDamageDealt;//[Offset: 0xe, Size: 0x2]
	float NewHealth;//[Offset: 0x10, Size: 0x4]
	bool bHasExtraHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bHasShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bWasCriticalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	bool bWasDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]
	bool bWasKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float RangedDamageFallofPercent;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TSSClientComponent.ActorComponent.Object

--------------------------------
Class: TigerGameModeFeatureRespawn.ActorComponent.Object
	delegate OnRespawnFinished;//[Offset: 0xb0, Size: 0x10]
	TigerGameModeFeatureWidget FeatureWidgetClass;//[Offset: 0xc0, Size: 0x30]
	TigerRespawnFeatureWidget* WidgetInstance;//[Offset: 0xf0, Size: 0x8]
	TigerRespawnFeatureSettings Settings;//[Offset: 0xf8, Size: 0xe8]
	TigerPlayerController* OwningController;//[Offset: 0x1e0, Size: 0x8]
	TigerHolyIncense* HolyIncense;//[Offset: 0x1e8, Size: 0x8]
	int LifeTokenCount;//[Offset: 0x1f0, Size: 0x4]
	float SyncedRespawnTime;//[Offset: 0x1f4, Size: 0x4]
	delegate OnLifeTokensChanged;//[Offset: 0x1f8, Size: 0x10]
	delegate OnRespawnEnabled;//[Offset: 0x230, Size: 0x10]
	void Server_NotifyReady();// 0xd59ac0
	void Server_Cheat_ChangeLives(int InLifeTokenCount);// 0x150f270
	void RespawnFinished__DelegateSignature();// 0x197e4f0
	void PlayerLifeTokensChanged__DelegateSignature(int InLifeTokenCount, int InMaxTokenCount);// 0x197e4f0
	void IsRespawnFeatureEnabledAsync(out const delegate InDelegate);// 0x150ef10
	void IsRespawnEnabledDelegateMulti__DelegateSignature(bool bIsFeatureEnabled);// 0x197e4f0
	void IsRespawnEnabledDelegate__DelegateSignature(bool bIsFeatureEnabled);// 0x197e4f0
	bool HasInfiniteLives();// 0x150eda0
	void HandleWaveStartMovement();// 0x150ed80
	void HandleMatchStateChanged(enum InOldState, enum InNewState);// 0x150ecb0
	void HandleGameStateAvailable(TigerGameState* InGameState);// 0x150ec20
	void HandleBuffRemoved(TigerBuff* InBuff, int InID, float InDuration);// 0x150eb00
	void Client_UpdatePlayerLifeTokens(int InLifeTokens, float InSyncedRespawnTime);// 0x150e660
	void Client_OnPlayerRespawned();// 0x14efd80
	void Client_Initialize(const TigerRespawnFeatureSettings InSettings);// 0x150e530
	void Client_DisableRespawn();// 0xd59ae0
	void AuthHandleMatchSettingsAvailable();// 0x150e510

--------------------------------
Class: TigerGameModeFeatureWidget
	class TigerWidget* SoftWidgetClass;//[Offset: 0x0, Size: 0x28]
	int ZOrder;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TigerRespawnFeatureWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void SetLifeTokenCount(int InTokenCount, int InMaxTokens, float InSyncedRespawnTime);// 0x197e4f0

--------------------------------
Class: TigerRespawnFeatureSettings
	int InfiniteLifeTokensThreshold;//[Offset: 0x0, Size: 0x4]
	int MaxLifeTokens;//[Offset: 0x4, Size: 0x4]
	int InitialLifeTokens;//[Offset: 0x8, Size: 0x4]
	int DisableRespawnAtWaveNumber;//[Offset: 0xc, Size: 0x4]
	int NumSpawnPointsToEvaluate;//[Offset: 0x10, Size: 0x4]
	float MinSpawnDistanceToRedGasBorder;//[Offset: 0x14, Size: 0x4]
	<enum,TigerRespawnPointScoringSettings> RespawnPointScoringSettings;//[Offset: 0x18, Size: 0x50]
	float RespawnTime;//[Offset: 0x68, Size: 0x4]
	float GhostModeDuration;//[Offset: 0x6c, Size: 0x4]
	float RespawnHealthRatio;//[Offset: 0x70, Size: 0x4]
	class TigerBuffRespawnGhost* GhostBuffClass;//[Offset: 0x78, Size: 0x28]
	bool bDropWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bGiveDefaultLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	TigerItemAsset*[] DroppedItemBlacklist;//[Offset: 0xa8, Size: 0x10]
	enum[] PlayerEventsThatIncreasesLives;//[Offset: 0xb8, Size: 0x10]
	TigerItemData[] ItemDroppedOnDeath;//[Offset: 0xc8, Size: 0x10]
	TigerItemData[] ItemsAddedOnRespawn;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: TigerRespawnPointScoringSettings
	float EffectiveDistance;//[Offset: 0x0, Size: 0x4]
	float Weight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerBuffRespawnGhost.TigerBuff.Object
	MaterialInterface* GhostMaterial;//[Offset: 0x268, Size: 0x8]
	class TigerBuffRespawnGhostInstance* BuffInstanceClass;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TigerBuffRespawnGhostInstance.TigerBuffInstance.Object
	void OnDeactivatedBP(TigerPlayer* InTigerPlayer, const bool bInIsDedicatedServer);// 0x197e4f0
	void OnActivatedBP(TigerPlayer* InTigerPlayer, const bool bInIsDedicatedServer);// 0x197e4f0

--------------------------------
Class: TigerItemData
	TigerItemAsset* ItemAsset;//[Offset: 0x0, Size: 0x8]
	int Count;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerNetworkGraphDelegates.Object
	delegate ServerPerformance;//[Offset: 0x28, Size: 0x10]
	delegate FramesPerSecond;//[Offset: 0x38, Size: 0x10]
	delegate PacketLoss;//[Offset: 0x48, Size: 0x10]
	delegate Latency;//[Offset: 0x58, Size: 0x10]
	delegate LatencyVariation;//[Offset: 0x68, Size: 0x10]
	void GetServerID(const Object* InWorldContextObject, out FText OutServerID);// 0x1563370

--------------------------------
Class: TigerActionBuffer.Object
	float BufferTimes;//[Offset: 0x28, Size: 0x4]
	byte MaxNumberOfBufferedActions;//[Offset: 0x6c, Size: 0x1]
	TigerBufferedAction*[] BufferedActions;//[Offset: 0x70, Size: 0x10]
	TigerBufferedAction*[] QueuedActions;//[Offset: 0x80, Size: 0x10]
	TigerPlayerController* Owner;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: TigerBufferedAction.Object
	TigerPlayerController* OwnerPlayerController;//[Offset: 0x28, Size: 0x8]
	TigerActionBuffer* OwnerActionBuffer;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerMapGameData.Object
	delegate OnMapMarkerAdded;//[Offset: 0x28, Size: 0x10]
	delegate OnMapMarkerRemoved;//[Offset: 0x38, Size: 0x10]
	TigerMapMarkerProxy*[] MapMarkerProxies;//[Offset: 0x48, Size: 0x10]
	TigerMapInfoDataAsset* MapInfoAsset;//[Offset: 0x58, Size: 0x8]
	void SetCurrentMinimapSize(Vector2D InMinimapSize);// 0x1549690
	void RemoveMapMarker(TigerMapMarkerProxy* Marker);// 0x1549340
	bool HasAnyMapInfo();// 0x1549060
	Vector2D GetPositionZeroToOne(out const Vector2D InPositionOnTexture);// 0x1548e80
	Vector2D GetPositionOnMap(out const Vector InLocation);// 0x1548dd0
	Vector2D GetPositionInWorld(out const Vector2D MapPosition);// 0x1548d30
	TigerMapInfo GetCurrentMapInfo();// 0x1548c10
	TigerMapMarkerProxy* AddMapMarkerBP(class UserWidget MapMarker);// 0x15489e0

--------------------------------
Class: TigerInWorldIconController.ActorComponent.Object
	CanvasPanel* RootCanvas;//[Offset: 0xb0, Size: 0x8]
	TigerInWorldWidget*[] Widgets;//[Offset: 0xb8, Size: 0x10]
	TigerInWorldWidget* ExplicitFocusWidget;//[Offset: 0xc8, Size: 0x8]
	float MaxFocusDistanceFromCrosshair;//[Offset: 0xd8, Size: 0x4]
	Box2D ScreenMargins;//[Offset: 0xdc, Size: 0x14]
	void SetRootCanvas(CanvasPanel* InRootCanvas);// 0x153ba00
	void SetExplicitFocusWidget(TigerInWorldWidget* InWidget);// 0x153b8a0
	void RemoveFromScreen(TigerInWorldWidget* InWidget);// 0x153b810
	void OnInGameMenuToggled(bool bInIsOpen);// 0x153b780
	TigerInWorldWidget* CreateInWorldWidget(class TigerInWorldWidget InOuterWidgetClass, class TigerInWorldWidget InInnerWidgetClass);// 0x153ab60
	void AddToScreen(TigerInWorldWidget* InWidget);// 0x153a9c0

--------------------------------
Class: TigerPingControllerComponent.ActorComponent.Object
	delegate OnPingUsedInTutorial;//[Offset: 0xb0, Size: 0x10]
	float MaxTraceLength;//[Offset: 0xc0, Size: 0x4]
	float WheelHoldTime;//[Offset: 0xc4, Size: 0x4]
	float DoublePressTimeout;//[Offset: 0xc8, Size: 0x4]
	float PingHeightOffset;//[Offset: 0xcc, Size: 0x4]
	float PingSpamPreventionTime;//[Offset: 0xd0, Size: 0x4]
	SharkTokenBucket InventoryPingBucket;//[Offset: 0xd4, Size: 0xc]
	TigerPlayerController* OwningController;//[Offset: 0xe0, Size: 0x8]
	TigerPingCoordinator* PingCoordinator;//[Offset: 0xe8, Size: 0x8]
	TigerInWorldIconController* WorldIconController;//[Offset: 0xf0, Size: 0x8]
	TigerPingWrapper[] ActivePings;//[Offset: 0xf8, Size: 0x10]
	TigerPingWrapper[] ReusablePings;//[Offset: 0x108, Size: 0x10]
	TigerPingClientData*[] UnresolvedActors;//[Offset: 0x118, Size: 0x10]
	TigerPingSetupAsset* PingSetup;//[Offset: 0x128, Size: 0x8]
	TigerPingSetupAsset* SoftPingSetupPtr;//[Offset: 0x130, Size: 0x28]
	bool bEnablePingsInTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	float HitItemSphereRadius;//[Offset: 0x244, Size: 0x4]
	float VehicleHitForwardDot;//[Offset: 0x248, Size: 0x4]
	bool TryExecuteFocusPingAction();// 0x1592020
	void SpawnLocalPing(const Vector InWorldOffset, out const TigerPingWorldNetData InPing);// 0x1591e50
	void Server_SpawnWorldPing(const TigerPingWorldNetData InPing);// 0x1591ac0
	void Server_SpawnMapPing(class TigerPingBase InPingClass, Vector_NetQuantize InWorldLocation);// 0x1591990
	void Server_SpawnLootBoxItemPing(const TigerPingWorldNetData InPingData);// 0x15918c0
	void Server_RespondToPing(TigerUniquePingId InPingId, bool bInIsInterested);// 0x1591570
	void Server_PingClosestActorOfType(enum InActorType);// 0x15914c0
	void Server_NotificationOnlyPing(const TigerPingNotificationNetData InPing);// 0x1591300
	void Server_CancelPing(TigerUniquePingId InPingId, bool InShouldDisplayNotification);// 0x1590ee0
	void SendWorldPing(out const TigerPingWorldNetData InPingData);// 0x1590df0
	void SendPingTypeFromCameraLocation(class TigerPingBase InPingClass, bool InCancelInFocusPing);// 0x1590d20
	void SendNotificationPing(out const TigerPingNotificationNetData InPingData);// 0x1590c80
	void SendMapPing(class TigerPingBase InPingClass, out const Vector InWorldLocation);// 0x1590bb0
	void SendLootBoxItemPing(TigerPingWorldNetData InItemPingData, TigerLootBox* InLootbox);// 0x1590a90
	void PingClosestActorOfType(enum InActorType);// 0x1590800
	void OnTigerPingUsedInTutorial__DelegateSignature();// 0x197e4f0
	PointOfInterest[] GetPointsOfInterestedByDistance(int InMaxCount);// 0x158f0b0
	void GetPingWheelItems(TigerPlayerState* InPlayerState, out const HitResult[] InHitResults, out TigerPingWorldNetData[] OutPingWheelItems);// 0x197e4f0
	bool GetPingInfoFromActor(out const HitResult InHitResult, out TigerPingWorldNetData OutPingData);// 0x158ef50
	void Client_SpawnWorldPing(TigerUniquePingId InPingId, const TigerPingWorldNetData InPing);// 0x158e3f0
	void Client_SilentlyRemovePing(TigerUniquePingId InPingId);// 0x158e360
	void Client_RespondToPing(TigerUniquePingId InPingId, const TigerPingResponse InResponse);// 0x158df40
	void Client_NotificationOnlyPing(const TigerPingNotificationNetData InPing, byte InPlayerGroupIndex);// 0x158da70
	void Client_CancelPing(TigerUniquePingId InPingId, bool InShouldDisplayNotification);// 0x158d7b0
	void ClearAllPings();// 0x158d610
	bool CanSendPings();// 0x158d470
	void CancelPingAtIndex(int InExistingPingIndex, bool InShouldDisplayCancelNotification);// 0x158d540

--------------------------------
Class: SharkTokenBucket
	float Capacity;//[Offset: 0x4, Size: 0x4]
	float TokenFillRatePerSecond;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerPingCoordinator.Object
	TigerPingCoordinatorEntry[] ActivePings;//[Offset: 0x28, Size: 0x10]
	TigerPingControllerComponent*[] GroupMemberPingControllers;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TigerPingCoordinatorEntry
	TigerUniquePingId UniqueID;//[Offset: 0x0, Size: 0x4]
	class TigerPingBase* PingClass;//[Offset: 0x8, Size: 0x8]
	Actor* ContextActor;//[Offset: 0x10, Size: 0x8]
	DataAsset* ContextObject;//[Offset: 0x18, Size: 0x8]
	byte TelemetryTypeId;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: TigerUniquePingId
	UInt32Property Value;//[Size: 0x4]

--------------------------------
Class: TigerPingWrapper
	TigerPingClientData* ClientData;//[Offset: 0x0, Size: 0x8]
	TigerPingWorldInstanceUI* InnerWidget;//[Offset: 0x8, Size: 0x8]
	TigerPingMarkerProxy* MapMarkerProxy;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerPingMarkerProxy.TigerMapMarkerProxy.Object
	TigerPingClientData* PingData;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: TigerPingSetupAsset.DataAsset.Object
	class UserWidget* MapMarkerClass;//[Offset: 0x30, Size: 0x8]
	class TigerPingWorldInstanceUI* WidgetClass;//[Offset: 0x38, Size: 0x8]
	class TigerPingBase[] WorldPingTypes;//[Offset: 0x40, Size: 0x10]
	class TigerPingBase* DoublePressPingClass;//[Offset: 0x50, Size: 0x8]
	class TigerPingBase* DistanceFallbackPingClass;//[Offset: 0x58, Size: 0x8]
	class TigerPingBase[] InGamePingTypes;//[Offset: 0x60, Size: 0x10]
	class TigerPingBase[] PingBarkTypes;//[Offset: 0x70, Size: 0x10]
	class TigerPingBase* PingBarkDowned;//[Offset: 0x80, Size: 0x8]
	class TigerPingBase* PingBarkFullHealth;//[Offset: 0x88, Size: 0x8]
	class TigerPingBase* PingBarkNeedHealing;//[Offset: 0x90, Size: 0x8]
	class TigerPingBase* PingBarkMasquerade;//[Offset: 0x98, Size: 0x8]
	class TigerPingBase* PingInventoryWantsMeleeWeapon;//[Offset: 0xa0, Size: 0x8]
	class TigerPingBase* PingInventoryWantsRangedWeapon;//[Offset: 0xa8, Size: 0x8]
	class TigerPingBase* PingInventoryWantsItem;//[Offset: 0xb0, Size: 0x8]
	class TigerPingBase* PingLocation;//[Offset: 0xb8, Size: 0x8]
	class TigerPingBase* PingEnemy;//[Offset: 0xc0, Size: 0x8]
	class TigerPingBase* ClosestActorOverrides;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: TigerLootBox.TigerInteractiveObject.Actor.Object
	class TigerItemWorldRepresentation* PickupItemClass;//[Offset: 0x2a8, Size: 0x8]
	AkAudioEvent* StartInteractSound;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* StopInteractSound;//[Offset: 0x2b8, Size: 0x8]
	enum CurrentHighestRarity;//[Offset: 0x2c0, Size: 0x1]
	TigerItemData[] ItemList;//[Offset: 0x2c8, Size: 0x10]
	bool bWasSpawnedOnPlayerDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bHasBeenPreviouslyOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	TigerPlayerController* CurrentInteractingPlayerController;//[Offset: 0x2dc, Size: 0x8]
	BoxComponent* CancelInteractionVolume;//[Offset: 0x2e8, Size: 0x8]
	enum TelemetrySourceID;//[Offset: 0x308, Size: 0x1]
	void SetTelemetrySourceID(const enum InSourceID);// 0x15450b0
	void OnReset();// 0x197e4f0
	void OnRep_OpenedState();// 0x1544b90
	void OnRep_HighestRarityUpdated(enum OldRarity);// 0x1544af0
	void OnOpenedStateReplicated(enum State);// 0x197e4f0
	void OnOpened();// 0x1544ad0
	void OnOpenBoxAnimation();// 0x197e4f0
	void OnLocalPlayerInteractionCancelled();// 0x197e4f0
	void OnListUpdated(out const TigerItemData[] NewItemList);// 0x197e4f0
	void OnHighestRarityUpdated(enum NewHighestRarity);// 0x197e4f0
	void Multicast_SetInteractionStateForNonInteractingPlayer(enum NewState);// 0x1544a50
	void Multicast_OpenBoxAnimation();// 0xce3120
	void Multicast_Enable();// 0xce3260
	bool IsOpened();// 0x1544970
	bool HasLoot();// 0x1544920
	FText GetDescriptionText();// 0x197e4f0
	void DisableLootBox();// 0x15443a0
	void ClientCloseLid();// 0x197e4f0
	void ClientCloseBoxGUI();// 0x197e4f0

--------------------------------
Class: TigerContextualHelpComponent.ActorComponent.Object
	TigerPlayerController* TigerPlayerController;//[Offset: 0xb0, Size: 0x8]
	TigerContextualHelpUI* ContextualHelpUI;//[Offset: 0xb8, Size: 0x8]
	TigerCurrentContextualHelp[] ActiveContextualHelps;//[Offset: 0xc0, Size: 0x10]
	TigerContextualHelp*[] ContextualHelpCandidates;//[Offset: 0xd0, Size: 0x10]
	class TigerContextualHelp[] ContextualHelpTypes;//[Offset: 0xe0, Size: 0x10]
	SoftObjectPath[] ContextualHelpTypePaths;//[Offset: 0xf0, Size: 0x10]
	float CooldownTime;//[Offset: 0x100, Size: 0x4]
	float MinimumDisplayTime;//[Offset: 0x104, Size: 0x4]
	void PrepareContextualHelpComponentsForCurrentSession(TigerContextualHelpContext InContext);// 0x14cae60
	void OnPersistentPlayerStateInitialized(TigerPlayerController* InPlayerController);// 0x14cad00
	TigerContextualHelp*[] GetCurrentContextualHelpCandidates();// 0x14ca690
	TigerContextualHelpUI* GetContextualHelpUi();// 0x14ca670
	SoftObjectPath[] GetAllContextualHelpPaths();// 0x14ca400
	class TigerContextualHelp[] GetAllContextualHelp();// 0x14ca250

--------------------------------
Class: TigerContextualHelpUI.TigerWidget.UserWidget.Widget.Visual.Object
	void OnShowHelpWidget(TigerContextualHelp* InData, const enum InType);// 0x197e4f0
	void OnHideHelpWidget(TigerContextualHelp* InData, out float OutAnimationDuration, const enum InType);// 0x197e4f0

--------------------------------
Class: TigerContextualHelp.Object
	float LifeTimeInSeconds;//[Offset: 0x28, Size: 0x4]
	FText HeaderText;//[Offset: 0x30, Size: 0x18]
	FText DescriptionText;//[Offset: 0x48, Size: 0x18]
	FName InputAction;//[Offset: 0x60, Size: 0x8]
	bool bShouldHideOnInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	Texture2D* Icon;//[Offset: 0x70, Size: 0x28]
	int MatchesPlayedLimit;//[Offset: 0x98, Size: 0x4]
	bool bWantsToShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float CooldownInSeconds;//[Offset: 0xa0, Size: 0x4]
	enum ContextualHelpType;//[Offset: 0xa4, Size: 0x1]
	enum ShouldShowInGameMode;//[Offset: 0xa5, Size: 0x1]
	byte ShouldShowInGameModeFlags;//[Offset: 0xa6, Size: 0x1]
	void SetupTriggerConditions(out const TigerContextualHelpContext InContext);// 0x197e4f0
	bool SatisfiesCustomCondition(TigerPlayerController* InTigerPlayerController);// 0x14caf10
	void OnPlayerSpawned(TigerPlayer* InTigerPlayer);// 0x197e4f0
	void OnHide(TigerPlayerController* InTigerPlayerController);// 0x197e4f0
	bool HasReachedMaxMatchesPlayedLimit(out const TigerContextualHelpContext InContext);// 0x14ca9e0
	void ExtendLifetime(float InLifeTimeInSeconds, enum InType);// 0x14ca180
	bool CanEverShow(out const TigerContextualHelpContext InContext);// 0x14ca000

--------------------------------
Class: TigerContextualHelpContext
	TigerPlayerController* PlayerController;//[Offset: 0x0, Size: 0x8]
	TigerPowerKit* PowerKit;//[Offset: 0x8, Size: 0x8]
	int NumMatchesPlayedTotal;//[Offset: 0x10, Size: 0x4]
	int NumMatchesWithArchetype;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerCurrentContextualHelp
	TigerContextualHelp* ContextualHelp;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerEmoteControllerComponent.ActorComponent.Object
	byte SelectableEmoteCount;//[Offset: 0xc8, Size: 0x1]
	TigerPlayerController* PlayerController;//[Offset: 0xd0, Size: 0x8]
	<Guid,TigerQuestAnimation*> QuestAnims;//[Offset: 0xe8, Size: 0x50]
	void Server_StopEmote();// 0x14fa300
	void Server_PlayQuestMontage(const Guid InID, const InClientObjId(UInt32Property) InClientObjId);// 0x14fa1e0
	void Server_PlayEmote(const byte InIndex);// 0x14fa130
	void OnSelectedCharacterChanged(TigerPersistentPlayerState* InPersistentPlayerState);// 0x14f9f00
	void OnIconsLoaded__DelegateSignature(out const Texture2D*[] InIcons);// 0x197e4f0
	void LoadEmoteIcons(out const delegate InDelegate);// 0x14f9940
	bool HasEmoteAtIndex(const byte InIndex);// 0x14f9880
	TigerCharacterEmoteCustomization*[] GetSelectedEmotes();// 0x14f9800
	void GetEmoteNames(out FText[] OutEmoteNames);// 0x14f9590
	void Client_StopEmote();// 0x14efd80
	void Client_EmoteFailed();// 0xd59ae0

--------------------------------
Class: TigerQuestAnimation.Object
	AnimMontage* QuestMontage;//[Offset: 0x28, Size: 0x8]
	bool bStopsMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: TigerChatComponent.ActorComponent.Object
	SharkTokenBucket ClientMessageTokenBucket;//[Offset: 0xb0, Size: 0xc]
	SharkTokenBucket ServerMessageTokenBucket;//[Offset: 0xbc, Size: 0xc]
	bool bIsChatBanned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bIsChatAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool TryGetMessageToken(out float OutTimeUntilTokenAvailable);// 0x14c1880
	void Server_SetChatMessageCategoryMuteStatus(enum InCategory, bool bInShouldMute);// 0x14bfc80
	void Server_MuteChatForRestrictedPlayer(bool bInShouldMute);// 0xd59b00
	void OnPersistentPlayerStateInitialized(TigerPlayerController* InPlayerController);// 0x14bfbf0
	void OnMuteStatusChanged(out const TigerMuteInfo InMuteInfo);// 0x14bfb40
	void OnLeftPartyDueToBlockedPlayerJoinBlueprint(bool bInWasKicked);// 0x197e4f0
	void OnLeftPartyDueToBlockedPlayerJoin(TigerPartyManager* InPartyManager);// 0x14bfab0
	void OnFailedToJoinParty(enum InJoinedPartyFailedReason);// 0x197e4f0
	void OnChatMessageReceived(out const TigerChatMessage InMessage);// 0x197e4f0
	void OnBlockedPlayerWasRemovedFromParty(bool bInWasBlockedByMe);// 0x197e4f0
	void OnBanStatusUpdated(out const TigerMuteInfo InMuteInfo);// 0x197e4f0
	bool IsSoloMatch();// 0x14bf920
	bool IsGeneralChatMuted();// 0x14bf8f0
	TigerMuteInfo GetMutedInfo();// 0x14bf7b0
	void CreateChatWindow();// 0x197e4f0
	void Client_ReceiveServerMessage(FString InServerMessage);// 0x14bf5b0
	void Client_ReceiveChatMessage(const TigerChatMessage InMessage);// 0x14bf470

--------------------------------
Class: TigerChatMessage
	FText PlayerName;//[Offset: 0x0, Size: 0x18]
	FText Message;//[Offset: 0x18, Size: 0x18]
	SharkUserId SharkUserId;//[Offset: 0x30, Size: 0x10]
	TigerPersistentPlayerID PlayerId;//[Offset: 0x40, Size: 0x10]
	enum PlayerChannel;//[Offset: 0x50, Size: 0x1]
	enum MessageCategory;//[Offset: 0x51, Size: 0x1]
	byte GroupPlayerId;//[Offset: 0x52, Size: 0x1]

--------------------------------
Class: TigerAimAssist.Object
	TigerPlayerController* PlayerController;//[Offset: 0x28, Size: 0x8]
	TigerAimAssistState State;//[Offset: 0x30, Size: 0x98]
	<Actor*,TigerAimAssistStatCollection> StatsCollection;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: TigerAimAssistState
	TigerCharacter* Target;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerAimAssistStatCollection

--------------------------------
Class: TigerGamepad.Object
	TigerPlayerController* PlayerController;//[Offset: 0x48, Size: 0x8]
	float RegularTriggerPullThreshold;//[Offset: 0x50, Size: 0x4]
	float MeleeAdaptiveTriggerPullThreshold;//[Offset: 0x54, Size: 0x4]
	byte WeaponRightTriggerResistanceStart;//[Offset: 0x58, Size: 0x1]
	byte WeaponRightTriggerResistanceEnd;//[Offset: 0x59, Size: 0x1]
	byte WeaponRightTriggerResistanceStrength;//[Offset: 0x5a, Size: 0x1]
	byte WeaponLeftTriggerResistanceStart;//[Offset: 0x5b, Size: 0x1]
	byte WeaponLeftTriggerResistanceStrength;//[Offset: 0x5c, Size: 0x1]
	byte MeleeRightTriggerResistanceStart;//[Offset: 0x5d, Size: 0x1]
	byte MeleeRightTriggerResistanceStrength;//[Offset: 0x5e, Size: 0x1]

--------------------------------
Class: TigerNPCCheatCommandsAsset.DataAsset.Object
	<FName,TigerNPCAsset*> Commands;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerItemCheatCommandsAsset.DataAsset.Object
	<FString,TigerItemAsset*> Commands;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerNPCInstantSpawner.TigerNPCSpawningBase.Actor.Object
	TigerBaseNPC* SpawnNpcAtLocation(out const Vector Location, TigerNPCAsset* NpcAssetToUse, out const Rotator Rotation, bool bIgnoreSpawnSetting);// 0x1567dd0

--------------------------------
Class: TigerNPCSpawningBase.Actor.Object
	TigerAISplinePath* AISplinePath;//[Offset: 0x228, Size: 0x8]
	FName SpawningGroup;//[Offset: 0x230, Size: 0x8]
	int SpawnAmount;//[Offset: 0x238, Size: 0x4]
	Guid SpawningSubGroupId;//[Offset: 0x23c, Size: 0x10]
	float Prio;//[Offset: 0x24c, Size: 0x4]
	bool bShouldBeManuallyActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FName MovementGroup;//[Offset: 0x254, Size: 0x8]
	TigerBaseNPC*[] ManuallySpawnNPCs(int Budget, int OverrideSpawnAmount);// 0x156b2e0

--------------------------------
Class: TigerWheelWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	float LockCameraForGamepadAfterUseTime;//[Offset: 0x298, Size: 0x4]
	bool bShouldSetMouseLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	TigerWheelInterfaceWidget* Interface;//[Offset: 0x2a0, Size: 0x8]
	void PrimaryAction(int Index);// 0x1630c70
	bool OpenWheel();// 0x1630bb0
	TigerWheelInterfaceWidget* GetInterfaceWidget();// 0x197e4f0
	bool CloseWheel(bool bTriggerAction);// 0x1630030
	void AlternateAction(int Index);// 0x162fe50

--------------------------------
Class: TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerSharedMouseCursor* SharedMouseCursor;//[Offset: 0x280, Size: 0x8]
	bool bStopPlayerInteractionsOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bShouldShowMouseCursorOnOpenWithGamepad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool bShouldCloseOtherMenusOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	bool bShouldThrottleFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e, Size: 0x1]
	bool TryMakeDateTime(const int InYear, const int InMonth, const int InDay, out DateTime OutDateTime);// 0x155f2f0
	void Open();// 0x155f1d0
	void OnPersistentPlayerStateInitialized(TigerPersistentPlayerState* InPersistentPlayerState);// 0x155f0b0
	void OnPersistentPlayerInitialized(TigerPlayerController* InPlayerController);// 0x155f020
	void OnOpen();// 0x197e4f0
	void OnClose();// 0x197e4f0
	bool IsOpen();// 0x155eff0
	void Close();// 0x1549c60

--------------------------------
Class: TigerSharedMouseCursor.Object

--------------------------------
Class: TigerWheelInterfaceWidget.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnAlternateActionTriggered;//[Offset: 0x280, Size: 0x10]
	delegate OnPrimaryActionTriggered;//[Offset: 0x290, Size: 0x10]
	bool bCursorCanBeOutside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	int NumItems;//[Offset: 0x2b4, Size: 0x4]
	int MinimumSupportedItems;//[Offset: 0x2b8, Size: 0x4]
	int MaximumSupportedItems;//[Offset: 0x2bc, Size: 0x4]
	float MiddleRadius;//[Offset: 0x2c0, Size: 0x4]
	float OutsideRadius;//[Offset: 0x2c4, Size: 0x4]
	float GamepadDeadZone;//[Offset: 0x2c8, Size: 0x4]
	float DeselectionGraceTime;//[Offset: 0x2cc, Size: 0x4]
	int HoveredIndex;//[Offset: 0x2d4, Size: 0x4]
	void UpdateHoverEffect(int Index);// 0x197e4f0
	void TigerOnWheelPrimaryAction__DelegateSignature(int Index);// 0x197e4f0
	void TigerOnWheelAlternateAction__DelegateSignature(int Index);// 0x197e4f0
	void SetWheelUsable(bool bNewUsable);// 0x197e4f0
	void SetItem(int Index, Texture2D* Icon, out const FText Label, int Count);// 0x197e4f0
	void SetIsItemSelected(int Index, bool bIsSelected);// 0x197e4f0
	void SetDisplayedFavorite(const int InIndex);// 0x197e4f0
	void ResetItems();// 0x197e4f0
	void PlayOpenAnimation();// 0x1549c60
	void PlayCloseAnimation();// 0x155f1d0
	void OnNumberOfItemsChanged(const int InNewNumberOfItems);// 0x197e4f0
	bool IsWheelOpen();// 0x14d0f70

--------------------------------
Class: TigerVendorComponent.ActorComponent.Object
	TigerVendorStoreCategory*[] DynamicCategories;//[Offset: 0xb0, Size: 0x10]
	void UnsubscribeToStoreEntryConfigEvents(const enum InStoreEntryCategory, out const delegate InEventDelegate);// 0x1623f40
	void TigerPurchaseItemDelegate__DelegateSignature(bool bInSuccess, FString InErrorString, out const TigerItemId InItemId);// 0x197e4f0
	void SubscribeToStoreEntryConfigEvents(const enum InStoreEntryCategory, out const delegate InEventDelegate);// 0x1623e30
	void SaveOutfitSetup(out const TigerPersistentOutfitSetup OutfitSetup);// 0x1623b40
	TigerItemPrice GetSpecialItemCost(out const TigerItemId InItemId);// 0x16235a0
	TigerVendorStoreCategory* GetCategory(enum CategoryType);// 0x16231e0

--------------------------------
Class: TigerVendorStoreCategory.Object
	TigerVendorStoreCategoryItem[] CachedItems;//[Offset: 0x28, Size: 0x10]
	TigerPersistentItemDefinition[] ItemDefinitions;//[Offset: 0x38, Size: 0x10]
	TigerVendorStoreCategoryItem[] GetItemsWithClass(class TigerInventoryItemBase Class);// 0x1623430
	TigerVendorStoreCategoryItem[] GetItems();// 0x16232f0
	enum GetCategoryType();// 0x1623270

--------------------------------
Class: TigerVendorStoreCategoryItem
	TigerMetaStoreEntry StoreEntry;//[Offset: 0x0, Size: 0x50]
	class TigerInventoryItemBase* ItemClassPath;//[Offset: 0x50, Size: 0x28]
	TigerInventoryItemBase* BaseItem;//[Offset: 0x78, Size: 0x8]
	int Cost;//[Offset: 0x80, Size: 0x4]
	int InventoryCount;//[Offset: 0x84, Size: 0x4]
	TigerItemId SoftCurrencyId;//[Offset: 0x88, Size: 0x8]
	int StorePriority;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: TigerMetaStoreEntry
	UInt64Property StoreEntryID;//[Size: 0x8]
	UInt32Property PremiumPrice;//[Size: 0x4]
	FString ImagePath;//[Offset: 0x10, Size: 0x10]
	UInt32Property Discount;//[Size: 0x4]
	DateTime StartDate;//[Offset: 0x28, Size: 0x8]
	DateTime EndDate;//[Offset: 0x30, Size: 0x8]
	int FlashStoreSlot;//[Offset: 0x38, Size: 0x4]
	int CategoryId;//[Offset: 0x3c, Size: 0x4]
	TigerMetaStoreEntryItem[] Items;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerMetaStoreEntryItem
	TigerItemId ItemId;//[Offset: 0x0, Size: 0x8]
	UInt32Property Quantity;//[Size: 0x4]

--------------------------------
Class: TigerPersistentItemDefinition
	TigerItemId ItemId;//[Offset: 0x0, Size: 0x8]
	SoftObjectPath ItemClassPath;//[Offset: 0x8, Size: 0x18]
	int Cost;//[Offset: 0x20, Size: 0x4]
	int StorePriority;//[Offset: 0x24, Size: 0x4]
	TigerItemId SoftCurrencyId;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerSHPBMarker.TigerWorldMarker.Actor.Object
	TigerNPC* FollowingNPC;//[Offset: 0x248, Size: 0x8]
	Vector NPCLocation;//[Offset: 0x250, Size: 0xc]
	<Actor*> PerceivedBy;//[Offset: 0x260, Size: 0x50]
	void OnRep_NPCLocation();// 0x15e00c0

--------------------------------
Class: TigerFindSessionAsync.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnMatched;//[Offset: 0x40, Size: 0x10]
	delegate OnUnmatched;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	static TigerBpFindSessionSelectedSession SelectSession(out const TigerBpFindSessionResultList FindSessionResult, int Index);// 0x1504d30
	void ReportMatchFoundSuccessfully(out const TigerBpFindSessionResultList InResult);// 0x1504b80
	static TigerFindSessionAsync* FindSession(const Object* WorldContextObject, PlayerController* InPlayerController, FString InGameModeId, int InGameModeIndex, enum InSessionType);// 0x1503b90

--------------------------------
Class: TigerBpFindSessionResultList
	FString[] AlternativeStrings;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerFireProjectileDataInterpolated.TigerFireProjectileData
	float LocationAlpha;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerFireProjectileData
	Vector_NetQuantize100 ProjectileSpawnLocation;//[Offset: 0x0, Size: 0xc]
	float ShootDirPitch;//[Offset: 0xc, Size: 0x4]
	float ShootDirYaw;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerShockwaveWall.Actor.Object
	BoxComponent* EffectBoxComponent;//[Offset: 0x230, Size: 0x8]
	TigerShockwaveWallData ShockwaveData;//[Offset: 0x238, Size: 0x60]
	Vector TargetLocation;//[Offset: 0x298, Size: 0xc]
	TigerPlayer* TigerInstigator;//[Offset: 0x2a4, Size: 0x8]
	float CurrentLifetime;//[Offset: 0x2ac, Size: 0x4]
	int PowerLevel;//[Offset: 0x2b0, Size: 0x4]
	Vector UpdateEffectCollisionBoxExtents();// 0x15e02f0
	void OnShockwaveWallDestroyed(const enum InDestroyReason);// 0x197e4f0
	void OnOverlapBeginEffect(PrimitiveComponent* InOverlappedComp, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex, bool bInFromSweep, out const HitResult InSweepResult);// 0x15dfe90
	void OnCharacterHit(const TigerCharacter* InCharacterHit);// 0x197e4f0
	void Multicast_OnCharacterHit(const TigerCharacter* InCharacterHit);// 0x1524b20
	void InitShockwaveData(out TigerShockwaveWallData OutShockwaveData);// 0x15dfb50
	float DetermineDamageOnEnemy(const TigerCharacter* InEnemyCharacter);// 0x15df8e0
	float CalculateSpeed();// 0x15df830
	Vector CalculateKnockbackVector(const TigerCharacter* InHitEnemyCharacter);// 0x197e4f0

--------------------------------
Class: TigerShockwaveWallData
	CurveFloat*[] SpeedCurve;//[Offset: 0x0, Size: 0x10]
	CurveVector*[] EffectExtentCurve;//[Offset: 0x10, Size: 0x10]
	Vector[] TerrainSweepBoxExtent;//[Offset: 0x20, Size: 0x10]
	float[] TravelDistance;//[Offset: 0x30, Size: 0x10]
	float[] Damage;//[Offset: 0x40, Size: 0x10]
	class TigerBuff[] OnHitBuff;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TigerMatchHUD.TigerHUD.HUD.Actor.Object
	TigerPromptCollectionWidget* PromptCollection;//[Offset: 0x430, Size: 0x8]
	TigerCrosshairNotificationsContainerWidget* CrosshairNotifications;//[Offset: 0x438, Size: 0x8]
	TigerMusicManager* MusicManager;//[Offset: 0x440, Size: 0x8]
	TigerCompassUI* CompassUI;//[Offset: 0x448, Size: 0x8]
	TigerMasqueradeStatusWidget* MasqueradeStatus;//[Offset: 0x450, Size: 0x8]
	TigerWidget* ChallengeList;//[Offset: 0x458, Size: 0x8]
	TigerWidget* BloodResonanceUi;//[Offset: 0x460, Size: 0x8]
	TigerRevivingStatusUI* RevivingStatusUI;//[Offset: 0x468, Size: 0x8]
	TigerConsumableWheelWidget* ConsumableWheel;//[Offset: 0x470, Size: 0x8]
	TigerWidget* ClimbPrompt;//[Offset: 0x478, Size: 0x8]
	TigerWidget* LevelOverlay;//[Offset: 0x480, Size: 0x8]
	TigerWidget* YouAreDownedPrompt;//[Offset: 0x488, Size: 0x8]
	TigerWidget* Minimap;//[Offset: 0x490, Size: 0x8]
	TigerWidget* StatusMessage;//[Offset: 0x498, Size: 0x8]
	TigerWidget* InputTray;//[Offset: 0x4a0, Size: 0x8]
	delegate OnDropItemAction;//[Offset: 0x4a8, Size: 0x10]
	TigerDisciplinesUi* Disciplines;//[Offset: 0x4b8, Size: 0x8]
	TigerCapturePointProgressUI* CapturePointProgressUI;//[Offset: 0x4c0, Size: 0x8]
	TigerPingWheelWidget* PingWheelWidget;//[Offset: 0x4c8, Size: 0x8]
	TigerWidget* Watermark;//[Offset: 0x4d0, Size: 0x8]
	TigerSpawnPointSelectionUi* SpawnSelectionUi;//[Offset: 0x4d8, Size: 0x8]
	TigerArchetypeSelectPragueUI* ArchetypeSelectUi;//[Offset: 0x4e0, Size: 0x8]
	TigerWidget* PreMatchMapWidget;//[Offset: 0x4e8, Size: 0x8]
	class TigerDeathScreen* DeathScreenClass;//[Offset: 0x4f0, Size: 0x8]
	TigerDeathScreen* DeathScreen;//[Offset: 0x4f8, Size: 0x8]
	TigerInventoryUI* InventoryUi;//[Offset: 0x500, Size: 0x8]
	TigerMapSubMenu* MapUi;//[Offset: 0x508, Size: 0x8]
	TigerInputMenuUI* SettingsMenuUi;//[Offset: 0x510, Size: 0x8]
	TigerTeamMenuUI* TeamMenuUi;//[Offset: 0x518, Size: 0x8]
	TigerReportMenuUI* ReportMenuUi;//[Offset: 0x520, Size: 0x8]
	TigerWinScreenWidget* WinScreen;//[Offset: 0x528, Size: 0x8]
	TigerWidget* HealthBar;//[Offset: 0x530, Size: 0x8]
	class TigerWidget[] PreMatchUiClasses;//[Offset: 0x538, Size: 0x10]
	TigerWidget*[] PreMatchWidgets;//[Offset: 0x558, Size: 0x10]
	TigerPreMatchPaperDollComponent* PreMatchPaperDollComponent;//[Offset: 0x568, Size: 0x8]
	void UpdateStatusMessage();// 0x197e4f0
	void TryUpdateWinScreen();// 0x1554220
	void ToggleTeamMenu();// 0x1554200
	void ToggleSettingsMenu();// 0x15541e0
	void ToggleReportMenu();// 0x15541c0
	void ToggleMap();// 0x15541a0
	void ToggleInventory();// 0x1554180
	void ToggleInputMenu();// 0x1554160
	void ToggleCharacterMenu();// 0xb7a5a0
	void ShowWinScreen(class TigerWidget InWinScreenClass, int InZValue);// 0x1554090
	void ShowIntroPrompt(float InDelayAfterMatchStart);// 0x1554010
	void ShowInteractionPrompt(TigerSimpleTextPrompt* Prompt);// 0x1553f80
	void ShowDeathScreen(int InPlayerPlacement, int InNumGroupsAtStart, int InPlayerStateId, enum InKillerType, bool bInReturnToElysiumOnClose);// 0x1553de0
	void RaiseOnDropItemAction();// 0x1553dc0
	void PreparePreMatchMapForMatchStart(float InMatchStartTimeStamp);// 0x197e4f0
	void PreMatchStateChanged(out const TigerPreMatchStateInfo InNewPreMatchState);// 0x197e4f0
	void OpenPreMatchMap(float InPreMatchMapEndTimeStamp);// 0x197e4f0
	void OnTookDamage(out const TigerDamageSource DamageSource);// 0x197e4f0
	void OnStartMatchAssetsLoaded();// 0x197e4f0
	void OnPreMatchWidgetClassesLoaded();// 0x197e4f0
	void OnPersistentPlayerStateInitialized(TigerPlayerController* InPlayerController);// 0x1553ca0
	void OnGainedSeasonExperience(enum InEvent, int InReceivedExperience, int InExperienceGained, TigerCharacter* InEventTiedCharacter);// 0x197e4f0
	void OnEndedSpectator();// 0x197e4f0
	void OnBecameSpectator();// 0x197e4f0
	bool IsPreSpawnBackgroundOpen();// 0x197e4f0
	bool IsPreMatchAssetsLoaded();// 0x1553c70
	bool IsAllowedToOpenMainMenu();// 0x1553c40
	void HideMap(bool bInShowMinimap);// 0x1553bb0
	void HideInteractionPrompt(TigerSimpleTextPrompt* Prompt);// 0x1553b20
	void HandleLoadingScreenConditionsMet();// 0x1553960
	void HandleGameStateSet(TigerGameState* InGameState);// 0x15538d0
	TigerWidget* GetPreSpawnWidget(class TigerWidget InCppClass);// 0x1553830
	TigerMapSubMenu* GetMapUi();// 0x1553800
	TigerInventoryUI* GetInventoryUI();// 0x15537d0
	void EndPreMatch();// 0x197e4f0
	void CloseWinScreen();// 0x15532e0
	void CloseDeathScreen();// 0x15532c0

--------------------------------
Class: TigerHUD.HUD.Actor.Object
	delegate OnInGameMenuToggled;//[Offset: 0x318, Size: 0x10]
	delegate OnMenuOpened;//[Offset: 0x328, Size: 0x10]
	delegate OnMenuClosed;//[Offset: 0x338, Size: 0x10]
	TigerIngameMenuWidget* IngameMenuUI;//[Offset: 0x348, Size: 0x8]
	TigerGroupUIWidget* GroupStatus;//[Offset: 0x350, Size: 0x8]
	TigerEmoteWheelWidget* EmoteWheel;//[Offset: 0x358, Size: 0x8]
	TigerNotificationsUI* NotificationsUI;//[Offset: 0x360, Size: 0x8]
	TigerContextualHelpUI* ContextualHelpUI;//[Offset: 0x368, Size: 0x8]
	TigerWidget* PerformanceIndicatorUi;//[Offset: 0x370, Size: 0x8]
	TigerInGameGraphs* InGameGraphsUI;//[Offset: 0x378, Size: 0x8]
	TigerWeaponAmmoWidget* WeaponAmmo;//[Offset: 0x380, Size: 0x8]
	TigerPlayerController* TigerPlayerController;//[Offset: 0x3a0, Size: 0x8]
	TigerCrosshairWidget* Crosshair;//[Offset: 0x3a8, Size: 0x8]
	AutoInitializedWidget[] AutoInitializedWidgets;//[Offset: 0x3b0, Size: 0x10]
	TigerMenuWidget*[] CurrentlyOpenMenus;//[Offset: 0x3d0, Size: 0x10]
	UserWidget*[] HiddenWidgets;//[Offset: 0x3f0, Size: 0x10]
	WidgetComponent*[] HiddenWidgetComponents;//[Offset: 0x400, Size: 0x10]
	void ShowOnScreenUI();// 0x1525350
	void RemoveOnScreenWidget(TigerWidget* InWidget);// 0x1525200
	void RefreshEquippedWeapon();// 0x15251e0
	void OpenMenuWidget(TigerMenuWidget* InMenuWidget, int InZOrder);// 0x1525110
	void OnStreamerOptionChanged();// 0x15250f0
	void OnPawnPossessed();// 0x197e4f0
	void OnMenuWidgetOpened__DelegateSignature(TigerMenuWidget* InMenuWidget);// 0x197e4f0
	void OnInGameMenuToggled__DelegateSignature(bool bIsOpen);// 0x197e4f0
	bool IsAnyMenuWidgetOpen();// 0x1524740
	void HideOnScreenUI();// 0x1523db0
	int GetDefaultZOrderForAutoInitializedWidget(TigerWidget* InWidget);// 0x1523a80
	void CloseMenuWidget(TigerMenuWidget* InMenuWidget);// 0x1523700
	void CloseIngameMenu();// 0x15236e0
	void AddToViewportWhenVisible(TigerWidget* InWidget, int InZOrder);// 0x1523200
	void AddOnScreenWidget(TigerWidget* InWidget);// 0x1523170

--------------------------------
Class: TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	FText DisplayText;//[Offset: 0x280, Size: 0x18]
	float PromptLifetimeFailsafe;//[Offset: 0x298, Size: 0x4]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	void SetText(FText Text);// 0x15e0190
	void OnShowPrompt();// 0x197e4f0
	void OnHidePrompt();// 0x197e4f0
	void Hide();// 0x15dfb10
	void FailsafeHide();// 0x15df980
	bool CanBeShown();// 0x15df870

--------------------------------
Class: TigerIngameMenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	class TigerIngameSubmenuWidget[] SubmenuClasses;//[Offset: 0x298, Size: 0x10]
	TigerIngameSubmenuWidget*[] SubmenuWidgets;//[Offset: 0x2a8, Size: 0x10]
	int ActiveMenuIndex;//[Offset: 0x2b8, Size: 0x4]
	TigerIngameSubmenuWidget* SelectedMenu;//[Offset: 0x2c0, Size: 0x8]
	bool bShouldShowPlayerCurrency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	void ToggleExistingSubmenu(class TigerIngameSubmenuWidget WidgetClass);// 0x152a880
	void SelectMenuToTheRight();// 0x197e4f0
	void SelectMenuToTheLeft();// 0x197e4f0
	void SelectMenu(TigerIngameSubmenuWidget* NewSelectedMenu);// 0x152a030
	void OnMenuSelected();// 0x197e4f0
	void LocalPlayerSpawned();// 0x197e4f0
	bool IsSubmenuSelected(class TigerIngameSubmenuWidget WidgetClass);// 0x1529800
	bool IsSubmenuOpen(class TigerIngameSubmenuWidget WidgetClass);// 0x1529760
	void HideFadeBackground();// 0x197e4f0
	TigerIngameSubmenuWidget* GetSubmenuFromClass(class TigerIngameSubmenuWidget WidgetClass);// 0x1529610
	void ConstructSubMenusIfNotConstructed();// 0x197e4f0

--------------------------------
Class: TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	FText MenuName;//[Offset: 0x298, Size: 0x18]
	TigerIngameMenuWidget* MenuContainer;//[Offset: 0x2b0, Size: 0x8]
	bool InGameMenuEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	enum NewNotificationMenuOption;//[Offset: 0x2b9, Size: 0x1]
	void UnregisterSharedInputs();// 0x197e4f0
	void RegisterSharedInputs();// 0x197e4f0
	bool GetIsTransitioning();// 0x15295f0

--------------------------------
Class: TigerGroupUIWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void OnGroupMemberReadyStatusChanged(TigerPlayerState* InGroupMember, bool bInIsReadyForMatchmaking);// 0x197e4f0
	void ClearGroupMembers();// 0x197e4f0
	void AddGroupMemberToCanvas(TigerPlayerState* InGroupMember, bool bInIsReadyForMatchmaking);// 0x197e4f0

--------------------------------
Class: TigerEmoteWheelWidget.TigerWheelWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayer* Player;//[Offset: 0x2a8, Size: 0x8]
	TigerEmoteControllerComponent* EmoteController;//[Offset: 0x2b0, Size: 0x8]
	void PopulateLoadedEmotes(out const Texture2D*[] InEmoteIcons);// 0x14f9f90

--------------------------------
Class: TigerNotificationsUI.TigerWidget.UserWidget.Widget.Visual.Object
	float HolyIncenseImminentTime;//[Offset: 0x280, Size: 0x4]
	void OnReceivedReward();// 0x197e4f0
	void OnQuestUnlocked(const TigerQuest* InNewQuest);// 0x197e4f0
	void OnQuestObjectiveUnlocked(const TigerQuestObjective* InCompleteObjective);// 0x197e4f0
	void OnQuestObjectiveCompleted(const TigerQuestObjective* InCompleteObjective);// 0x197e4f0
	void OnQuestCompleted(const TigerQuest* InCompletedQuest);// 0x197e4f0
	void OnPlayerHealed(out const TigerPlayerStateGameData InPlayerData);// 0x197e4f0
	void OnPlayerDeath(out const TigerPlayerStateGameData InKilledPlayerData, out const TigerPlayerStateGameData InInstigatorPlayerData, const bool bIsPlayerInSameGroup);// 0x197e4f0
	void OnOtherPlayerBrokeMasquerade(TigerPlayerState* InPlayerState);// 0x197e4f0
	void OnMemberLeftGroup(out const TigerPlayerStateGameData InPlayerData);// 0x197e4f0
	void OnMemberJoinedGroup(out const TigerPlayerStateGameData InPlayerData);// 0x197e4f0
	void OnHolyIncenseImminent(float Time);// 0x197e4f0
	void OnGroupPingResponse(const TigerPingClientData* InPingData, TigerPlayerState* InRespondingPlayer, bool bInIsInterested);// 0x197e4f0
	void OnGroupPingCanceled(const TigerPingClientData* InPingData);// 0x197e4f0
	void OnGroupPing(out const TigerPingNotificationNetData PingData, TigerPlayerState* InSendingPlayerState);// 0x197e4f0
	void OnGroupInviteReceived(const TigerPartyInvite* InInvite);// 0x197e4f0
	void OnGrimoireItemUnlocked(const TigerGrimoireEntry* InGrimoireEntry);// 0x197e4f0
	void OnFriendRemoved(TigerFriend* InLostFriend);// 0x197e4f0
	void OnFriendInviteSent();// 0x197e4f0
	void OnFriendInviteRejected(const TigerFriendInvite* InInvite);// 0x197e4f0
	void OnFriendInviteReceived(const TigerFriendInvite* InInvite);// 0x197e4f0
	void OnFriendAdded(TigerFriend* InNewFriend);// 0x197e4f0
	void OnExperienceGained(const TigerExperienceEvent* ExperienceEvent, const int GainedExperience);// 0x197e4f0
	void OnCollectibleFound(const TigerCollectibleData* InCollectible);// 0x197e4f0
	void OnChallengeTierCompleted(const TigerChallenge* InChallenge);// 0x197e4f0
	void OnChallengeCompleted(const TigerChallenge* InCompletedChallenge);// 0x197e4f0
	void OnArtifactFound(out const TigerPlayerStateGameData InPlayerData, const TigerArtifactAsset* InArtifactAsset);// 0x197e4f0
	void OnAcceptGroupInviteFailed(out const TigerInviteId InInviteId);// 0x197e4f0
	void ItemReceived(out const TigerItemNotification ItemNotification);// 0x197e4f0

--------------------------------
Class: TigerFriend.Object
	delegate OnOnlineStatusChanged;//[Offset: 0x28, Size: 0x10]
	delegate OnLocationChanged;//[Offset: 0x38, Size: 0x10]
	delegate OnPlayerCardLoaded;//[Offset: 0x48, Size: 0x10]
	FString DISPLAYNAME;//[Offset: 0x58, Size: 0x10]
	TigerPersistentPlayerID PlayerId;//[Offset: 0x68, Size: 0x10]
	SharkUserId SharkmobUserId;//[Offset: 0x78, Size: 0x10]
	FString PlatformUserId;//[Offset: 0x88, Size: 0x10]
	enum Channel;//[Offset: 0x98, Size: 0x1]
	FString Location;//[Offset: 0xa0, Size: 0x10]
	FString PlayerLevel;//[Offset: 0xb8, Size: 0x10]
	FString CardDataString;//[Offset: 0xc8, Size: 0x10]
	void OnPlayerCardLoaded__DelegateSignature();// 0x197e4f0
	void OnOnlineStatusChanged__DelegateSignature(bool bInOnline);// 0x197e4f0
	void OnLocationChanged__DelegateSignature(FString InLocation);// 0x197e4f0
	SharkUserId GetSharkmobUserId();// 0x1504320
	int GetPlayerLevel();// 0x15042c0
	TigerPersistentPlayerID GetPlayerId();// 0x1504280
	enum GetPlayerChannel();// 0x1504250
	FString GetPlatformUserId();// 0x1504210
	bool GetOnline();// 0x15041e0
	FString GetLocation();// 0x1504170
	bool GetIsSharkmobFriend();// 0x14ff820
	FString GetDisplayName();// 0x1503f00
	TigerCharacterCardData GetCardData();// 0x1503d80
	bool CouldRemove();// 0x14ff820
	bool CouldInviteToParty();// 0x1503b60

--------------------------------
Class: TigerFriendInvite.Object
	delegate OnPlayerCardLoaded;//[Offset: 0x28, Size: 0x10]
	FString DISPLAYNAME;//[Offset: 0x38, Size: 0x10]
	TigerPersistentPlayerID PlayerId;//[Offset: 0x48, Size: 0x10]
	SharkUserId SharkmobUserId;//[Offset: 0x58, Size: 0x10]
	FString PlatformUserId;//[Offset: 0x68, Size: 0x10]
	enum Channel;//[Offset: 0x78, Size: 0x1]
	FString PlayerLevel;//[Offset: 0x80, Size: 0x10]
	FString CardDataString;//[Offset: 0x90, Size: 0x10]
	void OnPlayerCardLoaded__DelegateSignature();// 0x197e4f0
	void Init_Mock(FString InDisplayName, out const enum InChannel, const int InPlayerLevel);// 0x1504360
	int GetPlayerLevel();// 0x15042f0
	FString GetDisplayName();// 0x1503f40
	TigerCharacterCardData GetCardData();// 0x1503df0

--------------------------------
Class: TigerArtifactAsset.TigerItemAsset.DataAsset.Object
	enum ArtifactAbility;//[Offset: 0x130, Size: 0x1]

--------------------------------
Class: TigerItemNotification
	TigerItemAsset* Item;//[Offset: 0x0, Size: 0x8]
	int ItemCount;//[Offset: 0x8, Size: 0x4]
	FText OverrideName;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TigerInGameGraphs.TigerWidget.UserWidget.Widget.Visual.Object
	TigerGraphWidget* NetGraphWidget;//[Offset: 0x280, Size: 0x8]
	void ToggleNetGraph();// 0x197e4f0
	void ShowNetGraph(const bool bInShow);// 0x197e4f0
	bool IsNetGraphWidgetEnabled();// 0x1529700

--------------------------------
Class: TigerGraphWidget.UserWidget.Widget.Visual.Object
	bool bPreviewInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	int ColumnForGraphName;//[Offset: 0x264, Size: 0x4]
	int ColumnForGraphData;//[Offset: 0x268, Size: 0x4]
	bool bIsRealtime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	int HistoryInSamples;//[Offset: 0x270, Size: 0x4]
	double UpdateInSeconds;//[Offset: 0x278, Size: 0x8]
	double HistoryInSeconds;//[Offset: 0x280, Size: 0x8]
	SlateBrush BackgroundBrush;//[Offset: 0x288, Size: 0x88]
	bool bAntiAliasLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float LineThickness;//[Offset: 0x314, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0x318, Size: 0x58]
	TigerGraphData*[] Graphs;//[Offset: 0x378, Size: 0x10]
	void RemoveAllGraphs();// 0x151b410
	void FinishedAddingGraphs();// 0x151a840
	void AddGraph(out const FText InLegendName, out const LinearColor InLegendColour, const float InMinBounds, const float InMaxBounds, const enum InMetricsVisibility, const byte InPrecision, out TigerGraphData* OutGraphData);// 0x151a510

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerGraphData.Object
	void GraphAddSample__DelegateSignature(const float InSample);// 0x197e4f0
	void AddSample(const float InSample);// 0x151a790

--------------------------------
Class: TigerPromptCollectionWidget.TigerWidget.UserWidget.Widget.Visual.Object
	class TigerSimpleTextPrompt* MasqueradeBreachedPrompt;//[Offset: 0x280, Size: 0x8]
	class TigerSimpleTextPrompt* MasqueradeBreachedByNpcKillPrompt;//[Offset: 0x288, Size: 0x8]
	class TigerSimpleTextPrompt* MasqueradeBreachedByNpcFeedingPrompt;//[Offset: 0x290, Size: 0x8]
	class TigerSimpleTextPrompt* MasqueradeRestoredPrompt;//[Offset: 0x298, Size: 0x8]
	class TigerSimpleTextPrompt* IntroPrompt;//[Offset: 0x2a0, Size: 0x8]
	class TigerSimpleTextPrompt* FirstGasPrompt;//[Offset: 0x2a8, Size: 0x8]
	class TigerSimpleTextPrompt* SubsequentGasPrompt;//[Offset: 0x2b0, Size: 0x8]
	class TigerSimpleTextPrompt* GasStartedMovingPrompt;//[Offset: 0x2b8, Size: 0x8]
	class TigerSimpleTextPrompt* JudgeSpawnedPrompt;//[Offset: 0x2c0, Size: 0x8]
	class TigerSimpleTextPrompt* JudgeSlainPrompt;//[Offset: 0x2c8, Size: 0x8]
	class TigerSimpleTextPrompt* SupplyDropPrompt;//[Offset: 0x2d0, Size: 0x8]
	class TigerSimpleTextPrompt* SuperHighPotentNearbyPrompt;//[Offset: 0x2d8, Size: 0x8]
	class TigerSimpleTextPrompt* GameModeInteractionPrompt;//[Offset: 0x2e0, Size: 0x8]
	class TigerSimpleTextPrompt* EliminatedPlayerPrompt;//[Offset: 0x2e8, Size: 0x8]
	class TigerSimpleTextPrompt* DownedPlayerPrompt;//[Offset: 0x2f0, Size: 0x8]
	class TigerSimpleTextPrompt* AssistPrompt;//[Offset: 0x2f8, Size: 0x8]
	class TigerEnteringNewAreaPrompt* EnteringNewAreaPrompt;//[Offset: 0x300, Size: 0x8]
	class TigerSimpleTextPrompt* ArtifactPickedUpPrompt;//[Offset: 0x308, Size: 0x8]
	class TigerSimpleTextPrompt* RespawnsDisabledPrompt;//[Offset: 0x310, Size: 0x8]
	class TigerSimpleTextPrompt* MatchMedalPrompt;//[Offset: 0x318, Size: 0x8]
	TigerQueuedTextPrompt[] TextPromptQueue;//[Offset: 0x320, Size: 0x10]
	TigerQueuedTextPromptPriorityEntry[] Prompts;//[Offset: 0x330, Size: 0x10]
	void EnqueueTextPrompt(class TigerSimpleTextPrompt InTextPrompt);// 0x15bf1d0

--------------------------------
Class: TigerEnteringNewAreaPrompt.TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	FText SubText;//[Offset: 0x2a8, Size: 0x18]
	Texture2D* TextBackground;//[Offset: 0x2c0, Size: 0x8]

--------------------------------
Class: TigerQueuedTextPrompt
	TigerSimpleTextPrompt* Prompt;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerQueuedTextPromptPriorityEntry
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	class TigerSimpleTextPrompt* PromptClass;//[Offset: 0x8, Size: 0x8]
	FName VisibleName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerCrosshairNotificationsContainerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnReadyToDisplayNext;//[Offset: 0x280, Size: 0x10]
	void OnReadyToDisplayNext__DelegateSignature();// 0x197e4f0
	void HandleNext();// 0x14d0c80
	void DisplayNotification(enum InNotification);// 0x197e4f0
	bool CanPresentNotification();// 0x197e4f0

--------------------------------
Class: TigerMusicManager.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TigerCompassUI.TigerWidget.UserWidget.Widget.Visual.Object
	FText[] HeadingText;//[Offset: 0x280, Size: 0x10]
	void ShowCompassObject(TigerCompassMarkerWidget* CompassObject);// 0x197e4f0
	void HideCompassObject(TigerCompassMarkerWidget* CompassObject);// 0x197e4f0
	void GetHeadingText(const float InDegreeRangeCardinalAndOrdinalVisible, out FText OutHeadingText, out float OutZYaw);// 0x14ca730
	void CalculateTextWidgetPositions(out const <TigerStyledRichTextBlock*,float> InDegreeOffsetsByTextWidget, const PanelWidget* InTextWidgetCanvasParent, out <TigerStyledRichTextBlock*,Vector2D> OutNewPositionsByTextWidget);// 0x14c9cf0

--------------------------------
Class: TigerStyledRichTextBlock.RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	DataTableRowHandle TextStyleRow;//[Offset: 0x678, Size: 0x10]
	bool bAutoSizeText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	DataTableRowHandle TextSizeRow;//[Offset: 0x690, Size: 0x10]
	int NumAllowedDownsizeRows;//[Offset: 0x6a0, Size: 0x4]
	bool bTextScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]
	class ScrollBox* ScrollBoxClass;//[Offset: 0x6a8, Size: 0x8]
	ScrollBox* ScrollBox;//[Offset: 0x6b0, Size: 0x8]
	TextBlockStyle ResizedTextStyle;//[Offset: 0x6b8, Size: 0x270]
	void SetWrapTextAt(float InWrapTextAt);// 0x15e8080
	void SetTextStyleSetButKeepTextStyle(DataTable* InNewTextStyleSet);// 0x15e7ff0
	void SetTextStyle(DataTableRowHandle InTextStyle);// 0x15e7f50
	void SetDefaultUIColor(enum InTigerUIColor, enum InTigerColourSpace);// 0x15e7e80
	void SetDefaultShadowUIColorAndOpacity(enum InTigerUIColor, enum InTigerColourSpace, float InOpacity);// 0x15e7d70
	void SetDefaultShadowUIColor(enum InTigerUIColor, enum InTigerColourSpace);// 0x15e7ca0
	void SetDefaultOutline(FontOutlineSettings InOutlineSettings);// 0x15e7bf0
	void RefreshSlateTextBlock();// 0x15e7bd0
	void ClearDefaultStyleOverrides();// 0x15e77f0

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x140, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x148, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x160, Size: 0x270]
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x3d4, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x3d8, Size: 0x270]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x648, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x29d1db0
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x29d1d20
	void SetText(out const FText InText);// 0x29d1c50
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x29d13a0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x29d0e60
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x29d0ce0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x29d0c60
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x29d0bd0
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x29d0ab0
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x29d09c0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x29d08b0
	FText GetText();// 0x29cfc60
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x29cf9e0
	void ClearAllDefaultStyleOverrides();// 0x29cf530

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x108, Size: 0x3]
	byte Justification;//[Offset: 0x10b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x110, Size: 0x4]
	Margin Margin;//[Offset: 0x114, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x124, Size: 0x4]
	void SetJustification(byte InJustification);// 0x29d5330

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x88]
	SlateBrush StrikeBrush;//[Offset: 0x160, Size: 0x88]
	SlateBrush UnderlineBrush;//[Offset: 0x1e8, Size: 0x88]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: TigerMasqueradeStatusWidget.TigerResourceBarUI.TigerWidget.UserWidget.Widget.Visual.Object
	byte PlayerVisibilityToNPC;//[Offset: 0x398, Size: 0x1]
	bool bIsHunted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	void OnNpcLostSightOfPlayer(TigerBaseNPC* InNpc);// 0x197e4f0
	void OnNpcGainedSightOfPlayer(TigerBaseNPC* InNpc);// 0x197e4f0
	void OnMasqueradeRestored();// 0x14e1610
	void OnMasqueradeBreached();// 0x14ef810
	void AddNpcDirectionalIndicator(const TigerBaseNPC* InNpc);// 0x197e4f0

--------------------------------
Class: TigerResourceBarUI.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnHealthChanged;//[Offset: 0x280, Size: 0x10]
	TigerCharacter* TigerCharacterOwner;//[Offset: 0x290, Size: 0x8]
	enum BarType;//[Offset: 0x298, Size: 0x1]
	TigerResourceBarSegmentUI*[] HealthBarSegments;//[Offset: 0x2a0, Size: 0x10]
	LinearColor FilledColor;//[Offset: 0x2b0, Size: 0x10]
	LinearColor IsDownedFilledColor;//[Offset: 0x2c0, Size: 0x10]
	LinearColor EmptyColor;//[Offset: 0x2d0, Size: 0x10]
	LinearColor LockedColor;//[Offset: 0x2e0, Size: 0x10]
	int NumberOfSegments;//[Offset: 0x2f0, Size: 0x4]
	bool bShouldShowLostHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bForceRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float LostHealthDelay;//[Offset: 0x2f8, Size: 0x4]
	float LostHealthBarSpeed;//[Offset: 0x2fc, Size: 0x4]
	float LostHealthPercentage;//[Offset: 0x300, Size: 0x4]
	bool bShouldShowGainedResources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	float GainedResourceDelay;//[Offset: 0x308, Size: 0x4]
	float GainedResourceBarSpeed;//[Offset: 0x30c, Size: 0x4]
	float GainedResourcePercentage;//[Offset: 0x310, Size: 0x4]
	float TheoreticalMaxResources;//[Offset: 0x314, Size: 0x4]
	float WidthBetweenSegments;//[Offset: 0x318, Size: 0x4]
	void TigerDelegateHealthChanged__DelegateSignature(float InNewHealth, float InNewHealthPercentage);// 0x197e4f0
	void SetOwner(TigerCharacter* TigerCharacter);// 0x15d4340
	void ResetCurrentResourceNameIndex();// 0x15d4020
	void OnSegmentFilled(float InProgress);// 0x197e4f0
	void OnSegmentEmptied(float HorizontalProgress);// 0x197e4f0
	void OnHealthLost();// 0x197e4f0
	float GetRecentResourcesLost();// 0x15d39c0
	float GetMaxResources();// 0x15d3950
	LinearColor GetLockedColor();// 0x15d3910
	LinearColor GetFilledColor();// 0x15d38a0
	LinearColor GetEmptyColor();// 0x15d3860
	float GetCurrentResources();// 0x15d3820

--------------------------------
Class: TigerResourceBarSegmentUI.TigerWidget.UserWidget.Widget.Visual.Object
	bool NativeTickDisabledInCode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	MaterialInstanceDynamic* SegmentMaterial;//[Offset: 0x288, Size: 0x8]
	float MinResource;//[Offset: 0x290, Size: 0x4]
	float MaxResource;//[Offset: 0x294, Size: 0x4]

--------------------------------
Class: TigerRevivingStatusUI.TigerWidget.UserWidget.Widget.Visual.Object
	FText RegeneratingStatusText;//[Offset: 0x280, Size: 0x18]
	FText DiablerizingStatusText;//[Offset: 0x298, Size: 0x18]
	FText BeingRevivedStatusText;//[Offset: 0x2b0, Size: 0x18]
	enum PhysicalInteractionStatus;//[Offset: 0x2c8, Size: 0x1]
	bool bShouldUpdateTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	float TimeLeft;//[Offset: 0x2cc, Size: 0x4]
	float PercentageLeft;//[Offset: 0x2d0, Size: 0x4]
	bool ShowPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	void StatusChanged();// 0x197e4f0

--------------------------------
Class: TigerConsumableWheelWidget.TigerWheelWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayer* Player;//[Offset: 0x2a8, Size: 0x8]
	TigerConsumablesComponent* ConsumablesComponent;//[Offset: 0x2b0, Size: 0x8]
	TigerInventoryComponent* InventoryComponent;//[Offset: 0x2b8, Size: 0x8]
	TigerConsumableAsset*[] DefaultSortOrder;//[Offset: 0x2c0, Size: 0x10]
	<TigerConsumableAsset*,int> DefaultSortOrderMap;//[Offset: 0x2d0, Size: 0x50]
	TigerConsumableAsset*[] SortedMenuItems;//[Offset: 0x320, Size: 0x10]
	bool GetSortedMenuItem(int InIndex, out TigerConsumableAsset* OutConsumable, out int OutQuantityAvailable);// 0x14ca890

--------------------------------
Class: TigerConsumableAsset.TigerItemAsset.DataAsset.Object
	AnimMontage* Montage;//[Offset: 0x130, Size: 0x8]
	bool bCanBeUsedWhileMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	float UseTime;//[Offset: 0x13c, Size: 0x4]
	int MaxStack;//[Offset: 0x140, Size: 0x4]
	AkAudioEvent* BeginUseAudioEvent;//[Offset: 0x148, Size: 0x8]
	AkAudioEvent* UseSuccessfulAudioEvent;//[Offset: 0x150, Size: 0x8]
	AkAudioEvent* UseFailedAudioEvent;//[Offset: 0x158, Size: 0x8]
	class TigerCharacterEffect* SuccessfulUseCharacterEffect;//[Offset: 0x160, Size: 0x8]
	class TigerBuffPostProcess* BeginUsePostProcess;//[Offset: 0x168, Size: 0x8]
	class TigerBuffPostProcess* SuccessfulBuffPostProcess;//[Offset: 0x170, Size: 0x8]

--------------------------------
Class: TigerConsumablesComponent.ActorComponent.Object
	delegate OnUseConsumableFinished;//[Offset: 0xb0, Size: 0x10]
	delegate OnUseConsumableStarted;//[Offset: 0xc0, Size: 0x10]
	delegate OnUseConsumableCancelled;//[Offset: 0xd0, Size: 0x10]
	delegate OnUseConsumablePrevented;//[Offset: 0xe0, Size: 0x10]
	AnimMontage* FallbackUseMontage;//[Offset: 0xf0, Size: 0x8]
	TigerConsumableAsset* QuickUseConsumable;//[Offset: 0xf8, Size: 0x8]
	class TigerBuff* MovableBuffClass;//[Offset: 0x100, Size: 0x8]
	int CancelConsumableUseOnTraversalAction;//[Offset: 0x108, Size: 0x4]
	TigerPlayer* Player;//[Offset: 0x110, Size: 0x8]
	AnimMontage* CurrentMontage;//[Offset: 0x118, Size: 0x8]
	TigerConsumableAsset* CurrentConsumable;//[Offset: 0x120, Size: 0x8]
	TigerConsumableAsset* QuickConsumables;//[Offset: 0x128, Size: 0x8]
	void UseCallback();// 0x14cb320
	bool TriggerUseQuickUseConsumable();// 0x14cb2f0
	bool TriggerUseConsumable(TigerConsumableAsset* Consumable);// 0x14cb250
	bool TriggerDropConsumable(TigerConsumableAsset* Consumable);// 0x14cb1b0
	void TigerDelegateConsumableSuccessfullyFinishedUse__DelegateSignature(TigerConsumableAsset* Consumable);// 0x197e4f0
	void TigerDelegateConsumableStartedUse__DelegateSignature(TigerConsumableAsset* Consumable);// 0x197e4f0
	void TigerDelegateConsumablePrevented__DelegateSignature(TigerConsumableAsset* Consumable);// 0x197e4f0
	void TigerDelegateConsumableCancelledUse__DelegateSignature(TigerConsumableAsset* Consumable);// 0x197e4f0
	void Server_UseConsumable(TigerConsumableAsset* Consumable, const int InConsumableID);// 0x14cb0b0
	void Server_StopUseConsumable(TigerConsumableAsset* InConsumable, const int InConsumableID);// 0x14cafb0
	void OnTraversalAction(TigerPlayer* InPlayer, const enum InTraversalAction);// 0x14cad90
	void Multicast_StopUseConsumable(TigerConsumableAsset* InConsumable, const int InConsumableID);// 0x14cac30
	void Multicast_SimulateUseConsumable(TigerConsumableAsset* Consumable, float UseTime, const int InConsumableID);// 0x14cab10
	void Multicast_ClearConsumable();// 0x14caaf0
	bool IsUsingConsumable();// 0x14caac0
	bool IsPlayingConsumableMontage();// 0x14caa90
	float GetUseProgress();// 0x14ca9b0
	TigerConsumableAsset* GetCurrentlyUsingConsumable();// 0x14ca710
	bool GetConsumableAtIndex(int Index, out TigerConsumableAsset* Consumable, out int Stack);// 0x14ca550
	void Client_UseConsumableFailed(TigerConsumableAsset* InConsumable, const int InConsumableID);// 0x14ca0b0
	bool CanPickUpConsumable(TigerConsumableAsset* Consumable);// 0x14c9f60
	bool CanBePickedup(TigerConsumableAsset* Consumable);// 0x14c9f60

--------------------------------
Class: TigerInventoryComponent.ActorComponent.Object
	delegate OnInventoryChanged;//[Offset: 0xb0, Size: 0x10]
	int MaxItemsPerCategory;//[Offset: 0xc0, Size: 0x4]
	int AmmoStackDistance;//[Offset: 0xc4, Size: 0x4]
	SharkRandomDeviation DropItemLaunchSpeed;//[Offset: 0xc8, Size: 0x8]
	enum ArtifactNotificationLowestRarity;//[Offset: 0xd0, Size: 0x1]
	float ArtifactNotificationCooldown;//[Offset: 0xd4, Size: 0x4]
	byte SlotColumnCount;//[Offset: 0xd8, Size: 0x1]
	TigerPlayer* Player;//[Offset: 0x118, Size: 0x8]
	TigerItemAsset* UnarmedItemAsset;//[Offset: 0x120, Size: 0x8]
	TigerInventoryWeapon Weapons;//[Offset: 0x128, Size: 0x8]
	TigerItemData Items;//[Offset: 0x148, Size: 0x10]
	TigerAmmoAsset*[] AmmoPickupItems;//[Offset: 0x228, Size: 0x10]
	TigerInventorySlotContent[] Slots;//[Offset: 0x238, Size: 0x10]
	TigerItemData Artifact;//[Offset: 0x308, Size: 0x10]
	TigerItemData[] AdditionalItemsToDropOnDeath;//[Offset: 0x318, Size: 0x10]
	TigerItemAsset*[] ItemBlacklistOnDeath;//[Offset: 0x328, Size: 0x10]
	<TigerItemAsset*,float> ArtifactPickupTimestamps;//[Offset: 0x338, Size: 0x50]
	void UnequipWeaponModForSlot(enum Slot, TigerItemAsset* ModItemAsset);// 0x1530590
	TigerHuntingKnifeItemAsset* TryToGetHuntingKnifeAsset();// 0x1530560
	void SwapRangedWeaponSlots();// 0x1530540
	void SwapModWeapon(const enum InModType);// 0x15304c0
	void SetSwapOutDefaultWeaponOnPickup(bool bInSwapOutDefaultWeaponOnPickup);// 0x1530430
	void Server_UnequipWeaponModForSlot(enum InSlot, TigerItemAsset* InModItemAsset);// 0x1530330
	void Server_SwapRangedWeaponSlots();// 0x15302e0
	void Server_SwapModWeapon(const enum InModType);// 0x1530230
	void Server_SetSwapOutDefaultWeaponOnPickup(bool bInSwapOutDefaultWeaponOnPickup);// 0x1530170
	void Server_RemoveItem(TigerItemAsset* Item, bool bUpdateEquippedItem);// 0x1530070
	void Server_EquipWeaponSlot(enum WeaponSlot);// 0x152ffc0
	void Server_EquipWeaponMod(TigerRangedModItemAsset* InModItemAsset);// 0x152ff00
	void Server_DropWeapon(enum InWeaponSlot);// 0x152fe50
	void Server_DropItem(TigerItemAsset* Item, int DropCount, bool bUpdateEquippedItem);// 0x152fd10
	void RemoveItem(TigerItemAsset* Item, bool bUpdateEquippedItem);// 0x152fc20
	void OnInventoryChanged__DelegateSignature(TigerInventoryComponent* InInventoryComponent);// 0x197e4f0
	bool IsModSupportedForWeapon(const TigerRangedModItemAsset* InModItemAsset, const enum InWeaponSlot);// 0x152f9d0
	bool IsCategoryFull(const enum InventoryType);// 0x152f900
	bool HasModEquippedOnWeapon(const TigerRangedModItemAsset* InModItemAsset, const enum InWeaponSlot);// 0x152f760
	bool HasItemInCategory(const enum InventoryType);// 0x152f6d0
	bool HasItem(TigerItemAsset* InItem);// 0x152f630
	TigerItemAsset* GetWeaponItemBySlot(enum Slot);// 0x152f4d0
	void GetWeaponInfoForUnequippedModItem(TigerRangedModItemAsset* ModItemAsset, bool bIgnoreEquippedMod, out TigerInventoryWeapon WeaponOut, out TigerModSlotInfo ReplacesModOut);// 0x152f340
	TigerWeapon* GetWeaponBySlot(enum WeaponSlot);// 0x152f2b0
	void GetUsableModsForUnequippedWeaponItem(const TigerItemAsset* InWeaponItem, out TigerModSlotInfo[] OutWeaponItemMods, out bool bOutHasAnyTransferableMods);// 0x152f170
	enum GetSlotForUnequippedWeaponItem(const TigerItemAsset* WeaponItem);// 0x152f0d0
	TigerInventorySlotContent GetSlotForPosition(const int Column, const int Row);// 0x152eff0
	enum GetPickupInfo(TigerItemAsset* Item, int ItemCount, out int OutPickedUpItemCount);// 0x152eed0
	TigerModSlotInfo[] GetModsForSlot(const enum InSlot);// 0x152edf0
	int GetItemCountByCategory(const enum InventoryType);// 0x152ed60
	int GetItemCount(const TigerItemAsset* InItemAsset);// 0x152ecc0
	TigerItemAsset* GetItemByType(enum InventoryType);// 0x152ec30
	int GetInventoryAmmoByType(enum AmmoType);// 0x152eba0
	TigerItemAsset*[] GetInventory();// 0x152eb20
	bool GetEquippedRangedWeaponAmmo(out int OutWeaponAmmo, out int OutInventoryAmmo);// 0x152ea10
	TigerItemAsset* GetArtifact();// 0x152e9c0
	int GetAmmoInWeaponForSlot(enum Slot);// 0x152e930
	TigerAmmoAsset* GetAmmoAssetOfSlot(enum Slot);// 0x152e8a0
	TigerAmmoAsset* GetAmmoAssetFromAmmoType(const enum AmmoType);// 0x152e810
	void EquipWeaponMod(TigerRangedModItemAsset* ModItemAsset);// 0x152e780
	void EquipItem(TigerItemAsset* Item);// 0x152e6f0
	void DropWeapon(enum InWeaponSlot);// 0x152e670
	void DropItem(TigerItemAsset* Item, bool bUpdateEquippedItem, int DropCount);// 0x152e560
	void Client_UpdateWeaponModForSlot(enum Slot, TigerRangedModItemAsset* EquippedBarrelMod, TigerRangedModItemAsset* EquippedAmmoMod, TigerRangedModItemAsset* EquippedScopeMod, TigerRangedModItemAsset* EquippedStockMod, TigerRangedModItemAsset* EquippedSpecialMod);// 0x152e380
	void Client_RevertSwapRangedWeaponSlots(const TigerWeapon* InPrimaryWeapon);// 0x152e1d0
	void Client_RemoveWeapon(enum InWeaponSlot, bool bInPickedUpNewWeaponInSlot);// 0x152e100
	void Client_RemoveFromInventory(TigerItemAsset* Item, int DropCount, bool bUpdateEquippedItem);// 0x152dff0
	void Client_AddToInventory(TigerItemAsset* InItem, const int16 InItemCount, bool bInNotifyPlayerOnNewItem, const enum InItemSourceID);// 0x152de90
	void AddToInventory(TigerItemAsset* InItem, const enum InItemSourceID, const int InItemCount, TigerLootBox* InLootbox, bool bInNotifyPlayerOnNewItem);// 0x152d6d0

--------------------------------
Class: TigerHuntingKnifeItemAsset.TigerItemAsset.DataAsset.Object

--------------------------------
Class: TigerRangedModItemAsset.TigerItemAsset.DataAsset.Object
	class TigerRangedWeaponModModifier[] ModEffects;//[Offset: 0x130, Size: 0x10]
	int ModEquipPriority;//[Offset: 0x140, Size: 0x4]
	enum ModType;//[Offset: 0x144, Size: 0x1]

--------------------------------
Class: TigerRangedWeaponModModifier.Object
	void OnModUnequipped(TigerEquippedModModifierValues* Modifiers);// 0x197e4f0
	void OnModEquipped(TigerEquippedModModifierValues* Modifiers);// 0x197e4f0

--------------------------------
Class: TigerEquippedModModifierValues.Object
	TigerMaxIntAggregator* ExtendedMagazineLevel;//[Offset: 0x28, Size: 0x8]
	TigerFloatMultiplierAggregator* ReloadSpeed;//[Offset: 0x30, Size: 0x8]
	TigerFloatMultiplierAggregator* RecoilMultiplier;//[Offset: 0x38, Size: 0x8]
	TigerFloatMultiplierAggregator* SpreadMultiplier;//[Offset: 0x40, Size: 0x8]
	TigerFloatMultiplierAggregator* SwapSpeedMultiplier;//[Offset: 0x48, Size: 0x8]
	TigerFloatMultiplierAggregator* SpreadDecreaseMultiplier;//[Offset: 0x50, Size: 0x8]
	TigerFloatMinAggregator* ModdedFOV;//[Offset: 0x58, Size: 0x8]
	TigerFloatCurveMultiplierAggregator* AimedSpreadMultiplier;//[Offset: 0x60, Size: 0x8]
	TigerBoolAnyAggregator* IsScoped;//[Offset: 0x68, Size: 0x8]
	TigerBoolAnyAggregator* CanSwitchFireMode;//[Offset: 0x70, Size: 0x8]
	class TigerWeaponCrosshairWidget* CrossHairWidget;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerMaxIntAggregator.Object
	void RemoveValue(const int Value);// 0x14c6960
	void AddValue(const int Value);// 0x14c5700

--------------------------------
Class: TigerFloatMultiplierAggregator.Object
	void RemoveValue(const float Value);// 0x14c6780
	void AddValue(const float Value);// 0x14c55a0

--------------------------------
Class: TigerFloatMinAggregator.Object
	void RemoveValue(const float Value);// 0x14c6780
	void AddValue(const float Value);// 0x14c55a0

--------------------------------
Class: TigerFloatCurveMultiplierAggregator.Object
	void RemoveValue(CurveFloat* Value);// 0x14c6860
	void AddValue(CurveFloat* Value);// 0x14c5650

--------------------------------
Class: TigerBoolAnyAggregator.Object
	void RemoveValue(const bool Value);// 0x14c66a0
	void AddValue(const bool Value);// 0x14c54f0

--------------------------------
Class: TigerInventoryWeapon
	TigerItemAsset* ItemAsset;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerModSlotInfo
	TigerRangedModItemAsset* Mod;//[Offset: 0x0, Size: 0x8]
	bool IsUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TigerInventorySlotContent
	enum Type;//[Offset: 0x0, Size: 0x1]
	TigerItemAsset* ItemAsset;//[Offset: 0x8, Size: 0x8]
	int StackCount;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerDisciplinesUi.TigerWidget.UserWidget.Widget.Visual.Object
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0x280, Size: 0x8]
	TigerFeedingComponent* FeedingComponent;//[Offset: 0x288, Size: 0x8]
	TigerDisciplineBase* DisciplineForSlot;//[Offset: 0x290, Size: 0x8]
	enum DisciplineTypeForSlot;//[Offset: 0x2a8, Size: 0x1]
	void UpdateSlots(TigerDisciplineIcon* InSlotOneDisciplineIcon, TigerDisciplineIcon* InSlotTwoDisciplineIcon, UserWidget* InSlotOneChargesWidget, UserWidget* InSlotTwoChargesWidget, bool InHasPassiveFinalAct, float InDeltaTime, float InAlhpaLerpSpeed);// 0x14eb760
	void OnUpdatePassiveUI();// 0x197e4f0
	void OnSetNumberOfCharges(const enum DisciplineSlot);// 0x197e4f0
	void OnInitializeDisciplineUi();// 0x197e4f0
	void OnDisciplineInterrupted(enum InDisciplineSlot);// 0x197e4f0
	bool HasChargesIfApplicable(enum InSlot);// 0x14ea960
	TigerDisciplineBase* GetSkill(enum InSlot);// 0x14ea8d0
	enum GetDisciplineTypeForSlot(enum InSlot);// 0x14ea7d0
	int GetChargesForSlot(const enum DisciplineSlot);// 0x14ea710
	void GetActiveTimeLeftForDiscipline(enum InDisciplineType, out bool OutIsActive, out float OutTimeLeft);// 0x14ea5e0

--------------------------------
Class: TigerDisciplineIcon.TigerWidget.UserWidget.Widget.Visual.Object
	enum DisciplineType;//[Offset: 0x280, Size: 0x1]
	Texture2D* UiIconPtr;//[Offset: 0x288, Size: 0x8]
	bool DisciplineUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool CanBeUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool HasCharges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	bool bHasFinishedSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x293, Size: 0x1]
	int ChargeCount;//[Offset: 0x294, Size: 0x4]
	bool bIsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	int CooldownSeconds;//[Offset: 0x29c, Size: 0x4]
	float CooldownPercentage;//[Offset: 0x2a0, Size: 0x4]
	float OldCooldownPercentage;//[Offset: 0x2a4, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	int ActiveTimeLeft;//[Offset: 0x2ac, Size: 0x4]
	bool bIsRecharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	int RechargeRemainingSeconds;//[Offset: 0x2b4, Size: 0x4]
	float RechargePercentage;//[Offset: 0x2b8, Size: 0x4]
	void SetupSkillData(out enum InEnum, Texture2D* InTexture);// 0x14e6ba0
	void SetSkillIcon(Texture2D* InTexture);// 0x197e4f0
	void SetSkillData(bool bInIsUnlocked, bool bInHasCharge, bool bInCanBeUsed, int InChargeCount, int InCooldownSecondsLeft, float inCooldownPercentage, int InActiveTimeLeft, float InRechargePercentage, int InRechargeRemainingSeconds);// 0x14e68e0
	void OnInterrupted();// 0x197e4f0

--------------------------------
Class: TigerFeedingComponent.ActorComponent.Object
	bool bIsBloodDrained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIsBeingFedOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bDidAttackEndFeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	delegate OnStoppedFeeding;//[Offset: 0xb8, Size: 0x10]
	delegate OnFeedingDoneEvent;//[Offset: 0xc8, Size: 0x10]
	delegate OnStartedFeedingApproach;//[Offset: 0xd8, Size: 0x10]
	delegate OnStartedFeeding;//[Offset: 0xe8, Size: 0x10]
	delegate OnFeedingApproachDone;//[Offset: 0xf8, Size: 0x10]
	float MaximumFeedingDistance;//[Offset: 0x108, Size: 0x4]
	int MaxFeedingTicks;//[Offset: 0x10c, Size: 0x4]
	float FeedTickTime;//[Offset: 0x110, Size: 0x4]
	float PartRequiredForBloodDrainedState;//[Offset: 0x114, Size: 0x4]
	float FeedHealthAmount;//[Offset: 0x118, Size: 0x4]
	float TravelSpeed;//[Offset: 0x11c, Size: 0x4]
	float RotationInterpSpeed;//[Offset: 0x120, Size: 0x4]
	float VictimTransformInterpSpeed;//[Offset: 0x124, Size: 0x4]
	int FeedingTicksLeft;//[Offset: 0x128, Size: 0x4]
	int CurrentFeedingTicksLeft;//[Offset: 0x12c, Size: 0x4]
	TigerNPC* DesiredFeedingTarget;//[Offset: 0x130, Size: 0x8]
	TigerNPC* CurrentTarget;//[Offset: 0x138, Size: 0x8]
	class MatineeCameraShake* FeedingCameraShake;//[Offset: 0x140, Size: 0x8]
	TigerFeedingAnimationAsset* FeedingAnimationAsset;//[Offset: 0x148, Size: 0x8]
	float FeedingCameraDecoupleDelay;//[Offset: 0x150, Size: 0x4]
	float ApproachUIProgress;//[Offset: 0x154, Size: 0x4]
	float CapsuleDistanceCompensator;//[Offset: 0x158, Size: 0x4]
	bool bFeedingDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	AnimMontage* FedOnApproachAnim;//[Offset: 0x1d8, Size: 0x8]
	AnimMontage* FedOnFeedingAnim;//[Offset: 0x1e0, Size: 0x8]
	AnimMontage* FedOnDecoupleAnim;//[Offset: 0x1e8, Size: 0x8]
	TimerHandle DecoupleTimerCamera;//[Offset: 0x1f0, Size: 0x8]
	void TigerStartedFeedingApproach__DelegateSignature(float TravelTime);// 0x197e4f0
	void TigerFeedingMulticastDelegate__DelegateSignature();// 0x197e4f0
	void TigerDelegateStoppedFeeding__DelegateSignature(bool bWasAttacked);// 0x197e4f0
	void Server_StartFeeding(TigerNPC* InTarget, const Vector InDesiredAttackerFeedingLocation);// 0x14fff40
	void RestoreFeedingTicks();// 0x14fff20
	void OnRep_DesiredFeedingTargetChanged();// 0x14ffd80
	void OnFeedingDoneEvent__DelegateSignature(bool bTargetIsDrained, TigerCharacter* InTargetFedOn);// 0x197e4f0
	void Multicast_AttackerAbortFeeding(const bool bInWasAttacked);// 0xd59b00
	bool IsFeeding();// 0x14ff8b0
	bool IsFedOn();// 0x14ff880
	bool IsDecoupling();// 0x14ff850
	bool IsBloodDrained();// 0x14ff820
	float GetNormalizedFeedingAmount();// 0x14ff140
	float GetFeedingProgress();// 0x14ff070
	void Client_AttackerAbortFeeding(const bool bInWasAttacked);// 0x14fed90

--------------------------------
Class: TigerFeedingAnimationAsset.DataAsset.Object
	TigerFeedingDataByGender FeedingDataByClan;//[Offset: 0x30, Size: 0x120]

--------------------------------
Class: TigerFeedingDataByGender
	TigerFeedingMontages FeedingDataByVampireGender;//[Offset: 0x0, Size: 0x90]

--------------------------------
Class: TigerFeedingMontages
	TigerFeedingDescription FemaleTargetDescription;//[Offset: 0x0, Size: 0x30]
	TigerFeedingDescription MaleTargetDescription;//[Offset: 0x30, Size: 0x30]
	TigerFeedingDescription EntityTargetDescription;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: TigerFeedingDescription
	AnimMontage* AttackerApproach;//[Offset: 0x0, Size: 0x8]
	AnimMontage* AttackerFeeding;//[Offset: 0x8, Size: 0x8]
	AnimMontage* AttackerDecouple;//[Offset: 0x10, Size: 0x8]
	AnimMontage* VictimApproach;//[Offset: 0x18, Size: 0x8]
	AnimMontage* VictimFeeding;//[Offset: 0x20, Size: 0x8]
	AnimMontage* VictimDecouple;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCapturePointProgressUI.TigerWidget.UserWidget.Widget.Visual.Object
	FText YouCapturingStatusText;//[Offset: 0x280, Size: 0x18]
	FText EnemyCapturingStatusText;//[Offset: 0x298, Size: 0x18]
	FText ContestedStatusText;//[Offset: 0x2b0, Size: 0x18]
	enum CaptureStatus;//[Offset: 0x2c8, Size: 0x1]
	float PercentageLeft;//[Offset: 0x2cc, Size: 0x4]
	void StatusChanged();// 0x197e4f0
	void OnCapturePointEnabled();// 0x197e4f0

--------------------------------
Class: TigerPingWheelWidget.TigerWheelWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPingWorldNetData[] CurrentPingTypeItems;//[Offset: 0x2a8, Size: 0x10]
	TigerPingClientData* CurrentPingResponseData;//[Offset: 0x2b8, Size: 0x8]
	TigerPingControllerComponent* PingController;//[Offset: 0x2c0, Size: 0x8]

--------------------------------
Class: TigerSpawnPointSelectionUi.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	Vector2D CurrentCanvasSize;//[Offset: 0x298, Size: 0x8]
	int PreGameStateEndTime;//[Offset: 0x2a0, Size: 0x4]
	enum CurrentPreMatchState;//[Offset: 0x2a4, Size: 0x1]
	TigerClientSpawnLocationInfo[] CurrentSpawnSelectionInfo;//[Offset: 0x2a8, Size: 0x10]
	<int,TigerWidget*> GroupSpawnLocationWidgets;//[Offset: 0x2b8, Size: 0x50]
	Widget* CanvasSizeWidget;//[Offset: 0x308, Size: 0x8]
	bool bAllowOutOfBoundsSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	TigerWidget*[] EnemySpawnLocationWidgets;//[Offset: 0x328, Size: 0x10]
	void UpdateWidgetRotation(TigerWidget* InWidget, const float InRotation);// 0x197e4f0
	void UpdateWidgetLocation(TigerWidget* InWidget, out const Vector InLocation);// 0x197e4f0
	void SetPreMatchState(out const TigerPreMatchStateInfo InPreMatchState);// 0x197e4f0
	bool RequestNewSpawnLocation(out const Vector InDesiredSpawnLocation);// 0x15e33e0
	void OnNewSpawnAssignedFromServerToLocalPlayer(const Vector2D InNewLocation, const float InOrientation);// 0x197e4f0
	bool IsLocationOutOfBounds(out const Vector InLocation);// 0x15e3190
	int GetRemainingStateTime();// 0x15e3160
	TigerWidget* CreateGroupMarkerWidget(out const TigerClientSpawnLocationInfo InSpawnLocationInfo);// 0x197e4f0
	TigerWidget* CreateEnemyMarkerWidget();// 0x197e4f0

--------------------------------
Class: TigerClientSpawnLocationInfo
	TigerPlayerState* PlayerState;//[Offset: 0x0, Size: 0x8]
	Vector2D DesiredSpawnLocation;//[Offset: 0x8, Size: 0x8]
	float Orientation;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerPreMatchStateInfo
	int StateData;//[Offset: 0x0, Size: 0x4]
	enum State;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: TigerArchetypeSelectPragueUI.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	int GroupSize;//[Offset: 0x298, Size: 0x4]
	int PreGameStateEndTime;//[Offset: 0x29c, Size: 0x4]
	FString PreHighlightTag;//[Offset: 0x2a0, Size: 0x10]
	FName CameraLevelName;//[Offset: 0x2b0, Size: 0x8]
	float TimeLeftUntilStateChange;//[Offset: 0x2b8, Size: 0x4]
	enum UiState;//[Offset: 0x2bc, Size: 0x1]
	TigerPersistentPlayerCharacter[] PlayerCharacters;//[Offset: 0x2c0, Size: 0x10]
	enum SelectedArchetypeType;//[Offset: 0x2d0, Size: 0x1]
	TigerPreMatchPaperDollComponent* PreMatchPaperDollComp;//[Offset: 0x2d8, Size: 0x8]
	void SelectCharacterForArchetype(TigerPowerKit* InArchetypeData);// 0x1492370
	void RevertLODBias();// 0x1492350
	void OnUiStateChanged(enum InPreviousUiState);// 0x197e4f0
	void OnPlayerCharactersReceived(out const TigerPersistentPlayerCharacter[] InCharacters, FString InErrorString);// 0x1492090
	void OnPlayerChangedSelection(TigerPlayerState* InPlayerState);// 0x197e4f0
	void OnGroupMembersChanged(TigerGroupStateComponent* InGroupStateComponent, out const TigerPlayerState*[] InPreviousGroupMembers);// 0x197e4f0
	void OnBackgroundLevelLoaded();// 0x197e4f0
	void OnArchetypeSelectionLocked(TigerPlayerState* InPlayerState, enum InArchetype);// 0x197e4f0
	void HandleLevelVisibilityChanged();// 0x1491e00
	float GetSecondsLeftUntilPlayerSelection(enum InPlayerUiState);// 0x1491cc0
	void EnablePaperDollHighlight(TigerPaperDoll* InPaperDoll, bool bInEnable);// 0x1491a70

--------------------------------
Class: TigerPreMatchPaperDollComponent.ActorComponent.Object
	<FName,TigerPaperDoll*> PaperDollByTagNames;//[Offset: 0xb0, Size: 0x50]
	<TigerPaperDoll*,TigerPaperDollHighlightComponents> PaperDollHighlightComponents;//[Offset: 0x100, Size: 0x50]
	void EnablePaperDollHighlight(TigerPaperDoll* InPaperDoll, bool bInEnable);// 0x15ba050

--------------------------------
Class: TigerPaperDollHighlightComponents
	<SpotLightComponent*,float> SpotLightIntensities;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerDeathScreen.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	<enum,FText> KillerTypeNames;//[Offset: 0x2a0, Size: 0x50]
	bool ShouldReturnToElysium();// 0x14d8340
	void SetInformation(int InPlayerPlacement, int InNumGroupsAtStart, out const TigerPlayerStateGameData InPlayerStateGameData, enum InKillerType);// 0x197e4f0
	bool CanStartSpectating();// 0x14d7450

--------------------------------
Class: TigerInventoryUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	int SelectedInventoryIndex;//[Offset: 0x2c0, Size: 0x4]
	int DefaultSlotInventoryIndex;//[Offset: 0x2c4, Size: 0x4]
	<int> FavoritableSlots;//[Offset: 0x2c8, Size: 0x50]
	int[] OrderedFavoriteFallbackSlots;//[Offset: 0x318, Size: 0x10]
	int[] OrderedFullHealthFavoriteFallbackSlots;//[Offset: 0x328, Size: 0x10]
	float RightStickXInput;//[Offset: 0x338, Size: 0x4]
	bool UseInventorySlotItem(int InInventorySlot);// 0x197e4f0
	void OnInventoryUpdatedBP();// 0x197e4f0
	int GetInventoryIndexOfConsumable(FString InConsumableName);// 0x197e4f0
	TigerConsumableAsset* GetConsumableItemAt(int InInventoryIndex);// 0x197e4f0
	void ChangeDisplayedFavorite(int InOriginalInventorySlot, int InNewInventorySlot);// 0x197e4f0

--------------------------------
Class: TigerMapSubMenu.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void ShowMatchTimer();// 0x197e4f0
	void OnQuestObjectiveComplete(FString InQuestId);// 0x197e4f0
	void OnQuestCompleted(FString InQuestId);// 0x197e4f0

--------------------------------
Class: TigerInputMenuUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void ShowCursor();// 0x152a820
	void ResetToDefault();// 0x152a010
	void HideCursor();// 0x15296b0

--------------------------------
Class: TigerTeamMenuUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void MutePlayer(int InPlayerId);// 0x15f4090
	bool IsPlayerMuted(int InPlayerId);// 0x15f3ed0

--------------------------------
Class: TigerReportMenuUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	int TargetPlayerID;//[Offset: 0x2c4, Size: 0x4]
	void SetReason(enum InReason);// 0x15d43d0
	bool ReportPlayer();// 0x15d3ff0
	bool IsPlayerAlreadyReportedForReason();// 0x15d3eb0

--------------------------------
Class: TigerWinScreenWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void UpdateWinScreen();// 0x197e4f0

--------------------------------
Class: TigerWeaponAmmoWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void WeaponEquipped(TigerItemAsset* InWeaponAsset, const int InItemCount, TigerLootBox* InLootbox, enum InWeaponSlot);// 0x197e4f0
	void SelectedSlotUpdated(TigerRangedWeaponComponent* RangedWeaponComponent, TigerInventoryComponent* Inventory, enum NewSlot);// 0x197e4f0
	void ArtifactUpdated(TigerItemAsset* InArtifactAsset);// 0x197e4f0
	void AmmoUpdated(int AmmoInMagazine, int AmmoInInventory);// 0x197e4f0
	void AdjustForGunRange();// 0x197e4f0

--------------------------------
Class: TigerCrosshairWidget.TigerWidget.UserWidget.Widget.Visual.Object
	enum PreviousInteraction;//[Offset: 0x280, Size: 0x1]
	Object* PreviousInteractionObject;//[Offset: 0x288, Size: 0x8]
	TigerCharacter* PreviousInteractionCharacter;//[Offset: 0x290, Size: 0x8]
	TigerInventoryComponent* Inventory;//[Offset: 0x298, Size: 0x8]
	MaterialInstanceDynamic* ProgressBarMaterial;//[Offset: 0x2a0, Size: 0x8]
	CanvasPanel* RootPanel;//[Offset: 0x2a8, Size: 0x8]
	TigerPlayer* TigerPlayer;//[Offset: 0x2b0, Size: 0x8]
	TigerWeaponCrosshairWidget* CurrentWeaponCrosshair;//[Offset: 0x2b8, Size: 0x8]
	TigerWeaponCrosshairWidget*[] PreviousWeaponCrosshairs;//[Offset: 0x2c0, Size: 0x10]
	float ProgressValue;//[Offset: 0x2d0, Size: 0x4]
	enum CurrentProgressBarColor;//[Offset: 0x2d4, Size: 0x1]
	void UpdateInteraction(enum Interaction, Object* InteractionObject);// 0x197e4f0
	void SetProgressBarPercentage(float InPercent);// 0x197e4f0
	void SetProgressBarColor(enum UIColor);// 0x197e4f0
	void OnShowHitMarker(out const LinearColor HitmarkerColor, const bool bWasDownedOrKilled);// 0x197e4f0
	void OnInventoryUpdatedBP();// 0x197e4f0
	TigerConsumableAsset* GetConsumableInUse();// 0x14cfb90

--------------------------------
Class: AutoInitializedWidget
	class UserWidget* WidgetClass;//[Offset: 0x0, Size: 0x8]
	FString AssignToPropertyName;//[Offset: 0x8, Size: 0x10]
	bool bAddToViewportOnPlayerSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAddToOnScreenWidgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	int ZOrder;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x478, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x479, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x480, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x488, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	float RedrawTime;//[Offset: 0x494, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x4a0, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x4ac, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x4b6, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b7, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x4b8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x4c0, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x4d0, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x4e0, Size: 0x4]
	enum BlendMode;//[Offset: 0x4e4, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e6, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x4e8, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x4f0, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x4f8, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x500, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x508, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x510, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x518, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x520, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x528, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x534, Size: 0x8]
	int LayerZOrder;//[Offset: 0x53c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x540, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x544, Size: 0x4]
	enum TickMode;//[Offset: 0x548, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x570, Size: 0x8]
	void SetWindowVisibility(enum InVisibility);// 0x29e7d20
	void SetWindowFocusable(bool bInWindowFocusable);// 0x29e79e0
	void SetWidgetSpace(enum NewSpace);// 0x29e7960
	void SetWidget(UserWidget* Widget);// 0x29e78d0
	void SetTwoSided(const bool bWantTwoSided);// 0x29e7840
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x29e77b0
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x29e7720
	void SetTickMode(enum InTickMode);// 0x29e76a0
	void SetRedrawTime(float InRedrawTime);// 0x29e7620
	void SetPivot(out const Vector2D InPivot);// 0x29e7590
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x29e7500
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x29e7340
	void SetGeometryMode(enum InGeometryMode);// 0x29e6c50
	void SetDrawSize(Vector2D Size);// 0x29e6bb0
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x29e6b20
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x29e6aa0
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x29e6700
	void RequestRedraw();// 0xec4e10
	bool IsWidgetVisible();// 0x29e5f90
	enum GetWindowVisiblility();// 0x29e5ed0
	bool GetWindowFocusable();// 0x29e5eb0
	enum GetWidgetSpace();// 0x29e5e90
	UserWidget* GetWidget();// 0x29e5e60
	UserWidget* GetUserWidgetObject();// 0x29e5e00
	bool GetTwoSided();// 0x29e5de0
	bool GetTickWhenOffscreen();// 0x29e5dc0
	TextureRenderTarget2D* GetRenderTarget();// 0x29e5c10
	float GetRedrawTime();// 0x29e5bf0
	Vector2D GetPivot();// 0x29e5bc0
	LocalPlayer* GetOwnerPlayer();// 0x29e5b90
	MaterialInstanceDynamic* GetMaterialInstance();// 0x29e5b60
	bool GetManuallyRedraw();// 0x24ab6e0
	enum GetGeometryMode();// 0x29e5590
	Vector2D GetDrawSize();// 0x29e53d0
	bool GetDrawAtDesiredSize();// 0x29e53b0
	float GetCylinderArcAngle();// 0x29e5360
	Vector2D GetCurrentDrawSize();// 0x29e5320

--------------------------------
Class: TigerDamageSource
	Vector DamageSourceDirection;//[Offset: 0x0, Size: 0xc]
	Vector DamageSourceLocation;//[Offset: 0xc, Size: 0xc]
	float NewHealth;//[Offset: 0x18, Size: 0x4]
	float DamageAmount;//[Offset: 0x1c, Size: 0x4]
	bool bIsRedGasDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bHasDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: TigerElysiumHUD.TigerHUD.HUD.Actor.Object
	class TigerDialogueInteractionScreen* DialogueInteractionWidget;//[Offset: 0x430, Size: 0x8]
	class TigerPromotionalUI* SoftPromotionalUiClass;//[Offset: 0x438, Size: 0x28]
	TigerPromotionalUI* PromotionalUi;//[Offset: 0x460, Size: 0x8]
	class TigerRewardsPopup* SoftRewardsPopupClass;//[Offset: 0x468, Size: 0x28]
	TigerRewardsPopup* RewardsPopup;//[Offset: 0x490, Size: 0x8]
	TigerDialogueInteractionScreen* CurrentVendorUI;//[Offset: 0x498, Size: 0x8]
	class TigerCameraPreset* DialogueInteractionCameraPreset;//[Offset: 0x4a0, Size: 0x28]
	TigerWidget* ElysiumPlayerInfoUI;//[Offset: 0x4c8, Size: 0x8]
	TigerWidget* InGameQueueIndicatorUI;//[Offset: 0x4d0, Size: 0x8]
	TigerWidget* Watermark;//[Offset: 0x4d8, Size: 0x8]
	TigerWidget* ProgressHUD;//[Offset: 0x4e0, Size: 0x8]
	TigerInputMenuUI* SettingsMenuUi;//[Offset: 0x4e8, Size: 0x8]
	TigerMenuWidget* GameModeSelectionUI;//[Offset: 0x4f0, Size: 0x8]
	TigerWidget* OnboardingUi;//[Offset: 0x4f8, Size: 0x8]
	class TigerWidget* SoftOnboardingUiClass;//[Offset: 0x500, Size: 0x28]
	AutoInitializedWidget[] OpenMenuHiddenWidgets;//[Offset: 0x528, Size: 0x10]
	class TigerWidget[] OpenMenuWidgetIgnoreList;//[Offset: 0x538, Size: 0x10]
	TigerWidget*[] HiddenTigerWidgets;//[Offset: 0x548, Size: 0x10]
	int VendorUIZOrder;//[Offset: 0x558, Size: 0x4]
	delegate OnPreloadingDone;//[Offset: 0x560, Size: 0x10]
	delegate OnLastPreGamePopupClosed;//[Offset: 0x578, Size: 0x10]
	<FString,int> TimeSpentPerMenu;//[Offset: 0x5b0, Size: 0x50]
	bool TryShowPendingRewards();// 0x14f6260
	void ToggleVanityInventory();// 0x14f61b0
	void ToggleElysiumGameMenuSubmenu(class TigerIngameSubmenuWidget InSubwidgetClass);// 0x14f6090
	void ToggleElysiumGameMenu();// 0x14f6070
	void ShowPendingRewardsPopup();// 0x14f6050
	void ShowHiddenWidgets();// 0x14f6030
	void RemoveOnboardingUi();// 0x14f5540
	void PromotionalPopupClosed(bool bInExitedToElysiumSubmenu);// 0x14f53e0
	void OpenGameModeSelectionMenu();// 0x14f52c0
	void OpenElysiumGameMenu(class TigerIngameSubmenuWidget InSubwidgetClass);// 0x14f5230
	void OnWidgetClosed__DelegateSignature();// 0x197e4f0
	void OnSeasonConfigUpdated__DelegateSignature();// 0x197e4f0
	void OnPreloadingDoneMulti__DelegateSignature();// 0x197e4f0
	void OnPreloadingDone__DelegateSignature();// 0x197e4f0
	void OnEnteredElysium();// 0x14f4fb0
	void IsPreloadingDoneAsync(out const delegate InDelegate);// 0x14f4c80
	bool IsElysiumGameMenuOpen();// 0x14f4bf0
	void HideCreatedWidgets();// 0x14f4bd0
	bool HasPromotionalPopup();// 0x14f4ba0
	void HandlePersistentPlayerInitialized(TigerPlayerController* InPlayerController);// 0x14f4b10
	void HandleLastPreGamePopupClosed();// 0x14f4af0
	void FadeInHiddenWidgets();// 0x14f4a20
	void CloseGameModeSelectionMenu();// 0x14f48b0
	void CloseElysiumGameMenu();// 0x14f4890

--------------------------------
Class: TigerDialogueInteractionScreen.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	float TransitionTime;//[Offset: 0x298, Size: 0x4]
	TigerBaseNPC* VendorNPC;//[Offset: 0x29c, Size: 0x8]
	TigerAnimInstance* TargetAnimationInstance;//[Offset: 0x2a4, Size: 0x8]
	TigerInteractiveNpcComponent* InteractiveNpcComponent;//[Offset: 0x2ac, Size: 0x8]
	void TransitionToPlayerCamera();// 0x14d8450
	void TransitionToInteractionCamera();// 0x14d8430

--------------------------------
Class: TigerPromotionalUI.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	bool bIsPreviewWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	int ZValue;//[Offset: 0x2ac, Size: 0x4]
	Texture2D* FirstTimeWelcomeTexturePath;//[Offset: 0x2b0, Size: 0x28]
	FText FirstTimeWelcomeTitleText;//[Offset: 0x2d8, Size: 0x18]
	FText FirstTimeWelcomeDescriptionText;//[Offset: 0x2f0, Size: 0x18]
	void RefreshConfig();// 0xb7a5a0
	void OverrideCulture(FString InCulture);// 0x14c0250
	void OnTitleScreenClosed();// 0x15bf8a0
	void OnShowFirstTimeEntry();// 0x197e4f0
	void OnShowEntry(out const TigerPromotionalPopupConfigEntry InEntry);// 0x197e4f0
	void OnInitializeDone(bool bInSuccess);// 0x15bf600

--------------------------------
Class: TigerPromotionalPopupConfigEntry
	FString ImageUrl;//[Offset: 0x0, Size: 0x10]
	FText Title;//[Offset: 0x10, Size: 0x18]
	FText Paragraph;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: TigerRewardsPopup.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	int ZValue;//[Offset: 0x2a8, Size: 0x4]
	<enum,RewardEntryData> RewardEntriesByCategory;//[Offset: 0x2b0, Size: 0x50]
	void SetRewardsSeenInPopup(const enum InCategory, const int InNumRewardsInPopupPage);// 0x15d4450
	void OnShowRewards();// 0x197e4f0
	void GoToPerksMenu();// 0x15d3e10
	void GetRewardEntriesForCategory(const enum InCategory, out TigerRewardEntry*[] OutEntries);// 0x15d3c60

--------------------------------
Class: TigerRewardEntry.Object
	int UnlockLevel;//[Offset: 0x28, Size: 0x4]
	enum EntryCategory;//[Offset: 0x2c, Size: 0x1]
	enum GetEntryType();// 0x15597d0

--------------------------------
Class: RewardEntryData
	TigerRewardEntry*[] RewardEntries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerNetworkedDebugShape
	Color Color;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector ShapeSpecificData;//[Offset: 0x10, Size: 0xc]
	Quat Rotation;//[Offset: 0x20, Size: 0x10]
	float Thickness;//[Offset: 0x30, Size: 0x4]
	float LifeTime;//[Offset: 0x34, Size: 0x4]
	byte Shape;//[Offset: 0x38, Size: 0x1]
	byte DepthPriority;//[Offset: 0x39, Size: 0x1]
	bool bPersistentLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf10, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf10, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf10, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0xd0ddb0

--------------------------------
Class: TigerFireSettings
	float BulletDamage;//[Offset: 0x0, Size: 0x4]
	enum FireMode;//[Offset: 0x4, Size: 0x1]
	int BurstCount;//[Offset: 0x8, Size: 0x4]
	float ShotsFiredPerSecondInBurst;//[Offset: 0xc, Size: 0x4]
	int BulletsFiredSimultaneously;//[Offset: 0x10, Size: 0x4]
	float ShotsFiredPerSecond;//[Offset: 0x14, Size: 0x4]
	class TigerAreaEffect* AreaEffect;//[Offset: 0x18, Size: 0x8]
	float FireStickyTime;//[Offset: 0x20, Size: 0x4]
	float VerticalRecoilAmount;//[Offset: 0x24, Size: 0x4]
	float HorizontalRecoilAmount;//[Offset: 0x28, Size: 0x4]
	float StartingSpread;//[Offset: 0x2c, Size: 0x4]
	TigerSpreadModifier SpreadModifiers;//[Offset: 0x30, Size: 0xc]
	float TimeUntilSpreadDecreases;//[Offset: 0x84, Size: 0x4]
	float BaseMovementSpeedMultiplier;//[Offset: 0x88, Size: 0x4]
	float AimingMovementSpeedMultiplier;//[Offset: 0x8c, Size: 0x4]
	float HipFireMovementSpeedMultiplier;//[Offset: 0x90, Size: 0x4]
	CurveFloat* SpreadIncreaseCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* SpreadDecreaseCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* FireRateIncreaseCurve;//[Offset: 0xa8, Size: 0x8]
	CurveFloat* FireRateDecreaseCurve;//[Offset: 0xb0, Size: 0x8]
	float MasqueradeNoiseEventRadius;//[Offset: 0xb8, Size: 0x4]
	bool ReverseSpreadChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bPierceCivilians;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bUsesScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	int ResistanceStart;//[Offset: 0xc0, Size: 0x4]
	int ResistanceEnd;//[Offset: 0xc4, Size: 0x4]
	int ResistanceStrength;//[Offset: 0xc8, Size: 0x4]
	int TriggerVibrationFeedbackStrength;//[Offset: 0xcc, Size: 0x4]
	int ADSResistanceStart;//[Offset: 0xd0, Size: 0x4]
	int ADSResistanceStrength;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: TigerSpreadModifier
	enum Mode;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]
	float Amount;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerMeleeWeaponComponent.ActorComponent.Object
	delegate OnAttack;//[Offset: 0xb8, Size: 0x10]
	delegate OnQuickAttack;//[Offset: 0xc8, Size: 0x10]
	delegate OnAttackHit;//[Offset: 0xd8, Size: 0x10]
	delegate OnSuccessfulBlock;//[Offset: 0xf8, Size: 0x10]
	delegate OnHeavyAttackChargeBegin;//[Offset: 0x108, Size: 0x10]
	delegate OnHeavyAttackChargeEnd;//[Offset: 0x118, Size: 0x10]
	float DebugDrawTime;//[Offset: 0x128, Size: 0x4]
	TigerSwingCollisionData* SwingCollisionData;//[Offset: 0x150, Size: 0x8]
	delegate OnHeavyAttackReachedMinimumCharge;//[Offset: 0x158, Size: 0x10]
	delegate OnMeleeWeaponEquipped;//[Offset: 0x168, Size: 0x10]
	bool bHeavyAttackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bBlockingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bAttackingViaQuickAttackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	TigerMeleeWeaponAttackIdentifier CurrentAttackIdentifier;//[Offset: 0x17b, Size: 0x2]
	DataTable* MeleeAttacksDatabase;//[Offset: 0x188, Size: 0x8]
	TigerMeleeWeapon* EquippedWeaponType;//[Offset: 0x190, Size: 0x8]
	TigerMeleeAimAssistBehavior* CurrentAimAssistBehavior;//[Offset: 0x198, Size: 0x8]
	float BlockCooldown;//[Offset: 0x1a0, Size: 0x4]
	float MaxBlockAttackAngle;//[Offset: 0x1a4, Size: 0x4]
	float AttackQueueCooldown;//[Offset: 0x1a8, Size: 0x4]
	float AirAttackRequiredDistanceToGround;//[Offset: 0x1ac, Size: 0x4]
	float HitEffectRadiusOffset;//[Offset: 0x1b0, Size: 0x4]
	float HitEffectHeightOffset;//[Offset: 0x1b4, Size: 0x4]
	float RootMotionAnimationHeightThreshold;//[Offset: 0x1b8, Size: 0x4]
	class TigerBuff* BlockBuffOnAttacker;//[Offset: 0x1c0, Size: 0x8]
	float DiminishingReturnCooldown;//[Offset: 0x1c8, Size: 0x4]
	float DiminishingReturnMultiplierRegenerationRate;//[Offset: 0x1cc, Size: 0x4]
	bool bCanMoveDuringMeleeAttacks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	TigerCharacter*[] HitFeedbackTargets;//[Offset: 0x218, Size: 0x10]
	Actor*[] HitCharactersOnCurrentSwing;//[Offset: 0x290, Size: 0x10]
	Actor*[] HitWorldStaticsOnCurrentSwing;//[Offset: 0x2a0, Size: 0x10]
	AnimMontage* CurrentSwingAnimation;//[Offset: 0x2b8, Size: 0x8]
	Actor* LockOnTarget;//[Offset: 0x2c0, Size: 0x8]
	float MaxLockOnDistance;//[Offset: 0x2c8, Size: 0x4]
	void TigerOnMeleeWeaponEquipped__DelegateSignature();// 0x197e4f0
	void TigerHeavyAttackChargeEnd__DelegateSignature();// 0x197e4f0
	void TigerHeavyAttackChargeBegin__DelegateSignature();// 0x197e4f0
	void TigerDelegateSwingState__DelegateSignature();// 0x197e4f0
	void TigerDelegateSuccessfullyBlocked__DelegateSignature();// 0x197e4f0
	void TigerDelegateQuickAttacked__DelegateSignature();// 0x197e4f0
	void TigerDelegateHeavyAttackReachedMinimumCharge__DelegateSignature();// 0x197e4f0
	void TigerDelegateAttackHit__DelegateSignature(const enum InAttackType);// 0x197e4f0
	void TigerDelegateAttacked__DelegateSignature(bool bWasHeavyAttack);// 0x197e4f0
	void Server_SwingWeapon(const TigerMeleeAttackNetData InAttackIdentifier, bool bInDisabledRootMotion);// 0x15596b0
	void Server_SetClientSideHitDetectionMelee(bool bEnableClientSideHits);// 0x15595f0
	void Server_OnSuccessfulClientAttack(const TigerCharacterClientHit[] CharacterHits);// 0x1559530
	void Server_OnDeflectedAttack(const Vector_NetQuantize DeflectLocation, TigerCharacter* DeflectingChar);// 0x1559430
	void Server_DisableRecoveryRootMotion(const float InDisableTimeInAnimation);// 0x14efda0
	void OnMontageStartedDuringSwing(AnimMontage* Montage);// 0x1558f90
	void OnMontageStartedDuringBlockStance(AnimMontage* Montage);// 0x1558f00
	void Multicast_StopBlocking();// 0x1558ec0
	void Multicast_StartHeavySwing(bool bDisabledRootMotion);// 0x1558e30
	void Multicast_StartBlocking();// 0x14e1610
	void Multicast_SetClientSideHitDetectionMelee(bool bEnableClientSideHits);// 0xd59b00
	void Multicast_OnSwingWeapon(const TigerMeleeAttackNetData AttackIdentifier, bool bInDisabledRootMotion);// 0x1558d40
	void Multicast_OnAttackSuccessful(const TigerCharacterServerHit[] InCharacterHits, const enum InAttackType);// 0x1558c50
	void Multicast_OnAttackBlocked();// 0x1558c30
	void Multicast_DisableRecoveryRootMotion();// 0x14efd80
	void Multicast_DeflectAttack(TigerCharacter* Attacker);// 0x1558ba0
	void Multicast_AbortCurrentAttack();// 0x14ef830
	bool IsInMeleeSwing();// 0x1558a90
	bool IsChargingHeavyAttack();// 0x1558a70
	bool IsBlocking();// 0x1558a40
	bool HasLockOnTarget();// 0x1558a10
	float GetTimeSinceLastAttack();// 0x15585f0
	void Client_OnHit(const TigerCharacterServerHit ServerHit);// 0x1558020
	void Client_OnAttackBlocked(const Vector_NetQuantize BlockedAtLocation, TigerMeleeWeaponComponent* BlockingMelee);// 0x1557f50
	void Client_DeflectAttack();// 0x1557f30
	void Client_Debug_ShowServerSwingLocation(const Vector Position, const Quat Rotation);// 0x1557e70
	void Client_AbortCurrentAttack();// 0x14ef810
	void BroadcastHeavyAttackReleaseCallback();// 0x1557e20

--------------------------------
Class: TigerSwingCollisionData.DataAsset.Object
	<FName,TigerSwingCollisionInfo> SwingCollisionInfos;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerSwingCollisionInfo
	TigerSwingCollisionInstant[] CollisionInstants;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerSwingCollisionInstant
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	float TimeInSwing;//[Offset: 0x30, Size: 0x4]
	int HitboxNotifyIndexForWeapon;//[Offset: 0x34, Size: 0x4]
	int WeaponIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: TigerMeleeWeaponAttackIdentifier
	enum AttackType;//[Offset: 0x0, Size: 0x1]
	byte AttackIndex;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerMeleeWeapon.TigerWeapon.Object
	CurveFloat* HorizontalFlinchCurve;//[Offset: 0xb0, Size: 0x8]
	CurveFloat* VerticalFlinchCurve;//[Offset: 0xb8, Size: 0x8]
	float DamageMultiplier;//[Offset: 0xc0, Size: 0x4]
	float RootMotionAttacksStopDistance;//[Offset: 0xc4, Size: 0x4]
	float RootMotionAttacksStopDistanceAboveOrBelow;//[Offset: 0xc8, Size: 0x4]
	bool bIsUnarmedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	class TigerMeleeAimAssistBehavior* AimAssistBehavior;//[Offset: 0xd0, Size: 0x8]
	float AimAssistPredictionTime;//[Offset: 0xd8, Size: 0x4]
	TigerMeleeAttack[] Attacks;//[Offset: 0xe0, Size: 0x10]
	FName HeavyAttackChargeUpMontageName;//[Offset: 0xf0, Size: 0x8]
	enum WeaponAbility;//[Offset: 0xf8, Size: 0x1]
	AkAudioEvent* HitAkEvent;//[Offset: 0x100, Size: 0x8]
	AkAudioEvent* HeavyHitAkEvent;//[Offset: 0x108, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x110, Size: 0x8]
	class Actor* HitEffectClass;//[Offset: 0x118, Size: 0x8]
	ForceFeedbackEffect* TargetHitForceFeedback;//[Offset: 0x120, Size: 0x8]
	ForceFeedbackEffect* AttackBlockedForceFeedback;//[Offset: 0x128, Size: 0x8]
	ForceFeedbackEffect* SuccesfullyBlockedForceFeedback;//[Offset: 0x130, Size: 0x8]
	FName BlockBlendSpaceName;//[Offset: 0x138, Size: 0x8]
	AkAudioEvent* BlockStanceActivatedAkEvent;//[Offset: 0x140, Size: 0x8]
	float StartBlockingTransitionTime;//[Offset: 0x148, Size: 0x4]
	float BlockMovementMultiplier;//[Offset: 0x14c, Size: 0x4]
	float BlockStunTime;//[Offset: 0x150, Size: 0x4]
	float DiminishingReturnBlockStunMultiplierReduction;//[Offset: 0x154, Size: 0x4]
	AkAudioEvent* BlockHitAkEvent;//[Offset: 0x158, Size: 0x8]
	ParticleSystem* BlockEffect;//[Offset: 0x160, Size: 0x8]
	FName BlockHitMontageName;//[Offset: 0x168, Size: 0x8]
	FName BlockKnockbackMontageName;//[Offset: 0x170, Size: 0x8]
	float BlockImpulseStrength;//[Offset: 0x178, Size: 0x4]
	float BlockMoveDistance;//[Offset: 0x17c, Size: 0x4]
	float BlockMoveDuration;//[Offset: 0x180, Size: 0x4]
	float BlockMoveExitVelocityScale;//[Offset: 0x184, Size: 0x4]
	float BlockAttackDamageMultiplier;//[Offset: 0x188, Size: 0x4]
	float BlockHeavyAttackDamageMultiplier;//[Offset: 0x18c, Size: 0x4]
	class TigerMeleeWeaponTrailConfig* WeaponTrailConfigClass;//[Offset: 0x190, Size: 0x8]
	float MasqueradeNoiseEventRadius;//[Offset: 0x198, Size: 0x4]
	enum MeleeWeaponIdentifier;//[Offset: 0x19c, Size: 0x1]
	void OnWorldObjectHit(TigerCharacter* InInstigator, out const HitResult InWorldObjectHitResult, out const Vector InSwingDirection);// 0x197e4f0
	void OnHit(TigerCharacter* Instigator, TigerCharacter* Target, enum AttackType, const float Damage);// 0x197e4f0
	FName GetWeaponOverrideHitReactionMontage(TigerCharacter* Attacker, enum HitFromFourWayDirection);// 0x1558620
	byte GetRandomAttackFromNextGroup(out const TigerMeleeWeaponAttackIdentifier AttackIdentifier);// 0x1558540
	byte GetRandomAttackFromGroup(out const TigerMeleeWeaponAttackIdentifier AttackIdentifier, byte AttackGroup);// 0x1558450
	enum GetMeleeWeaponIdentifier();// 0x1558430
	byte GetAttackGroupFromAttackIdentifier(out const TigerMeleeWeaponAttackIdentifier AttackIdentifier);// 0x1558380

--------------------------------
Class: TigerMeleeAimAssistBehavior.Object
	float AimAssistMinRadius;//[Offset: 0x28, Size: 0x4]
	float AimAssistMaxRadius;//[Offset: 0x2c, Size: 0x4]
	float MaxTargetHeightDiff;//[Offset: 0x30, Size: 0x4]
	float DebugDrawTime;//[Offset: 0x34, Size: 0x4]
	bool bPredictCandidateLocationsBeforeEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	TigerCharacter* TigerOwner;//[Offset: 0x40, Size: 0x8]
	TigerMeleeWeapon* EquippedWeapon;//[Offset: 0x48, Size: 0x8]
	Vector TigerOwnerLocation;//[Offset: 0x50, Size: 0xc]
	TigerCharacter* FinalTargetCharacter;//[Offset: 0x5c, Size: 0x8]
	TigerMeleeWeaponAttackIdentifier FinalAttackIdentifier;//[Offset: 0x64, Size: 0x2]
	float AimAssistMinRadiusSquared;//[Offset: 0x68, Size: 0x4]
	float AimAssistMaxRadiusSquared;//[Offset: 0x6c, Size: 0x4]
	float AimAssistTravelTime;//[Offset: 0x70, Size: 0x4]
	void UpdateAimTarget(out TigerMeleeAimAssistCandidate[] InCandidates, out const Vector InCameraForward, bool bInIsInAir, bool bInIsQuickAttack, out const TigerMeleeWeaponAttackIdentifier InPreviousAttackIdentifier, float InSecondsSincePreviousAttack, out TigerCharacter* OutFinalTarget, out TigerMeleeWeaponAttackIdentifier OutAttackIdentifier);// 0x197e4f0
	void ShowDebugValue(out TigerMeleeAimAssistCandidate Candidate, FString DebugLabel, FString DebugValue);// 0x1559960
	void ShowDebugAttackIdentifier(out TigerMeleeAimAssistCandidate Candidate, FString DebugLabel, out const TigerMeleeWeaponAttackIdentifier AttackIdentifier);// 0x1559800
	bool ShouldRotatePlayer();// 0x15597d0
	void PredictMultipleCharacterLocations(float PredictionTime, out TigerMeleeAimAssistCandidate[] Candidates);// 0x1559340
	void PredictCharacterLocation(float PredictionTime, out TigerMeleeAimAssistCandidate Candidate);// 0x1559250
	Vector PredictAimAssistTargetLocation(TigerCharacter* AimTargetChar, float PredictionTime);// 0x1559160
	void OnStartMeleeAttack(out const Vector InTargetLocationOrDirection, bool bIsLocation, out const TigerMeleeWeaponAttackIdentifier InAttackIdentifier);// 0x1559020
	void OnAnimNotifyMelee(FName MeleeEventName);// 0x197e4f0
	void MoveCharacterToTargetLocation(Vector TargetLocation, const float TravelTime);// 0x1558ac0
	TigerMeleeAimAssistData GetAimAssistData(out const TigerMeleeWeaponAttackIdentifier AttackIdentifier);// 0x15582e0
	TigerMeleeAimAssistCandidate CreateCandidate(TigerCharacter* AimTargetChar, Vector PredictedTargetLocation, out const Vector CameraForwardDirection, out const Vector CameraLocation, float HalfFOV);// 0x15580d0
	bool CanQueueMeleeAttack();// 0x1557e40
	void AddRelativeImpulse(out const Vector ImpulseDirection, const float ImpulseStrength);// 0x1557d40

--------------------------------
Class: TigerMeleeAimAssistCandidate
	TigerCharacter* TigerCharacter;//[Offset: 0x0, Size: 0x8]
	Vector PredictedLocation;//[Offset: 0x8, Size: 0xc]
	bool bCanSweepToPredictedLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bIsKindred;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float DistanceFromCrosshair;//[Offset: 0x18, Size: 0x4]
	float DistanceFromPlayerSquared;//[Offset: 0x1c, Size: 0x4]
	float AngleFromPlayer;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TigerMeleeAimAssistData
	float ConeAngle;//[Offset: 0x0, Size: 0x4]
	float ConeLength;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerMeleeAttack
	FName AttackName;//[Offset: 0x0, Size: 0x8]
	int AttackGroup;//[Offset: 0x8, Size: 0x4]
	FName SwingAnimationMontageName;//[Offset: 0xc, Size: 0x8]
	FName SwingAnimationNoTargetMontageName;//[Offset: 0x14, Size: 0x8]
	FName RecoveryAnimationMontageName;//[Offset: 0x1c, Size: 0x8]
	FName RecoveryAnimationNoTargetMontageName;//[Offset: 0x24, Size: 0x8]
	FName HitAnimationMontageName;//[Offset: 0x2c, Size: 0x8]
	FName DirectionalHitAnimationMontageNames;//[Offset: 0x34, Size: 0x8]
	float HitEffectAngle;//[Offset: 0x54, Size: 0x4]
	class MatineeCameraShake* HitCameraShake;//[Offset: 0x58, Size: 0x8]
	CurveFloat* InputMultiplierCurve;//[Offset: 0x60, Size: 0x8]
	float AttackCooldown;//[Offset: 0x68, Size: 0x4]
	bool bAllowMultipleHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	float TargetingAttackMinimumDistance;//[Offset: 0x70, Size: 0x4]
	float AerialAttackAbortedBlendOutTime;//[Offset: 0x74, Size: 0x4]
	CurveFloat* DamageScalingCurve;//[Offset: 0x78, Size: 0x8]
	int AttackIndex;//[Offset: 0x80, Size: 0x4]
	enum AttackType;//[Offset: 0x84, Size: 0x1]

--------------------------------
Class: TigerMeleeWeaponTrailConfig.Object
	ScalarParameterValue[] ScalarParameters;//[Offset: 0x28, Size: 0x10]
	VectorParameterValue[] VectorParameters;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TigerMeleeAttackNetData

--------------------------------
Class: TigerCharacterClientHit
	TigerCharacter* TigerChar;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize VictimLocation;//[Offset: 0x8, Size: 0xc]
	byte BoneIndexHit;//[Offset: 0x14, Size: 0x1]
	SharkInt8Vector ImpactOffset;//[Offset: 0x15, Size: 0x3]
	Vector_NetQuantizeNormal SwingDirection;//[Offset: 0x18, Size: 0xc]
	byte WeaponIndex;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: SharkInt8Vector
	int8 X;//[Offset: 0x0, Size: 0x1]
	int8 Y;//[Offset: 0x1, Size: 0x1]
	int8 Z;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: TigerCharacterServerHit
	TigerCharacter* TigerChar;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize VictimLocation;//[Offset: 0x8, Size: 0xc]
	byte BoneIndexHit;//[Offset: 0x14, Size: 0x1]
	SharkInt8Vector ImpactOffset;//[Offset: 0x15, Size: 0x3]
	Vector_NetQuantizeNormal SwingDirection;//[Offset: 0x18, Size: 0xc]
	AnimMontage* KnockbackMontage;//[Offset: 0x28, Size: 0x8]
	bool bAbortAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte CompressedActorYaw;//[Offset: 0x31, Size: 0x1]

--------------------------------
Class: TigerCombatComponent.ActorComponent.Object
	delegate OnEnterCombat;//[Offset: 0xb0, Size: 0x10]
	delegate OnLeaveCombat;//[Offset: 0xc0, Size: 0x10]
	class TigerWeapon* DefaultUnarmedWeaponClass;//[Offset: 0xd0, Size: 0x8]
	TigerItemAsset* DefaultMeleeItemAsset;//[Offset: 0xd8, Size: 0x8]
	TigerItemAsset* DefaultRangedItemAsset;//[Offset: 0xe0, Size: 0x8]
	UInt32Property DefaultRangedStartingAmmo;//[Size: 0x4]
	TigerItemAsset*[] DefaultMeleeItemAssetOverride;//[Offset: 0xf0, Size: 0x10]
	TigerItemAsset*[] DefaultRangedItemAssetOverride;//[Offset: 0x100, Size: 0x10]
	class TigerWeapon* CurrentWeaponClass;//[Offset: 0x110, Size: 0x8]
	class TigerMeleeWeapon* CurrentMeleeWeaponClass;//[Offset: 0x118, Size: 0x8]
	class TigerWeapon* CurrentVisibleWeaponClass;//[Offset: 0x120, Size: 0x8]
	float OutOfCombatTime;//[Offset: 0x128, Size: 0x4]
	float EntityDetectionSphere;//[Offset: 0x138, Size: 0x4]
	byte CombatState;//[Offset: 0x144, Size: 0x1]
	void OverrideDefaultRangedItem(TigerItemAsset* InRangedItemAsset);// 0x14c6540
	void OverrideDefaultMeleeItem(TigerItemAsset* InMeleeItemAsset);// 0x14c64b0
	void OnRep_CombatStateChanged();// 0x14c6400
	void OnCombatAction();// 0x14c63e0
	void Multicast_SetCurrentMeleeWeaponClass(class TigerMeleeWeapon MeleeWeaponClass);// 0x14c62c0
	void Multicast_OnDesiredWeaponChanged(class TigerWeapon WeaponClass, class TigerWeapon MeleeWeaponClass, const bool bInstantSwitch);// 0x14c6180
	bool IsInCombat();// 0x14c6120
	bool HasEquippedWeapon();// 0x14c60d0
	enum GetEquippedWeaponType();// 0x14c6070
	class TigerWeapon GetDefaultUnarmedWeaponClass();// 0x14c6030
	int GetDefaultRangedStartingAmmo();// 0x14c6000
	TigerItemAsset* GetDefaultRangedItem();// 0x14c5fd0
	TigerItemAsset* GetDefaultMeleeItem();// 0x14c5fa0
	TigerWeapon* GetCurrentWeaponClassDefaultObject();// 0x14c5f70
	class TigerWeapon GetCurrentWeaponClass();// 0x14c5f50
	TigerMeleeWeapon* GetCurrentMeleeWeaponClassDefaultObject();// 0x14c5f20
	class TigerMeleeWeapon GetCurrentMeleeWeaponClass();// 0x14c5f00
	bool EquipWeapon(enum Slot, const class TigerWeapon WeaponClass, const bool bInstantSwitch, const float InTimeLeniency);// 0x14c5c40
	void ClearDefaultItemOverrides();// 0x14c57d0
	void CheckForCombat();// 0x14c57b0

--------------------------------
Class: TigerBuffComponent.ActorComponent.Object
	delegate OnBuffAdded;//[Offset: 0xb0, Size: 0x10]
	delegate OnBuffRemoved;//[Offset: 0xc0, Size: 0x10]
	delegate OnBuffRefreshed;//[Offset: 0xd0, Size: 0x10]
	delegate OnClientBuffIdUpdated;//[Offset: 0xe0, Size: 0x10]
	bool bDrawDebugString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	TigerBuffInstance*[] BuffInstances;//[Offset: 0xf8, Size: 0x10]
	TigerBuffInstance*[] NonVerifiedBuffInstances;//[Offset: 0x108, Size: 0x10]
	TigerBuffInstance*[] BuffInstancesAwaitingValidation;//[Offset: 0x118, Size: 0x10]
	TigerDeferredBuffInstantiation[] DeferredBuffs;//[Offset: 0x128, Size: 0x10]
	void Server_RequestRemoveBuffIfNonExistentFor(TigerCharacter* Target, class TigerBuff BuffType, const int BuffID, TigerCharacter* BuffCaster, const float BuffEndTime);// 0x149c3f0
	void RemoveBuffByID(const int BuffID);// 0x149c360
	void OnRep_BuffInstances();// 0x149c340
	void Multicast_ClearBuff(const int BuffID);// 0x149c1d0
	void Multicast_ClearAllBuffs();// 0xd59ac0
	void Multicast_AddBuff(class TigerBuff BuffType, const int BuffID, TigerCharacter* BuffCaster, const float Length, const float BuffStrength);// 0x149c030
	bool IsDisablingDisciplines();// 0x149c010
	bool HasBuff(class TigerBuff BuffType);// 0x149bf70
	float GetTimeLeft(class TigerBuff BuffType);// 0x149bed0
	TigerBuffInstance* FindExistingBuffOfType(const class TigerBuff BuffType, TigerCharacter* Caster);// 0x149be00
	void Client_ClearBuffFor(TigerCharacter* Target, const int BuffID);// 0x149bd30
	void Client_ClearAllBuffs();// 0x149bd10
	void Client_AddBuff(class TigerBuff BuffType, const int BuffID, TigerCharacter* BuffCaster, const float Length, const float BuffStrength);// 0x149bb70
	int ApplyStun(const float Length, TigerCharacter* BuffCaster);// 0x149baa0
	int ApplyInvulnerable(const float Length, TigerCharacter* BuffCaster);// 0x149b9d0
	int ApplyImmobilized(const float Length, TigerCharacter* BuffCaster);// 0x149b900
	int ApplyGrounded(const float Length, TigerCharacter* BuffCaster);// 0x149b830
	int ApplyBuff(const class TigerBuff BuffType, TigerCharacter* BuffCaster, const float OverrideLength, const float OverrideBuffStrength, const bool bDoLagCompensation);// 0x149b690

--------------------------------
Class: TigerDeferredBuffInstantiation
	TigerCharacter* BuffCaster;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerOutlineComponent.ActorComponent.Object
	enum CurrentMode;//[Offset: 0xb0, Size: 0x1]
	int StencilValue;//[Offset: 0xb4, Size: 0x4]
	int LocalPlayerStencilValue;//[Offset: 0xb8, Size: 0x4]
	delegate OnOutlineModeRefreshed;//[Offset: 0xc0, Size: 0x10]
	enum MinCullOption;//[Offset: 0xd0, Size: 0x1]
	enum AnimCullOption;//[Offset: 0xd1, Size: 0x1]
	MeshComponent*[] OutlineMeshes;//[Offset: 0xe0, Size: 0x10]
	uint16 OutlinesToPauseWhenHidden;//[Offset: 0xf0, Size: 0x2]
	uint16 OutlinesToPauseWhenBehindTrapGas;//[Offset: 0xf2, Size: 0x2]
	void SetShouldUseCustomDepth(const bool bInShouldUseCustomDepth);// 0x156c050
	void SetMinAnimTickOption(enum InMinOption);// 0x156bd40
	void RegisterOutlineMesh(MeshComponent* InMesh);// 0x156b540
	void OnOutlineModeRefreshed__DelegateSignature(enum HighestPrioOutline);// 0x197e4f0
	bool IsOutlineActivated(const enum InMode);// 0x156b210
	bool IsHidden();// 0x156b1f0
	bool IsBehindTrapGas();// 0x156b1d0
	bool HasOutline();// 0x156b0a0
	void DeactivateOutline(const enum InMode);// 0x156abb0
	void ActivateOutline(const enum InMode);// 0x156a6d0

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x220, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	float OuterRadius;//[Offset: 0x228, Size: 0x4]
	float InnerRadius;//[Offset: 0x22c, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x230, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x238, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x248, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x24c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x250, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x254, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x258, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x25c, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x260, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x26c, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x270, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x95b550
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x95b360
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x95b170
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x95b0e0
	void SetOutputBusVolume(float BusVolume);// 0x95b060
	void SetListeners(out const AkComponent*[] Listeners);// 0x95afb0
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x95ae50
	void SetEarlyReflectionsVolume(float SendVolume);// 0x95add0
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x95ad30
	void SetAttenuationScalingFactor(float Value);// 0x95ac30
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x95a9c0
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x95a7f0
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x95a680
	int PostAkEventByName(FString in_EventName);// 0x95a5d0
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x95a400
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x95a210
	float GetAttenuationRadius();// 0x959ed0

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x1f8, Size: 0x8]
	FString EventName;//[Offset: 0x200, Size: 0x10]
	void Stop();// 0x960f00
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x960380
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x95eb90
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x95e9f0
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x95e230
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x95e000
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x95d570

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	UInt32Property GroupShortID;//[Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	UInt32Property ID;//[Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: TigerReplicatedCharacterStats
	TigerCharacterSingleStatModification Health;//[Offset: 0x0, Size: 0x8]
	TigerCharacterSingleStatModification MovementSpeed;//[Offset: 0x8, Size: 0x8]
	float ClimbSpeedMultiplier;//[Offset: 0x10, Size: 0x4]
	float ReviveSpeedMultiplier;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerCompressedRotation
	byte Yaw;//[Offset: 0x0, Size: 0x1]
	byte Pitch;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerDebugComponent.ActorComponent.Object
	TigerPlayer* PlayerOwner;//[Offset: 0xb0, Size: 0x8]
	void Server_SetShowStateInfoDebugging(const bool bInShow);// 0x14d8200
	void Multicast_SetBotStateData(FString inString);// 0x14d7fc0

--------------------------------
Class: TigerAudioVisualizationSpawnerComponent.ActorComponent.Object
	ParticleSystem* ParticleSystemToSpawn;//[Offset: 0xb0, Size: 0x8]
	int MaxSimultaneousVisualizations;//[Offset: 0xb8, Size: 0x4]
	TigerHeightenedSensesAudioVisualization[] ActiveVisualizations;//[Offset: 0xc0, Size: 0x10]
	void VisualizeAudioEvent(const Vector InLocation, const bool InShowOnlyInHeightenedSenses);// 0x1492420

--------------------------------
Class: TigerHeightenedSensesAudioVisualization
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerDistrictComponent.ActorComponent.Object
	delegate OnInsideHolyIncenseChanged;//[Offset: 0xb0, Size: 0x10]
	bool bEnableVertexValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bIsInsideHolyIncense;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bIsOutOfBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	float DistanceToHolyIncense;//[Offset: 0xc4, Size: 0x4]
	Vector2D ClosestGasLocation;//[Offset: 0xc8, Size: 0x8]
	Vector2D ClosestGasNormal;//[Offset: 0xd0, Size: 0x8]
	float OutOfBoundsDamagePerTick;//[Offset: 0xd8, Size: 0x4]
	float OutOfBoundsDamageTickInterval;//[Offset: 0xdc, Size: 0x4]
	CurveFloat* EffectStrengthScaling;//[Offset: 0xe8, Size: 0x8]
	bool bDebugEffectStrength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	TigerCharacter* TigerCharacter;//[Offset: 0xf8, Size: 0x8]
	TigerLevelScriptActor* TigerLevelScriptActor;//[Offset: 0x100, Size: 0x8]
	TimerHandle DamageTimerHandle;//[Offset: 0x108, Size: 0x8]
	void TigerOnInsideHolyIncenseChanged__DelegateSignature(bool bIsInsideHolyIncense);// 0x197e4f0
	bool ShouldTakeDamage();// 0x14efe30
	void Server_RequestServerVerticesForDebugging(const float InDuration);// 0x14efda0
	void Server_RequestLatestRevealedWaveData();// 0x14efd80
	void Server_EnableHolyIncenseProgressDebugging(bool bInEnable);// 0x14efcf0
	void OnWaveStopped();// 0x14efc40
	void OnWaveRevealed();// 0xb7a5a0
	float GetEffectStrength();// 0x14ef640
	void Client_SendWaveData(const int InWaveIndex, const int InServerInitialVertexCount, const Vector2D[] InServerStartVertices, const Vector2D[] InServerEndVertices);// 0x14ef4c0
	void Client_SendHolyIncenseServerProgressData(const float InProgress, const float InAssaultTime, const float InTimeUntilWaveEnds, const int InWaveVerticesCount, const bool bIsInside, const float InDistanceFromGas, const int InSmoothedCount);// 0x14ef2a0
	void Client_SendHolyIncenceVerticesForDebugging(const Vector2D[] InServerVertices, const float InDuration);// 0x14ef1b0

--------------------------------
Class: TigerLevelScriptActor.LevelScriptActor.Actor.Object
	TigerDistrictData* GetDistrictData();// 0x197e4f0

--------------------------------
Class: TigerDistrictData.DataAsset.Object
	Texture2D* MapTexture;//[Offset: 0x30, Size: 0x8]
	DistrictDataAnchor FirstAnchor;//[Offset: 0x38, Size: 0x10]
	DistrictDataAnchor SecondAnchor;//[Offset: 0x48, Size: 0x10]
	bool bSpawnHighPotenceBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bSpawnSuperHighPotenceBlood;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: DistrictDataAnchor
	Vector2D WorldPosition;//[Offset: 0x0, Size: 0x8]
	Vector2D MapPosition;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerCrowdAgentComponent.ActorComponent.Object

--------------------------------
Class: TigerBloodResonanceComponent.ActorComponent.Object
	delegate OnBloodResonanceBlockedByCap;//[Offset: 0xb0, Size: 0x10]
	float BloodCapIncreasePerEvent;//[Offset: 0xc0, Size: 0x4]
	<enum> AddRandomResonanceOnEvents;//[Offset: 0x148, Size: 0x50]
	TigerBloodResonanceBuffs BloodResonanceBuffs;//[Offset: 0x198, Size: 0x10]
	int StartingBloodCap;//[Offset: 0x1d8, Size: 0x4]
	int StartingBloodCapIncreaseGameMode;//[Offset: 0x1dc, Size: 0x4]
	int BloodTypeCap;//[Offset: 0x1e0, Size: 0x4]
	int MaxBloodCap;//[Offset: 0x1e4, Size: 0x4]
	int CurrentBloodCap;//[Offset: 0x1e8, Size: 0x4]
	delegate OnBloodCapChanged;//[Offset: 0x1f0, Size: 0x10]
	delegate OnBloodResonanceAdded;//[Offset: 0x200, Size: 0x10]
	enum[] CurrentBloodResonance;//[Offset: 0x210, Size: 0x10]
	int BloodResonanceLevels;//[Offset: 0x220, Size: 0x4]
	int OldBloodResonanceLevels;//[Offset: 0x230, Size: 0x4]
	float CurrentBloodSlotsIncrease;//[Offset: 0x250, Size: 0x4]
	void OnRep_CurrentBloodCap();// 0x1496600
	void OnRep_BloodResonanceLevels();// 0x14965e0
	void OnPlayerEvent(const enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x1496510
	void OnLifeStatusChanged(const enum InNewLifeStatus);// 0x1496490
	int GetTotalBloodResonanceNum();// 0x14962d0
	int GetMaxBloodCap();// 0x1496250
	int GetCurrentBloodResonanceOfType(const enum InBloodType);// 0x1496100
	enum[] GetCurrentBloodResonance();// 0x1496070
	int GetCurrentBloodCap();// 0x1496050
	void Client_AddBloodResonance(const enum InBloodType);// 0x1495ec0
	void BlueprintServerAddBloodResonance(const enum InBloodType);// 0x1495e40
	void AddGameModeStartingBloodResonances();// 0x1495e20

--------------------------------
Class: TigerBloodResonanceBuffs
	class TigerBuff[] Buffs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerEmotePlayerComponent.ActorComponent.Object
	TigerPlayingEmote PlayingEmote;//[Offset: 0xb0, Size: 0x10]
	void OnRep_PlayingEmote(out const TigerPlayingEmote InOldEmote);// 0x14f9e50

--------------------------------
Class: TigerPlayingEmote
	AnimMontage* Montage;//[Offset: 0x0, Size: 0x8]
	float StartTime;//[Offset: 0x8, Size: 0x4]
	bool StopsMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: TigerUtilityPowerHSenseComponent.ActorComponent.Object
	delegate OnHeightenedSensesUsed;//[Offset: 0xb0, Size: 0x10]
	TigerNPCMasqueradeStateMessage[] NPCMasqueradeStates;//[Offset: 0xc0, Size: 0x10]
	Actor*[] ActiveHeightenedSenseObjects;//[Offset: 0xd0, Size: 0x10]
	float HeightenedSensesDirectLosExtent;//[Offset: 0xe0, Size: 0x4]
	float HeightenedSensesIndirectLosExtent;//[Offset: 0xe4, Size: 0x4]
	float MaxFadeInTimer;//[Offset: 0xe8, Size: 0x4]
	float MaxFadeOutTimer;//[Offset: 0xec, Size: 0x4]
	float PulseDuration;//[Offset: 0xf0, Size: 0x4]
	float CooldownTimeAfterActivation;//[Offset: 0xf4, Size: 0x4]
	float MovementMultiplierWhenActive;//[Offset: 0xf8, Size: 0x4]
	float CurrentFadeInTimer;//[Offset: 0xfc, Size: 0x4]
	float CurrentFadeOutTimer;//[Offset: 0x100, Size: 0x4]
	float CooldownEndTime;//[Offset: 0x104, Size: 0x4]
	float PulseTimeLeft;//[Offset: 0x108, Size: 0x4]
	AkAudioEvent* FailedUseAudioEvent;//[Offset: 0x110, Size: 0x8]
	int CancellingActions;//[Offset: 0x118, Size: 0x4]
	bool ActivateHeightenedSensesStartupFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool DeactivateHeightenedSensesStartupFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]
	bool bShouldStopSprintingWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 0x1]
	bool bShouldPulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 0x1]
	bool bIsHeightenedSensesActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	TigerDisableHSenseTarget[] DisabledHeightenedSensesActors;//[Offset: 0x128, Size: 0x10]
	void UpdateHeightenedSensesEffects();// 0x1624050
	void UpdateBloodResonanceBlendAudio();// 0x1624030
	void TriggerHeightenedSensesEffects();// 0x1623f20
	void ToggledHeightenedSenses__DelegateSignature(bool bIsNowActive);// 0x197e4f0
	void Server_UnsubscribeToHeightenedSenseData();// 0x1623dc0
	void Server_OnActivateHeightenedSenses();// 0x1623c60
	void OnDeactivateHeightenedSenses();// 0x197e4f0
	void OnActivateHeightenedSenses();// 0x197e4f0
	bool IsWithinHeightenedSensesRanges(Actor* InCharacter);// 0x1623850
	bool IsHeightenedSensesActive();// 0x1623820
	float GetHeightenedSensesViewLength();// 0x16232c0
	float GetCurrentHeightenedSensesViewLength();// 0x197e4f0
	float GetCooldownTimeLeft();// 0x1623290
	void DeactivateHeightenedSenseObjects();// 0x16231c0
	void Client_DeactivateHeightenedSenses();// 0x14c0b80

--------------------------------
Class: TigerNPCMasqueradeStateMessage
	TigerNPC* NPC;//[Offset: 0x0, Size: 0x8]
	enum MasqueradeState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TigerDisableHSenseTarget
	class Actor* Actor;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: TigerArtifactComponent.ActorComponent.Object
	TigerSightConfigProperties UnseenOverrideSightProperties;//[Offset: 0xb0, Size: 0x1c]
	class TigerBuff* UnseenBuffType;//[Offset: 0xd0, Size: 0x8]
	float ActionlessTimeUntilUnseen;//[Offset: 0xd8, Size: 0x4]
	void OnCharacterAction(const enum InAction);// 0x1492010

--------------------------------
Class: TigerPhysicalInteraction.Object
	TigerPlayer* OtherPlayer;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerNpcThatCanSeePlayerWrapper

--------------------------------
Class: TigerNpcThatCanSeePlayerWrapper_Client
	TigerBaseNPC* NPC;//[Offset: 0x0, Size: 0x8]
	float LastTimeReactingToPlayerAction;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerPassiveWithLogicArray
	TigerClanPassiveAndDefault[] Passives;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerClanPassiveAndDefault
	ActorComponent* PassiveLogic;//[Offset: 0x0, Size: 0x8]
	TigerPassiveConfig* PassiveConfig;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerUIEnemyHealthBar.TigerWidget.UserWidget.Widget.Visual.Object
	void AddHealAmount(int InHealAmount);// 0x197e4f0

--------------------------------
Class: TigerCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	TigerTraversalFiniteStateMachine* FiniteStateMachine;//[Offset: 0xb00, Size: 0x8]
	float MaxSprintSpeed;//[Offset: 0xb38, Size: 0x4]
	float SprintSpeedMultiplier;//[Offset: 0xb3c, Size: 0x4]
	float ForwardAngleThreshold;//[Offset: 0xb44, Size: 0x4]
	TigerSprintConfig* SprintConfig;//[Offset: 0xb50, Size: 0x8]
	float MaxJumpHeight;//[Offset: 0xb58, Size: 0x4]
	bool bPreventFallingSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5c, Size: 0x1]
	float DownedMaxSpeed;//[Offset: 0xb60, Size: 0x4]
	delegate OnDodge;//[Offset: 0xb68, Size: 0x10]
	float WallClimbCombineThresholdSquared;//[Offset: 0xb78, Size: 0x4]
	TigerImpendingCollisionCalculator* ImpendingCollisionCalculator;//[Offset: 0xb80, Size: 0x8]
	float TimeUntilCollision;//[Offset: 0xb88, Size: 0x4]
	float AngleToImpendingCollisionWithClimbableSurface;//[Offset: 0xb8c, Size: 0x4]
	float CharacterAngleToImpendingCollisionWithClimbableSurface;//[Offset: 0xb90, Size: 0x4]
	bool bAboutToCollideWithClimbableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 0x1]
	UInt32Property ElysiumBlockedTraversalStates;//[Size: 0x4]
	bool bEnableRestrictedElysiumMobility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8, Size: 0x1]
	bool bIsInLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc9, Size: 0x1]
	bool bContinueToUseClimbCameraDuringLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbca, Size: 0x1]
	bool bWasLastLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbcb, Size: 0x1]
	FName RightHandBoneName;//[Offset: 0xbd4, Size: 0x8]
	FName LeftHandBoneName;//[Offset: 0xbdc, Size: 0x8]
	FName RightFootBoneName;//[Offset: 0xbe4, Size: 0x8]
	FName LeftFootBoneName;//[Offset: 0xbec, Size: 0x8]
	float JumpCapsuleHeightReduction;//[Offset: 0xbf4, Size: 0x4]
	TigerDeltaCorrectionData CurrentDeltaCorrectedAnimationData;//[Offset: 0xc40, Size: 0x40]
	bool bUseCustomCurvesExclusivelyForInclineSpeedModification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 0x1]
	CurveFloat* InclineMovementMultiplierCurve;//[Offset: 0xc88, Size: 0x8]
	CurveFloat* DeclineMovementMultiplierCurve;//[Offset: 0xc90, Size: 0x8]
	CurveFloat* BackwardsMovementMultiplierCurve;//[Offset: 0xc98, Size: 0x8]
	float BackwardsAngleThreshold;//[Offset: 0xca0, Size: 0x4]
	class TigerSprintConfig* SprintConfigClass;//[Offset: 0xcb8, Size: 0x8]
	CurveFloat* AimGlideProgressCurve;//[Offset: 0xcc0, Size: 0x8]
	CurveFloat* AimGlideDragOverVelocityCurve;//[Offset: 0xcc8, Size: 0x8]
	CurveFloat* AimGlideLateralDragCurve;//[Offset: 0xcd0, Size: 0x8]
	CurveFloat* AimGlideAirControlCurve;//[Offset: 0xcd8, Size: 0x8]
	bool bResetAimGlideOnDoubleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]
	AnimMontage* PendingPreMovementMontage;//[Offset: 0xce8, Size: 0x8]
	Vector LastWallJumpedNormal;//[Offset: 0xd40, Size: 0xc]
	void TigerDelegateOnDodged__DelegateSignature(Vector RelativeLaunchDirection);// 0x197e4f0
	bool ShouldUseClimbingCamera();// 0x14bbb10
	bool ShouldRestrictMobility(const enum InPotentialActionToRestrict);// 0x14bba80
	void Server_SetDeltaCorrectionEndPoint(const Vector EndPosition);// 0x14bb0b0
	void Server_NetworkDesyncDetected(float InDistanceFromPlayer, float InTeleportingDistance, float InVelocitySize, float InTimeSinceLastServerUpdate, float InClientDeltaTime);// 0x14baec0
	void ResetAimGlideTime();// 0x14baea0
	void PlayDeltaCorrectedAnimation(AnimMontage* AnimMontageToCorrect, const Vector PositionToCorrectTo, const bool bShouldAdjustAnimationPlayRate);// 0x14bac20
	void Multicast_WallJump();// 0x14bac00
	void Multicast_UpdateWallJump(enum InDesiredWallJumpDirection, byte InDesiredWallJumpAnimState, const Vector InWallNormal, const Vector InWallJumpVelocity);// 0x14baa70
	void Multicast_StopClimb();// 0x14baa50
	void Multicast_ReplicateState(enum InTraversalStateType, enum InAction);// 0x14ba980
	void Multicast_FinishWallJump();// 0x14ba960
	void Multicast_BeginClimb(Actor* InTargetClimbObject, const Vector InClimbStartLocation);// 0x14ba880
	void Multicast_AirDash(enum InDashDirection, const float InAirDashAngleInDegrees);// 0x14ba7b0
	bool IsSprintingAtFullSpeed();// 0x14ba780
	bool IsSprinting();// 0x14ba750
	bool IsSliding();// 0x14ba720
	bool IsSlideJumping();// 0x14ba6f0
	bool IsInWallJump();// 0x14ba6c0
	bool IsInWallHang();// 0x14ba690
	bool IsInWallGrind();// 0x14ba660
	bool IsInLowVault();// 0x14ba630
	bool IsInLedgeGrab();// 0x14ba600
	bool IsInFlyingState();// 0x14ba5d0
	bool IsInAirDash();// 0x14ba5a0
	bool IsAimGliding();// 0x14ba570
	float GetTimeSinceStartedMovingFreely();// 0x14ba540
	float GetSlideSurfacePitch();// 0x14ba510
	float GetLastDodgeTime();// 0xb69540
	float GetFloorPitch();// 0x14ba3a0
	float GetAimGlideStrength();// 0x14ba370
	void FreezeMovement();// 0x14ba350
	void DoForcedMove(out const Vector TargetLocation, float TravelTime, bool bInAir, float ExitVelocityScale, bool bAllowPlayerBreak, bool bAllowCancelOnArrival);// 0x14ba130
	void ApplyKnockback(out const Vector InVelocity, TigerPlayer* InInstigator);// 0x14ba050

--------------------------------
Class: TigerTraversalFiniteStateMachine.ActorComponent.Object
	TigerCharacterMovementComponent* TigerCharacterMovement;//[Offset: 0xb8, Size: 0x8]
	TigerTraversalBaseFiniteState* ActiveState;//[Offset: 0xc0, Size: 0x8]
	TigerTraversalBaseFiniteState* TraversalList;//[Offset: 0xc8, Size: 0x8]
	class TigerTraversalStateConfigBase* Configs;//[Offset: 0x148, Size: 0x8]
	delegate OnTraversalStateChanged;//[Offset: 0x1c8, Size: 0x10]

--------------------------------
Class: TigerTraversalBaseFiniteState.Object
	TigerCharacterMovementComponent* TigerCharacterMovementComponent;//[Offset: 0x28, Size: 0x8]
	TigerTraversalStateConfigBase* BaseConfig;//[Offset: 0x30, Size: 0x8]
	TigerTraversalFiniteStateMachine* OwningStateMachine;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerTraversalStateConfigBase.Object
	bool bStateIsDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum[] PossibleOutTransitions;//[Offset: 0x30, Size: 0x10]
	class TigerTraversalBaseFiniteState* TraversalState;//[Offset: 0x40, Size: 0x8]
	float TimeOutSeconds;//[Offset: 0x48, Size: 0x4]
	enum TimeOutInto;//[Offset: 0x4c, Size: 0x1]
	bool bJumpCooldownAllowedToTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bJumpDiminishingReturnsCountdownCanTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]

--------------------------------
Class: TigerSprintConfig.Object
	float MinimumForwardInput;//[Offset: 0x28, Size: 0x4]
	float SprintDelay;//[Offset: 0x30, Size: 0x4]
	TigerCharacterMovementComponent* MoveComp;//[Offset: 0x38, Size: 0x8]
	float LedgeGrabReductionMultiplier;//[Offset: 0x4c, Size: 0x4]
	float MeleeAttackReductionMultiplier;//[Offset: 0x50, Size: 0x4]
	float DisciplineUseReductionMultiplier;//[Offset: 0x70, Size: 0x4]
	float[] DodgeReductionMultiplier;//[Offset: 0x108, Size: 0x10]
	float JumpReductionMultiplier;//[Offset: 0x118, Size: 0x4]
	float DoubleJumpReductionMultiplier;//[Offset: 0x11c, Size: 0x4]
	float SprintBuildUpDecayDuration;//[Offset: 0x120, Size: 0x4]
	float SprintBuildUpDecayDelay;//[Offset: 0x124, Size: 0x4]
	CurveFloat* SprintBuildUpCurve;//[Offset: 0x128, Size: 0x8]
	void OnSprintDelayCompleted(TigerPlayer* InPlayer);// 0x197e4f0

--------------------------------
Class: TigerImpendingCollisionCalculator.Object

--------------------------------
Class: TigerDeltaCorrectionData
	AnimMontage* CurrentAnimation;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerNonReplicatedCharacterStats
	TigerCharacterSingleStatModification MovementAcceleration;//[Offset: 0x0, Size: 0x8]
	float JumpForceMultiplier;//[Offset: 0x8, Size: 0x4]
	float WallJumpForceMultiplier;//[Offset: 0xc, Size: 0x4]
	float MeleeDamageDealtMultiplier;//[Offset: 0x10, Size: 0x4]
	float AbilityDamageDealtMultiplier;//[Offset: 0x14, Size: 0x4]
	float DamageTakenMultiplier;//[Offset: 0x18, Size: 0x4]
	float MeleeDamageTakenMultiplier;//[Offset: 0x1c, Size: 0x4]
	TigerCharacterSingleStatModification MeleeLifestealMultiplier;//[Offset: 0x20, Size: 0x8]
	float AbilityDamageTakenMultiplier;//[Offset: 0x28, Size: 0x4]
	float ShootingDamageTakenMultiplier;//[Offset: 0x2c, Size: 0x4]
	float HealingReceivedMultiplier;//[Offset: 0x30, Size: 0x4]
	float CooldownMultiplier;//[Offset: 0x34, Size: 0x4]
	float CooldownSpeedMultiplier;//[Offset: 0x38, Size: 0x4]
	float RechargeMultiplier;//[Offset: 0x3c, Size: 0x4]
	float RechargeSpeedMultiplier;//[Offset: 0x40, Size: 0x4]
	float MasqueradePointMultiplier;//[Offset: 0x44, Size: 0x4]
	float MasqueradeConsequenceDurationMultiplier;//[Offset: 0x48, Size: 0x4]
	float BloodhuntDurationMultiplier;//[Offset: 0x4c, Size: 0x4]
	float ClanSkillCooldownMultiplier;//[Offset: 0x50, Size: 0x4]
	float ArchetypeSkillCooldownMultiplier;//[Offset: 0x54, Size: 0x4]
	float AttackSpeedMultiplier;//[Offset: 0x58, Size: 0x4]
	float ReloadSpeedMultiplier;//[Offset: 0x5c, Size: 0x4]
	float ShootingDamageDealtMultiplier;//[Offset: 0x60, Size: 0x4]
	float ShotgunDamageDealtMultiplier;//[Offset: 0x64, Size: 0x4]
	float StaminaCostMultiplier;//[Offset: 0x68, Size: 0x4]
	float AmmoFindMultiplier;//[Offset: 0x6c, Size: 0x4]
	float AmmoCapacityMultiplier;//[Offset: 0x70, Size: 0x4]
	float FeedSpeedMultiplier;//[Offset: 0x74, Size: 0x4]
	float MosquitoDamageTakenMultiplier;//[Offset: 0x78, Size: 0x4]
	float LoudnessMultiplier;//[Offset: 0x7c, Size: 0x4]
	float ExperienceGainMultiplier;//[Offset: 0x80, Size: 0x4]
	float AimSensitivityMultiplier;//[Offset: 0x84, Size: 0x4]
	float DamageDealtMultiplier;//[Offset: 0x88, Size: 0x4]
	float DamageDealtToCiviliansMultiplier;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: TigerFastRepMovementData
	Vector_NetQuantize LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	byte PackedMovementMode;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: TigerInventoryStats
	float MeleeDamage;//[Offset: 0x0, Size: 0x4]
	float ShootingDamage;//[Offset: 0x4, Size: 0x4]
	float AbilityDamageBonus;//[Offset: 0x8, Size: 0x4]
	float MeleeDefense;//[Offset: 0xc, Size: 0x4]
	float ShootingDefense;//[Offset: 0x10, Size: 0x4]
	float AbilityDefense;//[Offset: 0x14, Size: 0x4]
	float AbilityHaste;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TigerPlayerSavedLocation
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerOtherGroupMembersData
	TigerPlayerState*[] OtherGroupMembers;//[Offset: 0x0, Size: 0x10]
	bool[] OtherGroupMembersSilencedMeStatus;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerCompassMarkerComponent.ActorComponent.Object
	TigerCompassMarkerWidget* CompassMarkerWidget;//[Offset: 0xb0, Size: 0x8]
	Texture2D* MarkerTexture;//[Offset: 0xb8, Size: 0x8]
	bool bShouldShowByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	void Show();// 0x14c6c30
	void Hide();// 0x14c6100

--------------------------------
Class: TigerGroupMemberMarkerProxy.TigerMapMarkerProxy.Object
	byte PlayerIndex;//[Offset: 0x68, Size: 0x1]
	bool bIsExtendedGroupMember;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]

--------------------------------
Class: TigerPlayerMasqueradeComponent.ActorComponent.Object
	delegate OnBloodHuntStateChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnBloodHuntStateUpdated;//[Offset: 0xc0, Size: 0x10]
	AkAudioEvent* MasqueradeBrokenAkAudioEvent;//[Offset: 0xd0, Size: 0x8]
	AkAudioEvent* MasqueradeRestoredAkAudioEvent;//[Offset: 0xd8, Size: 0x8]
	class TigerMasqueradeConsequence[] PossibleMasqueradeConsequences;//[Offset: 0xe0, Size: 0x10]
	TigerMasqueradeConsequenceSyncInstance*[] SyncedMasqueradeConsequenceInstances;//[Offset: 0xf0, Size: 0x10]
	delegate OnMasqueradeConsequenceInstancedAdded;//[Offset: 0x100, Size: 0x10]
	delegate OnMasqueradeConsequenceInstancedRemoved;//[Offset: 0x110, Size: 0x10]
	float MinimumConsequenceUpdateInterval;//[Offset: 0x120, Size: 0x4]
	TigerMasqueradeConsequence*[] ActiveConsequences;//[Offset: 0x128, Size: 0x10]
	TigerConsequenceData[] ReplicatedConsequences;//[Offset: 0x138, Size: 0x10]
	void OnRep_ConsequenceData();// 0x15b11a0
	void OnMasqueradePointsAdded__DelegateSignature();// 0x197e4f0
	void Multicast_UpdateConsequences(const TigerConsequenceUpdateData[] InUpdateData);// 0x15b0ec0
	void Multicast_RemoveConsequences(const int[] InConsequenceIds, const enum InDeactivationReason);// 0x15b0dd0
	void Multicast_RemoveConsequence(const int InConsequenceId, const enum InDeactivationReason);// 0x15b0d00
	void Multicast_AddConsequence(const TigerConsequenceData InMasqueradeConsequence);// 0x15b0c70
	bool IsBloodHunted();// 0x15b0c40
	TigerMasqueradeConsequenceSyncInstance* GetConsequenceInstance(const class TigerMasqueradeConsequenceSyncInstance InInstanceClass);// 0x15b08e0
	void Client_UpdateConsequenceLatestPlayerAction(const int InConsequenceId, const enum InAction);// 0x15b0810
	void AddMasqueradePointsCausedByNpcReacting(TigerBaseNPC* InNpc, const enum InAction);// 0x15b0740

--------------------------------
Class: TigerMasqueradeConsequence.Object
	class TigerMasqueradeConsequenceSyncInstance* SyncInstanceClass;//[Offset: 0x28, Size: 0x8]
	enum[] ActionsThatCanActivateConsequence;//[Offset: 0x30, Size: 0x10]
	TigerPlayer* PlayerOwner;//[Offset: 0x40, Size: 0x8]
	FName ConsequenceName;//[Offset: 0x48, Size: 0x8]
	float Duration;//[Offset: 0x50, Size: 0x4]
	bool bShouldRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: TigerMasqueradeConsequenceSyncInstance.Object
	bool bShouldBeActiveForAffectedPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	TigerPlayerState* AffectedPlayerState;//[Offset: 0x30, Size: 0x8]
	TigerPlayerController* LocalPlayerController;//[Offset: 0x38, Size: 0x8]
	float GetExpectedTimeLeft();// 0x15b0980

--------------------------------
Class: TigerConsequenceUpdateData
	int ConsequenceId;//[Offset: 0x0, Size: 0x4]
	float ExpectedTimeLeft;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize VectorData;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: TigerConsequenceData
	class TigerMasqueradeConsequence* ConsequenceClass;//[Offset: 0x0, Size: 0x8]
	TigerConsequenceUpdateData UpdateData;//[Offset: 0x8, Size: 0x14]
	enum PlayerAction;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: TigerMatchRecapComponent.TigerPlayerNetSubscriberComponent.ActorComponent.Object
	delegate OnSyncDelegate;//[Offset: 0xd0, Size: 0x10]
	TigerRecapData Data;//[Offset: 0xe0, Size: 0xf0]
	TigerRecapData LastSyncData;//[Offset: 0x1d0, Size: 0xf0]
	void GetHitsFromItem(out const TigerRecapWeapon InItem, float InStartTime, float InEndTime, out TigerRecapHit[] OutHits);// 0x1553630
	int GetEliminationCount();// 0x1553600
	int GetDeathCount();// 0x15535d0
	TigerRecapData GetData();// 0x1553570
	TigerRecapDamage GetDamageByUserRef(TigerPlayer* InUserReference, bool bInReceived);// 0x1553450
	TigerRecapDamage GetDamageByType(enum InDamageType, bool bInReceived);// 0x1553330
	int GetAssistCount();// 0x1553300
	void Client_SyncData(TigerPlayerState* InSyncPlayer, const TigerRecapData InSyncData, bool bInIsFullSync, const TigerPlayerNetSubscriptionMask InMask);// 0x1552f70

--------------------------------
Class: TigerPlayerNetSubscriberComponent.ActorComponent.Object
	void Unsubscribe(TigerPlayerState* InPlayerState, out const TigerPlayerNetSubscriptionMask InMask);// 0x15b5a70
	void Subscribe(TigerPlayerState* InPlayerState, out const TigerPlayerNetSubscriptionMask InMask);// 0x15b5990
	void Server_UnsubscribePlayer(TigerPlayerState* InPlayerState, const TigerPlayerNetSubscriptionMask InMask);// 0x15b5560
	void Server_SubscribePlayer(TigerPlayerState* InPlayerState, const TigerPlayerNetSubscriptionMask InMask);// 0x15b5490
	TigerPlayerNetSubscriptionMask GetMask(TigerPlayerState* InPlayerState);// 0x15b4370

--------------------------------
Class: TigerRecapWeapon
	TigerRecapHit[] Hits;//[Offset: 0x0, Size: 0x10]
	int TotalDamage;//[Offset: 0x10, Size: 0x4]
	TigerWeapon* Weapon;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TigerRecapHit
	TigerRecapTime Time;//[Offset: 0x0, Size: 0x4]
	byte Damage;//[Offset: 0x4, Size: 0x1]
	bool bCritical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	enum LifeStatus;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: TigerRecapTime
	float Seconds;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TigerRecapData
	enum CurrentLifeStatus;//[Offset: 0x0, Size: 0x1]
	TigerRecapDamage[] IncomingDamage;//[Offset: 0x8, Size: 0x10]
	TigerRecapDamage[] OutgoingDamage;//[Offset: 0x18, Size: 0x10]
	TigerRecapHealing[] IncomingHealing;//[Offset: 0x28, Size: 0x10]
	TigerRecapHealing[] OutgoingHealing;//[Offset: 0x38, Size: 0x10]
	TigerRecapDown[] IncomingDowned;//[Offset: 0x48, Size: 0x10]
	TigerRecapDown[] OutgoingDowned;//[Offset: 0x58, Size: 0x10]
	TigerRecapRevive[] IncomingRevives;//[Offset: 0x68, Size: 0x10]
	TigerRecapRevive[] OutgoingRevives;//[Offset: 0x78, Size: 0x10]
	TigerRecapRespawn[] IncomingRespawns;//[Offset: 0x88, Size: 0x10]
	TigerRecapRespawn[] OutgoingRespawns;//[Offset: 0x98, Size: 0x10]
	TigerRecapDeath[] Deaths;//[Offset: 0xa8, Size: 0x10]
	TigerRecapKill[] Kills;//[Offset: 0xb8, Size: 0x10]
	TigerRecapElimination[] Eliminations;//[Offset: 0xc8, Size: 0x10]
	TigerRecapAssist[] Assists;//[Offset: 0xd8, Size: 0x10]
	int NumberOfSpectators;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: TigerRecapDamage
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapWeapon[] Weapons;//[Offset: 0x10, Size: 0x10]
	int TotalDamage;//[Offset: 0x20, Size: 0x4]
	TigerRecapTime FirstHitTime;//[Offset: 0x24, Size: 0x4]
	TigerRecapTime LatestHitTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TigerRecapUser
	enum Type;//[Offset: 0x0, Size: 0x1]
	int PlayerStateId;//[Offset: 0x4, Size: 0x4]
	byte LastKnownHealth;//[Offset: 0x8, Size: 0x1]
	byte LastKnownArmor;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerRecapHealing
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	byte Amount;//[Offset: 0xc, Size: 0x1]
	TigerRecapTime StartTime;//[Offset: 0x10, Size: 0x4]
	TigerRecapTime EndTime;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerRecapDown
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapTime Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerRecapRevive
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapTime Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerRecapRespawn
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapTime Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerRecapDeath
	TigerRecapUser Instigator;//[Offset: 0x0, Size: 0xc]
	TigerRecapUser Credited;//[Offset: 0xc, Size: 0xc]
	bool bWasDiablerized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	TigerRecapTime Time;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TigerRecapKill
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapTime Time;//[Offset: 0xc, Size: 0x4]
	bool bDiablerize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TigerRecapElimination
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapTime Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerRecapAssist
	TigerRecapUser User;//[Offset: 0x0, Size: 0xc]
	TigerRecapTime Time;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerPlayerNetSubscriptionMask
	int Mask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TigerMatchMedalComponent.ActorComponent.Object
	MatchMedalSettings Settings;//[Offset: 0x178, Size: 0x10]
	void PlayerCountChanged(int InNumberOfAlivePlayers);// 0x1553d30

--------------------------------
Class: MatchMedalSettings
	float MaxTimeQuickKills;//[Offset: 0x0, Size: 0x4]
	DataTable* MatchMedalTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerCollectibleProgressCache.Object

--------------------------------
Class: TigerPlayerAppearanceCache.Actor.Object
	TigerCharCustomizationComponent* CharacterCustomizationComponent;//[Offset: 0x228, Size: 0x8]
	TigerCharacterMeshManager* MeshManager;//[Offset: 0x230, Size: 0x8]
	SkeletalMeshComponent* MeshComponents;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: TigerRewardsCollection
	TigerRewardWithQuantity[] InventoryRewards;//[Offset: 0x0, Size: 0x10]
	int PremiumCurrency;//[Offset: 0x10, Size: 0x4]
	int SeasonExp;//[Offset: 0x14, Size: 0x4]
	int ArchetypeExp;//[Offset: 0x18, Size: 0x4]
	int PlayerExp;//[Offset: 0x1c, Size: 0x4]
	int SeasonPlacementExpBoostPercentage;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TigerRewardWithQuantity
	TigerItemId ItemId;//[Offset: 0x0, Size: 0x8]
	int Quantity;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerMatchGameState.TigerGameState.GameStateBase.Info.Actor.Object
	delegate OnPreMatchStateChanged;//[Offset: 0x390, Size: 0x10]
	delegate OnMatchStateChanged;//[Offset: 0x3a0, Size: 0x10]
	delegate HighTierLootLocationsChanged;//[Offset: 0x3b0, Size: 0x10]
	delegate OnNumberOfConnectedPlayersChanged;//[Offset: 0x3c0, Size: 0x10]
	delegate OnNumberOfAlivePlayersChanged;//[Offset: 0x3d0, Size: 0x10]
	delegate OnDynamicComponentInitalized;//[Offset: 0x3f8, Size: 0x10]
	delegate OnMatchSettingsReceived;//[Offset: 0x420, Size: 0x10]
	float NextWaveRevealGameTime;//[Offset: 0x430, Size: 0x4]
	float MatchTimePassed;//[Offset: 0x434, Size: 0x4]
	float ReplicatedMatchTimePassed;//[Offset: 0x438, Size: 0x4]
	int NumPlayersAlive;//[Offset: 0x43c, Size: 0x4]
	int NumGroupsAlive;//[Offset: 0x444, Size: 0x4]
	int GroupSize;//[Offset: 0x448, Size: 0x4]
	int NumPlayersConnected;//[Offset: 0x44c, Size: 0x4]
	int RandomizedWeatherValue;//[Offset: 0x450, Size: 0x4]
	TigerPreMatchStateInfo PreMatchState;//[Offset: 0x454, Size: 0x8]
	enum TigerMatchState;//[Offset: 0x45c, Size: 0x1]
	enum BalanceMode;//[Offset: 0x45d, Size: 0x1]
	TigerMatchSettings MatchSettings;//[Offset: 0x460, Size: 0x270]
	class TigerWorldMarker* EntityCheckpointMarkerClass;//[Offset: 0x6d0, Size: 0x8]
	delegate OnSpawnMechanicReceived;//[Offset: 0x6d8, Size: 0x10]
	class TigerSpawnMechanic* SpawnMechanicClass;//[Offset: 0x6e8, Size: 0x8]
	class TigerHighTierLootGroup[] ActiveHighTierLootGroups;//[Offset: 0x6f0, Size: 0x10]
	FText JudgeSlainText;//[Offset: 0x700, Size: 0x18]
	enum MatchType;//[Offset: 0x718, Size: 0x1]
	Vector2D[] EntityCheckpointLocations;//[Offset: 0x720, Size: 0x10]
	TigerWorldMarker*[] EntityCheckpointMarkers;//[Offset: 0x730, Size: 0x10]
	TigerWidget*[] WinConditionWidgets;//[Offset: 0x750, Size: 0x10]
	bool bMatchSettingsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764, Size: 0x1]
	enum MatchMode;//[Offset: 0x766, Size: 0x1]
	bool bHasRequestedLeaveSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x767, Size: 0x1]
	DataTable* OverrideMatchMedalTable;//[Offset: 0x768, Size: 0x8]
	void TigerOnSpawnMechanicReceived__DelegateSignature();// 0x197e4f0
	void SetMatchState(enum MatchState);// 0x154edc0
	void SetHasRequestedLeaveSession();// 0x154eda0
	void OnTigerNumberOfConnectedPlayersChanged__DelegateSignature(int InNumberOfConnectedPlayers);// 0x197e4f0
	void OnTigerNumberOfAlivePlayersChanged__DelegateSignature(int InNumberOfAlivePlayers);// 0x197e4f0
	void OnRep_TigerMatchState(const enum OldMatchState);// 0x154ebe0
	void OnRep_TigerBalanceMode(const enum InOldBalanceMode);// 0x154eb60
	void OnRep_SpawnMechanicClass();// 0x154eb40
	void OnRep_MatchSettings();// 0x154eb20
	void OnRep_EntityCheckpointLocations();// 0x154eb00
	void OnPreMatchStateChanged__DelegateSignature(TigerPreMatchStateInfo PreMatchState);// 0x197e4f0
	void OnMatchStateChanged__DelegateSignature(enum OldState, enum NewState);// 0x197e4f0
	void OnMatchSettingsSetEvent__DelegateSignature();// 0x197e4f0
	void OnHighTierLootLocationsChanged__DelegateSignature(out const class TigerHighTierLootGroup[] InActiveHighTierLootGroups);// 0x197e4f0
	void OnDynamicComponentInitialized__DelegateSignature(ActorComponent* InActorComponent);// 0x197e4f0
	void Multicast_UpdatePreMatchState(const TigerPreMatchStateInfo NewPreMatchState);// 0x154ea70
	void Multicast_SetEnitityCheckpointLocations(const Vector2D[] CheckpointLocations);// 0x154e9d0
	void Multicast_JudgeSpawned();// 0x154e9b0
	void Multicast_JudgeSlain(PlayerState* InInstigatorPlayer);// 0x154e920
	void Multicast_DestroyResurrectAltar(TigerResurrectAltar* InAltar);// 0x154e890
	void Multicast_ChangeNumPlayersAlive(int InNewNumPlayersAlive, int InNewNumPlayersConnected);// 0x154e7c0
	bool IsMatchSettingsSet();// 0x154e7a0
	void HandleOnRestartPlayer(Controller* NewPlayer);// 0x154e680
	enum GetMatchState();// 0x154e4d0
	TigerMatchSettings GetMatchSettings();// 0x154e4a0
	enum GetMatchMode();// 0x154e480
	bool GetClosestLocationOnNextWaveWall(out const Vector2D Location, out Vector2D ClosestLocation, out bool bIsOutsidePlayableArea);// 0x154e250

--------------------------------
Class: TigerMatchSettings
	float GasSpeedFactor;//[Offset: 0x0, Size: 0x4]
	enum GasSpeedFactorSettingState;//[Offset: 0x4, Size: 0x1]
	TigerHolyIncenseWaveTimings[] GasTimeSettings;//[Offset: 0x8, Size: 0x10]
	enum GasTimeSettingState;//[Offset: 0x18, Size: 0x1]
	FString GasTimeDataOverride;//[Offset: 0x20, Size: 0x10]
	enum GasTimeDataOverrideState;//[Offset: 0x30, Size: 0x1]
	bool bDisableEntity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	enum DisableEntitySettingState;//[Offset: 0x32, Size: 0x1]
	bool bDisabledCivilians;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	enum DisableCiviliansSettingState;//[Offset: 0x34, Size: 0x1]
	float HighPotenceBloodChance;//[Offset: 0x38, Size: 0x4]
	enum HighPotenceBloodChanceSettingState;//[Offset: 0x3c, Size: 0x1]
	float ExtraTokenBloodChance;//[Offset: 0x40, Size: 0x4]
	enum ExtraTokenBloodChanceSettingState;//[Offset: 0x44, Size: 0x1]
	bool bDisabledInteractables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	enum DisableInteractablesSettingState;//[Offset: 0x46, Size: 0x1]
	int StartingResonance;//[Offset: 0x48, Size: 0x4]
	enum StartingResonanceSettingState;//[Offset: 0x4c, Size: 0x1]
	float BotDifficulty;//[Offset: 0x50, Size: 0x4]
	enum BotDifficultySettingState;//[Offset: 0x54, Size: 0x1]
	float BotAutofillEnabled;//[Offset: 0x58, Size: 0x4]
	enum BotAutofillEnabledSettingState;//[Offset: 0x5c, Size: 0x1]
	float BotRefillEnabled;//[Offset: 0x60, Size: 0x4]
	enum BotRefillEnabledSettingState;//[Offset: 0x64, Size: 0x1]
	bool bAllHighTierLootActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	enum AllHighTierLootActiveSettingState;//[Offset: 0x66, Size: 0x1]
	bool bBrokenMasqueradeAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	enum BrokenMasqueradeAtStartSettingState;//[Offset: 0x68, Size: 0x1]
	int HealthMax;//[Offset: 0x6c, Size: 0x4]
	enum HealthMaxSettingState;//[Offset: 0x70, Size: 0x1]
	int HealthStart;//[Offset: 0x74, Size: 0x4]
	enum HealthStartSettingState;//[Offset: 0x78, Size: 0x1]
	int ShieldHpValue;//[Offset: 0x7c, Size: 0x4]
	enum ShieldHpSettingState;//[Offset: 0x80, Size: 0x1]
	int ShieldStackCount;//[Offset: 0x84, Size: 0x4]
	enum ShieldStackCountSettingState;//[Offset: 0x88, Size: 0x1]
	int ShieldStartCount;//[Offset: 0x8c, Size: 0x4]
	enum ShieldStartCountSettingState;//[Offset: 0x90, Size: 0x1]
	float RegenerationTimeSolo;//[Offset: 0x94, Size: 0x4]
	enum RegenerationTimeSoloSettingState;//[Offset: 0x98, Size: 0x1]
	float RegenerationTimeGroup;//[Offset: 0x9c, Size: 0x4]
	enum RegenerationTimeGroupSettingState;//[Offset: 0xa0, Size: 0x1]
	<FString,float> LootItemWeightScale;//[Offset: 0xa8, Size: 0x50]
	enum LootItemWeightScaleSettingState;//[Offset: 0xf8, Size: 0x1]
	<enum,float> LootItemRarityScale;//[Offset: 0x100, Size: 0x50]
	enum LootItemRarityScaleSettingState;//[Offset: 0x150, Size: 0x1]
	TigerMedalThresholds MatchStatMedalRequirements;//[Offset: 0x154, Size: 0x50]
	enum MatchStatMedalRequirementsSettingState;//[Offset: 0x1a4, Size: 0x1]
	float PlayerEventXpScale;//[Offset: 0x1a8, Size: 0x4]
	enum PlayerEventXpScaleSettingState;//[Offset: 0x1ac, Size: 0x1]
	float SurvivalTimeXpScale;//[Offset: 0x1b0, Size: 0x4]
	enum SurvivalTimeXpScaleSettingState;//[Offset: 0x1b4, Size: 0x1]
	float DamageDealtXpScale;//[Offset: 0x1b8, Size: 0x4]
	enum DamageDealtXpScaleSettingState;//[Offset: 0x1bc, Size: 0x1]
	float PlacementXpScale;//[Offset: 0x1c0, Size: 0x4]
	enum PlacementXpScaleSettingState;//[Offset: 0x1c4, Size: 0x1]
	bool RemoveResurrectAltars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 0x1]
	enum RemoveResurrectAltarsSettingState;//[Offset: 0x1c6, Size: 0x1]
	int RespawnMechanicLives;//[Offset: 0x1c8, Size: 0x4]
	enum RespawnMechanicLivesSettingState;//[Offset: 0x1cc, Size: 0x1]
	TigerWinConditionSettings WinConditions;//[Offset: 0x1d0, Size: 0x18]
	FString PlacementStrategyName;//[Offset: 0x1e8, Size: 0x10]
	int ExtendedGroupCount;//[Offset: 0x1f8, Size: 0x4]
	enum ExtendedGroupCountSettingState;//[Offset: 0x1fc, Size: 0x1]
	enum SpawnMechanic;//[Offset: 0x1fd, Size: 0x1]
	enum SpawnMechanicSettingState;//[Offset: 0x1fe, Size: 0x1]
	enum EnterDownedState;//[Offset: 0x1ff, Size: 0x1]
	enum EnterDownedStateSettingState;//[Offset: 0x200, Size: 0x1]
	bool bRespawnRetainItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	enum RespawnRetainItemsSettingState;//[Offset: 0x202, Size: 0x1]
	FString RespawnSettingsPreset;//[Offset: 0x208, Size: 0x10]
	FString StartingPassivesPreset;//[Offset: 0x218, Size: 0x10]
	FString[] Arenas;//[Offset: 0x228, Size: 0x10]
	enum ArenasSettingState;//[Offset: 0x238, Size: 0x1]
	float ItemRespawnTime;//[Offset: 0x23c, Size: 0x4]
	enum ItemRespawnTimeSettingState;//[Offset: 0x240, Size: 0x1]
	float ItemDespawnTime;//[Offset: 0x244, Size: 0x4]
	enum ItemDespawnTimeSettingState;//[Offset: 0x248, Size: 0x1]
	bool InfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	enum InfiniteAmmoSettingState;//[Offset: 0x24a, Size: 0x1]
	bool bDisableMasteryChallenges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1]
	bool bDisableQuestProgression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bDisablePlacedCollectibles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	float QuickKillCooldown;//[Offset: 0x250, Size: 0x4]
	enum QuickKillCooldownSettingState;//[Offset: 0x254, Size: 0x1]
	FString MedalsSettingsPreset;//[Offset: 0x258, Size: 0x10]
	enum MedalsSettingsPresetSettingState;//[Offset: 0x268, Size: 0x1]

--------------------------------
Class: TigerMedalThresholds
	TigerPlayerMedalTiers Eliminations;//[Offset: 0x0, Size: 0x10]
	TigerPlayerMedalTiers Assists;//[Offset: 0x10, Size: 0x10]
	TigerPlayerMedalTiers Diableries;//[Offset: 0x20, Size: 0x10]
	TigerPlayerMedalTiers DamageDealt;//[Offset: 0x30, Size: 0x10]
	TigerPlayerMedalTiers Placement;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerWinConditionSettings
	PrimaryAssetId[] ActiveWinConditions;//[Offset: 0x0, Size: 0x10]
	float TimeLimit;//[Offset: 0x10, Size: 0x4]
	int ScoreTarget;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: TigerSpawnMechanic.Object
	bool HasSpawnSelectionMode();// 0x14a47b0

--------------------------------
Class: TigerResurrectAltar.TigerInteractiveObject.Actor.Object
	TigerPlayerController* ResurrectingPlayerController;//[Offset: 0x2a8, Size: 0x8]
	float RespawnDelay;//[Offset: 0x2b0, Size: 0x4]
	bool ShouldDisableAfterSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	enum HolyIncenseInteractionType;//[Offset: 0x2b5, Size: 0x1]
	float HolyIncensePositionCheckRate;//[Offset: 0x2b8, Size: 0x4]
	float AltarDestroyDelay;//[Offset: 0x2bc, Size: 0x4]
	class TigerWorldMarker* WorldMarkerClass;//[Offset: 0x2c0, Size: 0x8]
	SceneComponent*[] RespawnPoints;//[Offset: 0x2c8, Size: 0x10]
	TigerWorldMarker* WorldMarker;//[Offset: 0x2d8, Size: 0x8]
	void SetupHolyIncenseInteraction(enum InOldState, enum InNewState);// 0x15d45f0
	void OnWaveStoppedMoving();// 0x15d3fb0
	void OnWaveStartedMoving();// 0x15d3f90
	void OnWaveRevealed();// 0x15d3f70
	void OnResurrectInteractionFinished();// 0x197e4f0
	void OnResurrect(SceneComponent* InUsedSceneComponent, const Vector InResurrectLocation, const Rotator InResurrectRotation);// 0x197e4f0
	void OnAltarDeactivatedAfterUse();// 0x197e4f0
	void OnAltarDeactivated();// 0x197e4f0
	void Multicast_OnResurrect(const int InResurrectCount);// 0x15d3ee0
	Rotator GetRespawnRotationOffset(SceneComponent* InSceneComponent, int InCurrenctResurrectIndex, int InResurrectCount);// 0x15d3b30
	Vector GetRespawnLocationOffset(SceneComponent* InSceneComponent, int InCurrenctResurrectIndex, int InResurrectCount);// 0x15d3a00
	void DestroyAltar();// 0x15d3800
	void CheckWavePosition();// 0x15d3700

--------------------------------
Class: TigerTooltipAction
	FText ActionText;//[Offset: 0x0, Size: 0x18]
	FName InputAction;//[Offset: 0x18, Size: 0x8]
	bool bIsHoldAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bListenForOnPreviewKeyDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bShouldConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	byte HAlign;//[Offset: 0x23, Size: 0x1]
	delegate OnPressed;//[Offset: 0x24, Size: 0x10]
	delegate OnReleased;//[Offset: 0x34, Size: 0x10]

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x328, Size: 0x8]
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x338, Size: 0x10]
	WidgetAnimation*[] Animations;//[Offset: 0x348, Size: 0x10]
	FName[] NamedSlots;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10]
	FName PropertyName;//[Offset: 0x10, Size: 0x8]
	FName FunctionName;//[Offset: 0x18, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28]
	enum Kind;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	static WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0x29ebb80
	static WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0x29ebaf0
	static VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x29eba60
	static UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x29eb9d0
	static SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0x29eb940
	static ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0x29eb8b0
	static ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0x29eb820
	static SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0x29eb790
	static OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x29eb700
	static HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x29eb670
	static GridSlot* SlotAsGridSlot(Widget* Widget);// 0x29eb5e0
	static CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x29eb550
	static BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x29eb4c0
	static void RemoveAllWidgets(Object* WorldContextObject);// 0x29ea890
	static bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x29ea530
	static Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x29ea020
	static Vector2D GetViewportSize(Object* WorldContextObject);// 0x29e9f90
	static float GetViewportScale(Object* WorldContextObject);// 0x29e9f00
	static Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x29e9e50
	static bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x29e9d00
	static Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x29e9c70
	static Vector2D GetMousePositionOnPlatform();// 0x29e9c30

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29eb440
	void SetPadding(Margin InPadding);// 0x29eb230
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29eaf80
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x29eacf0
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x29eac60

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29eb2c0
	void SetPadding(Margin InPadding);// 0x29eb080
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29eae00

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29e0640
	void SetSize(SlateChildSize InSize);// 0x29e03c0
	void SetPadding(Margin InPadding);// 0x29dff50
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29df990

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1]
	int Row;//[Offset: 0x3c, Size: 0x4]
	int Column;//[Offset: 0x40, Size: 0x4]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29dca90
	void SetRow(int InRow);// 0x29dc8e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29dc1e0
	void SetColumn(int InColumn);// 0x29dbfe0

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29d1f30
	void SetPadding(Margin InPadding);// 0x29d1640
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29d1010

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29d1eb0
	void SetPadding(Margin InPadding);// 0x29d15b0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29d0f90

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c0560
	void SetPadding(Margin InPadding);// 0x29d1520
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29bf660

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10]
	byte HAlign;//[Offset: 0x4c, Size: 0x1]
	byte VAlign;//[Offset: 0x4d, Size: 0x1]
	Margin Padding;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29ccd90
	void SetPadding(Margin InPadding);// 0x29cc7a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29cc570

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c8b80
	void SetSize(SlateChildSize InSize);// 0x29c89f0
	void SetPadding(Margin InPadding);// 0x29c8540
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29c80e0

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	int Row;//[Offset: 0x4c, Size: 0x4]
	int RowSpan;//[Offset: 0x50, Size: 0x4]
	int Column;//[Offset: 0x54, Size: 0x4]
	int ColumnSpan;//[Offset: 0x58, Size: 0x4]
	int Layer;//[Offset: 0x5c, Size: 0x4]
	Vector2D Nudge;//[Offset: 0x60, Size: 0x8]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c8b00
	void SetRowSpan(int InRowSpan);// 0x29c8660
	void SetRow(int InRow);// 0x29c85d0
	void SetPadding(Margin InPadding);// 0x29c84b0
	void SetNudge(Vector2D InNudge);// 0x29c83b0
	void SetLayer(int InLayer);// 0x29c8240
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29c8060
	void SetColumnSpan(int InColumnSpan);// 0x29c7ee0
	void SetColumn(int InColumn);// 0x29c7e50

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c04e0
	void SetPadding(Margin InPadding);// 0x29bfd60
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29bf5e0

--------------------------------
Class: TBP_UI_Cursor_C.TigerCursor.TigerWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	Image* Cursor_Gamepad;//[Offset: 0x2a0, Size: 0x8]
	Image* Cursor_Mouse;//[Offset: 0x2a8, Size: 0x8]
	float PreviousViewportScale;//[Offset: 0x2b0, Size: 0x4]
	Vector2D Starting_Size;//[Offset: 0x2b4, Size: 0x8]
	bool HasBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool IsCursorVisible(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x197e4f0
	void FixCursorHotspot(enum CallFunc_GetPlatformType_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x197e4f0
	void Construct();// 0x197e4f0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x197e4f0
	void SetRenderOpacityForDuration(float InTime, float InOpacity);// 0x197e4f0
	void On Use GamePad Changed(bool bNewIsProbablyUsingGamepad);// 0x197e4f0
	void ForceRefreshMouseVisibility();// 0x197e4f0
	void ExecuteUbergraph_TBP_UI_Cursor(int EntryPoint, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float K2Node_CustomEvent_InTime, float K2Node_CustomEvent_InOpacity, bool CallFunc_NotEqual_FloatFloat_ReturnValue, TigerGameInstance* CallFunc_GetTigerGameInstance_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_bNewIsProbablyUsingGamepad, TigerPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, TigerPlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool CallFunc_IsProbablyUsingGamepadInput_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, enum Temp_byte_Variable, enum CallFunc_GetPlatformType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x197e4f0

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x48, Size: 0x8]
	byte ConstructionOp;//[Offset: 0x50, Size: 0x1]
	int VolumeSizeX;//[Offset: 0x54, Size: 0x4]
	int VolumeSizeY;//[Offset: 0x58, Size: 0x4]
	int VolumeSizeZ;//[Offset: 0x5c, Size: 0x4]
	int SubImagesX;//[Offset: 0x60, Size: 0x4]
	int SubImagesY;//[Offset: 0x64, Size: 0x4]
	int FrameCount;//[Offset: 0x68, Size: 0x4]
	float FramesPerSecond;//[Offset: 0x6c, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	VectorFieldStatic* NoiseField;//[Offset: 0x78, Size: 0x8]
	float NoiseScale;//[Offset: 0x80, Size: 0x4]
	float NoiseMax;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x48, Size: 0x4]
	int SizeY;//[Offset: 0x4c, Size: 0x4]
	int SizeZ;//[Offset: 0x50, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x450, Size: 0x8]
	float Intensity;//[Offset: 0x458, Size: 0x4]
	float Tightness;//[Offset: 0x45c, Size: 0x4]
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	void SetIntensity(float NewIntensity);// 0x34521f0

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0x3452160
	void AddTimedDisplay(FText Text, LinearColor Color, float Duration);// 0x34514d0
	int AddDisplayDelegate(out const delegate Delegate);// 0x3451410

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4]
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4]
	int MaxTileSize;//[Offset: 0x4, Size: 0x4]
	byte[] Formats;//[Offset: 0x8, Size: 0x10]
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4]
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	UInt32Property ScalabilityGroup;//[Size: 0x4]

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	static void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x34520a0
	static void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x3451f00
	static void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x3451c20
	static void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x3451990
	static void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x3451740
	static void EnableRecording(bool bEnabled);// 0x33a8100

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb0, Size: 0x18]
	void RegisterWithPlayerState(PlayerState* OwningState);// 0x3455c20
	float GetVoiceLevel();// 0x3455ba0
	static VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0x3455b10
	void BPOnTalkingEnd();// 0x149bd10
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0x1529450

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	static void SetMicThreshold(float InThreshold);// 0x3455f40

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x1f8, Size: 0x4]
	float LayerHeight;//[Offset: 0x1fc, Size: 0x4]
	float TracingStartMaxDistance;//[Offset: 0x200, Size: 0x4]
	float TracingMaxDistance;//[Offset: 0x204, Size: 0x4]
	float PlanetRadius;//[Offset: 0x208, Size: 0x4]
	Color GroundAlbedo;//[Offset: 0x20c, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x210, Size: 0x8]
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	float SkyLightCloudBottomOcclusion;//[Offset: 0x21c, Size: 0x4]
	float ViewSampleCountScale;//[Offset: 0x220, Size: 0x4]
	float ReflectionSampleCountScale;//[Offset: 0x224, Size: 0x4]
	float ShadowViewSampleCountScale;//[Offset: 0x228, Size: 0x4]
	float ShadowReflectionSampleCountScale;//[Offset: 0x22c, Size: 0x4]
	float ShadowTracingDistance;//[Offset: 0x230, Size: 0x4]
	void SetViewSampleCountScale(float NewValue);// 0x34564c0
	void SetTracingStartMaxDistance(float NewValue);// 0x3456440
	void SetTracingMaxDistance(float NewValue);// 0x34563c0
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0x3456240
	void SetShadowViewSampleCountScale(float NewValue);// 0x34316d0
	void SetShadowTracingDistance(float NewValue);// 0x34561c0
	void SetShadowReflectionSampleCountScale(float NewValue);// 0x3456140
	void SetReflectionSampleCountScale(float NewValue);// 0x34319f0
	void SetPlanetRadius(float NewValue);// 0x3456040
	void SetMaterial(MaterialInterface* NewValue);// 0x3455e30
	void SetLayerHeight(float NewValue);// 0x3455db0
	void SetLayerBottomAltitude(float NewValue);// 0x3455d30
	void SetGroundAlbedo(Color NewValue);// 0x3455cb0
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0x34565c0

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x1f8, Size: 0x4]
	float Speed;//[Offset: 0x1fc, Size: 0x4]
	float MinGustAmount;//[Offset: 0x200, Size: 0x4]
	float MaxGustAmount;//[Offset: 0x204, Size: 0x4]
	float Radius;//[Offset: 0x208, Size: 0x4]
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	void SetWindType(enum InNewType);// 0x3456540
	void SetStrength(float InNewStrength);// 0x3456340
	void SetSpeed(float InNewSpeed);// 0x34562c0
	void SetRadius(float InNewRadius);// 0x34560c0
	void SetMinimumGustAmount(float InNewMinGust);// 0x3455fc0
	void SetMaximumGustAmount(float InNewMaxGust);// 0x3455ec0

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10]
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28]

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4]
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4]
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xa8]
	MeshMergingSettings MergeSetting;//[Offset: 0xb4, Size: 0xa0]
	float DesiredBoundRadius;//[Offset: 0x154, Size: 0x4]
	float DesiredFillingPercentage;//[Offset: 0x158, Size: 0x4]
	int MinNumberOfActorsToBuild;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4]
	float VoxelSize;//[Offset: 0x4, Size: 0x4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x88]
	float MergeDistance;//[Offset: 0x90, Size: 0x4]
	Color UnresolvedGeometryColor;//[Offset: 0x94, Size: 0x4]
	float MaxRayCastDist;//[Offset: 0x98, Size: 0x4]
	float HardAngleThreshold;//[Offset: 0x9c, Size: 0x4]
	int LightMapResolution;//[Offset: 0xa0, Size: 0x4]
	byte NormalCalculationMethod;//[Offset: 0xa4, Size: 0x1]
	byte LandscapeCullingPrecision;//[Offset: 0xa5, Size: 0x1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa6, Size: 0x1]
	bool bUseLastLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa6, Size: 0x1]
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa6, Size: 0x1]
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa6, Size: 0x1]
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa6, Size: 0x1]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa6, Size: 0x1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa6, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa6, Size: 0x1]
	bool bAllowAdjacency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa7, Size: 0x1]
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa7, Size: 0x1]
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa7, Size: 0x1]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa7, Size: 0x1]
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa7, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa7, Size: 0x1]

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8]
	float GutterSpace;//[Offset: 0x8, Size: 0x4]
	float MetallicConstant;//[Offset: 0xc, Size: 0x4]
	float RoughnessConstant;//[Offset: 0x10, Size: 0x4]
	float AnisotropyConstant;//[Offset: 0x14, Size: 0x4]
	float SpecularConstant;//[Offset: 0x18, Size: 0x4]
	float OpacityConstant;//[Offset: 0x1c, Size: 0x4]
	float OpacityMaskConstant;//[Offset: 0x20, Size: 0x4]
	float AmbientOcclusionConstant;//[Offset: 0x24, Size: 0x4]
	byte TextureSizingType;//[Offset: 0x28, Size: 0x1]
	byte MaterialMergeType;//[Offset: 0x29, Size: 0x1]
	byte BlendMode;//[Offset: 0x2a, Size: 0x1]
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1]
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]
	IntPoint DiffuseTextureSize;//[Offset: 0x30, Size: 0x8]
	IntPoint NormalTextureSize;//[Offset: 0x38, Size: 0x8]
	IntPoint TangentTextureSize;//[Offset: 0x40, Size: 0x8]
	IntPoint MetallicTextureSize;//[Offset: 0x48, Size: 0x8]
	IntPoint RoughnessTextureSize;//[Offset: 0x50, Size: 0x8]
	IntPoint AnisotropyTextureSize;//[Offset: 0x58, Size: 0x8]
	IntPoint SpecularTextureSize;//[Offset: 0x60, Size: 0x8]
	IntPoint EmissiveTextureSize;//[Offset: 0x68, Size: 0x8]
	IntPoint OpacityTextureSize;//[Offset: 0x70, Size: 0x8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x78, Size: 0x8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4]
	enum OutputUVs;//[Offset: 0x4, Size: 0x1]
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x88]
	int GutterSize;//[Offset: 0x94, Size: 0x4]
	int SpecificLOD;//[Offset: 0x98, Size: 0x4]
	enum LODSelectionType;//[Offset: 0x9c, Size: 0x1]
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 0x1]
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d, Size: 0x1]
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d, Size: 0x1]
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d, Size: 0x1]
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9d, Size: 0x1]
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9d, Size: 0x1]
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9d, Size: 0x1]
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9d, Size: 0x1]
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1]
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1]
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9e, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9e, Size: 0x1]
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9e, Size: 0x1]
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9e, Size: 0x1]

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: AkPortalComponent.SceneComponent.ActorComponent.Object
	bool bDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	enum InitialState;//[Offset: 0x1f9, Size: 0x1]
	float ObstructionRefreshInterval;//[Offset: 0x1fc, Size: 0x4]
	float ObstructionUpdateThresholdDistance2DSqrd;//[Offset: 0x200, Size: 0x4]
	float ObstructionDistantRefreshInterval;//[Offset: 0x204, Size: 0x4]
	byte ObstructionCollisionChannel;//[Offset: 0x208, Size: 0x1]
	bool PortalPlacementValid();// 0x95a1b0
	void OpenPortal();// 0x95a190
	PrimitiveComponent* GetPrimitiveParent();// 0x95a050
	enum GetCurrentState();// 0x959f60
	void ClosePortal();// 0x959e20

--------------------------------
Class: AkAcousticPortal.Volume.Brush.Actor.Object
	AkPortalComponent* Portal;//[Offset: 0x260, Size: 0x8]
	enum InitialState;//[Offset: 0x268, Size: 0x1]
	bool bRequiresStateMigration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	void OpenPortal();// 0x95a170
	enum GetCurrentState();// 0x959f30
	void ClosePortal();// 0x959e00

--------------------------------
Class: AkAcousticTexture.AkAudioType.Object

--------------------------------
Class: AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AkAmbientSound.Actor.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x228, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x230, Size: 0x8]
	bool StopWhenOwnerIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	void StopAmbientSound();// 0x95b340
	void StartAmbientSound();// 0x95b320

--------------------------------
Class: AkSettings.Object
	byte MaxSimultaneousReverbVolumes;//[Offset: 0x28, Size: 0x1]
	FilePath WwiseProjectPath;//[Offset: 0x30, Size: 0x10]
	DirectoryPath WwiseSoundDataFolder;//[Offset: 0x40, Size: 0x10]
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	byte DefaultOcclusionCollisionChannel;//[Offset: 0x51, Size: 0x1]
	byte DefaultFitToGeometryCollisionChannel;//[Offset: 0x52, Size: 0x1]
	<PhysicalMaterial*,AkGeometrySurfacePropertiesToMap> AkGeometryMap;//[Offset: 0x58, Size: 0x50]
	float GlobalDecayAbsorption;//[Offset: 0xa8, Size: 0x4]
	AkAuxBus* DefaultReverbAuxBus;//[Offset: 0xb0, Size: 0x28]
	<float,AkAuxBus*> EnvironmentDecayAuxBusMap;//[Offset: 0xd8, Size: 0x50]
	FString HFDampingName;//[Offset: 0x128, Size: 0x10]
	FString DecayEstimateName;//[Offset: 0x138, Size: 0x10]
	FString TimeToFirstReflectionName;//[Offset: 0x148, Size: 0x10]
	AkRtpc* HFDampingRTPC;//[Offset: 0x158, Size: 0x28]
	AkRtpc* DecayEstimateRTPC;//[Offset: 0x180, Size: 0x28]
	AkRtpc* TimeToFirstReflectionRTPC;//[Offset: 0x1a8, Size: 0x28]
	<Guid,AkAcousticTextureParams> AcousticTextureParamsMap;//[Offset: 0x1d0, Size: 0x50]
	bool SplitSwitchContainerMedia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	bool SplitMediaPerFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 0x1]
	bool UseEventBasedPackaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222, Size: 0x1]
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x223, Size: 0x1]
	FString CommandletCommitMessage;//[Offset: 0x228, Size: 0x10]
	<FString,FString> UnrealCultureToWwiseCulture;//[Offset: 0x238, Size: 0x50]
	bool AskedToUseNewAssetManagement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool MigratedEnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool FixupRedirectorsDuringMigration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x290, Size: 0x10]
	FilePath WwiseMacInstallationPath;//[Offset: 0x2a0, Size: 0x10]

--------------------------------
Class: AkGeometrySurfacePropertiesToMap
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x28]
	float OcclusionValue;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAcousticTextureParams
	Vector4 AbsorptionValues;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkAndroidInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAndroidAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x38]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkCommonInitializationSettingsWithSampleRate.AkCommonInitializationSettings
	UInt32Property SampleRate;//[Size: 0x4]

--------------------------------
Class: AkCommonInitializationSettings
	UInt32Property MaximumNumberOfMemoryPools;//[Size: 0x4]
	UInt32Property MaximumNumberOfPositioningPaths;//[Size: 0x4]
	UInt32Property CommandQueueSize;//[Size: 0x4]
	UInt32Property SamplesPerFrame;//[Size: 0x4]
	AkMainOutputSettings MainOutputSettings;//[Offset: 0x10, Size: 0x28]
	float StreamingLookAheadRatio;//[Offset: 0x38, Size: 0x4]
	uint16 NumberOfRefillsInVoice;//[Offset: 0x3c, Size: 0x2]
	AkSpatialAudioSettings SpatialAudioSettings;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: AkMainOutputSettings
	FString AudioDeviceShareset;//[Offset: 0x0, Size: 0x10]
	UInt32Property DeviceID;//[Size: 0x4]
	enum PanningRule;//[Offset: 0x14, Size: 0x4]
	enum ChannelConfigType;//[Offset: 0x18, Size: 0x4]
	UInt32Property ChannelMask;//[Size: 0x4]
	UInt32Property NumberOfChannels;//[Size: 0x4]

--------------------------------
Class: AkSpatialAudioSettings
	UInt32Property MaxSoundPropagationDepth;//[Size: 0x4]
	float MovementThreshold;//[Offset: 0x4, Size: 0x4]
	UInt32Property NumberOfPrimaryRays;//[Size: 0x4]
	UInt32Property ReflectionOrder;//[Size: 0x4]
	float MaximumPathLength;//[Offset: 0x10, Size: 0x4]
	float CPULimitPercentage;//[Offset: 0x14, Size: 0x4]
	bool EnableDiffractionOnReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool EnableGeometricDiffractionAndTransmission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool CalcEmitterVirtualPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool UseObstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool UseOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: AkCommunicationSettingsWithSystemInitialization.AkCommunicationSettings
	bool InitializeSystemComms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: AkCommunicationSettings
	UInt32Property PoolSize;//[Size: 0x4]
	uint16 DiscoveryBroadcastPort;//[Offset: 0x4, Size: 0x2]
	uint16 CommandPort;//[Offset: 0x6, Size: 0x2]
	uint16 NotificationPort;//[Offset: 0x8, Size: 0x2]
	FString NetworkName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AkAndroidAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	UInt32Property AudioAPI;//[Size: 0x4]
	bool RoundFrameSizeToHardwareSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool EnableMultiCoreRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: AkAdvancedInitializationSettings
	UInt32Property IO_MemorySize;//[Size: 0x4]
	UInt32Property IO_Granularity;//[Size: 0x4]
	float TargetAutoStreamBufferLength;//[Offset: 0x8, Size: 0x4]
	bool UseStreamCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	UInt32Property MaximumPinnedBytesInCache;//[Size: 0x4]
	bool EnableGameSyncPreparation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	UInt32Property ContinuousPlaybackLookAhead;//[Size: 0x4]
	UInt32Property MonitorQueuePoolSize;//[Size: 0x4]
	UInt32Property MaximumHardwareTimeoutMs;//[Size: 0x4]
	bool DebugOutOfRangeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float DebugOutOfRangeLimit;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkPlatformInfo.Object

--------------------------------
Class: AkAndroidPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkAssetDataWithMedia.AkAssetData.Object
	AkMediaAsset*[] MediaList;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: AkAssetDataSwitchContainerData.Object
	AkGroupValue* GroupValue;//[Offset: 0x28, Size: 0x28]
	AkGroupValue* DefaultGroupValue;//[Offset: 0x50, Size: 0x8]
	AkMediaAsset*[] MediaList;//[Offset: 0x58, Size: 0x10]
	AkAssetDataSwitchContainerData*[] Children;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object
	AkAssetDataSwitchContainerData*[] SwitchContainers;//[Offset: 0x78, Size: 0x10]
	AkGroupValue* DefaultGroupValue;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: AkAudioEventData.AkAssetDataSwitchContainer.AkAssetDataWithMedia.AkAssetData.Object
	float MaxAttenuationRadius;//[Offset: 0x90, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float MinimumDuration;//[Offset: 0x98, Size: 0x4]
	float MaximumDuration;//[Offset: 0x9c, Size: 0x4]
	<FString,AkAssetDataSwitchContainer*> LocalizedMedia;//[Offset: 0xa0, Size: 0x50]
	<AkAudioEvent*> PostedEvents;//[Offset: 0xf0, Size: 0x50]
	<AkAuxBus*> UserDefinedSends;//[Offset: 0x140, Size: 0x50]
	<AkTrigger*> PostedTriggers;//[Offset: 0x190, Size: 0x50]
	<AkGroupValue*> GroupValues;//[Offset: 0x1e0, Size: 0x50]

--------------------------------
Class: AkAudioInputComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	int PostAssociatedAudioInputEvent();// 0x95a990

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x29c3550
	PanelSlot* GetContentSlot();// 0x29c2e70
	Widget* GetContent();// 0x29c2e40

--------------------------------
Class: AkCheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x4b8, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x4bc, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x4d0, Size: 0x580]
	byte HorizontalAlignment;//[Offset: 0xa50, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 0x1]
	AkBoolPropertyToControl ThePropertyToControl;//[Offset: 0xa58, Size: 0x10]
	AkWwiseItemToControl ItemToControl;//[Offset: 0xa68, Size: 0x40]
	delegate AkOnCheckStateChanged;//[Offset: 0xaa8, Size: 0x10]
	delegate OnItemDropped;//[Offset: 0xab8, Size: 0x10]
	delegate OnPropertyDropped;//[Offset: 0xac8, Size: 0x10]
	void SetIsChecked(bool InIsChecked);// 0x95af20
	void SetCheckedState(enum InCheckedState);// 0x95acb0
	void SetAkItemId(out const Guid ItemId);// 0x95ab90
	void SetAkBoolProperty(FString ItemProperty);// 0x95aaf0
	bool IsPressed();// 0x95a0b0
	bool IsChecked();// 0x95a080
	enum GetCheckedState();// 0x959f00
	FString GetAkProperty();// 0x959e80
	Guid GetAkItemId();// 0x959e40

--------------------------------
Class: AkBoolPropertyToControl
	FString ItemProperty;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkWwiseItemToControl
	AkWwiseObjectDetails ItemPicked;//[Offset: 0x0, Size: 0x30]
	FString ItemPath;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkWwiseObjectDetails
	FString ItemName;//[Offset: 0x0, Size: 0x10]
	FString ItemPath;//[Offset: 0x10, Size: 0x10]
	FString ItemId;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: DrawPortalComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DrawRoomComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: AkFolder.AkAudioType.Object
	FString UnrealFolderPath;//[Offset: 0x40, Size: 0x10]
	FString WwiseFolderPath;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: AkGameplayStatics.BlueprintFunctionLibrary.Object
	static void UseReverbVolumes(bool inUseReverbVolumes, Actor* Actor);// 0x961580
	static void UseEarlyReflections(Actor* Actor, AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x961360
	static void UnloadBankByName(FString BankName);// 0x9612d0
	static void UnloadBankAsync(AkAudioBank* Bank, out const delegate BankUnloadedCallback);// 0x9611f0
	static void UnloadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x961080
	static void StopProfilerCapture();// 0x961060
	static void StopOutputCapture();// 0x961040
	static void StopAllAmbientSounds(Object* WorldContextObject);// 0x960fc0
	static void StopAll();// 0x960fa0
	static void StopActor(Actor* Actor);// 0x960f20
	static void StartProfilerCapture(FString Filename);// 0x960e70
	static void StartOutputCapture(FString Filename);// 0x960de0
	static void StartAllAmbientSounds(Object* WorldContextObject);// 0x960d60
	static AkComponent* SpawnAkComponentAtLocation(Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, bool AutoPost, FString EventName, bool AutoDestroy);// 0x960b20
	static void SetSwitch(AkSwitchValue* SwitchValue, Actor* Actor, FName SwitchGroup, FName SwitchState);// 0x9609d0
	static void SetState(AkStateValue* StateValue, FName StateGroup, FName State);// 0x9608d0
	static void SetSpeakerAngles(out const float[] SpeakerAngles, float HeightAngle, FString DeviceShareset);// 0x960780
	static void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, Actor* Actor, FName RTPC);// 0x960530
	static void SetReflectionsOrder(int Order, bool RefreshPaths);// 0x9606c0
	static void SetPanningRule(enum PanRule);// 0x960310
	static void SetOutputBusVolume(float BusVolume, Actor* Actor);// 0x960250
	static void SetOcclusionScalingFactor(float ScalingFactor);// 0x9601d0
	static void SetOcclusionRefreshInterval(float RefreshInterval, Actor* Actor);// 0x960110
	static void SetMultiplePositions(AkComponent* GameObjectAkComponent, Transform[] Positions, enum MultiPositionType);// 0x95ffb0
	static void SetMultipleChannelMaskEmitterPositions(AkComponent* GameObjectAkComponent, AkChannelMask[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x95fdd0
	static void SetMultipleChannelEmitterPositions(AkComponent* GameObjectAkComponent, enum[] ChannelMasks, Transform[] Positions, enum MultiPositionType);// 0x95fbf0
	static void SetCurrentAudioCultureAsync(FString AudioCulture, out const delegate Completed);// 0x95fb00
	static void SetCurrentAudioCulture(FString AudioCulture, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x95f9b0
	static void SetBusConfig(FString BusName, enum ChannelConfiguration);// 0x95f8e0
	static void ReplaceMainOutput(out const AkOutputSettings MainOutputSettings);// 0x95f840
	static void PostTrigger(AkTrigger* TriggerValue, Actor* Actor, FName Trigger);// 0x95f740
	static void PostEventByName(FString EventName, Actor* Actor, bool bStopWhenAttachedToDestroyed);// 0x95f620
	static int PostEventAttached(AkAudioEvent* AkEvent, Actor* Actor, FName AttachPointName, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x95f430
	static void PostEventAtLocationByName(FString EventName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x95f2c0
	static int PostEventAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, FString EventName, Object* WorldContextObject);// 0x95f100
	static int PostEvent(AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed, FString EventName);// 0x95ee10
	static void PostAndWaitForEndOfEventAsync(AkAudioEvent* AkEvent, Actor* Actor, out int PlayingID, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x95e790
	static int PostAndWaitForEndOfEvent(AkAudioEvent* AkEvent, Actor* Actor, bool bStopWhenAttachedToDestroyed, out const AkExternalSourceInfo[] ExternalSources, FString EventName, LatentActionInfo LatentInfo);// 0x95e4f0
	static void LoadInitBank();// 0x95dfe0
	static void LoadBanks(out const AkAudioBank*[] SoundBanks, bool SynchronizeSoundBanks);// 0x95def0
	static void LoadBankByName(FString BankName);// 0x95de60
	static void LoadBankAsync(AkAudioBank* Bank, out const delegate BankLoadedCallback);// 0x95dd80
	static void LoadBank(AkAudioBank* Bank, FString BankName, LatentActionInfo LatentInfo, Object* WorldContextObject);// 0x95dc10
	static bool IsGame(Object* WorldContextObject);// 0x95db80
	static bool IsEditor();// 0x95db50
	static void GetSpeakerAngles(out float[] SpeakerAngles, out float HeightAngle, FString DeviceShareset);// 0x95d9f0
	static void GetRTPCValue(AkRtpc* RTPCValue, int PlayingID, enum InputValueType, out float Value, out enum OutputValueType, Actor* Actor, FName RTPC);// 0x95d7c0
	static float GetOcclusionScalingFactor();// 0x95d540
	static AkDeviceInfo[] GetDeviceList();// 0x95d450
	static FString GetCurrentAudioCulture();// 0x95d3d0
	static FString[] GetAvailableAudioCultures();// 0x95d2f0
	static Object* GetAkMediaAssetUserData(const AkMediaAsset* Instance, const class Object Type);// 0x95d080
	static AkComponent* GetAkComponent(SceneComponent* AttachToComponent, out bool ComponentCreated, FName AttachPointName, Vector Location, byte LocationType);// 0x95d150
	static Object* GetAkAudioTypeUserData(const AkAudioType* Instance, const class Object Type);// 0x95d080
	static void ExecuteActionOnPlayingID(enum ActionType, int PlayingID, int TransitionDuration, enum FadeCurve);// 0x95cf40
	static void ExecuteActionOnEvent(AkAudioEvent* AkEvent, enum ActionType, Actor* Actor, int TransitionDuration, enum FadeCurve, int PlayingID);// 0x95cd70
	static void ClearBanks();// 0x95cd50
	static void CancelEventCallback(out const delegate PostEventCallback);// 0x95ccb0
	static void AddOutputCaptureMarker(FString MarkerText);// 0x95cc20

--------------------------------
Class: AkStateValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkChannelMask
	int ChannelMask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AkOutputSettings
	FString AudioDeviceSharesetName;//[Offset: 0x0, Size: 0x10]
	int IdDevice;//[Offset: 0x10, Size: 0x4]
	enum PanRule;//[Offset: 0x14, Size: 0x1]
	enum ChannelConfig;//[Offset: 0x15, Size: 0x1]

--------------------------------
Class: AkDeviceInfo
	UInt32Property ID;//[Size: 0x4]
	FString Name;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkEventCallbackInfo.AkCallbackInfo.Object
	int PlayingID;//[Offset: 0x30, Size: 0x4]
	int EventId;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: AkMIDIEventCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	enum GetType();// 0x9661c0
	bool GetProgramChange(out AkMidiProgramChange AsProgramChange);// 0x966110
	bool GetPitchBend(out AkMidiPitchBend AsPitchBend);// 0x966060
	bool GetNoteOn(out AkMidiNoteOnOff AsNoteOn);// 0x965fb0
	bool GetNoteOff(out AkMidiNoteOnOff AsNoteOff);// 0x965f00
	bool GetNoteAftertouch(out AkMidiNoteAftertouch AsNoteAftertouch);// 0x965e50
	bool GetGeneric(out AkMidiGeneric AsGeneric);// 0x965da0
	bool GetChannelAftertouch(out AkMidiChannelAftertouch AsChannelAftertouch);// 0x965cf0
	byte GetChannel();// 0x965cc0
	bool GetCc(out AkMidiCc AsCc);// 0x965c10

--------------------------------
Class: AkMidiProgramChange.AkMidiEventBase
	byte ProgramNum;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: AkMidiEventBase
	enum Type;//[Offset: 0x0, Size: 0x1]
	byte Chan;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: AkMidiPitchBend.AkMidiEventBase
	byte ValueLsb;//[Offset: 0x2, Size: 0x1]
	byte ValueMsb;//[Offset: 0x3, Size: 0x1]
	int FullValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AkMidiNoteOnOff.AkMidiEventBase
	byte Note;//[Offset: 0x2, Size: 0x1]
	byte Velocity;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMidiNoteAftertouch.AkMidiEventBase
	byte Note;//[Offset: 0x2, Size: 0x1]
	byte Value;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMidiGeneric.AkMidiEventBase
	byte Param1;//[Offset: 0x2, Size: 0x1]
	byte Param2;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMidiChannelAftertouch.AkMidiEventBase
	byte Value;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: AkMidiCc.AkMidiEventBase
	enum Cc;//[Offset: 0x2, Size: 0x1]
	byte Value;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: AkMarkerCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	int Identifier;//[Offset: 0x38, Size: 0x4]
	int Position;//[Offset: 0x3c, Size: 0x4]
	FString Label;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AkDurationCallbackInfo.AkEventCallbackInfo.AkCallbackInfo.Object
	float Duration;//[Offset: 0x38, Size: 0x4]
	float EstimatedDuration;//[Offset: 0x3c, Size: 0x4]
	int AudioNodeID;//[Offset: 0x40, Size: 0x4]
	int MediaID;//[Offset: 0x44, Size: 0x4]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: AkMusicSyncCallbackInfo.AkCallbackInfo.Object
	int PlayingID;//[Offset: 0x30, Size: 0x4]
	AkSegmentInfo SegmentInfo;//[Offset: 0x34, Size: 0x24]
	enum MusicSyncType;//[Offset: 0x58, Size: 0x1]
	FString UserCueName;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: AkSegmentInfo
	int CurrentPosition;//[Offset: 0x0, Size: 0x4]
	int PreEntryDuration;//[Offset: 0x4, Size: 0x4]
	int ActiveDuration;//[Offset: 0x8, Size: 0x4]
	int PostExitDuration;//[Offset: 0xc, Size: 0x4]
	int RemainingLookAheadTime;//[Offset: 0x10, Size: 0x4]
	float BeatDuration;//[Offset: 0x14, Size: 0x4]
	float BarDuration;//[Offset: 0x18, Size: 0x4]
	float GridDuration;//[Offset: 0x1c, Size: 0x4]
	float GridOffset;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AkGeometryComponent.AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object
	enum MeshType;//[Offset: 0x210, Size: 0x1]
	int LOD;//[Offset: 0x214, Size: 0x4]
	float WeldingThreshold;//[Offset: 0x218, Size: 0x4]
	<MaterialInterface*,AkGeometrySurfaceOverride> StaticMeshSurfaceOverride;//[Offset: 0x220, Size: 0x50]
	AkGeometrySurfaceOverride CollisionMeshSurfaceOverride;//[Offset: 0x270, Size: 0x18]
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	Actor* AssociatedRoom;//[Offset: 0x290, Size: 0x8]
	AkGeometryData GeometryData;//[Offset: 0x2a8, Size: 0x50]
	<int,float> SurfaceAreas;//[Offset: 0x2f8, Size: 0x50]
	void UpdateGeometry();// 0x966230
	void SendGeometry();// 0x966210
	void RemoveGeometry();// 0x9661f0
	void ConvertMesh();// 0x965bf0

--------------------------------
Class: AkGeometrySurfaceOverride
	AkAcousticTexture* AcousticTexture;//[Offset: 0x0, Size: 0x8]
	bool bEnableOcclusionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OcclusionValue;//[Offset: 0xc, Size: 0x4]
	float SurfaceArea;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AkGeometryData
	Vector[] Vertices;//[Offset: 0x0, Size: 0x10]
	AkAcousticSurface[] Surfaces;//[Offset: 0x10, Size: 0x10]
	AkTriangle[] Triangles;//[Offset: 0x20, Size: 0x10]
	PhysicalMaterial*[] ToOverrideAcousticTexture;//[Offset: 0x30, Size: 0x10]
	PhysicalMaterial*[] ToOverrideOcclusion;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: AkAcousticSurface
	UInt32Property Texture;//[Size: 0x4]
	float Occlusion;//[Offset: 0x4, Size: 0x4]
	FString Name;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AkTriangle
	uint16 Point0;//[Offset: 0x0, Size: 0x2]
	uint16 Point1;//[Offset: 0x2, Size: 0x2]
	uint16 Point2;//[Offset: 0x4, Size: 0x2]
	uint16 Surface;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: AkHololensInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkHololensAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x34]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkHololensAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkHololensPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkInitBankAssetData.AkAssetDataWithMedia.AkAssetData.Object
	AkPluginInfo[] PluginInfos;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: AkPluginInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	UInt32Property PluginID;//[Size: 0x4]
	FString dll;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AkInitBank.AkAssetBase.AkAudioType.Object
	FString[] AvailableAudioCultures;//[Offset: 0x50, Size: 0x10]
	FString DefaultLanguage;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: AkIOSInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkAudioSession AudioSession;//[Offset: 0x90, Size: 0xc]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa0, Size: 0x28]
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc8, Size: 0x2c]

--------------------------------
Class: AkAudioSession
	enum AudioSessionCategory;//[Offset: 0x0, Size: 0x4]
	UInt32Property AudioSessionCategoryOptions;//[Size: 0x4]
	enum AudioSessionMode;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AkIOSPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkItemBoolPropertiesConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkBoolPropertyToControlToText(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x96a440
	static FString Conv_FAkBoolPropertyToControlToString(out const AkBoolPropertyToControl INAkBoolPropertyToControl);// 0x96a350

--------------------------------
Class: AkItemBoolProperties.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10]
	delegate OnPropertyDragged;//[Offset: 0x118, Size: 0x10]
	void SetSearchText(FString newText);// 0x96aaa0
	FString GetSelectedProperty();// 0x96a680
	FString GetSearchText();// 0x96a600

--------------------------------
Class: AkItemPropertiesConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkPropertyToControlToText(out const AkPropertyToControl INAkPropertyToControl);// 0x96a440
	static FString Conv_FAkPropertyToControlToString(out const AkPropertyToControl INAkPropertyToControl);// 0x96a350

--------------------------------
Class: AkPropertyToControl
	FString ItemProperty;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkItemProperties.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10]
	delegate OnPropertyDragged;//[Offset: 0x118, Size: 0x10]
	void SetSearchText(FString newText);// 0x96aaa0
	FString GetSelectedProperty();// 0x96a700
	FString GetSearchText();// 0x96a600

--------------------------------
Class: AkLateReverbComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	float SendLevel;//[Offset: 0x1fc, Size: 0x4]
	float FadeRate;//[Offset: 0x200, Size: 0x4]
	float Priority;//[Offset: 0x204, Size: 0x4]
	bool AutoAssignAuxBus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x210, Size: 0x8]
	FString AuxBusName;//[Offset: 0x218, Size: 0x10]
	AkAuxBus* AuxBusManual;//[Offset: 0x230, Size: 0x8]
	void AssociateAkTextureSetComponent(AkAcousticTextureSetComponent* textureSetComponent);// 0x96a2c0

--------------------------------
Class: AkLinuxInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x30]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkLinuxPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkMacInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x30]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkMacPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkLocalizedMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkPS4InitializationSettings.Object
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x28, Size: 0x60]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x88, Size: 0x28]
	AkPS4AdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb0, Size: 0x38]
	void MigrateMultiCoreRendering(bool NewValue);// 0x96a7b0

--------------------------------
Class: AkPS4AdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	UInt32Property ACPBatchBufferSize;//[Size: 0x4]
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: AkPS4PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkPS5InitializationSettings.Object
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x28, Size: 0x60]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x88, Size: 0x28]
	AkPS5AdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb0, Size: 0x34]

--------------------------------
Class: AkPS5AdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bVorbisHwAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: AkDPXInitializationSettings.AkPS5InitializationSettings.Object

--------------------------------
Class: AkPS5PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkReverbVolume.Volume.Brush.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	AkAuxBus* AuxBus;//[Offset: 0x268, Size: 0x8]
	FString AuxBusName;//[Offset: 0x270, Size: 0x10]
	float SendLevel;//[Offset: 0x280, Size: 0x4]
	float FadeRate;//[Offset: 0x284, Size: 0x4]
	float Priority;//[Offset: 0x288, Size: 0x4]
	AkLateReverbComponent* LateReverbComponent;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	float Priority;//[Offset: 0x220, Size: 0x4]
	float WallOcclusion;//[Offset: 0x224, Size: 0x4]
	float AuxSendLevel;//[Offset: 0x228, Size: 0x4]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	AkAcousticTextureSetComponent* GeometryComponent;//[Offset: 0x238, Size: 0x8]
	PrimitiveComponent* GetPrimitiveParent();// 0x96a5d0

--------------------------------
Class: AkSettingsPerUser.Object
	DirectoryPath WwiseWindowsInstallationPath;//[Offset: 0x28, Size: 0x10]
	FilePath WwiseMacInstallationPath;//[Offset: 0x38, Size: 0x10]
	bool EnableAutomaticAssetSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString WaapiIPAddress;//[Offset: 0x50, Size: 0x10]
	UInt32Property WaapiPort;//[Size: 0x4]
	bool bAutoConnectToWAAPI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool AutoSyncSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool SuppressWwiseProjectPathWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool SoundDataGenerationSkipLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]

--------------------------------
Class: AkSlider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10]
	SliderStyle WidgetStyle;//[Offset: 0x120, Size: 0x340]
	byte Orientation;//[Offset: 0x460, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x464, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x474, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1]
	float StepSize;//[Offset: 0x488, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	AkPropertyToControl ThePropertyToControl;//[Offset: 0x490, Size: 0x10]
	AkWwiseItemToControl ItemToControl;//[Offset: 0x4a0, Size: 0x40]
	delegate OnValueChanged;//[Offset: 0x4e0, Size: 0x10]
	delegate OnItemDropped;//[Offset: 0x4f0, Size: 0x10]
	delegate OnPropertyDropped;//[Offset: 0x500, Size: 0x10]
	void SetValue(float InValue);// 0x96ace0
	void SetStepSize(float InValue);// 0x96ac60
	void SetSliderHandleColor(LinearColor InValue);// 0x96abd0
	void SetSliderBarColor(LinearColor InValue);// 0x96ab40
	void SetLocked(bool InValue);// 0x96aa10
	void SetIndentHandle(bool InValue);// 0x96a980
	void SetAkSliderItemProperty(FString ItemProperty);// 0x96a8e0
	void SetAkSliderItemId(out const Guid ItemId);// 0x96a840
	float GetValue();// 0x96a780
	FString GetAkSliderItemProperty();// 0x96a580
	Guid GetAkSliderItemId();// 0x96a540

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush HoveredBarImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush DisabledBarImage;//[Offset: 0x118, Size: 0x88]
	SlateBrush NormalThumbImage;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush HoveredThumbImage;//[Offset: 0x228, Size: 0x88]
	SlateBrush DisabledThumbImage;//[Offset: 0x2b0, Size: 0x88]
	float BarThickness;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: AkSpatialAudioVolume.Volume.Brush.Actor.Object
	AkSurfaceReflectorSetComponent* SurfaceReflectorSet;//[Offset: 0x260, Size: 0x8]
	AkLateReverbComponent* LateReverb;//[Offset: 0x268, Size: 0x8]
	AkRoomComponent* Room;//[Offset: 0x270, Size: 0x8]
	bool EnableSurfaceReflectorSets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]

--------------------------------
Class: AkSurfaceReflectorSetComponent.AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object
	bool bEnableSurfaceReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	AkPoly[] AcousticPolys;//[Offset: 0x218, Size: 0x10]
	bool bEnableDiffraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bEnableDiffractionOnBoundaryEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	Actor* AssociatedRoom;//[Offset: 0x230, Size: 0x8]
	void UpdateSurfaceReflectorSet();// 0x970a80
	void SendSurfaceReflectorSet();// 0x96f9a0
	void RemoveSurfaceReflectorSet();// 0x96f980

--------------------------------
Class: AkPoly
	AkAcousticTexture* Texture;//[Offset: 0x0, Size: 0x8]
	float Occlusion;//[Offset: 0x8, Size: 0x4]
	bool EnableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float SurfaceArea;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AkSpotReflector.Actor.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x228, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x230, Size: 0x10]
	AkAcousticTexture* AcousticTexture;//[Offset: 0x240, Size: 0x8]
	float DistanceScalingFactor;//[Offset: 0x248, Size: 0x4]
	float Level;//[Offset: 0x24c, Size: 0x4]

--------------------------------
Class: AkSwitchInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithCommSelection CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;//[Offset: 0xb8, Size: 0x30]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkCommunicationSettingsWithCommSelection.AkCommunicationSettings
	enum CommunicationSystem;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AkSwitchPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkTVOSInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkAudioSession AudioSession;//[Offset: 0x90, Size: 0xc]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0xa0, Size: 0x28]
	AkAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xc8, Size: 0x2c]

--------------------------------
Class: AkTVOSPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWaapiCalls.BlueprintFunctionLibrary.Object
	static AKWaapiJsonObject Unsubscribe(out const AkWaapiSubscriptionId SubscriptionId, out bool UnsubscriptionDone);// 0x970960
	static AKWaapiJsonObject SubscribeToWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiOptions, out const delegate Callback, out AkWaapiSubscriptionId SubscriptionId, out bool SubscriptionDone);// 0x9706f0
	static void SetSubscriptionID(out const AkWaapiSubscriptionId Subscription, int ID);// 0x970620
	static bool RegisterWaapiProjectLoadedCallback(out const delegate Callback);// 0x96f8d0
	static bool RegisterWaapiConnectionLostCallback(out const delegate Callback);// 0x96f820
	static int GetSubscriptionID(out const AkWaapiSubscriptionId Subscription);// 0x96f790
	static FText Conv_FAkWaapiSubscriptionIdToText(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x96ebb0
	static FString Conv_FAkWaapiSubscriptionIdToString(out const AkWaapiSubscriptionId INAkWaapiSubscriptionId);// 0x96eae0
	static AKWaapiJsonObject CallWaapi(out const AkWaapiUri WaapiUri, out const AKWaapiJsonObject WaapiArgs, out const AKWaapiJsonObject WaapiOptions);// 0x96e6a0

--------------------------------
Class: AkWaapiSubscriptionId

--------------------------------
Class: AKWaapiJsonObject

--------------------------------
Class: AkWaapiUri
	FString Uri;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SAkWaapiFieldNamesConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkWaapiFieldNamesToText(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x96a440
	static FString Conv_FAkWaapiFieldNamesToString(out const AkWaapiFieldNames INAkWaapiFieldNames);// 0x96a350

--------------------------------
Class: AkWaapiFieldNames
	FString FieldName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AkWaapiJsonManager.BlueprintFunctionLibrary.Object
	static AKWaapiJsonObject SetStringField(out const AkWaapiFieldNames FieldName, FString FieldValue, AKWaapiJsonObject Target);// 0x970440
	static AKWaapiJsonObject SetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject FieldValue, AKWaapiJsonObject Target);// 0x970180
	static AKWaapiJsonObject SetNumberField(out const AkWaapiFieldNames FieldName, float FieldValue, AKWaapiJsonObject Target);// 0x96ffb0
	static AKWaapiJsonObject SetBoolField(out const AkWaapiFieldNames FieldName, bool FieldValue, AKWaapiJsonObject Target);// 0x96fde0
	static AKWaapiJsonObject SetArrayStringFields(out const AkWaapiFieldNames FieldName, out const FString[] FieldStringValues, AKWaapiJsonObject Target);// 0x96fbe0
	static AKWaapiJsonObject SetArrayObjectFields(out const AkWaapiFieldNames FieldName, out const AKWaapiJsonObject[] FieldObjectValues, AKWaapiJsonObject Target);// 0x96f9c0
	static FString GetStringField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x96f600
	static AKWaapiJsonObject GetObjectField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x96f2e0
	static float GetNumberField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x96f190
	static int GetIntegerField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x96f040
	static bool GetBoolField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x96eef0
	static AKWaapiJsonObject[] GetArrayField(out const AkWaapiFieldNames FieldName, AKWaapiJsonObject Target);// 0x96eca0
	static FText Conv_FAKWaapiJsonObjectToText(AKWaapiJsonObject INAKWaapiJsonObject);// 0x96e9b0
	static FString Conv_FAKWaapiJsonObjectToString(AKWaapiJsonObject INAKWaapiJsonObject);// 0x96e8a0

--------------------------------
Class: AkWaapiUriConv.BlueprintFunctionLibrary.Object
	static FText Conv_FAkWaapiUriToText(out const AkWaapiUri INAkWaapiUri);// 0x96a440
	static FString Conv_FAkWaapiUriToString(out const AkWaapiUri INAkWaapiUri);// 0x96a350

--------------------------------
Class: AkWindowsInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkWindowsAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x38]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkWindowsAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	UInt32Property MaxSystemAudioObjects;//[Size: 0x4]

--------------------------------
Class: AkWin32PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWin64PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWindowsPlatformInfo.AkWin64PlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWinGDKInitializationSettings.Object
	AkCommonInitializationSettingsWithSampleRate CommonSettings;//[Offset: 0x28, Size: 0x68]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkWinGDKAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x34]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkWinGDKAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	bool UseHeadMountedDisplayAudioDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkWinAnvilInitializationSettings.AkWinGDKInitializationSettings.Object

--------------------------------
Class: AkWinGDKPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWinAnvilPlatformInfo.AkWinGDKPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkWwiseTree.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10]
	delegate OnItemDragged;//[Offset: 0x118, Size: 0x10]
	void SetSearchText(FString newText);// 0x9703a0
	AkWwiseObjectDetails GetSelectedItem();// 0x96f4e0
	FString GetSearchText();// 0x96f460

--------------------------------
Class: AkWwiseTreeSelector.Widget.Visual.Object
	delegate OnSelectionChanged;//[Offset: 0x108, Size: 0x10]
	delegate OnItemDragged;//[Offset: 0x118, Size: 0x10]

--------------------------------
Class: AkXboxOneGDKInitializationSettings.Object
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x28, Size: 0x60]
	AkXboxOneGDKApuHeapInitializationSettings ApuHeapSettings;//[Offset: 0x88, Size: 0x8]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkXboxOneGDKAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x34]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkXboxOneGDKApuHeapInitializationSettings
	UInt32Property CachedSize;//[Size: 0x4]
	UInt32Property NonCachedSize;//[Size: 0x4]

--------------------------------
Class: AkXboxOneGDKAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint16 MaximumNumberOfXMAVoices;//[Offset: 0x30, Size: 0x2]
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]

--------------------------------
Class: AkXboxOneAnvilInitializationSettings.AkXboxOneGDKInitializationSettings.Object

--------------------------------
Class: AkXboxOneGDKPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkXboxOneAnvilPlatformInfo.AkXboxOneGDKPlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: AkXboxOneInitializationSettings.Object
	AkCommonInitializationSettings CommonSettings;//[Offset: 0x28, Size: 0x60]
	AkXboxOneApuHeapInitializationSettings ApuHeapSettings;//[Offset: 0x88, Size: 0x8]
	AkCommunicationSettingsWithSystemInitialization CommunicationSettings;//[Offset: 0x90, Size: 0x28]
	AkXboxOneAdvancedInitializationSettings AdvancedSettings;//[Offset: 0xb8, Size: 0x34]
	void MigrateMultiCoreRendering(bool NewValue);// 0x95a0e0

--------------------------------
Class: AkXboxOneApuHeapInitializationSettings
	UInt32Property CachedSize;//[Size: 0x4]
	UInt32Property NonCachedSize;//[Size: 0x4]

--------------------------------
Class: AkXboxOneAdvancedInitializationSettings.AkAdvancedInitializationSettingsWithMultiCoreRendering.AkAdvancedInitializationSettings
	uint16 MaximumNumberOfXMAVoices;//[Offset: 0x30, Size: 0x2]
	bool UseHardwareCodecLowLatencyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]

--------------------------------
Class: AkXboxOnePlatformInfo.AkPlatformInfo.Object

--------------------------------
Class: InterpTrackAkAudioEvent.InterpTrackVectorBase.InterpTrack.Object
	AkAudioEventTrackKey[] Events;//[Offset: 0x90, Size: 0x10]
	bool bContinueEventOnMatineeEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: AkAudioEventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x8, Size: 0x8]
	FString EventName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: InterpTrackAkAudioRTPC.InterpTrackFloatBase.InterpTrack.Object
	FString Param;//[Offset: 0x90, Size: 0x10]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bContinueRTPCOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: InterpTrackInstAkAudioEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstAkAudioRTPC.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MovieSceneAkAudioEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkAudioEvent* Event;//[Offset: 0x128, Size: 0x8]
	bool RetriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int ScrubTailLengthMs;//[Offset: 0x134, Size: 0x4]
	bool StopAtSectionEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	FString EventName;//[Offset: 0x140, Size: 0x10]
	float MaxSourceDuration;//[Offset: 0x170, Size: 0x4]
	FString MaxDurationSourceID;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]
	bool bIsAMasterTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: MovieSceneAkAudioEventTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAkAudioRTPCSection.MovieSceneSection.MovieSceneSignedObject.Object
	AkRtpc* RTPC;//[Offset: 0xe8, Size: 0x8]
	FString Name;//[Offset: 0xf0, Size: 0x10]
	RichCurve FloatCurve;//[Offset: 0x100, Size: 0x80]
	MovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;//[Offset: 0x180, Size: 0x30]
	MovieSceneFloatChannel RTPCChannel;//[Offset: 0x1b0, Size: 0xa0]

--------------------------------
Class: MovieSceneFloatChannelSerializationHelper
	byte PreInfinityExtrap;//[Offset: 0x0, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x1, Size: 0x1]
	int[] Times;//[Offset: 0x8, Size: 0x10]
	MovieSceneFloatValueSerializationHelper[] Values;//[Offset: 0x18, Size: 0x10]
	float DefaultValue;//[Offset: 0x28, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: MovieSceneFloatValueSerializationHelper
	float Value;//[Offset: 0x0, Size: 0x4]
	byte InterpMode;//[Offset: 0x4, Size: 0x1]
	byte TangentMode;//[Offset: 0x5, Size: 0x1]
	MovieSceneTangentDataSerializationHelper Tangent;//[Offset: 0x8, Size: 0x14]

--------------------------------
Class: MovieSceneTangentDataSerializationHelper
	float ArriveTangent;//[Offset: 0x0, Size: 0x4]
	float LeaveTangent;//[Offset: 0x4, Size: 0x4]
	byte TangentWeightMode;//[Offset: 0x8, Size: 0x1]
	float ArriveTangentWeight;//[Offset: 0xc, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x8, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x9, Size: 0x1]
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10]
	MovieSceneFloatValue[] Values;//[Offset: 0x20, Size: 0x10]
	float DefaultValue;//[Offset: 0x30, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x38, Size: 0x60]
	FrameRate TickResolution;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4]
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14]
	byte InterpMode;//[Offset: 0x18, Size: 0x1]
	byte TangentMode;//[Offset: 0x19, Size: 0x1]
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4]
	float LeaveTangent;//[Offset: 0x4, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4]
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: MovieSceneAkAudioRTPCTrack.MovieSceneAkTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: PostEventAsync.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	static PostEventAsync* PostEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Actor* Actor, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, bool bStopWhenAttachedToDestroyed);// 0x973d40
	void PollPostEventFuture();// 0x973d00

--------------------------------
Class: PostEventAtLocationAsync.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	static PostEventAtLocationAsync* PostEventAtLocationAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, Vector Location, Rotator Orientation);// 0x973fd0
	void PollPostEventFuture();// 0x973d20

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0x88, Size: 0x20]

--------------------------------
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xe8, Size: 0x4]
	enum SectionEvaluateBehavior;//[Offset: 0xec, Size: 0x4]
	enum SectionEndBehavior;//[Offset: 0xf0, Size: 0x4]
	enum AgeUpdateMode;//[Offset: 0xf4, Size: 0x1]

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int ChannelsUsed;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: NiagaraActor.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);// 0xb669f0
	void OnNiagaraSystemFinished(NiagaraComponent* FinishedComponent);// 0xb66960

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10]
	NiagaraComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 0x10]
	NiagaraComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	class SceneComponent* ComponentType;//[Offset: 0x80, Size: 0x8]
	UInt32Property ComponentCountLimit;//[Size: 0x4]
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x90, Size: 0x58]
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bOnlyCreateComponentsOnParticleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	SceneComponent* TemplateComponent;//[Offset: 0xf0, Size: 0x8]
	NiagaraComponentPropertyBinding[] PropertyBindings;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20]
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20]
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1]
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: NiagaraComponentPropertyBinding
	NiagaraVariableAttributeBinding AttributeBinding;//[Offset: 0x0, Size: 0x58]
	FName PropertyName;//[Offset: 0x58, Size: 0x8]
	NiagaraTypeDefinition PropertyType;//[Offset: 0x60, Size: 0x10]
	FName MetadataSetterName;//[Offset: 0x70, Size: 0x8]
	NiagaraVariable WritableValue;//[Offset: 0x78, Size: 0x20]

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50]
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50]
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8]
	FString EmitterName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NiagaraConvertInPlaceUtilityBase.Object

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxElements;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] FloatData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector2D[] FloatData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector4[] FloatData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Quat[] QuatData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector4[] ArrayData);// 0xb6f1e0
	static void SetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector2D[] ArrayData);// 0xb6f0c0
	static void SetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0xb6f300
	static void SetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Quat[] ArrayData);// 0xb6efa0
	static void SetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName, out const int[] ArrayData);// 0xb6ee80
	static void SetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const float[] ArrayData);// 0xb6ed60
	static void SetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName, out const LinearColor[] ArrayData);// 0xb6ec40
	static void SetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName, out const bool[] ArrayData);// 0xb6eb20
	static Vector4[] GetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6e2a0
	static Vector2D[] GetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6e190
	static Vector[] GetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6e3b0
	static Quat[] GetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6e080
	static int[] GetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6df70
	static float[] GetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6de60
	static LinearColor[] GetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6dd50
	static bool[] GetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0xb6dc40

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool[] BoolData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8]
	int Resolution;//[Offset: 0x40, Size: 0x4]
	float ScopeInMilliseconds;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8]
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8]
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8]
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10]
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4]
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Resolution;//[Offset: 0x40, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x44, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x48, Size: 0x4]
	float NoiseFloorDb;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int PlayerControllerIndex;//[Offset: 0x38, Size: 0x4]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10]
	float LUTMinTime;//[Offset: 0x48, Size: 0x4]
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4]
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4]
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4]
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	FName ExposedName;//[Offset: 0x5c, Size: 0x8]
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve RedCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve GreenCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve BlueCurve;//[Offset: 0x170, Size: 0x80]
	RichCurve AlphaCurve;//[Offset: 0x1f0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	UInt32Property Seed;//[Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve Curve;//[Offset: 0x70, Size: 0x80]

--------------------------------
Class: NiagaraParticleCallbackHandler.Interface.Object
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem);// 0xb6ea20

--------------------------------
Class: BasicParticleData
	Vector Position;//[Offset: 0x0, Size: 0xc]
	float Size;//[Offset: 0xc, Size: 0x4]
	Vector Velocity;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20]
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1]
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4]
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<int> OutputShaderStages;//[Offset: 0x38, Size: 0x50]
	<int> IterationShaderStages;//[Offset: 0x88, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0xd8, Size: 0x4]
	int NumCellsY;//[Offset: 0xdc, Size: 0x4]
	int NumCellsMaxAxis;//[Offset: 0xe0, Size: 0x4]
	int NumAttributes;//[Offset: 0xe4, Size: 0x4]
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	Vector2D WorldBBoxSize;//[Offset: 0xec, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xf8, Size: 0x20]
	enum OverrideBufferFormat;//[Offset: 0x118, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119, Size: 0x1]
	<ManagedRenderTargets_Key(UInt64Property),TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x170, Size: 0x50]
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0xb6e770
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0xb6e4c0
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0xb6db20
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0xb6d7b0

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xf8, Size: 0x10]
	FString DIName;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0xd8, Size: 0xc]
	float CellSize;//[Offset: 0xe4, Size: 0x4]
	int NumCellsMaxAxis;//[Offset: 0xe8, Size: 0x4]
	enum SetResolutionMethod;//[Offset: 0xec, Size: 0x4]
	Vector WorldBBoxSize;//[Offset: 0xf0, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x100, Size: 0x4]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x108, Size: 0x20]
	enum BufferFormat;//[Offset: 0x128, Size: 0x1]
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0xb6e8a0
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0xb6e5f0
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0xb6db20
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0xb6d920

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	UInt32Property MaxNeighborsPerCell;//[Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0xd8, Size: 0x8]
	byte OverrideRenderTargetFormat;//[Offset: 0xe0, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe1, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20]
	<ManagedRenderTargets_Key(UInt64Property),TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc]
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20]
	<ManagedRenderTargets_Key(UInt64Property),TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0xd8, Size: 0xc]
	byte OverrideRenderTargetFormat;//[Offset: 0xe4, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe5, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0xe8, Size: 0x20]
	<ManagedRenderTargets_Key(UInt64Property),TextureRenderTargetVolume*> ManagedRenderTargets;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x38, Size: 0x1]
	Actor* Source;//[Offset: 0x40, Size: 0x8]
	NiagaraUserParameterBinding MeshUserParameter;//[Offset: 0x48, Size: 0x20]
	SkeletalMeshComponent* SourceComponent;//[Offset: 0x68, Size: 0x8]
	enum SkinningMode;//[Offset: 0x70, Size: 0x1]
	FName[] SamplingRegions;//[Offset: 0x78, Size: 0x10]
	int WholeMeshLOD;//[Offset: 0x88, Size: 0x4]
	FName[] FilteredBones;//[Offset: 0x90, Size: 0x10]
	FName[] FilteredSockets;//[Offset: 0xa0, Size: 0x10]
	FName ExcludeBoneName;//[Offset: 0xb0, Size: 0x8]
	bool bExcludeBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* Source;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x38, Size: 0x1]
	StaticMesh* DefaultMesh;//[Offset: 0x40, Size: 0x8]
	Actor* Source;//[Offset: 0x48, Size: 0x8]
	StaticMeshComponent* SourceComponent;//[Offset: 0x50, Size: 0x8]
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x58, Size: 0x10]
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	FName[] FilteredSockets;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture* Texture;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80]
	RichCurve WCurve;//[Offset: 0x1f0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8]
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VolumeTexture* Texture;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object
	UInt32Property NumParticles;//[Size: 0x4]

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	static NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0xb76fb0
	static NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0xb76cd0
	static void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0xb76bb0
	static void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0xb767d0
	static void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0xb766a0
	static void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0xb760f0
	static void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0xb75fd0
	static void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0xb75eb0
	static NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0xb75ae0

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	float RadiusScale;//[Offset: 0x84, Size: 0x4]
	Vector ColorAdd;//[Offset: 0x88, Size: 0xc]
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x98, Size: 0x58]
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0xf0, Size: 0x58]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x148, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x1a0, Size: 0x58]
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x1f8, Size: 0x58]
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x250, Size: 0x58]

--------------------------------
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	StaticMesh* ParticleMesh;//[Offset: 0x80, Size: 0x8]
	enum SortMode;//[Offset: 0x88, Size: 0x1]
	bool bOverrideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	NiagaraMeshMaterialOverride[] OverrideMaterials;//[Offset: 0x90, Size: 0x10]
	Vector2D SubImageSize;//[Offset: 0xa0, Size: 0x8]
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	enum FacingMode;//[Offset: 0xac, Size: 0x1]
	bool bLockedAxisEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	Vector LockedAxis;//[Offset: 0xb4, Size: 0xc]
	enum LockedAxisSpace;//[Offset: 0xc0, Size: 0x1]
	Vector PivotOffset;//[Offset: 0xc4, Size: 0xc]
	enum PivotOffsetSpace;//[Offset: 0xd0, Size: 0x1]
	bool bEnableFrustumCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 0x1]
	float MinCameraDistance;//[Offset: 0xd8, Size: 0x4]
	float MaxCameraDistance;//[Offset: 0xdc, Size: 0x4]
	UInt32Property RendererVisibility;//[Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x140, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x198, Size: 0x58]
	NiagaraVariableAttributeBinding MeshOrientationBinding;//[Offset: 0x1f0, Size: 0x58]
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x248, Size: 0x58]
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x2a0, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x2f8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x350, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x3a8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x400, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x458, Size: 0x58]
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x4b0, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x508, Size: 0x58]
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x560, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x5b8, Size: 0x58]

--------------------------------
Class: NiagaraMeshMaterialOverride
	MaterialInterface* ExplicitMat;//[Offset: 0x0, Size: 0x8]
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: NiagaraMessageDataBase.Object

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10]
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraPreviewBase.Actor.Object
	void SetSystem(NiagaraSystem* InSystem);// 0x197e4f0
	void SetLabelText(out const FText InXAxisText, out const FText InYAxisText);// 0x197e4f0

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0xb7a570
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0xb7a320

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8]
	int Count;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	int Min;//[Offset: 0x38, Size: 0x4]
	int Max;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	float Min;//[Offset: 0x38, Size: 0x4]
	float Max;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x38, Size: 0x8]
	Vector2D Max;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector Min;//[Offset: 0x38, Size: 0xc]
	Vector Max;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector4 Min;//[Offset: 0x40, Size: 0x10]
	Vector4 Max;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x38, Size: 0x10]
	LinearColor Max;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NiagaraPreviewGrid.Actor.Object
	NiagaraSystem* System;//[Offset: 0x228, Size: 0x8]
	enum ResetMode;//[Offset: 0x230, Size: 0x1]
	NiagaraPreviewAxis* PreviewAxisX;//[Offset: 0x238, Size: 0x8]
	NiagaraPreviewAxis* PreviewAxisY;//[Offset: 0x240, Size: 0x8]
	class NiagaraPreviewBase* PreviewClass;//[Offset: 0x248, Size: 0x8]
	float SpacingX;//[Offset: 0x250, Size: 0x4]
	float SpacingY;//[Offset: 0x254, Size: 0x4]
	int NumX;//[Offset: 0x258, Size: 0x4]
	int NumY;//[Offset: 0x25c, Size: 0x4]
	ChildActorComponent*[] PreviewComponents;//[Offset: 0x260, Size: 0x10]
	void SetPaused(bool bPaused);// 0xb7a5c0
	void GetPreviews(out NiagaraComponent*[] OutPreviews);// 0xb7a4c0
	void DeactivatePreviews();// 0xb7a4a0
	void ActivatePreviews(bool bReset);// 0xb7a290

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x80, Size: 0x8]
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x88, Size: 0x20]
	enum FacingMode;//[Offset: 0xa8, Size: 0x1]
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0xac, Size: 0x24]
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0xd0, Size: 0x24]
	enum DrawDirection;//[Offset: 0xf4, Size: 0x1]
	float CurveTension;//[Offset: 0xf8, Size: 0x4]
	enum TessellationMode;//[Offset: 0xfc, Size: 0x1]
	int TessellationFactor;//[Offset: 0x100, Size: 0x4]
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float TessellationAngle;//[Offset: 0x108, Size: 0x4]
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x110, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x168, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x1c0, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x218, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x270, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x2c8, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x320, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x378, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x3d0, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x428, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x480, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x4d8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x530, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x588, Size: 0x58]
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x5e0, Size: 0x58]
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x638, Size: 0x58]
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x690, Size: 0x58]
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x6e8, Size: 0x58]

--------------------------------
Class: NiagaraRibbonUVSettings
	enum LeadingEdgeMode;//[Offset: 0x0, Size: 0x4]
	enum TrailingEdgeMode;//[Offset: 0x4, Size: 0x4]
	enum DistributionMode;//[Offset: 0x8, Size: 0x4]
	float TilingLength;//[Offset: 0xc, Size: 0x4]
	Vector2D Offset;//[Offset: 0x10, Size: 0x8]
	Vector2D Scale;//[Offset: 0x18, Size: 0x8]
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSettings.DeveloperSettings.Object
	SoftObjectPath DefaultEffectType;//[Offset: 0x38, Size: 0x18]
	FText[] QualityLevels;//[Offset: 0x50, Size: 0x10]
	<FString,FText> ComponentRendererWarningsPerClass;//[Offset: 0x60, Size: 0x50]
	byte DefaultRenderTargetFormat;//[Offset: 0xb0, Size: 0x1]
	enum DefaultGridFormat;//[Offset: 0xb1, Size: 0x1]
	NiagaraEffectType* DefaultEffectTypePtr;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	enum IterationSource;//[Offset: 0x40, Size: 0x1]
	int Iterations;//[Offset: 0x44, Size: 0x4]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x50, Size: 0x20]

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0x80, Size: 0x8]
	enum SourceMode;//[Offset: 0x88, Size: 0x1]
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0x90, Size: 0x20]
	enum Alignment;//[Offset: 0xb0, Size: 0x1]
	enum FacingMode;//[Offset: 0xb1, Size: 0x1]
	Vector2D PivotInUVSpace;//[Offset: 0xb4, Size: 0x8]
	enum SortMode;//[Offset: 0xbc, Size: 0x1]
	Vector2D SubImageSize;//[Offset: 0xc0, Size: 0x8]
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bRemoveHMDRollInVR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1]
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0xcc, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0xd0, Size: 0x4]
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float MinCameraDistance;//[Offset: 0xd8, Size: 0x4]
	float MaxCameraDistance;//[Offset: 0xdc, Size: 0x4]
	UInt32Property RendererVisibility;//[Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x140, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x198, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteRotationBinding;//[Offset: 0x1f0, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteSizeBinding;//[Offset: 0x248, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteFacingBinding;//[Offset: 0x2a0, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteAlignmentBinding;//[Offset: 0x2f8, Size: 0x58]
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x350, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x3a8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x400, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x458, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x4b0, Size: 0x58]
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x508, Size: 0x58]
	NiagaraVariableAttributeBinding UVScaleBinding;//[Offset: 0x560, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x5b8, Size: 0x58]
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x610, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x668, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x6c0, Size: 0x58]
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x718, Size: 0x10]

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8]
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc]
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc]
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	NiagaraSystem* Template;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	Vector Scale;//[Offset: 0x58, Size: 0xc]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	FName SocketName;//[Offset: 0x84, Size: 0x8]
	FXSystemComponent* GetSpawnedEffect();// 0xb7f700

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x4c, Size: 0xc]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: ReplicationGraph.ReplicationDriver.Object
	class NetReplicationGraphConnection* ReplicationConnectionManagerClass;//[Offset: 0x28, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8]
	NetReplicationGraphConnection*[] Connections;//[Offset: 0x38, Size: 0x10]
	NetReplicationGraphConnection*[] PendingConnections;//[Offset: 0x48, Size: 0x10]
	ReplicationGraphNode*[] GlobalGraphNodes;//[Offset: 0x98, Size: 0x10]
	ReplicationGraphNode*[] PrepareForReplicationNodes;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: NetReplicationGraphConnection.ReplicationConnectionDriver.Object
	NetConnection* NetConnection;//[Offset: 0x28, Size: 0x8]
	ReplicationGraphDebugActor* DebugActor;//[Offset: 0x170, Size: 0x8]
	LastLocationGatherInfo[] LastGatherLocations;//[Offset: 0x188, Size: 0x10]
	ReplicationGraphNode*[] ConnectionGraphNodes;//[Offset: 0x1a0, Size: 0x10]
	ReplicationGraphNode_TearOff_ForConnection* TearOffNode;//[Offset: 0x1b0, Size: 0x8]

--------------------------------
Class: ReplicationGraphDebugActor.Actor.Object
	ReplicationGraph* ReplicationGraph;//[Offset: 0x228, Size: 0x8]
	NetReplicationGraphConnection* ConnectionManager;//[Offset: 0x230, Size: 0x8]
	void ServerStopDebugging();// 0xbc1190
	void ServerStartDebugging();// 0xbc1170
	void ServerSetPeriodFrameForClass(class Object Class, int PeriodFrame);// 0xbc10a0
	void ServerSetCullDistanceForClass(class Object Class, float CullDistance);// 0xbc0fc0
	void ServerSetConditionalActorBreakpoint(Actor* Actor);// 0xbc0f30
	void ServerPrintCullDistances();// 0xbc0f10
	void ServerPrintAllActorInfo(FString Str);// 0xbc0e70
	void ServerCellInfo();// 0xbc0e50
	void ClientCellInfo(Vector CellLocation, Vector CellExtent, const Actor*[] Actors);// 0xbc0d00

--------------------------------
Class: LastLocationGatherInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Vector LastLocation;//[Offset: 0x8, Size: 0xc]
	Vector LastOutOfRangeLocationCheck;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: ReplicationGraphNode.Object
	ReplicationGraphNode*[] AllChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ReplicationGraphNode_TearOff_ForConnection.ReplicationGraphNode.Object
	TearOffActorInfo[] TearOffActors;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TearOffActorInfo
	Actor* Actor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BasicReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x498, Size: 0x8]
	ReplicationGraphNode_ActorList* AlwaysRelevantNode;//[Offset: 0x4a0, Size: 0x8]
	ConnectionAlwaysRelevantNodePair[] AlwaysRelevantForConnectionList;//[Offset: 0x4a8, Size: 0x10]
	Actor*[] ActorsWithoutNetConnection;//[Offset: 0x4b8, Size: 0x10]

--------------------------------
Class: ReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ConnectionAlwaysRelevantNodePair
	NetConnection* NetConnection;//[Offset: 0x0, Size: 0x8]
	ReplicationGraphNode_AlwaysRelevant_ForConnection* Node;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	AlwaysRelevantActorInfo[] PastRelevantActors;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: AlwaysRelevantActorInfo
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* LastViewer;//[Offset: 0x8, Size: 0x8]
	Actor* LastViewTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ReplicationGraphNode_ActorListFrequencyBuckets.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DynamicSpatialFrequency.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_ConnectionDormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_DormancyNode.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object

--------------------------------
Class: ReplicationGraphNode_GridCell.ReplicationGraphNode_ActorList.ReplicationGraphNode.Object
	ReplicationGraphNode* DynamicNode;//[Offset: 0x140, Size: 0x8]
	ReplicationGraphNode_DormancyNode* DormancyNode;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: ReplicationGraphNode_AlwaysRelevant.ReplicationGraphNode.Object
	ReplicationGraphNode* ChildNode;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: INTLBaseUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: INTLOutputUtility.BlueprintFunctionLibrary.Object
	static void FormatNoticeRet(const INTLNoticeResult Ret, out bool IsSuccess, out FText ErrorMsg);// 0xc0aff0
	static void FormatBaseRet(const INTLBaseResult Ret, out bool IsSuccess, out FText ErrorMsg);// 0xc0ad50
	static void FormatAuthRet(const INTLAuthResult Ret, out bool IsSuccess, out FText ErrorMsg);// 0xc0abb0

--------------------------------
Class: INTLNoticeResult.INTLBaseResult
	FString SeqId;//[Offset: 0x40, Size: 0x10]
	INTLNoticeInfo[] NoticeInfoList;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: INTLBaseResult
	int MethodId;//[Offset: 0x0, Size: 0x4]
	int RetCode;//[Offset: 0x4, Size: 0x4]
	FString RetMsg;//[Offset: 0x8, Size: 0x10]
	int ThirdCode;//[Offset: 0x18, Size: 0x4]
	FString ThirdMsg;//[Offset: 0x20, Size: 0x10]
	FString ExtraJson;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: INTLNoticeInfo
	int NoticeId;//[Offset: 0x0, Size: 0x4]
	FString AppId;//[Offset: 0x8, Size: 0x10]
	FString AppNoticeId;//[Offset: 0x18, Size: 0x10]
	int Status;//[Offset: 0x28, Size: 0x4]
	int StartTime;//[Offset: 0x2c, Size: 0x4]
	int EndTime;//[Offset: 0x30, Size: 0x4]
	int UpdateTime;//[Offset: 0x34, Size: 0x4]
	FString AreaList;//[Offset: 0x38, Size: 0x10]
	INTLNoticePicture[] PictureList;//[Offset: 0x48, Size: 0x10]
	FString ExtraData;//[Offset: 0x58, Size: 0x10]
	INTLNoticeContent[] ContentList;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: INTLNoticePicture
	FString URL;//[Offset: 0x0, Size: 0x10]
	FString Hash;//[Offset: 0x10, Size: 0x10]
	FString RedirectUrl;//[Offset: 0x20, Size: 0x10]
	FString ExtraData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: INTLNoticeContent
	int ContentId;//[Offset: 0x0, Size: 0x4]
	FString AppContentId;//[Offset: 0x8, Size: 0x10]
	FString Title;//[Offset: 0x18, Size: 0x10]
	FString Content;//[Offset: 0x28, Size: 0x10]
	FString LangType;//[Offset: 0x38, Size: 0x10]
	int UpdateTime;//[Offset: 0x48, Size: 0x4]
	FString ExtraData;//[Offset: 0x50, Size: 0x10]
	INTLNoticePicture[] PictureList;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: INTLAuthResult.INTLBaseResult
	FString OpenId;//[Offset: 0x40, Size: 0x10]
	FString Token;//[Offset: 0x50, Size: 0x10]
	int TokenExpireTime;//[Offset: 0x60, Size: 0x4]
	int FirstLogin;//[Offset: 0x64, Size: 0x4]
	FString RegChannelDis;//[Offset: 0x68, Size: 0x10]
	FString UserName;//[Offset: 0x78, Size: 0x10]
	int Gender;//[Offset: 0x88, Size: 0x4]
	FString Birthday;//[Offset: 0x90, Size: 0x10]
	FString PicUrl;//[Offset: 0xa0, Size: 0x10]
	FString Pf;//[Offset: 0xb0, Size: 0x10]
	FString PfKey;//[Offset: 0xc0, Size: 0x10]
	bool NeedRealNameAuth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	int ChannelID;//[Offset: 0xd4, Size: 0x4]
	enum ChannelName;//[Offset: 0xd8, Size: 0x1]
	FString ChannelInfo;//[Offset: 0xe0, Size: 0x10]
	FString ConfirmCode;//[Offset: 0xf0, Size: 0x10]
	int ConfirmCodeExpireTime;//[Offset: 0x100, Size: 0x4]
	FString BindList;//[Offset: 0x108, Size: 0x10]
	FString LegalDocumentsAcceptedVersion;//[Offset: 0x118, Size: 0x10]
	int DeleteAccountStatus;//[Offset: 0x128, Size: 0x4]

--------------------------------
Class: INTLPluginObserver.Interface.Object
	void OnWebViewResult(INTLWebViewResult Ret);// 0xc17a20
	void OnUpdateStartRepoNewVersionInfoResult(INTLUpdateStartRepoNewVersionInfo Ret);// 0xc17890
	void OnUpdateResult(INTLUpdateResult Ret);// 0xc176a0
	void OnUpdateProgressResult(INTLUpdateProgress Ret);// 0xc17530
	void OnUpdateOptionalRepoInitResult(INTLUpdateOptionalRepoInitResult Ret);// 0xc17340
	void OnPushResult(INTLPushResult Ret);// 0xc170d0
	void OnPushBaseResult(INTLBaseResult Ret);// 0xc16f00
	void OnNoticeRequestData(INTLNoticeResult Ret);// 0xc16c30
	void OnIPInfoResult(INTLLBSIPInfoResult Ret);// 0xc16990
	void OnIDTokenResult(INTLIDTokenResult Ret);// 0xc16760
	void OnFriendResult(INTLFriendResult Ret);// 0xc16490
	void OnFriendBaseResult(INTLBaseResult Ret);// 0xc162c0
	void OnExtendResult(INTLExtendResult Ret);// 0xc16090
	void OnDNSResult(INTLDNSResult Ret);// 0xc15880
	void OnDismissLoginUI(bool Canceled);// 0xc16000
	void OnDirTreeResult(INTLDirTreeResult Ret);// 0xc15d50
	void OnDeviceLevelResult(INTLDeviceLevelResult Ret);// 0xc15b70
	void OnCutoutResult(CutoutInfoResult Ret);// 0xc15600
	void OnCustomerResult(INTLCustomerResult Ret);// 0xc15420
	void OnComplianceResult(INTLComplianceResult Ret);// 0xc15000
	void OnAuthResult(INTLAuthResult Ret);// 0xc14f50
	void OnAuthBaseResult(INTLBaseResult Ret);// 0xc14d80
	void OnAccountResult(INTLAccountResult Ret);// 0xc14cd0

--------------------------------
Class: INTLWebViewResult.INTLBaseResult
	int MsgType;//[Offset: 0x40, Size: 0x4]
	FString MsgJsonData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: INTLUpdateStartRepoNewVersionInfo
	int MethodId;//[Offset: 0x0, Size: 0x4]
	enum ActionType;//[Offset: 0x4, Size: 0x1]
	int NewVersionType;//[Offset: 0x8, Size: 0x4]
	FString Version;//[Offset: 0x10, Size: 0x10]
	int NeedDownloadSize;//[Offset: 0x20, Size: 0x4]
	FString GameDefinedStr;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: INTLUpdateResult.INTLBaseResult
	enum ActionType;//[Offset: 0x40, Size: 0x1]
	int RepoID;//[Offset: 0x44, Size: 0x4]
	int TaskID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: INTLUpdateProgress
	int MethodId;//[Offset: 0x0, Size: 0x4]
	enum ActionType;//[Offset: 0x4, Size: 0x1]
	int UpdateStep;//[Offset: 0x8, Size: 0x4]
	int RepoID;//[Offset: 0xc, Size: 0x4]
	int TaskID;//[Offset: 0x10, Size: 0x4]
	int FinishedSize;//[Offset: 0x14, Size: 0x4]
	int TotalSize;//[Offset: 0x18, Size: 0x4]
	int Speed;//[Offset: 0x1c, Size: 0x4]
	int RemainTime;//[Offset: 0x20, Size: 0x4]
	float StepProgress;//[Offset: 0x24, Size: 0x4]
	float TotalProgress;//[Offset: 0x28, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: INTLUpdateOptionalRepoInitResult.INTLBaseResult
	enum ActionType;//[Offset: 0x40, Size: 0x1]
	int RepoID;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: INTLPushResult.INTLBaseResult
	int Type;//[Offset: 0x40, Size: 0x4]
	FString Notification;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: INTLLBSIPInfoResult.INTLBaseResult
	FString Region;//[Offset: 0x40, Size: 0x10]
	FString Alpha2;//[Offset: 0x50, Size: 0x10]
	int Timestamp;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: INTLIDTokenResult.INTLBaseResult
	FString IdToken;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: INTLFriendResult.INTLBaseResult
	INTLPersonInfo[] FriendInfoList;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: INTLPersonInfo
	FString OpenId;//[Offset: 0x0, Size: 0x10]
	FString UserName;//[Offset: 0x10, Size: 0x10]
	int Gender;//[Offset: 0x20, Size: 0x4]
	FString PictureUrl;//[Offset: 0x28, Size: 0x10]
	FString Country;//[Offset: 0x38, Size: 0x10]
	FString Province;//[Offset: 0x48, Size: 0x10]
	FString City;//[Offset: 0x58, Size: 0x10]
	FString Language;//[Offset: 0x68, Size: 0x10]
	FString ExtraJson;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: INTLExtendResult.INTLBaseResult
	enum Channel;//[Offset: 0x40, Size: 0x1]
	FString ExtendMethodName;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: INTLDNSResult.INTLBaseResult
	FString V4;//[Offset: 0x40, Size: 0x10]
	FString V6;//[Offset: 0x50, Size: 0x10]
	FString Host;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: INTLDirTreeResult.INTLBaseResult
	int TreeId;//[Offset: 0x40, Size: 0x4]
	int NodeId;//[Offset: 0x44, Size: 0x4]
	FString TreeInfo;//[Offset: 0x48, Size: 0x10]
	FString RoleInfo;//[Offset: 0x58, Size: 0x10]
	int ExpireTime;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: INTLDeviceLevelResult.INTLBaseResult
	int DeviceLevel;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: CutoutInfoResult.INTLBaseResult
	bool HasCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool IsCutoutHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	int ScreenHeight;//[Offset: 0x44, Size: 0x4]
	int ScreenWidth;//[Offset: 0x48, Size: 0x4]
	int StatusBarHeight;//[Offset: 0x4c, Size: 0x4]
	CutoutRect[] CutoutRects;//[Offset: 0x50, Size: 0x10]
	CutoutRect SafeArea;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: CutoutRect
	int Top;//[Offset: 0x0, Size: 0x4]
	int Bottom;//[Offset: 0x4, Size: 0x4]
	int Left;//[Offset: 0x8, Size: 0x4]
	int Right;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: INTLCustomerResult.INTLBaseResult
	int MsgType;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: INTLComplianceResult.INTLBaseResult
	int AdultStatus;//[Offset: 0x40, Size: 0x4]
	int ParentCertificateStatus;//[Offset: 0x44, Size: 0x4]
	FString ParentCertificateStatusExpiration;//[Offset: 0x48, Size: 0x10]
	int EUUserAgreeStatus;//[Offset: 0x58, Size: 0x4]
	FString CountryCode;//[Offset: 0x60, Size: 0x10]
	int AdultAge;//[Offset: 0x70, Size: 0x4]
	int GameGrade;//[Offset: 0x74, Size: 0x4]
	int CertificateType;//[Offset: 0x78, Size: 0x4]
	FString AdultStatusExpiration;//[Offset: 0x80, Size: 0x10]
	FString TS;//[Offset: 0x90, Size: 0x10]
	bool IsEEA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	FString Region;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: INTLAccountResult.INTLBaseResult
	int ChannelID;//[Offset: 0x40, Size: 0x4]
	FString Channel;//[Offset: 0x48, Size: 0x10]
	FString SeqId;//[Offset: 0x58, Size: 0x10]
	FString UserName;//[Offset: 0x68, Size: 0x10]
	FString UID;//[Offset: 0x78, Size: 0x10]
	FString Token;//[Offset: 0x88, Size: 0x10]
	int ExpireTime;//[Offset: 0x98, Size: 0x4]
	int IsRegister;//[Offset: 0x9c, Size: 0x4]
	int IsSetPassword;//[Offset: 0xa0, Size: 0x4]
	int IsReceiveEmail;//[Offset: 0xa4, Size: 0x4]
	int VerifyCodeExpireTime;//[Offset: 0xa8, Size: 0x4]
	int CanBind;//[Offset: 0xac, Size: 0x4]
	FString PpAcceptanceVersion;//[Offset: 0xb0, Size: 0x10]
	FString TosAcceptanceVersion;//[Offset: 0xc0, Size: 0x10]
	DateTime PpAcceptanceTime;//[Offset: 0xd0, Size: 0x8]
	DateTime TosAcceptanceTime;//[Offset: 0xd8, Size: 0x8]
	INTLAccountProfile Profile;//[Offset: 0xe0, Size: 0xd8]
	int IsUserNameAvailable;//[Offset: 0x1b8, Size: 0x4]

--------------------------------
Class: INTLAccountProfile
	FString UserName;//[Offset: 0x0, Size: 0x10]
	FString Birthday;//[Offset: 0x10, Size: 0x10]
	int BirthdayYear;//[Offset: 0x20, Size: 0x4]
	int BirthdayMonth;//[Offset: 0x24, Size: 0x4]
	int BirthdayDay;//[Offset: 0x28, Size: 0x4]
	int IsReceiveEmail;//[Offset: 0x2c, Size: 0x4]
	FString Region;//[Offset: 0x30, Size: 0x10]
	FString LangType;//[Offset: 0x40, Size: 0x10]
	FString ExtraJson;//[Offset: 0x50, Size: 0x10]
	FString Email;//[Offset: 0x60, Size: 0x10]
	FString Phone;//[Offset: 0x70, Size: 0x10]
	FString PhoneAreaCode;//[Offset: 0x80, Size: 0x10]
	int AccountType;//[Offset: 0x90, Size: 0x4]
	FString NickName;//[Offset: 0x98, Size: 0x10]
	FString PrivacyPolicy;//[Offset: 0xa8, Size: 0x10]
	FString TermsOfService;//[Offset: 0xb8, Size: 0x10]
	int PrivacyUpdateTime;//[Offset: 0xc8, Size: 0x4]
	int TermsUpdateTime;//[Offset: 0xcc, Size: 0x4]
	int UsernamePassVerify;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: INTLSDKAPI.BlueprintFunctionLibrary.Object
	static bool UpdateStop(int RepoID, int TaskID);// 0xc1cd20
	static bool UpdateStart(INTLUpdateInitInfo Info);// 0xc1cbb0
	static bool UpdateContinue(int RepoID);// 0xc1cb20
	static bool UpdateConfig(<FString,FString> Cfg, const FString Project);// 0xc1c920
	static void UnregisterPush(const FString Channel);// 0xc1c830
	static bool Unbind(const enum Channel, const FString UID, const FString ExtraJson);// 0xc1c670
	static void ShutDown();// 0xc1c650
	static bool ShowAccountPicker();// 0xc1c620
	static bool Share(const INTLFriendReqInfo Info, const FString Channel);// 0xc1b890
	static void SetTag(const FString Channel, const FString Tag);// 0xc1c4a0
	static void SetSessionExtraParam(const FString extra_json);// 0xc1c3b0
	static void SetDeviceLevel(int Level);// 0xc1c330
	static void SetCrashUserValue(const FString Key, const FString Value);// 0xc1c1b0
	static void SetCrashUserId(const FString userId);// 0xc1c0c0
	static void SetCrashCallback();// 0xc1c0a0
	static void SetBuglyAppVersion(FString appVersion);// 0xc1c000
	static void SetAccountInfo(const enum Channel, const int ChannelID, const FString LangType, const int AccountPlatType);// 0xc1be60
	static void SetAccount(const FString Channel, const FString Account);// 0xc1bce0
	static bool SendMessage(const INTLFriendReqInfo Info, const FString Channel);// 0xc1b890
	static bool ResetPasswordWithVerifyCode(const FString Account, const FString VerifyCode, const FString PhoneAreaCode, const FString NewPassword, const FString ExtraJson);// 0xc1b510
	static bool ResetPasswordWithOldPassword(const FString Account, const FString OldPassword, const FString PhoneAreaCode, const FString NewPassword, const FString ExtraJson);// 0xc1b190
	static bool ResetGuest();// 0xc1b160
	static bool RequestVerifyCode(const FString Account, const enum CodeType, const FString PhoneAreaCode, const FString ExtraJson);// 0xc1aef0
	static void RequestTrackingAuthorization();// 0xc1aed0
	static void RequestIPInfo();// 0xc1aeb0
	static void ReportPayStep(int Step, const FString StepName, bool Result, int ErrorCode, const <FString,FString> ParamsMap);// 0xc1abd0
	static void ReportLoginStep(int Step, const FString StepName, bool Result, int ErrorCode, const <FString,FString> ParamsMap);// 0xc1a8f0
	static void ReportException(int Type, const FString ExceptionName, const FString ExceptionMsg, const FString ExceptionStack, <FString,FString> ExtInfo);// 0xc1a550
	static void ReportEvent(const FString EventName, <FString,FString> ParamsMap, const FString SpecificChannel, const FString ExtraJson);// 0xc1a1f0
	static void ReportCustomEventStep(const FString EventName, int Step, const FString StepName, bool Result, int ErrorCode, const <FString,FString> ParamsMap);// 0xc19e60
	static void ReportBinary(const FString EventName, const FString Data, int Length, const FString SpecificChannel);// 0xc19bf0
	static void RemoveObserver(interface classNone Observer);// 0xc19b60
	static void RegisterPush(const FString Channel, const FString Account);// 0xc199e0
	static bool Register(const FString Account, const FString Password, const FString VerifyCode, const FString PhoneAreaCode, const INTLAccountProfile userProfile);// 0xc19130
	static bool QueryVerifyCodeStatus(const FString Account, const FString VerifyCode, const enum CodeType, const FString PhoneAreaCode, const FString ExtraJson);// 0xc18e10
	static void QueryUserNameStatus(FString UserName);// 0xc18d70
	static bool QueryUserInfo();// 0xc18d40
	static bool QueryRegisterStatus(const FString Account, const FString PhoneAreaCode, const FString ExtraJson);// 0xc18b10
	static bool QueryLegalDocumentsAcceptedVersion();// 0xc18ae0
	static bool QueryIsReceiveEmail(const FString Account, const FString PhoneAreaCode, const FString ExtraJson);// 0xc188b0
	static void QueryIsEEA(const FString Region);// 0xc187c0
	static void QueryIpByHost(const FString Host);// 0xc186d0
	static void QueryIDToken();// 0xc186b0
	static bool QueryFriends(const enum Channel, const int Page, const int Count, const bool IsInGame, const FString ExtraJson);// 0xc184b0
	static void QueryDirTree(int TreeId);// 0xc18430
	static void QueryDirNode(int TreeId, int NodeId);// 0xc18370
	static void QueryDeviceLevel();// 0xc18350
	static void QueryDataProtectionAcceptance();// 0xc18330
	static bool QueryCanBind(const int ChannelID, const int AccountPlatType, const FString Account, const FString PhoneAreaCode, const FString ExtraJson);// 0xc18080
	static bool QueryActiveUser();// 0xc18050
	static bool QueryAccountProfile();// 0xc18020
	static void PostNetworkLatencyInSession(int LatencyMs);// 0xc17fa0
	static void PostFrameTimeInSession(float DeltaSeconds);// 0xc17f20
	static void OpenUrl(const FString URL, enum ScreenOrientation, bool FullScreenEnable, bool EncryptEnable, bool SystemBrowserEnable, const FString ExtraJson);// 0xc17c60
	static bool OnTickEvent();// 0xc17310
	static FString NoticeRequestData(const FString Region, const FString LangType, const FString ExtraJson);// 0xc14a60
	static bool ModifyProfile(const INTLAccountProfile userProfile);// 0xc144b0
	static bool ModifyLegalDocumentsAcceptedVersion(FString acceptedVersionsJson);// 0xc14400
	static bool ModifyDownloadPriority(int RepoID, int TaskID, int DownloadPriority);// 0xc14300
	static void ModifyDataProtectionAcceptance(FString PPVersion, FString TOSVersion);// 0xc14200
	static bool ModifyAccountWithVerifyCode(const FString OldAccount, const FString OldAccountVerifyCode, const FString OldPhoneAreaCode, const FString NewAccount, const FString NewAccountVerifyCode, const FString NewPhoneAreaCode, const FString ExtraJson);// 0xc13d00
	static bool ModifyAccountWithPassword(const FString OldAccount, const FString OldPhoneAreaCode, const FString Password, const FString NewAccount, const FString NewAccountVerifyCode, const FString NewPhoneAreaCode, const FString ExtraJson);// 0xc13800
	static bool ModifyAccountWithLoginState(const FString OldPhoneAreaCode, const FString NewAccount, const FString NewAccountVerifyCode, const FString NewPhoneAreaCode, const FString ExtraJson);// 0xc13480
	static void MarkSessionLoad(const FString SessionName, const FString extra_json);// 0xc13300
	static void MarkSessionClosed();// 0xc132e0
	static bool Logout(const enum Channel);// 0xc13260
	static bool LoginWithVerifyCode(const enum Channel, const FString Account, const FString Password, const FString VerifyCode, const FString PhoneAreaCode, const FString PermissionList);// 0xc12e90
	static bool LoginWithPassword(const enum Channel, const FString Account, const FString Password, const FString PhoneAreaCode, const FString PermissionList);// 0xc12b70
	static bool LoginWithMappedChannel(const enum Channel, const FString LoginMode, const FString Permissions);// 0xc129b0
	static bool LoginWithChannel(const enum Channel, const FString LoginMode);// 0xc12880
	static bool LoginWithBoundChannel(const enum Channel, const FString LoginMode);// 0xc12750
	static bool Login(const enum Channel, const FString Permissions, const FString ExtraJson);// 0xc12590
	static void LogCrashInfo(enum Level, const FString Tag, const FString Log);// 0xc123d0
	static void LoadCutoutData();// 0xc123b0
	static void LaunchLoginUI();// 0xc12390
	static bool LaunchCustomerUI(INTLCustomerUserProfile userProfile);// 0xc12160
	static bool LaunchAccountUI(const int Type, const FString ExtraJson);// 0xc12030
	static bool IsAppInstalled(const FString Channel, const FString ExtraJson);// 0xc11ea0
	static void InitAnalytics();// 0xc11e80
	static void Init();// 0xc11e60
	static FString GetSDKVersion();// 0xc11de0
	static FString GetIpByHost(const FString Host);// 0xc11ca0
	static FString GetInstanceIDAsync(const FString Channel);// 0xc11b60
	static FString GetInstanceID(const FString Channel);// 0xc11a20
	static bool GetIDTokenResult(out INTLIDTokenResult jwtRet);// 0xc11910
	static FString GetEncryptUrl(const FString URL);// 0xc117d0
	static int GetDeviceLevel();// 0xc117a0
	static FString GetCurrentResourceVersion();// 0xc11720
	static FString GetCurrentAppVersion();// 0xc116a0
	static FString GetConfig(const FString Key, const FString DefaultVal, const FString Project);// 0xc11430
	static bool GetAuthResult(out INTLAuthResult LoginRet);// 0xc11380
	static FString ExtendInvoke(const enum Channel, const FString ExtendMethodName, const FString ParamsJson);// 0xc11180
	static int DownloadOptionalRepoFiles(int RepoID, int DownloadPriority, out const FString[] FilesPath);// 0xc11030
	static void DismissLoginUI(const bool Canceled);// 0xc10fb0
	static void DeleteTag(const FString Channel, const FString Tag);// 0xc10e30
	static void DeleteLocalNotifications(const FString Key);// 0xc10d40
	static void DeleteAccount(const FString Channel, const FString Account);// 0xc10bc0
	static bool ComplianceSetUserProfile(const FString GameID, const FString OpenId, const FString Token, const int ChannelID, const FString Region);// 0xc108a0
	static void ComplianceSetParentCertificateStatus(enum Status);// 0xc10830
	static void ComplianceSetEUAgreeStatus(enum Status);// 0xc107c0
	static void ComplianceSetAdulthood(enum Status);// 0xc10750
	static void ComplianceSendEmail(const FString Email, const FString UserName);// 0xc105d0
	static void ComplianceQueryUserStatus();// 0xc105b0
	static void ComplianceCommitBirthday(const int BirthdayYear, const int BirthdayMonth, const int BirthdayDay);// 0xc104b0
	static void CollectionStop();// 0xc10490
	static void CollectionResume();// 0xc10470
	static void ClearLocalNotifications(const FString Channel);// 0xc10380
	static INTLUpdateOptionalRepoFilesStatus[] CheckOptionalRepoFiles(int RepoID, out const FString[] FilesPath);// 0xc101d0
	static bool CheckActiveUser();// 0xc101a0
	static void CallJS(const FString JsonJsParam);// 0xc100b0
	static bool BuildMapWithLoggedinChannel();// 0xc10080
	static bool BindWithLoggedinChannel();// 0xc10050
	static bool Bind(const enum Channel, const FString Permissions, const FString ExtraJson);// 0xc0fe90
	static bool AutoLogin();// 0xc0fe60
	static void AddObserver(interface classNone Observer);// 0xc0fdd0
	static void AddLocalNotificationIOS(const FString Channel, const INTLLocalNotificationIOS LocalNotification);// 0xc0faf0
	static void AddLocalNotification(const FString Channel, const INTLLocalNotification LocalNotification);// 0xc0f750

--------------------------------
Class: INTLUpdateInitInfo
	enum ActionType;//[Offset: 0x0, Size: 0x1]
	int RepoID;//[Offset: 0x4, Size: 0x4]
	int ResourceCopyType;//[Offset: 0x8, Size: 0x4]
	FString ResourceSavePath;//[Offset: 0x10, Size: 0x10]
	FString FirstResourceDirPath;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: INTLFriendReqInfo
	int Type;//[Offset: 0x0, Size: 0x4]
	FString User;//[Offset: 0x8, Size: 0x10]
	FString Title;//[Offset: 0x18, Size: 0x10]
	FString Description;//[Offset: 0x28, Size: 0x10]
	FString ImagePath;//[Offset: 0x38, Size: 0x10]
	FString ThumbPath;//[Offset: 0x48, Size: 0x10]
	FString MediaPath;//[Offset: 0x58, Size: 0x10]
	FString Link;//[Offset: 0x68, Size: 0x10]
	FString ExtraJson;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: INTLCustomerUserProfile
	FString LangType;//[Offset: 0x0, Size: 0x10]
	FString Sign;//[Offset: 0x10, Size: 0x10]
	FString OpenId;//[Offset: 0x20, Size: 0x10]
	FString GameLevel;//[Offset: 0x30, Size: 0x10]
	FString NickName;//[Offset: 0x40, Size: 0x10]
	FString RoleId;//[Offset: 0x50, Size: 0x10]
	FString AreaId;//[Offset: 0x60, Size: 0x10]
	FString ZoneId;//[Offset: 0x70, Size: 0x10]
	FString GameSvrId;//[Offset: 0x80, Size: 0x10]
	FString Region;//[Offset: 0x90, Size: 0x10]
	FString PictureUrl;//[Offset: 0xa0, Size: 0x10]
	FString CustomParam1;//[Offset: 0xb0, Size: 0x10]
	FString CustomParam2;//[Offset: 0xc0, Size: 0x10]
	FString CustomParam3;//[Offset: 0xd0, Size: 0x10]
	FString CustomParam4;//[Offset: 0xe0, Size: 0x10]
	FString CustomParam5;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: INTLUpdateOptionalRepoFilesStatus
	FString FilePath;//[Offset: 0x0, Size: 0x10]
	int TotalFileNum;//[Offset: 0x10, Size: 0x4]
	int ValidFileNum;//[Offset: 0x14, Size: 0x4]
	int NeedDownloadSize;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: INTLLocalNotificationIOS
	int RepeatType;//[Offset: 0x0, Size: 0x4]
	int FireTime;//[Offset: 0x4, Size: 0x4]
	int Badge;//[Offset: 0x8, Size: 0x4]
	FString AlertBody;//[Offset: 0x10, Size: 0x10]
	FString AlertAction;//[Offset: 0x20, Size: 0x10]
	<FString,FString> UserInfo;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: INTLLocalNotification
	int NotificationID;//[Offset: 0x0, Size: 0x4]
	int ActionType;//[Offset: 0x4, Size: 0x4]
	int SoundEnabled;//[Offset: 0x8, Size: 0x4]
	int Lights;//[Offset: 0xc, Size: 0x4]
	int Vibrate;//[Offset: 0x10, Size: 0x4]
	int FireTime;//[Offset: 0x14, Size: 0x4]
	FString Title;//[Offset: 0x18, Size: 0x10]
	FString Content;//[Offset: 0x28, Size: 0x10]
	FString TickerText;//[Offset: 0x38, Size: 0x10]
	FString ActionParameter;//[Offset: 0x48, Size: 0x10]
	FString RingUri;//[Offset: 0x58, Size: 0x10]
	FString SmallIcon;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: INTLUtility.BlueprintFunctionLibrary.Object
	static bool Regular(const FString Str, const FString Reg);// 0xc1d0c0
	static int RefreshCurToastCnt(int ChangeCnt);// 0xc1d030
	static int GetNewToastOrder();// 0xc1d000
	static void ForceCrash();// 0xc1cfe0

--------------------------------
Class: GauntletTestController.Object

--------------------------------
Class: GauntletTestControllerBootTest.GauntletTestController.Object

--------------------------------
Class: GauntletTestControllerErrorTest.GauntletTestController.Object

--------------------------------
Class: TSSSdkTicker.Object

--------------------------------
Class: TssSDKSettings.DeveloperSettings.Object
	UInt32Property GameID;//[Size: 0x4]
	FString AuthToken;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10]
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x197e4f0
	void OnMatchEnded(FString Match);// 0x197e4f0

--------------------------------
Class: SteamAuthComponentModuleInterface.HandlerComponentFactory.Object

--------------------------------
Class: IpConnection.NetConnection.Player.Object
	float SocketErrorDisconnectDelay;//[Offset: 0x1b40, Size: 0x4]

--------------------------------
Class: SteamNetConnection.IpConnection.NetConnection.Player.Object
	bool bIsPassthrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b90, Size: 0x1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x748, Size: 0x1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x748, Size: 0x1]
	UInt32Property MaxPortCountToTry;//[Size: 0x4]
	UInt32Property ServerDesiredSocketReceiveBufferBytes;//[Size: 0x4]
	UInt32Property ServerDesiredSocketSendBufferBytes;//[Size: 0x4]
	UInt32Property ClientDesiredSocketReceiveBufferBytes;//[Size: 0x4]
	UInt32Property ClientDesiredSocketSendBufferBytes;//[Size: 0x4]
	double MaxSecondsInReceive;//[Offset: 0x770, Size: 0x8]
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x778, Size: 0x4]
	float ResolutionConnectionTimeout;//[Offset: 0x77c, Size: 0x4]

--------------------------------
Class: SteamNetDriver.IpNetDriver.NetDriver.Object

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0xcdedc0
	static void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0xcdea60

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0xcdd7d0
	static AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0xcdd700

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0xcdf830

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0xcdd8a0

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0xcde0d0

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0xcde220

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0xcde2f0

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0xcde520

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static FString GetServerName(out const BlueprintSessionResult Result);// 0xcdf5d0
	static int GetPingInMs(out const BlueprintSessionResult Result);// 0xcdf3b0
	static int GetMaxPlayers(out const BlueprintSessionResult Result);// 0xcdf190
	static int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0xcdef70
	static FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0xcde6e0

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0xcde830

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0xcdda60

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0xcde040
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0xcddd70
	static InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0xcdd970

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0xcddc60

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0xcddb50

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0xcddf20

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0xcdde00

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0xce3540

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	static bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0xce4510

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0xce33a0

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	static LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0xce3470

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0xce3690

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x230, Size: 0x4]
	float BeaconConnectionTimeout;//[Offset: 0x234, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x258, Size: 0x8]
	NetConnection* BeaconConnection;//[Offset: 0x260, Size: 0x8]
	enum ConnectionState;//[Offset: 0x268, Size: 0x1]
	void ClientOnConnected();// 0xce3100

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x228, Size: 0x10]
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x238, Size: 0x8]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x240, Size: 0x10]

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x258, Size: 0x4]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x260, Size: 0x10]

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	FName VoiceSubsystemNameOverride;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10]
	FString Token;//[Offset: 0x10, Size: 0x10]
	FString Type;//[Offset: 0x20, Size: 0x10]
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x2e8, Size: 0x10]
	PartyReservation PendingReservation;//[Offset: 0x2f8, Size: 0x50]
	enum RequestType;//[Offset: 0x348, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1]
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0xce41b0
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0xce3d20
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0xce3a90
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0xce3930
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0xce3280
	void ClientSendReservationFull();// 0xce3240
	void ClientReservationResponse(byte ReservationResponse);// 0xce3140
	void ClientCancelReservationResponse(byte ReservationResponse);// 0xce3000

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4]
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x28]
	PlayerReservation[] PartyMembers;//[Offset: 0x30, Size: 0x10]
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueID;//[Offset: 0x0, Size: 0x28]
	FString ValidationStr;//[Offset: 0x28, Size: 0x10]
	FString Platform;//[Offset: 0x38, Size: 0x10]
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float ElapsedTime;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x250, Size: 0x8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x2bc, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x2c0, Size: 0x4]

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4]
	int MaxReservations;//[Offset: 0x34, Size: 0x4]
	int NumTeams;//[Offset: 0x38, Size: 0x4]
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4]
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8]
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4]
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	PartyReservation[] Reservations;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0xce3760

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0xce4440

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x2e8, Size: 0x10]
	SpectatorReservation PendingReservation;//[Offset: 0x2f8, Size: 0x78]
	enum RequestType;//[Offset: 0x370, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 0x1]
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0xce3fb0
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0xce3930
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0xce3310
	void ClientSendReservationFull();// 0xce3260
	void ClientReservationResponse(byte ReservationResponse);// 0xce31c0
	void ClientCancelReservationResponse(byte ReservationResponse);// 0xce3080

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x28]
	PlayerReservation Spectator;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x250, Size: 0x8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x2bc, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x2c0, Size: 0x4]

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4]
	int MaxReservations;//[Offset: 0x34, Size: 0x4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0xce3a40
	void ClientPing();// 0xce3120

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0xce5090
	static void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0xce4e60
	static void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0xce4cb0
	static void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0xce4b00

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x200, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x208, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x5a8, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x5b0, Size: 0x50]
	SoundClass* SoundClass;//[Offset: 0x600, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x608, Size: 0x8]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x610, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x618, Size: 0x10]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x628, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x638, Size: 0x10]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x648, Size: 0x1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x648, Size: 0x1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x64c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x650, Size: 0x4]
	delegate OnAudioEnvelopeValue;//[Offset: 0x658, Size: 0x10]
	SynthSound* Synth;//[Offset: 0x688, Size: 0x8]
	AudioComponent* AudioComponent;//[Offset: 0x690, Size: 0x8]
	void Stop();// 0x2a64bd0
	void Start();// 0x2a647c0
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x2a64740
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x2a642f0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x2a63a20
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x2a63990
	bool IsPlaying();// 0x2a62660

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x3c0, Size: 0x8]

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0xce5060

--------------------------------
Class: AccountErrorHandler.Object
	static bool IsAccountLinkingRequired();// 0xd03a00
	static int GetThirdPartyErrorCode(const enum InErrorEnum);// 0xd03980
	static FString GetAccountErrorMessage(const int InErrorCode, const enum InErrorType);// 0xd03860

--------------------------------
Class: INTLLoginWithEmailCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static INTLLoginWithEmailCallbackProxy* ConnectToINTLServiceWithEmail(Object* WorldContextObject, FString InEmail, FString InPassword);// 0xd03690

--------------------------------
Class: INTLLoginWithTokenCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static INTLLoginWithTokenCallbackProxy* ConnectToINTLServiceWithToken(Object* WorldContextObject);// 0xd037d0

--------------------------------
Class: INTLQueryEmailAvailabilityCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static INTLQueryEmailAvailabilityCallbackProxy* QueryEmailAvailabilityWithINTL(Object* WorldContextObject, FString InEmail);// 0xd03a20

--------------------------------
Class: INTLQueryUserNameAvailabilityCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static INTLQueryUserNameAvailabilityCallbackProxy* QueryUserNameAvailabilityWithINTL(Object* WorldContextObject, FString InUsername);// 0xd03b00

--------------------------------
Class: INTLRegisterAndLoginCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static INTLRegisterAndLoginCallbackProxy* RegisterAndLoginToINTL(Object* WorldContextObject, FString InEmail, FString InPassword, FString InUsername, FString InVerificationCode, int InRegionId, bool InReceiveNewsletterEmail, DateTime InBirthday);// 0xd03be0

--------------------------------
Class: INTLSendRegisterVerificationCodeCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	static INTLSendRegisterVerificationCodeCallbackProxy* SendRegisterVerificationCode(Object* WorldContextObject, FString InUsername);// 0xd03e80

--------------------------------
Class: ShOnlineServicesSettings.DeveloperSettings.Object
	FString AccountRecoveryUrlProd;//[Offset: 0x50, Size: 0x10]
	FString AccountRecoveryUrlUat;//[Offset: 0x60, Size: 0x10]
	FString AccountRecoveryUrlDev;//[Offset: 0x70, Size: 0x10]
	FString CdnBaseUrlDev;//[Offset: 0x80, Size: 0x10]
	FString CdnBaseUrlUat;//[Offset: 0x90, Size: 0x10]
	FString CdnBaseUrlProd;//[Offset: 0xa0, Size: 0x10]
	FString BaseUrlLocal;//[Offset: 0xb0, Size: 0x10]
	FString BaseUrlDev;//[Offset: 0xc0, Size: 0x10]
	FString BaseUrlMain;//[Offset: 0xd0, Size: 0x10]
	FString BaseUrlStaging;//[Offset: 0xe0, Size: 0x10]
	FString BaseUrlRelease;//[Offset: 0xf0, Size: 0x10]
	FString BaseUrlPs5Submission;//[Offset: 0x100, Size: 0x10]
	FString BaseUrlLive;//[Offset: 0x110, Size: 0x10]
	FString PushBaseUrlLocal;//[Offset: 0x120, Size: 0x10]
	FString PushBaseUrlDev;//[Offset: 0x130, Size: 0x10]
	FString PushBaseUrlMain;//[Offset: 0x140, Size: 0x10]
	FString PushBaseUrlStaging;//[Offset: 0x150, Size: 0x10]
	FString PushBaseUrlRelease;//[Offset: 0x160, Size: 0x10]
	FString PushBaseUrlPs5Submission;//[Offset: 0x170, Size: 0x10]
	FString PushBaseUrlLive;//[Offset: 0x180, Size: 0x10]
	FString OnlineEnvironment;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: ShPaymentSettings.DeveloperSettings.Object
	FString IdcInfo;//[Offset: 0x38, Size: 0x10]
	FString OfferId;//[Offset: 0x48, Size: 0x10]
	FString ZoneId;//[Offset: 0x58, Size: 0x10]
	FString GoodsZoneId;//[Offset: 0x68, Size: 0x10]
	FString ProvideType;//[Offset: 0x78, Size: 0x10]
	bool LogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	FString StoreServiceUri;//[Offset: 0x90, Size: 0x10]
	FString ClientId;//[Offset: 0xa0, Size: 0x10]
	FString ClientScope;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: ShStoreService.Object

--------------------------------
Class: AnimationBudgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void SetAnimationBudgetParameters(Object* WorldContextObject, out const AnimationBudgetAllocatorParameters InParameters);// 0xd0dc10
	static void EnableAnimationBudget(Object* WorldContextObject, bool bEnabled);// 0xd0db50

--------------------------------
Class: AnimationBudgetAllocatorParameters
	float BudgetInMs;//[Offset: 0x0, Size: 0x4]
	float MinQuality;//[Offset: 0x4, Size: 0x4]
	int MaxTickRate;//[Offset: 0x8, Size: 0x4]
	float WorkUnitSmoothingSpeed;//[Offset: 0xc, Size: 0x4]
	float AlwaysTickFalloffAggression;//[Offset: 0x10, Size: 0x4]
	float InterpolationFalloffAggression;//[Offset: 0x14, Size: 0x4]
	int InterpolationMaxRate;//[Offset: 0x18, Size: 0x4]
	int MaxInterpolatedComponents;//[Offset: 0x1c, Size: 0x4]
	float InterpolationTickMultiplier;//[Offset: 0x20, Size: 0x4]
	float InitialEstimatedWorkUnitTimeMs;//[Offset: 0x24, Size: 0x4]
	int MaxTickedOffsreenComponents;//[Offset: 0x28, Size: 0x4]
	int StateChangeThrottleInFrames;//[Offset: 0x2c, Size: 0x4]
	float BudgetFactorBeforeReducedWork;//[Offset: 0x30, Size: 0x4]
	float BudgetFactorBeforeReducedWorkEpsilon;//[Offset: 0x34, Size: 0x4]
	float BudgetPressureSmoothingSpeed;//[Offset: 0x38, Size: 0x4]
	int ReducedWorkThrottleMinInFrames;//[Offset: 0x3c, Size: 0x4]
	int ReducedWorkThrottleMaxInFrames;//[Offset: 0x40, Size: 0x4]
	float BudgetFactorBeforeAggressiveReducedWork;//[Offset: 0x44, Size: 0x4]
	int ReducedWorkThrottleMaxPerFrame;//[Offset: 0x48, Size: 0x4]
	float BudgetPressureBeforeEmergencyReducedWork;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FSR2Settings.DeveloperSettings.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool AutoExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool EnabledInEditorViewport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool UseSSRExperimentalDenoiser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool UseNativeDX12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool UseNativeVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	enum QualityMode;//[Offset: 0x40, Size: 0x4]
	enum HistoryFormat;//[Offset: 0x44, Size: 0x4]
	enum DeDither;//[Offset: 0x48, Size: 0x4]
	float Sharpness;//[Offset: 0x4c, Size: 0x4]
	bool AdjustMipBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool ReactiveMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool ForceVertexDeformationOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	float ReflectionScale;//[Offset: 0x54, Size: 0x4]
	float ReflectionLuminanceBias;//[Offset: 0x58, Size: 0x4]
	float RoughnessScale;//[Offset: 0x5c, Size: 0x4]
	float RoughnessBias;//[Offset: 0x60, Size: 0x4]
	float RoughnessMaxDistance;//[Offset: 0x64, Size: 0x4]
	bool ReactiveMaskRoughnessForceMaxDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float TranslucencyBias;//[Offset: 0x6c, Size: 0x4]
	float TranslucencyLuminanceBias;//[Offset: 0x70, Size: 0x4]
	float TranslucencyMaxDistance;//[Offset: 0x74, Size: 0x4]
	float PreDOFTranslucencyScale;//[Offset: 0x78, Size: 0x4]
	bool PreDOFTranslucencyMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	byte ReactiveShadingModelID;//[Offset: 0x7d, Size: 0x1]
	float ForceReactiveMaterialValue;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: DLSSOverrideSettings.Object
	enum EnableDLSSInEditorViewportsOverride;//[Offset: 0x28, Size: 0x1]
	enum EnableScreenpercentageManipulationInDLSSEditorViewportsOverride;//[Offset: 0x29, Size: 0x1]
	enum EnableDLSSInPlayInEditorViewportsOverride;//[Offset: 0x2a, Size: 0x1]
	bool bShowDLSSIncompatiblePluginsToolsWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	enum ShowDLSSSDebugOnScreenMessages;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: DLSSSettings.Object
	bool bEnableDLSSD3D12;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableDLSSD3D11;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnableDLSSVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bEnableDLSSInEditorViewports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bEnableScreenpercentageManipulationInDLSSEditorViewports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bEnableDLSSInPlayInEditorViewports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bShowDLSSSDebugOnScreenMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	FString GenericDLSSBinaryPath;//[Offset: 0x30, Size: 0x10]
	bool bGenericDLSSBinaryExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	UInt32Property NVIDIANGXApplicationId;//[Size: 0x4]
	FString CustomDLSSBinaryPath;//[Offset: 0x48, Size: 0x10]
	bool bCustomDLSSBinaryExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: DLSSLibrary.BlueprintFunctionLibrary.Object
	static void SetDLSSSharpness(float Sharpness);// 0xd426e0
	static void SetDLSSMode(enum DLSSMode);// 0xd42670
	static enum QueryDLSSSupport();// 0xd42640
	static bool IsDLSSSupported();// 0xd42610
	static bool IsDLSSModeSupported(enum DLSSMode);// 0xd42590
	static enum[] GetSupportedDLSSModes();// 0xd42510
	static float GetDLSSSharpness();// 0xd424b0
	static void GetDLSSScreenPercentageRange(out float MinScreenPercentage, out float MaxScreenPercentage);// 0xd423d0
	static void GetDLSSModeInformation(enum DLSSMode, Vector2D ScreenResolution, out bool bIsSupported, out float OptimalScreenPercentage, out bool bIsFixedScreenPercentage, out float MinScreenPercentage, out float MaxScreenPercentage, out float OptimalSharpness);// 0xd42130
	static enum GetDLSSMode();// 0xd42100
	static void GetDLSSMinimumDriverVersion(out int MinDriverVersionMajor, out int MinDriverVersionMinor);// 0xd42020
	static enum GetDefaultDLSSMode();// 0xd424e0

--------------------------------
Class: XeSSSettings.DeveloperSettings.Object
	bool bEnableXeSSInEditorViewports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FString DebugDataDumpPath;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: XeSSBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void SetXeSSQualityMode(enum QualityMode);// 0xd4f330
	static bool IsXeSSSupported();// 0xd4f300
	static enum GetXeSSQualityMode();// 0xd4f2d0
	static enum[] GetSupportedXeSSQualityModes();// 0xd4f250
	static enum GetDefaultXeSSQualityMode(IntPoint ScreenResolution);// 0xd4f1d0

--------------------------------
Class: EOSSdkSettings.DeveloperSettings.Object
	FString ProductName;//[Offset: 0x38, Size: 0x10]
	FString ProductVersion;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: EOSPlatformClientSettings.DeveloperSettings.Object
	FString ClientId;//[Offset: 0x38, Size: 0x10]
	FString ClientSecret;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: EOSPlatformSettings.DeveloperSettings.Object
	FString DeploymentId;//[Offset: 0x38, Size: 0x10]
	FString EncryptionKey;//[Offset: 0x48, Size: 0x10]
	FString ProductId;//[Offset: 0x58, Size: 0x10]
	FString SandboxId;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: TigerOnlineSubsystemSettings.DeveloperSettings.Object
	FString SessionServiceUri;//[Offset: 0x38, Size: 0x10]
	int MaxRequestRetries;//[Offset: 0x48, Size: 0x4]
	int MatchmakingTimeoutSeconds;//[Offset: 0x4c, Size: 0x4]
	FString DsVersion;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int AdditionalSlotIndex;//[Offset: 0x84, Size: 0x4]
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18]

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x4b8, Size: 0x8]

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x478, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x480, Size: 0x8]
	float PlayRate;//[Offset: 0x488, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1]
	float AccumulatedTime;//[Offset: 0x490, Size: 0x4]
	int CachedFrameIndex;//[Offset: 0x494, Size: 0x4]
	LinearColor SpriteColor;//[Offset: 0x498, Size: 0x10]
	BodySetup* CachedBodySetup;//[Offset: 0x4a8, Size: 0x8]
	delegate OnFinishedPlaying;//[Offset: 0x4b0, Size: 0x10]
	void Stop();// 0xd8b810
	void SetSpriteColor(LinearColor NewColor);// 0xd8b3c0
	void SetPlayRate(float NewRate);// 0xd8b190
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0xd8b2f0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0xd8b210
	void SetNewTime(float NewTime);// 0xd8b110
	void SetLooping(bool bNewLooping);// 0xd8b080
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0xd8acd0
	void ReverseFromEnd();// 0xd8abd0
	void Reverse();// 0xd8abb0
	void PlayFromStart();// 0xd8aa00
	void Play();// 0xd8a9e0
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0xd8a920
	bool IsReversing();// 0xd8a4c0
	bool IsPlaying();// 0xd8a490
	bool IsLooping();// 0xd8a460
	LinearColor GetSpriteColor();// 0xd89c70
	float GetPlayRate();// 0xd89a60
	int GetPlaybackPositionInFrames();// 0xd89ac0
	float GetPlaybackPosition();// 0xd89a90
	int GetFlipbookLengthInFrames();// 0xd895a0
	float GetFlipbookLength();// 0xd89570
	float GetFlipbookFramerate();// 0xd89540
	PaperFlipbook* GetFlipbook();// 0xd89510

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4]
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10]
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8]
	byte CollisionSource;//[Offset: 0x48, Size: 0x1]
	bool IsValidKeyFrameIndex(int Index);// 0xd8a4f0
	float GetTotalDuration();// 0xd8a430
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0xd89b90
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0xd89af0
	int GetNumKeyFrames();// 0xd89a40
	int GetNumFrames();// 0xd89a10
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0xd89760

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8]
	int FrameRun;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x478, Size: 0x10]
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x488, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0xd8b950
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0xd8b830
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0xd8b780
	bool RemoveInstance(int InstanceIndex);// 0xd8aa40
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0xd89600
	int GetInstanceCount();// 0xd895d0
	void ClearInstances();// 0xd89320
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0xd88ef0

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
	PaperSprite* SourceSprite;//[Offset: 0x40, Size: 0x8]
	Color VertexColor;//[Offset: 0x48, Size: 0x4]
	int MaterialIndex;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x478, Size: 0x8]
	MaterialInterface* MaterialOverride;//[Offset: 0x480, Size: 0x8]
	LinearColor SpriteColor;//[Offset: 0x488, Size: 0x10]
	void SetSpriteColor(LinearColor NewColor);// 0xd8b450
	bool SetSprite(PaperSprite* NewSprite);// 0xd8acd0
	PaperSprite* GetSprite();// 0xd89510

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0xd8a590

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x228, Size: 0x8]
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x230, Size: 0x8]
	PaperTerrainComponent* RenderComponent;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x450, Size: 0x8]
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x460, Size: 0x8]
	int RandomSeed;//[Offset: 0x468, Size: 0x4]
	float SegmentOverlapAmount;//[Offset: 0x46c, Size: 0x4]
	LinearColor TerrainColor;//[Offset: 0x470, Size: 0x10]
	int ReparamStepsPerSegment;//[Offset: 0x480, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x484, Size: 0x1]
	float CollisionThickness;//[Offset: 0x488, Size: 0x4]
	BodySetup* CachedBodySetup;//[Offset: 0x490, Size: 0x8]
	void SetTerrainColor(LinearColor NewColor);// 0xd8b4e0

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10]
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8]
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10]
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8]
	float MinimumAngle;//[Offset: 0x20, Size: 0x4]
	float MaximumAngle;//[Offset: 0x24, Size: 0x4]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4]
	int DrawOrder;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18]
	int LayerWidth;//[Offset: 0x40, Size: 0x4]
	int LayerHeight;//[Offset: 0x44, Size: 0x4]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4]
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4]
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10]
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4]
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10]
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8]
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8]
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8]
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10]
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8]
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8]
	int WidthInTiles;//[Offset: 0x68, Size: 0x4]
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4]
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4]
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10]
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10]
	int TileWidth;//[Offset: 0x98, Size: 0x4]
	int TileHeight;//[Offset: 0x9c, Size: 0x4]
	int Margin;//[Offset: 0xa0, Size: 0x4]
	int Spacing;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4]
	int Top;//[Offset: 0x4, Size: 0x4]
	int Right;//[Offset: 0x8, Size: 0x4]
	int Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8]
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30]
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10]
	byte GeometryType;//[Offset: 0x10, Size: 0x1]
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4]
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4]
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4]
	float DetailAmount;//[Offset: 0x24, Size: 0x4]
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1]
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10]
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x8]
	Vector2D BoxPosition;//[Offset: 0x20, Size: 0x8]
	float Rotation;//[Offset: 0x28, Size: 0x4]
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10]
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4]
	int MapHeight;//[Offset: 0x2c, Size: 0x4]
	int TileWidth;//[Offset: 0x30, Size: 0x4]
	int TileHeight;//[Offset: 0x34, Size: 0x4]
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4]
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4]
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4]
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4]
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28]
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8]
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10]
	float CollisionThickness;//[Offset: 0x88, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1]
	int HexSideLength;//[Offset: 0x90, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8]
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x478, Size: 0x4]
	int MapHeight;//[Offset: 0x47c, Size: 0x4]
	int TileWidth;//[Offset: 0x480, Size: 0x4]
	int TileHeight;//[Offset: 0x484, Size: 0x4]
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x488, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x490, Size: 0x8]
	PaperTileLayer*[] TileLayers;//[Offset: 0x498, Size: 0x10]
	LinearColor TileMapColor;//[Offset: 0x4a8, Size: 0x10]
	int UseSingleLayerIndex;//[Offset: 0x4b8, Size: 0x4]
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	PaperTileMap* TileMap;//[Offset: 0x4c0, Size: 0x8]
	void SetTileMapColor(LinearColor NewColor);// 0xd8b6f0
	bool SetTileMap(PaperTileMap* NewTileMap);// 0xd8acd0
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0xd8b570
	void SetLayerColor(LinearColor NewColor, int Layer);// 0xd8afb0
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0xd8ad70
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0xd8abf0
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0xd8aae0
	void RebuildCollision();// 0xd8aa20
	bool OwnsTileMap();// 0xd8a9b0
	void MakeTileMapEditable();// 0xd8a900
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0xd8a0e0
	LinearColor GetTileMapColor();// 0xd8a0a0
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0xd89f30
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0xd89dc0
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0xd89ca0
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0xd898d0
	LinearColor GetLayerColor(int Layer);// 0xd89830
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0xd89340
	PaperTileLayer* AddNewLayer();// 0xd890c0

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	static PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0xd8a730
	static FName GetTileUserData(PaperTileInfo Tile);// 0xd8a390
	static Transform GetTileTransform(PaperTileInfo Tile);// 0xd8a2b0
	static void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0xd890f0

--------------------------------
Class: LightPropagationVolumeBlendable.Object
	LightPropagationVolumeSettings Settings;//[Offset: 0x30, Size: 0x40]
	float BlendWeight;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: LightPropagationVolumeSettings
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	float LPVIntensity;//[Offset: 0x4, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x8, Size: 0x4]
	float LPVSize;//[Offset: 0xc, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x10, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x14, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x18, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x1c, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x20, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x24, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x28, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x2c, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x30, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x34, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x38, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x2b8, Size: 0x8]
	float PermutationTimeOffset;//[Offset: 0x2c0, Size: 0x4]
	float PlayRate;//[Offset: 0x2c4, Size: 0x4]
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	AnimSharingInstance* Instance;//[Offset: 0x2d0, Size: 0x8]
	void GetInstancedActors(out Actor*[] Actors);// 0xd94cd0

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10]
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8]
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10]
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8]
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28]
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0xd94d80
	Enum* GetAnimationStateEnum();// 0xd94ca0

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x2b8, Size: 0x8]
	SkeletalMeshComponent* ToComponent;//[Offset: 0x2c0, Size: 0x8]
	float BlendTime;//[Offset: 0x2c8, Size: 0x4]
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* AdditiveAnimation;//[Offset: 0x2c0, Size: 0x8]
	float Alpha;//[Offset: 0x2c8, Size: 0x4]
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10]
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10]
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0xd94f40
	static AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0xd94c10
	static bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0xd94b40
	static bool AnimationSharingEnabled();// 0xd94b10

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10]
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8]
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8]
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8]
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8]
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1]
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10]
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	float BlendTime;//[Offset: 0x1c, Size: 0x4]
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	byte NextState;//[Offset: 0x22, Size: 0x1]
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4]
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4]
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8]
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8]
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4]
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1]
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4]
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4]
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MyPluginObject.Object
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MyPluginStruct
	FString TestString;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object
	FName CurveSourceBindingName;//[Offset: 0x868, Size: 0x8]
	float CurveSyncOffset;//[Offset: 0x870, Size: 0x4]

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object
	<FName> Layers;//[Offset: 0x30, Size: 0x50]
	<FName> Tags;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: DatasmithAdditionalData.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	enum LightType;//[Offset: 0x228, Size: 0x1]
	enum LightShape;//[Offset: 0x229, Size: 0x1]
	Vector2D Dimensions;//[Offset: 0x22c, Size: 0x8]
	float Intensity;//[Offset: 0x234, Size: 0x4]
	enum IntensityUnits;//[Offset: 0x238, Size: 0x1]
	LinearColor Color;//[Offset: 0x23c, Size: 0x10]
	float Temperature;//[Offset: 0x24c, Size: 0x4]
	TextureLightProfile* IESTexture;//[Offset: 0x250, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x25c, Size: 0x4]
	Rotator Rotation;//[Offset: 0x260, Size: 0xc]
	float SourceRadius;//[Offset: 0x26c, Size: 0x4]
	float SourceLength;//[Offset: 0x270, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x274, Size: 0x4]
	float SpotlightInnerAngle;//[Offset: 0x278, Size: 0x4]
	float SpotlightOuterAngle;//[Offset: 0x27c, Size: 0x4]

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object
	enum LightType;//[Offset: 0x30, Size: 0x1]
	enum LightShape;//[Offset: 0x31, Size: 0x1]
	Vector2D Dimensions;//[Offset: 0x34, Size: 0x8]
	LinearColor Color;//[Offset: 0x3c, Size: 0x10]
	float Intensity;//[Offset: 0x4c, Size: 0x4]
	enum IntensityUnits;//[Offset: 0x50, Size: 0x1]
	float Temperature;//[Offset: 0x54, Size: 0x4]
	TextureLightProfile* IESTexture;//[Offset: 0x58, Size: 0x28]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x84, Size: 0x4]
	Rotator Rotation;//[Offset: 0x88, Size: 0xc]
	float SourceRadius;//[Offset: 0x94, Size: 0x4]
	float SourceLength;//[Offset: 0x98, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10]
	float Version;//[Offset: 0x38, Size: 0x4]
	FString Author;//[Offset: 0x40, Size: 0x10]
	FString License;//[Offset: 0x50, Size: 0x10]
	FString Source;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString TexturesDir;//[Offset: 0x30, Size: 0x10]
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1]
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FString VarPath;//[Offset: 0x50, Size: 0x10]
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString PosPath;//[Offset: 0x68, Size: 0x10]
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString TmlPath;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	FString MatsPath;//[Offset: 0x50, Size: 0x10]
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	FString VarPath;//[Offset: 0x68, Size: 0x10]
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString LightInfoPath;//[Offset: 0x80, Size: 0x10]
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	FString ClipInfoPath;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x30, Size: 0x8]
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x38, Size: 0x4]
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x3c, Size: 0x8]
	float CurrentFocalLength;//[Offset: 0x44, Size: 0x4]
	float CurrentAperture;//[Offset: 0x48, Size: 0x4]
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40]

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DatasmithCameraLensSettingsTemplate
	float MaxFStop;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	float WhiteTemp;//[Offset: 0x8, Size: 0x4]
	float VignetteIntensity;//[Offset: 0xc, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x10, Size: 0x10]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10]
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1]
	float CameraISO;//[Offset: 0x34, Size: 0x4]
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0xda0560
	static void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0xda03a0
	static DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0xda0310

--------------------------------
Class: DatasmithCustomActionBase.Object

--------------------------------
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object
	int SortOrder;//[Offset: 0x30, Size: 0x4]
	Vector DecalSize;//[Offset: 0x34, Size: 0xc]
	MaterialInterface* Material;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x228, Size: 0x10]
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0xda0670

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x1b0, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10]
	void RemoveMetaDataByClass(class Object InClass);// 0x2b51490
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x2b50da0
	Object* FindMetaDataByClass(class Object InClass);// 0x2b50da0
	Object* CopyMetaData(Object* InMetaData);// 0x2b50da0

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4]
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4]
	float NormalTolerance;//[Offset: 0x8, Size: 0x4]
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1]
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1]
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1]
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1]
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1]
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1]
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1]
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1]
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x34, Size: 0x14]
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x48, Size: 0x2]
	FString Filename;//[Offset: 0x50, Size: 0x10]
	FString FilePath;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: DatasmithImportBaseOptions
	enum SceneHandling;//[Offset: 0x0, Size: 0x1]
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8]
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DatasmithAssetImportOptions
	FName PackagePath;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DatasmithStaticMeshImportOptions
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1]
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: DatasmithReimportOptions
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8]
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 0x1]
	float Intensity;//[Offset: 0x38, Size: 0x4]
	float Temperature;//[Offset: 0x3c, Size: 0x4]
	float IESBrightnessScale;//[Offset: 0x40, Size: 0x4]
	LinearColor LightColor;//[Offset: 0x44, Size: 0x10]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x58, Size: 0x8]
	TextureLightProfile* IESTexture;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28]
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50]
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50]
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50]
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: DatasmithStaticParameterSetTemplate
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object
	enum IntensityUnits;//[Offset: 0x30, Size: 0x1]
	float SourceRadius;//[Offset: 0x34, Size: 0x4]
	float SourceLength;//[Offset: 0x38, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: DatasmithScene.Object

--------------------------------
Class: DatasmithSceneActor.Actor.Object
	DatasmithScene* Scene;//[Offset: 0x228, Size: 0x8]
	<FName,Actor*> RelatedActors;//[Offset: 0x230, Size: 0x50]

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	byte Mobility;//[Offset: 0x60, Size: 0x1]
	SceneComponent* AttachParent;//[Offset: 0x68, Size: 0x28]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	<FName> Tags;//[Offset: 0x98, Size: 0x50]

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object
	byte SourceType;//[Offset: 0x30, Size: 0x1]
	int CubemapResolution;//[Offset: 0x34, Size: 0x4]
	TextureCube* Cubemap;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object
	float InnerConeAngle;//[Offset: 0x30, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50]
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4]
	int LightMapResolution;//[Offset: 0x84, Size: 0x4]
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10]
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate
	<Map_Key(UInt32Property),DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: DatasmithMeshSectionInfoTemplate
	int MaterialIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4]
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4]
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DatasmithStaticMaterialTemplate
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LevelVariantSets.Object
	class Object* DirectorClass;//[Offset: 0x28, Size: 0x8]
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10]
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0xdaf2d0
	VariantSet* GetVariantSet(int VariantSetIndex);// 0xdaf230
	int GetNumVariantSets();// 0xdaee20

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18]
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10]
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8]
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0xdafe70
	void SetThumbnailFromFile(FString FilePath);// 0xdafcf0
	void SetThumbnailFromEditorViewport();// 0xb7a5a0
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0xdafa00
	void SetDisplayText(out const FText NewDisplayText);// 0xdaf6a0
	Variant* GetVariantByName(FString VariantName);// 0xdaf130
	Variant* GetVariant(int VariantIndex);// 0xdaf090
	Texture2D* GetThumbnail();// 0xdaf060
	LevelVariantSets* GetParent();// 0xdaef30
	int GetNumVariants();// 0xdaee50
	FText GetDisplayText();// 0xdaec40

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10]
	FText DisplayText;//[Offset: 0x38, Size: 0x18]
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10]
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8]
	void SwitchOn();// 0xdaff00
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0xdafde0
	void SetThumbnailFromFile(FString FilePath);// 0xdafc00
	void SetThumbnailFromEditorViewport();// 0xb7a5a0
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0xdaf800
	void SetDisplayText(out const FText NewDisplayText);// 0xdaf5d0
	void SetDependency(int Index, out VariantDependency Dependency);// 0xdaf4c0
	bool IsActive();// 0xdaf400
	Texture2D* GetThumbnail();// 0xdaf030
	VariantSet* GetParent();// 0xdaef00
	int GetNumDependencies();// 0xdaedf0
	int GetNumActors();// 0xdaedc0
	FText GetDisplayText();// 0xdaeba0
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0xdaea90
	VariantDependency GetDependency(int Index);// 0xdae9f0
	Actor* GetActor(int ActorIndex);// 0xdae950
	void DeleteDependency(int Index);// 0xdae8c0
	int AddDependency(out VariantDependency Dependency);// 0xdae7f0

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28]
	Variant* Variant;//[Offset: 0x28, Size: 0x28]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18]
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c]
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10]
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10]
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10]
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10]
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10]
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8]
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50]
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	class Object* LeafPropertyClass;//[Offset: 0x128, Size: 0x8]
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10]
	enum PropCategory;//[Offset: 0x148, Size: 0x1]
	bool HasRecordedData();// 0xdaf3d0
	FText GetPropertyTooltip();// 0xdaef60
	FString GetFullDisplayString();// 0xdaece0

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10]
	int PropertyIndex;//[Offset: 0x10, Size: 0x4]
	FString ComponentName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x228, Size: 0x18]
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0xdafff0
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0xdaff20
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0xdaf770
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0xdaed20

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object

--------------------------------
Class: PropertyValueOption.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: SwitchActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x240, Size: 0x8]
	int LastSelectedOption;//[Offset: 0x248, Size: 0x4]
	void SelectOption(int OptionIndex);// 0xdaf430
	int GetSelectedOption();// 0xdaf000
	Actor*[] GetOptions();// 0xdaee80

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10]
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10]
	int StartFrame;//[Offset: 0x60, Size: 0x4]
	int EndFrame;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x228, Size: 0x8]
	GeometryCacheComponent* GetGeometryCacheComponent();// 0xdc18e0

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x478, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	float StartTimeOffset;//[Offset: 0x484, Size: 0x4]
	float PlayBackSpeed;//[Offset: 0x488, Size: 0x4]
	int NumTracks;//[Offset: 0x48c, Size: 0x4]
	float ElapsedTime;//[Offset: 0x490, Size: 0x4]
	float Duration;//[Offset: 0x4c4, Size: 0x4]
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0xdc1f50
	void Stop();// 0xdc1f30
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0xdc1eb0
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0xdc1e30
	void SetLooping(const bool bNewLooping);// 0xdc1ba0
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0xdc1b00
	void PlayReversedFromEnd();// 0xdc1ae0
	void PlayReversed();// 0xdc1ac0
	void PlayFromStart();// 0xdc1aa0
	void Play();// 0xdc1a80
	void Pause();// 0xdc1a60
	bool IsPlayingReversed();// 0xdc1a30
	bool IsPlaying();// 0xdc1a00
	bool IsLooping();// 0xdc19d0
	float GetStartTimeOffset();// 0xdc19a0
	float GetPlaybackSpeed();// 0xdc1970
	float GetPlaybackDirection();// 0xdc1940
	int GetNumberOfFrames();// 0xdc1910
	float GetDuration();// 0xdc18b0
	float GetAnimationTime();// 0xdc1880

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object
	int DummyProperty;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	UInt32Property NumMeshSamples;//[Size: 0x4]
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0xdc1630

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8]
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0xdc1c30

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0xdc1c30

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCacheParams Params;//[Offset: 0xe8, Size: 0x40]

--------------------------------
Class: MovieSceneGeometryCacheParams
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4]
	float PlayRate;//[Offset: 0x14, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float StartOffset;//[Offset: 0x1c, Size: 0x4]
	float EndOffset;//[Offset: 0x20, Size: 0x4]
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0xdc8a60

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object
	enum MassMode;//[Offset: 0x28, Size: 0x1]
	float UniformMass;//[Offset: 0x2c, Size: 0x4]
	float TotalMass;//[Offset: 0x30, Size: 0x4]
	float Density;//[Offset: 0x34, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x38, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x3c, Size: 0x4]
	float BendingStiffness;//[Offset: 0x40, Size: 0x4]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float AreaStiffness;//[Offset: 0x48, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x4c, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x50, Size: 0x4]
	float LimitScale;//[Offset: 0x54, Size: 0x4]
	enum TetherMode;//[Offset: 0x58, Size: 0x1]
	bool bUseGeodesicDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	float ShapeTargetStiffness;//[Offset: 0x5c, Size: 0x4]
	float CollisionThickness;//[Offset: 0x60, Size: 0x4]
	float FrictionCoefficient;//[Offset: 0x64, Size: 0x4]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float SelfCollisionThickness;//[Offset: 0x6c, Size: 0x4]
	bool bUseLegacyBackstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float DampingCoefficient;//[Offset: 0x74, Size: 0x4]
	bool bUsePointBasedWindModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float DragCoefficient;//[Offset: 0x7c, Size: 0x4]
	float LiftCoefficient;//[Offset: 0x80, Size: 0x4]
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	float GravityScale;//[Offset: 0x88, Size: 0x4]
	Vector Gravity;//[Offset: 0x8c, Size: 0xc]
	float AnimDriveSpringStiffness;//[Offset: 0x98, Size: 0x4]
	Vector LinearVelocityScale;//[Offset: 0x9c, Size: 0xc]
	float AngularVelocityScale;//[Offset: 0xa8, Size: 0x4]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothSharedSimConfig.ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object
	int IterationCount;//[Offset: 0x28, Size: 0x4]
	int SubdivisionCount;//[Offset: 0x2c, Size: 0x4]
	float SelfCollisionThickness;//[Offset: 0x30, Size: 0x4]
	float CollisionThickness;//[Offset: 0x34, Size: 0x4]
	bool bUseDampingOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Damping;//[Offset: 0x3c, Size: 0x4]
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float GravityScale;//[Offset: 0x44, Size: 0x4]
	Vector Gravity;//[Offset: 0x48, Size: 0xc]
	bool bUseLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bUseXPBDConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: ChaosClothingSimulationFactory.ClothingSimulationFactory.Object

--------------------------------
Class: ChaosClothingSimulationInteractor.ClothingSimulationInteractor.Object

--------------------------------
Class: EditableMeshAdapter.Object

--------------------------------
Class: EditableGeometryCollectionAdapter.EditableMeshAdapter.Object
	GeometryCollection* GeometryCollection;//[Offset: 0x28, Size: 0x8]
	GeometryCollection* OriginalGeometryCollection;//[Offset: 0x30, Size: 0x8]
	int GeometryCollectionLODIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GeometryCollection.Object
	GeometryCollectionSource[] GeometrySource;//[Offset: 0x30, Size: 0x10]
	MaterialInterface*[] Materials;//[Offset: 0x40, Size: 0x10]
	enum CollisionType;//[Offset: 0x50, Size: 0x1]
	enum ImplicitType;//[Offset: 0x51, Size: 0x1]
	int MinLevelSetResolution;//[Offset: 0x54, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0x58, Size: 0x4]
	int MinClusterLevelSetResolution;//[Offset: 0x5c, Size: 0x4]
	int MaxClusterLevelSetResolution;//[Offset: 0x60, Size: 0x4]
	float CollisionObjectReductionPercentage;//[Offset: 0x64, Size: 0x4]
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float Mass;//[Offset: 0x6c, Size: 0x4]
	float MinimumMassClamp;//[Offset: 0x70, Size: 0x4]
	float CollisionParticlesFraction;//[Offset: 0x74, Size: 0x4]
	int MaximumCollisionParticles;//[Offset: 0x78, Size: 0x4]
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0x80, Size: 0x10]
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0x98, Size: 0x10]
	Guid PersistentGuid;//[Offset: 0xa8, Size: 0x10]
	Guid StateGuid;//[Offset: 0xb8, Size: 0x10]
	int BoneSelectedMaterialIndex;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: GeometryCollectionSource
	SoftObjectPath SourceGeometryObject;//[Offset: 0x0, Size: 0x18]
	Transform LocalTransform;//[Offset: 0x20, Size: 0x30]
	MaterialInterface*[] SourceMaterial;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4]
	enum CollisionType;//[Offset: 0x4, Size: 0x1]
	enum ImplicitType;//[Offset: 0x5, Size: 0x1]
	int MinLevelSetResolution;//[Offset: 0x8, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0xc, Size: 0x4]
	int MinClusterLevelSetResolution;//[Offset: 0x10, Size: 0x4]
	int MaxClusterLevelSetResolution;//[Offset: 0x14, Size: 0x4]
	int CollisionObjectReductionPercentage;//[Offset: 0x18, Size: 0x4]
	float CollisionParticlesFraction;//[Offset: 0x1c, Size: 0x4]
	int MaximumCollisionParticles;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: EditableMesh.Object
	EditableMeshAdapter*[] Adapters;//[Offset: 0x3b8, Size: 0x10]
	int TextureCoordinateCount;//[Offset: 0x3d0, Size: 0x4]
	int PendingCompactCounter;//[Offset: 0x51c, Size: 0x4]
	int SubdivisionCount;//[Offset: 0x520, Size: 0x4]
	void WeldVertices(out const VertexID[] VertexIDs, out VertexID OutNewVertexID);// 0xe66d00
	void TryToRemoveVertex(const VertexID VertexID, out bool bOutWasVertexRemoved, out EdgeID OutNewEdgeID);// 0xe66bd0
	void TryToRemovePolygonEdge(const EdgeID EdgeID, out bool bOutWasEdgeRemoved, out PolygonID OutNewPolygonID);// 0xe66aa0
	void TriangulatePolygons(out const PolygonID[] PolygonIDs, out PolygonID[] OutNewTrianglePolygons);// 0xe66980
	void TessellatePolygons(out const PolygonID[] PolygonIDs, const enum TriangleTessellationMode, out PolygonID[] OutNewPolygonIDs);// 0xe66820
	void StartModification(const enum MeshModificationType, const enum MeshTopologyChange);// 0xe66750
	void SplitPolygons(out const PolygonToSplit[] PolygonsToSplit, out EdgeID[] OutNewEdgeIDs);// 0xe66610
	void SplitPolygonalMesh(out const Plane InPlane, out PolygonID[] PolygonIDs1, out PolygonID[] PolygonIDs2, out EdgeID[] BoundaryIDs);// 0xe66440
	void SplitEdge(const EdgeID EdgeID, out const float[] Splits, out VertexID[] OutNewVertexIDs);// 0xe662e0
	void SetVerticesCornerSharpness(out const VertexID[] VertexIDs, out const float[] VerticesNewCornerSharpness);// 0xe661c0
	void SetVerticesAttributes(out const AttributesForVertex[] AttributesForVertices);// 0xe660f0
	void SetVertexInstancesAttributes(out const AttributesForVertexInstance[] AttributesForVertexInstances);// 0xe66020
	void SetTextureCoordinateCount(const int NumTexCoords);// 0xe65f90
	void SetSubdivisionCount(const int NewSubdivisionCount);// 0xe65f00
	void SetPolygonsVertexAttributes(out const VertexAttributesForPolygon[] VertexAttributesForPolygons);// 0xe65d70
	void SetEdgesHardnessAutomatically(out const EdgeID[] EdgeIDs, const float MaxDotProductForSoftEdge);// 0xe65c70
	void SetEdgesHardness(out const EdgeID[] EdgeIDs, out const bool[] EdgesNewIsHard);// 0xe65b50
	void SetEdgesCreaseSharpness(out const EdgeID[] EdgeIDs, out const float[] EdgesNewCreaseSharpness);// 0xe65a30
	void SetEdgesAttributes(out const AttributesForEdge[] AttributesForEdges);// 0xe65960
	void SetAllowUndo(const bool bInAllowUndo);// 0xe658d0
	void SetAllowSpatialDatabase(const bool bInAllowSpatialDatabase);// 0xe65840
	void SetAllowCompact(const bool bInAllowCompact);// 0xe657b0
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(out const Plane InPlane, out PolygonID[] OutPolygons);// 0xe656b0
	void SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(const Vector LineSegmentStart, const Vector LineSegmentEnd, out PolygonID[] OutPolygons);// 0xe65560
	void SearchSpatialDatabaseForPolygonsInVolume(out const Plane[] Planes, out PolygonID[] OutPolygons);// 0xe65440
	EditableMesh* RevertInstance();// 0xe65410
	void Revert();// 0xb7a5a0
	void RebuildRenderMesh();// 0xe653f0
	void QuadrangulateMesh(out PolygonID[] OutNewPolygonIDs);// 0xe65340
	void PropagateInstanceChanges();// 0xb7a5a0
	void MoveVertices(out const VertexToMove[] VerticesToMove);// 0xe65290
	static VertexID MakeVertexID(const int VertexIndex);// 0xe65210
	static PolygonID MakePolygonID(const int PolygonIndex);// 0xe65210
	static PolygonGroupID MakePolygonGroupID(const int PolygonGroupIndex);// 0xe65210
	static EdgeID MakeEdgeID(const int EdgeIndex);// 0xe65210
	bool IsValidVertex(const VertexID VertexID);// 0xe65180
	bool IsValidPolygonGroup(const PolygonGroupID PolygonGroupID);// 0xe650f0
	bool IsValidPolygon(const PolygonID PolygonID);// 0xe65060
	bool IsValidEdge(const EdgeID EdgeID);// 0xe64fd0
	bool IsUndoAllowed();// 0xe64fb0
	bool IsSpatialDatabaseAllowed();// 0xe64f90
	bool IsPreviewingSubdivisions();// 0xe64f60
	bool IsOrphanedVertex(const VertexID VertexID);// 0xe64ed0
	bool IsCompactAllowed();// 0xe64eb0
	bool IsCommittedAsInstance();// 0xe64e80
	bool IsCommitted();// 0xe64e50
	bool IsBeingModified();// 0xe64e20
	static VertexID InvalidVertexID();// 0xe64e00
	static PolygonID InvalidPolygonID();// 0xe64de0
	static PolygonGroupID InvalidPolygonGroupID();// 0xe64dc0
	static EdgeID InvalidEdgeID();// 0xe64da0
	void InsetPolygons(out const PolygonID[] PolygonIDs, const float InsetFixedDistance, const float InsetProgressTowardCenter, const enum Mode, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0xe64b60
	void InsertEdgeLoop(const EdgeID EdgeID, out const float[] Splits, out EdgeID[] OutNewEdgeIDs);// 0xe64a00
	void InitializeAdapters();// 0xe649e0
	EdgeID GetVertexPairEdge(const VertexID VertexID, const VertexID NextVertexID, out bool bOutEdgeWindingIsReversed);// 0xe648b0
	VertexID GetVertexInstanceVertex(const VertexInstanceID VertexInstanceID);// 0xe64810
	int GetVertexInstanceCount();// 0xe647e0
	void GetVertexInstanceConnectedPolygons(const VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0xe646f0
	int GetVertexInstanceConnectedPolygonCount(const VertexInstanceID VertexInstanceID);// 0xe64660
	PolygonID GetVertexInstanceConnectedPolygon(const VertexInstanceID VertexInstanceID, const int ConnectedPolygonNumber);// 0xe64580
	int GetVertexCount();// 0xe64550
	void GetVertexConnectedPolygons(const VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0xe64460
	void GetVertexConnectedEdges(const VertexID VertexID, out EdgeID[] OutConnectedEdgeIDs);// 0xe64370
	int GetVertexConnectedEdgeCount(const VertexID VertexID);// 0xe642e0
	EdgeID GetVertexConnectedEdge(const VertexID VertexID, const int ConnectedEdgeNumber);// 0xe64200
	void GetVertexAdjacentVertices(const VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0xe64110
	int GetTextureCoordinateCount();// 0xe640e0
	SubdivisionLimitData GetSubdivisionLimitData();// 0xe640a0
	int GetSubdivisionCount();// 0xe64070
	int GetPolygonTriangulatedTriangleCount(const PolygonID PolygonID);// 0xe63fe0
	TriangleID GetPolygonTriangulatedTriangle(const PolygonID PolygonID, int PolygonTriangleNumber);// 0xe63f00
	void GetPolygonPerimeterVertices(const PolygonID PolygonID, out VertexID[] OutPolygonPerimeterVertexIDs);// 0xe63e10
	void GetPolygonPerimeterVertexInstances(const PolygonID PolygonID, out VertexInstanceID[] OutPolygonPerimeterVertexInstanceIDs);// 0xe63d20
	VertexInstanceID GetPolygonPerimeterVertexInstance(const PolygonID PolygonID, const int PolygonVertexNumber);// 0xe63c40
	int GetPolygonPerimeterVertexCount(const PolygonID PolygonID);// 0xe639e0
	VertexID GetPolygonPerimeterVertex(const PolygonID PolygonID, const int PolygonVertexNumber);// 0xe63b60
	void GetPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutPolygonPerimeterEdgeIDs);// 0xe63a70
	int GetPolygonPerimeterEdgeCount(const PolygonID PolygonID);// 0xe639e0
	EdgeID GetPolygonPerimeterEdge(const PolygonID PolygonID, const int PerimeterEdgeNumber, out bool bOutEdgeWindingIsReversedForPolygon);// 0xe638b0
	PolygonID GetPolygonInGroup(const PolygonGroupID PolygonGroupID, const int PolygonNumber);// 0xe637d0
	int GetPolygonGroupCount();// 0xe637a0
	int GetPolygonCountInGroup(const PolygonGroupID PolygonGroupID);// 0xe63710
	int GetPolygonCount();// 0xe636e0
	void GetPolygonAdjacentPolygons(const PolygonID PolygonID, out PolygonID[] OutAdjacentPolygons);// 0xe635f0
	PolygonGroupID GetGroupForPolygon(const PolygonID PolygonID);// 0xe63550
	PolygonGroupID GetFirstValidPolygonGroup();// 0xe63510
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID OutEdgeVertexID0, out VertexID OutEdgeVertexID1);// 0xe633e0
	VertexID GetEdgeVertex(const EdgeID EdgeID, const int EdgeVertexNumber);// 0xe63300
	EdgeID GetEdgeThatConnectsVertices(const VertexID VertexID0, const VertexID VertexID1);// 0xe63220
	void GetEdgeLoopElements(const EdgeID EdgeID, out EdgeID[] EdgeLoopIDs);// 0xe63130
	int GetEdgeCount();// 0xe63100
	void GetEdgeConnectedPolygons(const EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0xe63010
	int GetEdgeConnectedPolygonCount(const EdgeID EdgeID);// 0xe62f80
	PolygonID GetEdgeConnectedPolygon(const EdgeID EdgeID, const int ConnectedPolygonNumber);// 0xe62ea0
	void GeneratePolygonTangentsAndNormals(out const PolygonID[] PolygonIDs);// 0xe62df0
	void FlipPolygons(out const PolygonID[] PolygonIDs);// 0xe62d40
	int FindPolygonPerimeterVertexNumberForVertex(const PolygonID PolygonID, const VertexID VertexID);// 0xe62c60
	int FindPolygonPerimeterEdgeNumberForVertices(const PolygonID PolygonID, const VertexID EdgeVertexID0, const VertexID EdgeVertexID1);// 0xe62b40
	void FindPolygonLoop(const EdgeID EdgeID, out EdgeID[] OutEdgeLoopEdgeIDs, out EdgeID[] OutFlippedEdgeIDs, out EdgeID[] OutReversedEdgeIDPathToTake, out PolygonID[] OutPolygonIDsToSplit);// 0xe62920
	void ExtrudePolygons(out const PolygonID[] Polygons, const float ExtrudeDistance, const bool bKeepNeighborsTogether, out PolygonID[] OutNewExtrudedFrontPolygons);// 0xe62760
	void ExtendVertices(out const VertexID[] VertexIDs, const bool bOnlyExtendClosestEdge, const Vector ReferencePosition, out VertexID[] OutNewExtendedVertexIDs);// 0xe625b0
	void ExtendEdges(out const EdgeID[] EdgeIDs, const bool bWeldNeighbors, out EdgeID[] OutNewExtendedEdgeIDs);// 0xe62450
	void EndModification(const bool bFromUndo);// 0xe623c0
	void DeleteVertexInstances(out const VertexInstanceID[] VertexInstanceIDsToDelete, const bool bDeleteOrphanedVertices);// 0xe622c0
	void DeleteVertexAndConnectedEdgesAndPolygons(const VertexID VertexID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0xe620f0
	void DeletePolygons(out const PolygonID[] PolygonIDsToDelete, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0xe61ef0
	void DeletePolygonGroups(out const PolygonGroupID[] PolygonGroupIDs);// 0xe61e40
	void DeleteOrphanVertices(out const VertexID[] VertexIDsToDelete);// 0xe61d90
	void DeleteEdges(out const EdgeID[] EdgeIDsToDelete, const bool bDeleteOrphanedVertices);// 0xe61c90
	void DeleteEdgeAndConnectedPolygons(const EdgeID EdgeID, const bool bDeleteOrphanedEdges, const bool bDeleteOrphanedVertices, const bool bDeleteOrphanedVertexInstances, const bool bDeleteEmptyPolygonGroups);// 0xe61ac0
	void CreateVertices(out const VertexToCreate[] VerticesToCreate, out VertexID[] OutNewVertexIDs);// 0xe61980
	void CreateVertexInstances(out const VertexInstanceToCreate[] VertexInstancesToCreate, out VertexInstanceID[] OutNewVertexInstanceIDs);// 0xe61840
	void CreatePolygons(out const PolygonToCreate[] PolygonsToCreate, out PolygonID[] OutNewPolygonIDs, out EdgeID[] OutNewEdgeIDs);// 0xe61670
	void CreatePolygonGroups(out const PolygonGroupToCreate[] PolygonGroupsToCreate, out PolygonGroupID[] OutNewPolygonGroupIDs);// 0xe61530
	void CreateMissingPolygonPerimeterEdges(const PolygonID PolygonID, out EdgeID[] OutNewEdgeIDs);// 0xe61440
	void CreateEmptyVertexRange(const int NumVerticesToCreate, out VertexID[] OutNewVertexIDs);// 0xe61350
	void CreateEdges(out const EdgeToCreate[] EdgesToCreate, out EdgeID[] OutNewEdgeIDs);// 0xe61210
	void ComputePolygonsSharedEdges(out const PolygonID[] PolygonIDs, out EdgeID[] OutSharedEdgeIDs);// 0xe610f0
	Plane ComputePolygonPlane(const PolygonID PolygonID);// 0xe61050
	Vector ComputePolygonNormal(const PolygonID PolygonID);// 0xe60fb0
	Vector ComputePolygonCenter(const PolygonID PolygonID);// 0xe60f10
	BoxSphereBounds ComputeBoundingBoxAndSphere();// 0xe60ec0
	Box ComputeBoundingBox();// 0xe60e70
	EditableMesh* CommitInstance(PrimitiveComponent* ComponentToInstanceTo);// 0xe60dd0
	void Commit();// 0xe60db0
	void ChangePolygonsVertexInstances(out const ChangeVertexInstancesForPolygon[] VertexInstancesForPolygons);// 0xe60c90
	void BevelPolygons(out const PolygonID[] PolygonIDs, const float BevelFixedDistance, const float BevelProgressTowardCenter, out PolygonID[] OutNewCenterPolygonIDs, out PolygonID[] OutNewSidePolygonIDs);// 0xe60aa0
	void AssignPolygonsToPolygonGroups(out const PolygonGroupForPolygon[] PolygonGroupForPolygons, const bool bDeleteOrphanedPolygonGroups);// 0xe609a0
	bool AnyChangesToUndo();// 0xe60970

--------------------------------
Class: PolygonToSplit
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	VertexPair[] VertexPairsToSplitAt;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VertexPair
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4]
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AttributesForVertex
	VertexID VertexID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList VertexAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MeshElementAttributeList
	MeshElementAttributeData[] Attributes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MeshElementAttributeData
	FName AttributeName;//[Offset: 0x0, Size: 0x8]
	int AttributeIndex;//[Offset: 0x8, Size: 0x4]
	MeshElementAttributeValue AttributeValue;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: MeshElementAttributeValue

--------------------------------
Class: AttributesForVertexInstance
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VertexAttributesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList[] PerimeterVertexAttributeLists;//[Offset: 0x8, Size: 0x10]
	VertexAttributesForPolygonHole[] VertexAttributeListsForEachHole;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: VertexAttributesForPolygonHole
	MeshElementAttributeList[] VertexAttributeList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AttributesForEdge
	EdgeID EdgeID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VertexToMove
	VertexID VertexID;//[Offset: 0x0, Size: 0x4]
	Vector NewVertexPosition;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: SubdivisionLimitData
	Vector[] VertexPositions;//[Offset: 0x0, Size: 0x10]
	SubdivisionLimitSection[] Sections;//[Offset: 0x10, Size: 0x10]
	SubdividedWireEdge[] SubdividedWireEdges;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SubdivisionLimitSection
	SubdividedQuad[] SubdividedQuads;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SubdividedQuad
	SubdividedQuadVertex QuadVertex0;//[Offset: 0x0, Size: 0x34]
	SubdividedQuadVertex QuadVertex1;//[Offset: 0x34, Size: 0x34]
	SubdividedQuadVertex QuadVertex2;//[Offset: 0x68, Size: 0x34]
	SubdividedQuadVertex QuadVertex3;//[Offset: 0x9c, Size: 0x34]

--------------------------------
Class: SubdividedQuadVertex
	int VertexPositionIndex;//[Offset: 0x0, Size: 0x4]
	Vector2D TextureCoordinate0;//[Offset: 0x4, Size: 0x8]
	Vector2D TextureCoordinate1;//[Offset: 0xc, Size: 0x8]
	Color VertexColor;//[Offset: 0x14, Size: 0x4]
	Vector VertexNormal;//[Offset: 0x18, Size: 0xc]
	Vector VertexTangent;//[Offset: 0x24, Size: 0xc]
	float VertexBinormalSign;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SubdividedWireEdge
	int EdgeVertex0PositionIndex;//[Offset: 0x0, Size: 0x4]
	int EdgeVertex1PositionIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VertexToCreate
	MeshElementAttributeList VertexAttributes;//[Offset: 0x0, Size: 0x10]
	VertexID OriginalVertexID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VertexInstanceToCreate
	VertexID VertexID;//[Offset: 0x0, Size: 0x4]
	MeshElementAttributeList VertexInstanceAttributes;//[Offset: 0x8, Size: 0x10]
	VertexInstanceID OriginalVertexInstanceID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PolygonToCreate
	PolygonGroupID PolygonGroupID;//[Offset: 0x0, Size: 0x4]
	VertexAndAttributes[] PerimeterVertices;//[Offset: 0x8, Size: 0x10]
	PolygonID OriginalPolygonID;//[Offset: 0x18, Size: 0x4]
	enum PolygonEdgeHardness;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: VertexAndAttributes
	VertexInstanceID VertexInstanceID;//[Offset: 0x0, Size: 0x4]
	VertexID VertexID;//[Offset: 0x4, Size: 0x4]
	MeshElementAttributeList PolygonVertexAttributes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PolygonGroupToCreate
	MeshElementAttributeList PolygonGroupAttributes;//[Offset: 0x0, Size: 0x10]
	PolygonGroupID OriginalPolygonGroupID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: EdgeToCreate
	VertexID VertexID0;//[Offset: 0x0, Size: 0x4]
	VertexID VertexID1;//[Offset: 0x4, Size: 0x4]
	MeshElementAttributeList EdgeAttributes;//[Offset: 0x8, Size: 0x10]
	EdgeID OriginalEdgeID;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ChangeVertexInstancesForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	VertexIndexAndInstanceID[] PerimeterVertexIndicesAndInstanceIDs;//[Offset: 0x8, Size: 0x10]
	VertexInstancesForPolygonHole[] VertexIndicesAndInstanceIDsForEachHole;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: VertexIndexAndInstanceID
	int ContourIndex;//[Offset: 0x0, Size: 0x4]
	VertexInstanceID VertexInstanceID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: VertexInstancesForPolygonHole
	VertexIndexAndInstanceID[] VertexIndicesAndInstanceIDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PolygonGroupForPolygon
	PolygonID PolygonID;//[Offset: 0x0, Size: 0x4]
	PolygonGroupID PolygonGroupID;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EditableMeshFactory.Object
	static EditableMesh* MakeEditableMesh(PrimitiveComponent* PrimitiveComponent, const int LODIndex);// 0xe6a100

--------------------------------
Class: EditableStaticMeshAdapter.EditableMeshAdapter.Object
	StaticMesh* StaticMesh;//[Offset: 0x28, Size: 0x8]
	StaticMesh* OriginalStaticMesh;//[Offset: 0x30, Size: 0x8]
	int StaticMeshLODIndex;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe8, Size: 0x30]

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18]
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4]
	float PlayRate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	static void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0xe7f4e0
	static void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0xe7f070
	static void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0xe7edb0
	static void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0xe7eaf0
	static void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0xe7e0f0
	static void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0xe7df80
	static void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0xe7dce0
	static void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0xe7db90
	static void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0xe7d9e0
	static void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0xe7d6d0

--------------------------------
Class: NiagaraDataInterfaceChaosDestruction.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<ChaosSolverActor*> ChaosSolverActorSet;//[Offset: 0x38, Size: 0x50]
	enum DataSourceType;//[Offset: 0x88, Size: 0x1]
	int DataProcessFrequency;//[Offset: 0x8c, Size: 0x4]
	int MaxNumberOfDataEntriesToSpawn;//[Offset: 0x90, Size: 0x4]
	bool DoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	Vector2D SpawnMultiplierMinMax;//[Offset: 0x98, Size: 0x8]
	float SpawnChance;//[Offset: 0xa0, Size: 0x4]
	Vector2D ImpulseToSpawnMinMax;//[Offset: 0xa4, Size: 0x8]
	Vector2D SpeedToSpawnMinMax;//[Offset: 0xac, Size: 0x8]
	Vector2D MassToSpawnMinMax;//[Offset: 0xb4, Size: 0x8]
	Vector2D ExtentMinToSpawnMinMax;//[Offset: 0xbc, Size: 0x8]
	Vector2D ExtentMaxToSpawnMinMax;//[Offset: 0xc4, Size: 0x8]
	Vector2D VolumeToSpawnMinMax;//[Offset: 0xcc, Size: 0x8]
	Vector2D SolverTimeToSpawnMinMax;//[Offset: 0xd4, Size: 0x8]
	int SurfaceTypeToSpawn;//[Offset: 0xdc, Size: 0x4]
	enum LocationFilteringMode;//[Offset: 0xe0, Size: 0x1]
	enum LocationXToSpawn;//[Offset: 0xe1, Size: 0x1]
	Vector2D LocationXToSpawnMinMax;//[Offset: 0xe4, Size: 0x8]
	enum LocationYToSpawn;//[Offset: 0xec, Size: 0x1]
	Vector2D LocationYToSpawnMinMax;//[Offset: 0xf0, Size: 0x8]
	enum LocationZToSpawn;//[Offset: 0xf8, Size: 0x1]
	Vector2D LocationZToSpawnMinMax;//[Offset: 0xfc, Size: 0x8]
	enum DataSortingType;//[Offset: 0x104, Size: 0x1]
	bool bGetExternalCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool DoSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	Vector SpatialHashVolumeMin;//[Offset: 0x108, Size: 0xc]
	Vector SpatialHashVolumeMax;//[Offset: 0x114, Size: 0xc]
	Vector SpatialHashVolumeCellSize;//[Offset: 0x120, Size: 0xc]
	int MaxDataPerCell;//[Offset: 0x12c, Size: 0x4]
	bool bApplyMaterialsFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	<PhysicalMaterial*> ChaosBreakingMaterialSet;//[Offset: 0x138, Size: 0x50]
	bool bGetExternalBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bGetExternalTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	Vector2D RandomPositionMagnitudeMinMax;//[Offset: 0x18c, Size: 0x8]
	float InheritedVelocityMultiplier;//[Offset: 0x194, Size: 0x4]
	enum RandomVelocityGenerationType;//[Offset: 0x198, Size: 0x1]
	Vector2D RandomVelocityMagnitudeMinMax;//[Offset: 0x19c, Size: 0x8]
	float SpreadAngleMax;//[Offset: 0x1a4, Size: 0x4]
	Vector VelocityOffsetMin;//[Offset: 0x1a8, Size: 0xc]
	Vector VelocityOffsetMax;//[Offset: 0x1b4, Size: 0xc]
	Vector2D FinalVelocityMagnitudeMinMax;//[Offset: 0x1c0, Size: 0x8]
	float MaxLatency;//[Offset: 0x1c8, Size: 0x4]
	enum DebugType;//[Offset: 0x1cc, Size: 0x1]
	int LastSpawnedPointID;//[Offset: 0x1d0, Size: 0x4]
	float LastSpawnTime;//[Offset: 0x1d4, Size: 0x4]
	float SolverTime;//[Offset: 0x1e8, Size: 0x4]
	float TimeStampOfLastProcessedData;//[Offset: 0x1ec, Size: 0x4]

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x228, Size: 0x68]
	float TimeStepMultiplier;//[Offset: 0x290, Size: 0x4]
	int CollisionIterations;//[Offset: 0x294, Size: 0x4]
	int PushOutIterations;//[Offset: 0x298, Size: 0x4]
	int PushOutPairIterations;//[Offset: 0x29c, Size: 0x4]
	float ClusterConnectionFactor;//[Offset: 0x2a0, Size: 0x4]
	enum ClusterUnionConnectionType;//[Offset: 0x2a4, Size: 0x1]
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2a8, Size: 0x10]
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x2bc, Size: 0x10]
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x2d0, Size: 0x10]
	float MassScale;//[Offset: 0x2e0, Size: 0x4]
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	float FloorHeight;//[Offset: 0x2e8, Size: 0x4]
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x2ec, Size: 0x3]
	BillboardComponent* SpriteComponent;//[Offset: 0x2f0, Size: 0x8]
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x310, Size: 0x8]
	void SetSolverActive(bool bActive);// 0x36556d0
	void SetAsCurrentWorldSolver();// 0x36556b0

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50]
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50]

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: NiagaraDataInterfaceFieldSystem.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Blueprint* BlueprintSource;//[Offset: 0x38, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	IntVector FieldDimensions;//[Offset: 0x48, Size: 0xc]
	Vector MinBounds;//[Offset: 0x54, Size: 0xc]
	Vector MaxBounds;//[Offset: 0x60, Size: 0xc]

--------------------------------
Class: MotoSynthPreset.Object
	MotoSynthRuntimeSettings Settings;//[Offset: 0x28, Size: 0x68]

--------------------------------
Class: MotoSynthRuntimeSettings
	bool bSynthToneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float SynthToneVolume;//[Offset: 0x4, Size: 0x4]
	float SynthToneFilterFrequency;//[Offset: 0x8, Size: 0x4]
	int SynthOctaveShift;//[Offset: 0xc, Size: 0x4]
	bool bGranularEngineEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float GranularEngineVolume;//[Offset: 0x14, Size: 0x4]
	float GranularEnginePitchScale;//[Offset: 0x18, Size: 0x4]
	int NumSamplesToCrossfadeBetweenGrains;//[Offset: 0x1c, Size: 0x4]
	int NumGrainTableEntriesPerGrain;//[Offset: 0x20, Size: 0x4]
	int GrainTableRandomOffsetForConstantRPMs;//[Offset: 0x24, Size: 0x4]
	int GrainCrossfadeSamplesForConstantRPMs;//[Offset: 0x28, Size: 0x4]
	MotoSynthSource* AccelerationSource;//[Offset: 0x30, Size: 0x8]
	MotoSynthSource* DecelerationSource;//[Offset: 0x38, Size: 0x8]
	bool bStereoWidenerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float StereoDelayMsec;//[Offset: 0x44, Size: 0x4]
	float StereoFeedback;//[Offset: 0x48, Size: 0x4]
	float StereoWidenerWetlevel;//[Offset: 0x4c, Size: 0x4]
	float StereoWidenerDryLevel;//[Offset: 0x50, Size: 0x4]
	float StereoWidenerDelayRatio;//[Offset: 0x54, Size: 0x4]
	bool bStereoWidenerFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	float StereoWidenerFilterFrequency;//[Offset: 0x5c, Size: 0x4]
	float StereoWidenerFilterQ;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MotoSynthSource.Object
	bool bConvertTo8Bit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float DownSampleFactor;//[Offset: 0x2c, Size: 0x4]
	RuntimeFloatCurve RPMCurve;//[Offset: 0x30, Size: 0x88]
	float[] SourceData;//[Offset: 0xb8, Size: 0x10]
	int16[] SourceDataPCM;//[Offset: 0xc8, Size: 0x10]
	int SourceSampleRate;//[Offset: 0xd8, Size: 0x4]
	GrainTableEntry[] GrainTable;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: GrainTableEntry
	int SampleIndex;//[Offset: 0x0, Size: 0x4]
	float RPM;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SynthComponentMoto.SynthComponent.SceneComponent.ActorComponent.Object
	MotoSynthPreset* MotoSynthPreset;//[Offset: 0x6c0, Size: 0x8]
	float RPM;//[Offset: 0x6c8, Size: 0x4]
	void SetSettings(out const MotoSynthRuntimeSettings InSettings);// 0xeb5df0
	void SetRPM(float InRPM, float InTimeSec);// 0xeb5d20
	bool IsEnabled();// 0xeb5cf0
	void GetRPMRange(out float OutMinRPM, out float OutMaxRPM);// 0xeb5c10

--------------------------------
Class: MagicLeapARPinComponent.SceneComponent.ActorComponent.Object
	FString ObjectUID;//[Offset: 0x1f8, Size: 0x10]
	int UserIndex;//[Offset: 0x208, Size: 0x4]
	enum AutoPinType;//[Offset: 0x20c, Size: 0x1]
	bool bShouldPinActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 0x1]
	class MagicLeapARPinSaveGame* PinDataClass;//[Offset: 0x210, Size: 0x8]
	<enum> SearchPinTypes;//[Offset: 0x218, Size: 0x50]
	SphereComponent* SearchVolume;//[Offset: 0x268, Size: 0x8]
	delegate OnPersistentEntityPinned;//[Offset: 0x270, Size: 0x10]
	delegate OnPersistentEntityPinLost;//[Offset: 0x280, Size: 0x10]
	delegate OnPinDataLoadAttemptCompleted;//[Offset: 0x290, Size: 0x10]
	Guid PinnedCFUID;//[Offset: 0x2a0, Size: 0x10]
	SceneComponent* PinnedSceneComponent;//[Offset: 0x2b0, Size: 0x8]
	MagicLeapARPinSaveGame* PinData;//[Offset: 0x2b8, Size: 0x8]
	void UnPin();// 0xec0570
	MagicLeapARPinSaveGame* TryGetPinData(class MagicLeapARPinSaveGame InPinDataClass, out bool OutPinDataValid);// 0xec0350
	bool PinToRestoredOrSyncedID();// 0xebfff0
	bool PinToID(out const Guid PinId);// 0xebff40
	void PinToBestFit();// 0xebff20
	bool PinSceneComponent(SceneComponent* ComponentToPin);// 0xebfe80
	bool PinRestoredOrSynced();// 0xebfe50
	bool PinActor(Actor* ActorToPin);// 0xebfdb0
	void PersistentEntityPinned__DelegateSignature(bool bRestoredOrSynced);// 0x197e4f0
	void PersistentEntityPinLost__DelegateSignature();// 0x197e4f0
	void MagicLeapARPinDataLoadAttemptCompleted__DelegateSignature(bool bDataRestored);// 0x197e4f0
	bool IsPinned();// 0xebfc60
	bool GetPinState(out MagicLeapARPinState State);// 0xebfb00
	bool GetPinnedPinID(out Guid PinId);// 0xebfbb0
	MagicLeapARPinSaveGame* GetPinData(class MagicLeapARPinSaveGame PinDataClass);// 0xebfa60
	void AttemptPinDataRestorationAsync();// 0xebf020
	bool AttemptPinDataRestoration();// 0xebeff0

--------------------------------
Class: MagicLeapARPinSaveGame.SaveGame.Object
	Guid PinnedID;//[Offset: 0x28, Size: 0x10]
	Transform ComponentWorldTransform;//[Offset: 0x40, Size: 0x30]
	Transform PinTransform;//[Offset: 0x70, Size: 0x30]
	bool bShouldPinActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: MagicLeapARPinState
	float Confidence;//[Offset: 0x0, Size: 0x4]
	float ValidRadius;//[Offset: 0x4, Size: 0x4]
	float RotationError;//[Offset: 0x8, Size: 0x4]
	float TranslationError;//[Offset: 0xc, Size: 0x4]
	enum PinType;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MagicLeapARPinFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UnBindToOnMagicLeapContentBindingFoundDelegate(out const delegate Delegate);// 0xec04d0
	static void UnBindToOnMagicLeapARPinUpdatedDelegate(out const delegate Delegate);// 0xec0430
	static enum SetGlobalQueryFilter(out const MagicLeapARPinQuery InGlobalFilter);// 0xec01e0
	static void SetContentBindingSaveGameUserIndex(int UserIndex);// 0xec0160
	static enum QueryARPins(out const MagicLeapARPinQuery Query, out Guid[] Pins);// 0xec0020
	static bool ParseStringToARPinId(FString PinIdString, out Guid ARPinId);// 0xebfcc0
	static bool IsTrackerValid();// 0xebfc90
	static enum GetNumAvailableARPins(out int Count);// 0xebf9d0
	static enum GetGlobalQueryFilter(out MagicLeapARPinQuery CurrentGlobalFilter);// 0xebf8f0
	static int GetContentBindingSaveGameUserIndex();// 0xebf8c0
	static enum GetClosestARPin(out const Vector SearchPoint, out Guid PinId);// 0xebf7d0
	static enum GetAvailableARPins(int NumRequested, out Guid[] Pins);// 0xebf6e0
	static FString GetARPinStateToString(out const MagicLeapARPinState State);// 0xebf600
	static enum GetARPinState(out const Guid PinId, out MagicLeapARPinState State);// 0xebf500
	static bool GetARPinPositionAndOrientation_TrackingSpace(out const Guid PinId, out Vector Position, out Rotator Orientation, out bool PinFoundInEnvironment);// 0xebf370
	static bool GetARPinPositionAndOrientation(out const Guid PinId, out Vector Position, out Rotator Orientation, out bool PinFoundInEnvironment);// 0xebf1e0
	static enum DestroyTracker();// 0xebf1b0
	static enum CreateTracker();// 0xebf180
	static void BindToOnMagicLeapContentBindingFoundDelegate(out const delegate Delegate);// 0xebf0e0
	static void BindToOnMagicLeapARPinUpdatedDelegate(out const delegate Delegate);// 0xebf040
	static FString ARPinIdToString(out const Guid ARPinId);// 0xebef10

--------------------------------
Class: MagicLeapARPinQuery
	<enum> Types;//[Offset: 0x0, Size: 0x50]
	int MaxResults;//[Offset: 0x50, Size: 0x4]
	Vector TargetPoint;//[Offset: 0x54, Size: 0xc]
	float Radius;//[Offset: 0x60, Size: 0x4]
	bool bSorted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: MagicLeapARPinInfoActorBase.Actor.Object
	Guid PinId;//[Offset: 0x228, Size: 0x10]
	bool bVisibilityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	void OnUpdateARPinState();// 0x197e4f0

--------------------------------
Class: MagicLeapARPinRenderer.Actor.Object
	bool bInfoActorsVisibilityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	<Guid,MagicLeapARPinInfoActorBase*> AllInfoActors;//[Offset: 0x230, Size: 0x50]
	class MagicLeapARPinInfoActorBase* ClassToSpawn;//[Offset: 0x288, Size: 0x8]
	void SetVisibilityOverride(const bool InVisibilityOverride);// 0xec02c0

--------------------------------
Class: MagicLeapARPinInfoActor_C.MagicLeapARPinInfoActorBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240, Size: 0x8]
	StaticMeshComponent* Right;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* Forward;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* Up;//[Offset: 0x258, Size: 0x8]
	SphereComponent* ValidRadiusVisualizer;//[Offset: 0x260, Size: 0x8]
	SceneComponent* AxisRoot;//[Offset: 0x268, Size: 0x8]
	SceneComponent* VisualizerRoot;//[Offset: 0x270, Size: 0x8]
	TextRenderComponent* TypeValue;//[Offset: 0x278, Size: 0x8]
	TextRenderComponent* TransErrValue;//[Offset: 0x280, Size: 0x8]
	TextRenderComponent* RotErrValue;//[Offset: 0x288, Size: 0x8]
	TextRenderComponent* ConfidenceValue;//[Offset: 0x290, Size: 0x8]
	TextRenderComponent* TransErrLabel;//[Offset: 0x298, Size: 0x8]
	TextRenderComponent* RotErrLabel;//[Offset: 0x2a0, Size: 0x8]
	TextRenderComponent* ConfidenceLabel;//[Offset: 0x2a8, Size: 0x8]
	TextRenderComponent* PinIDValue;//[Offset: 0x2b0, Size: 0x8]
	SceneComponent* InfoRoot;//[Offset: 0x2b8, Size: 0x8]
	SceneComponent* Root;//[Offset: 0x2c0, Size: 0x8]
	float RotationSmoothSpeed;//[Offset: 0x2c8, Size: 0x4]
	void UpdatePinState();// 0x197e4f0
	void UserConstructionScript(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x197e4f0
	void OnUpdateARPinState();// 0x197e4f0
	void ReceiveTick(float DeltaSeconds);// 0x197e4f0
	void ExecuteUbergraph_MagicLeapARPinInfoActor(int EntryPoint, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_GetARPinPositionAndOrientation_Position, Rotator CallFunc_GetARPinPositionAndOrientation_Orientation, bool CallFunc_GetARPinPositionAndOrientation_PinFoundInEnvironment, bool CallFunc_GetARPinPositionAndOrientation_ReturnValue, HitResult CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float K2Node_Event_DeltaSeconds, Rotator CallFunc_RInterpTo_ReturnValue, FString CallFunc_ARPinIdToString_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, FText CallFunc_Conv_StringToText_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, MagicLeapARPinState CallFunc_GetARPinState_State, enum CallFunc_GetARPinState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x197e4f0

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10]
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10]
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float Height;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	Vector Extent;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: MagicLeapARPinSettings.Object
	float UpdateCheckFrequency;//[Offset: 0x28, Size: 0x4]
	MagicLeapARPinState OnUpdatedEventTriggerDelta;//[Offset: 0x2c, Size: 0x14]

--------------------------------
Class: MagicLeapARPinContentBindings.SaveGame.Object
	<Guid,MagicLeapARPinObjectIdList> AllContentBindings;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MagicLeapARPinObjectIdList
	<FString> ObjectIdList;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MagicLeapSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	MagicLeapSharedWorldSharedData SharedWorldData;//[Offset: 0x310, Size: 0x10]
	delegate OnNewLocalDataFromClients;//[Offset: 0x320, Size: 0x10]
	float PinSelectionConfidenceThreshold;//[Offset: 0x330, Size: 0x4]
	MagicLeapSharedWorldPlayerController* ChosenOne;//[Offset: 0x3d8, Size: 0x8]
	bool SendSharedWorldDataToClients();// 0xec4e30
	void SelectChosenOne();// 0xec4e10
	void MagicLeapOnNewLocalDataFromClients__DelegateSignature();// 0x197e4f0
	void DetermineSharedWorldData(out MagicLeapSharedWorldSharedData NewSharedWorldData);// 0xec4cf0

--------------------------------
Class: MagicLeapSharedWorldSharedData
	Guid[] PinIDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MagicLeapSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerSetLocalWorldData(const MagicLeapSharedWorldLocalData LocalWorldReplicationData);// 0xec4f00
	void ServerSetAlignmentTransforms(const MagicLeapSharedWorldAlignmentTransforms InAlignmentTransforms);// 0xec4e60
	bool IsChosenOne();// 0xec4da0
	void ClientSetChosenOne(bool bChosenOne);// 0xec4c60
	void ClientMarkReadyForSendingLocalData();// 0xec4c40
	bool CanSendLocalDataToServer();// 0xec4c10

--------------------------------
Class: MagicLeapSharedWorldLocalData
	MagicLeapSharedWorldPinData[] LocalPins;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MagicLeapSharedWorldPinData
	Guid PinId;//[Offset: 0x0, Size: 0x10]
	MagicLeapARPinState PinState;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MagicLeapSharedWorldAlignmentTransforms
	Transform[] AlignmentTransforms;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MagicLeapSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	MagicLeapSharedWorldSharedData SharedWorldData;//[Offset: 0x298, Size: 0x10]
	MagicLeapSharedWorldAlignmentTransforms AlignmentTransforms;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSharedWorldDataUpdated;//[Offset: 0x2b8, Size: 0x10]
	delegate OnAlignmentTransformsUpdated;//[Offset: 0x2c8, Size: 0x10]
	void OnReplicate_SharedWorldData();// 0xec4df0
	void OnReplicate_AlignmentTransforms();// 0xec4dd0
	void MagicLeapSharedWorldEvent__DelegateSignature();// 0x197e4f0
	Transform CalculateXRCameraRootTransform();// 0xec4ba0

--------------------------------
Class: AvfMediaSettings.Object
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	FrameRate FrameRateOverride;//[Offset: 0x88, Size: 0x8]
	FString ProxyOverride;//[Offset: 0x90, Size: 0x10]
	DirectoryPath SequencePath;//[Offset: 0xa0, Size: 0x10]
	void SetSequencePath(FString Path);// 0xed8f00
	FString GetSequencePath();// 0xed8e40
	void GetProxies(out FString[] OutProxies);// 0xed8d70

--------------------------------
Class: ImgMediaSettings.Object
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8]
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4]
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4]
	int CacheThreads;//[Offset: 0x38, Size: 0x4]
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4]
	float GlobalCacheSizeGB;//[Offset: 0x40, Size: 0x4]
	bool UseGlobalCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	UInt32Property ExrDecoderThreads;//[Size: 0x4]
	FString DefaultProxy;//[Offset: 0x50, Size: 0x10]
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe8, Size: 0x8]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x78, Size: 0x8]
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x80, Size: 0x14]
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	FName PropertyPath;//[Offset: 0x8, Size: 0x8]
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe8, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	FrameNumber StartFrameOffset;//[Offset: 0xf4, Size: 0x4]
	MediaTexture* MediaTexture;//[Offset: 0xf8, Size: 0x8]
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0x100, Size: 0x8]
	bool bUseExternalMediaPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	MediaPlayer* ExternalMediaPlayer;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0xe8, Size: 0x1]
	byte AddressY;//[Offset: 0xe9, Size: 0x1]
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0xec, Size: 0x10]
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	byte NumMips;//[Offset: 0xfd, Size: 0x1]
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe, Size: 0x1]
	byte OutputFormat;//[Offset: 0xff, Size: 0x1]
	float CurrentAspectRatio;//[Offset: 0x100, Size: 0x4]
	byte CurrentOrientation;//[Offset: 0x104, Size: 0x1]
	MediaPlayer* MediaPlayer;//[Offset: 0x108, Size: 0x8]
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x2b42cd0
	int GetWidth();// 0x2b415d0
	MediaPlayer* GetMediaPlayer();// 0x2b40610
	int GetHeight();// 0x2b404e0
	float GetAspectRatio();// 0x2b40150

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10]
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10]
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10]
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10]
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10]
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10]
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10]
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8]
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc]
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10]
	bool SupportsSeeking();// 0x2b43550
	bool SupportsScrubbing();// 0x2b43520
	bool SupportsRate(float Rate, bool Unthinned);// 0x2b43450
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x2b43370
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x2b43250
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x2b43140
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x2b43030
	void SetTimeDelay(Timespan TimeDelay);// 0x2b42fb0
	bool SetRate(float Rate);// 0x2b42df0
	bool SetNativeVolume(float Volume);// 0x2b42d60
	void SetMediaOptions(const MediaSource* Options);// 0x2b42bb0
	bool SetLooping(bool Looping);// 0x2b42780
	void SetDesiredPlayerName(FName PlayerName);// 0x2b42460
	void SetBlockOnTime(out const Timespan Time);// 0x2b423d0
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x2b42300
	bool Seek(out const Timespan Time);// 0x2b42260
	bool Rewind();// 0x2b42230
	bool Reopen();// 0x2b42130
	bool Previous();// 0x2b41fc0
	void PlayAndSeek();// 0x2b41fa0
	bool Play();// 0x2b41f70
	bool Pause();// 0x2b41f40
	bool OpenUrl(FString URL);// 0x2b41e90
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x2b41d80
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x2b41b90
	bool OpenSource(MediaSource* MediaSource);// 0x2b41af0
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x2b41a20
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x2b41980
	bool OpenFile(FString FilePath);// 0x2b418d0
	bool Next();// 0x2b41880
	bool IsReady();// 0x2b41850
	bool IsPreparing();// 0x2b41820
	bool IsPlaying();// 0x2b417f0
	bool IsPaused();// 0x2b417c0
	bool IsLooping();// 0x2b41790
	bool IsConnecting();// 0x2b41760
	bool IsClosed();// 0x2b41730
	bool IsBuffering();// 0x2b41700
	bool HasError();// 0x2b41600
	Rotator GetViewRotation();// 0x2b41590
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x2b41480
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x2b413b0
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x2b412e0
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x2b41200
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x2b41130
	float GetVerticalFieldOfView();// 0x2b41100
	FString GetUrl();// 0x2b41040
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x2b40f30
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x2b40e60
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x2b40d30
	MediaTimeStampInfo* GetTimeStamp();// 0x2b40d00
	Timespan GetTimeDelay();// 0x2b40cc0
	Timespan GetTime();// 0x2b40c80
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x2b40b80
	int GetSelectedTrack(enum TrackType);// 0x2b40a70
	float GetRate();// 0x2b40a40
	int GetPlaylistIndex();// 0x15d3df0
	MediaPlaylist* GetPlaylist();// 0x152e9f0
	FName GetPlayerName();// 0x2b408c0
	int GetNumTracks(enum TrackType);// 0x2b40830
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x2b40760
	FText GetMediaName();// 0x2b40540
	float GetHorizontalFieldOfView();// 0x2b40510
	Timespan GetDuration();// 0x2b40470
	FName GetDesiredPlayerName();// 0x2b40430
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x2b40320
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x2b40250
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x2b40180
	void Close();// 0x2b3fca0
	bool CanPlayUrl(FString URL);// 0x2b3fbf0
	bool CanPlaySource(MediaSource* MediaSource);// 0x2b3fb50
	bool CanPause();// 0x2b3fb20

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10]
	bool Replace(int Index, MediaSource* Replacement);// 0x2b42160
	bool RemoveAt(int Index);// 0x2b42090
	bool Remove(MediaSource* MediaSource);// 0x2b41ff0
	int Num();// 0x2b418b0
	void Insert(MediaSource* MediaSource, int Index);// 0x2b41630
	MediaSource* GetRandom(out int OutIndex);// 0x2b409a0
	MediaSource* GetPrevious(out int InOutIndex);// 0x2b40900
	MediaSource* GetNext(out int InOutIndex);// 0x2b40640
	MediaSource* Get(int Index);// 0x2b400b0
	bool AddUrl(FString URL);// 0x2b3f820
	bool AddFile(FString FilePath);// 0x2b3f770
	bool Add(MediaSource* MediaSource);// 0x2b3f6d0

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c]
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8]
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1]
	enum Loop;//[Offset: 0x29, Size: 0x1]

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4]
	int Caption;//[Offset: 0x4, Size: 0x4]
	int MetaData;//[Offset: 0x8, Size: 0x4]
	int Script;//[Offset: 0xc, Size: 0x4]
	int Subtitle;//[Offset: 0x10, Size: 0x4]
	int Text;//[Offset: 0x14, Size: 0x4]
	int Video;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8]
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x6c0, Size: 0x4]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1]
	float RateAdjustmentFactor;//[Offset: 0x6c8, Size: 0x4]
	FloatRange RateAdjustmentRange;//[Offset: 0x6cc, Size: 0x10]
	MediaPlayer* MediaPlayer;//[Offset: 0x6e0, Size: 0x8]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x2b42e80
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x2b42c40
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x2b42610
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x2b42580
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x2b424f0
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x2b40b00
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0x2b406e0
	MediaPlayer* GetMediaPlayer();// 0x2b405e0
	float GetEnvelopeValue();// 0x2b404b0
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x2b3f8d0

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] MediaSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: WmfMediaSettings.Object
	bool AllowNonStandardCodecs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool LowLatency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool HardwareAcceleratedVideoDecoding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: TcpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10]
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10]
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4]
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	FString UnicastEndpoint;//[Offset: 0x30, Size: 0x10]
	FString MulticastEndpoint;//[Offset: 0x40, Size: 0x10]
	enum MessageFormat;//[Offset: 0x50, Size: 0x1]
	byte MulticastTimeToLive;//[Offset: 0x51, Size: 0x1]
	FString[] StaticEndpoints;//[Offset: 0x58, Size: 0x10]
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	FString TunnelUnicastEndpoint;//[Offset: 0x70, Size: 0x10]
	FString TunnelMulticastEndpoint;//[Offset: 0x80, Size: 0x10]
	FString[] RemoteTunnelEndpoints;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x68, Size: 0x20]

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10]
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1]
	Guid ActorId;//[Offset: 0x4, Size: 0x10]
	FString PathToComponent;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb0, Size: 0x14]
	ActorSequence* Sequence;//[Offset: 0xc8, Size: 0x8]
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x410, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x420, Size: 0x10]
	delegate OnStop;//[Offset: 0x430, Size: 0x10]
	delegate OnPause;//[Offset: 0x440, Size: 0x10]
	delegate OnFinished;//[Offset: 0x450, Size: 0x10]
	byte Status;//[Offset: 0x460, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x468, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x470, Size: 0x4]
	int DurationFrames;//[Offset: 0x474, Size: 0x4]
	float DurationSubFrames;//[Offset: 0x478, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x47c, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x480, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x498, Size: 0xe8]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x5e8, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x5f8, Size: 0x10]
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x608, Size: 0x8]
	void StopAtCurrentTime();// 0x27db080
	void Stop();// 0x27db060
	void SetTimeRange(float StartTime, float Duration);// 0x27daf90
	void SetPlayRate(float PlayRate);// 0xd8b190
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x27dacc0
	void SetFrameRate(FrameRate FrameRate);// 0x27daa80
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x27da970
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x27da8e0
	void ScrubToSeconds(float TimeInSeconds);// 0x27da730
	bool ScrubToMarkedFrame(FString InLabel);// 0x27da620
	void ScrubToFrame(FrameTime NewPosition);// 0x27da570
	void Scrub();// 0x27da550
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x27da4b0
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x27da3d0
	void PlayToSeconds(float TimeInSeconds);// 0x27da320
	bool PlayToMarkedFrame(FString InLabel);// 0x27da210
	void PlayToFrame(FrameTime NewPosition);// 0x27da160
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams);// 0x27da040
	void PlayReverse();// 0x27da020
	void PlayLooping(int NumLoops);// 0x27d9f90
	void Play();// 0x27d9f70
	void Pause();// 0x27d9f50
	void JumpToSeconds(float TimeInSeconds);// 0x27d9ea0
	bool JumpToMarkedFrame(FString InLabel);// 0x27d9d90
	void JumpToFrame(FrameTime NewPosition);// 0x27d9ce0
	bool IsReversed();// 0x27d9cb0
	bool IsPlaying();// 0x27d9c80
	bool IsPaused();// 0x27d9c50
	void GoToEndAndStop();// 0x27d9bd0
	QualifiedFrameTime GetStartTime();// 0x27d9b80
	float GetPlayRate();// 0xd89a60
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x27d9a40
	FrameRate GetFrameRate();// 0x27d9a20
	int GetFrameDuration();// 0x27d99f0
	QualifiedFrameTime GetEndTime();// 0x27d9990
	QualifiedFrameTime GetDuration();// 0x27d9950
	bool GetDisableCameraCuts();// 0x27d9920
	QualifiedFrameTime GetCurrentTime();// 0x27d98e0
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x27d97b0
	void ChangePlaybackDirection();// 0x27d95d0

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10]
	enum PositionType;//[Offset: 0x20, Size: 0x1]
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	Actor*[] SequenceActors;//[Offset: 0x28, Size: 0x10]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28]
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28]
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: SequenceCameraShakeCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SequenceCameraShake.CameraShakeBase.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x98, Size: 0x8]
	float PlayRate;//[Offset: 0xa0, Size: 0x4]
	float Scale;//[Offset: 0xa4, Size: 0x4]
	float BlendInTime;//[Offset: 0xa8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xac, Size: 0x4]
	float RandomSegmentDuration;//[Offset: 0xb0, Size: 0x4]
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	SequenceCameraShakeSequencePlayer* Player;//[Offset: 0xb8, Size: 0x8]
	SequenceCameraShakeCameraStandIn* CameraStandIn;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SequenceCameraShakeSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x480, Size: 0x8]
	MovieSceneSequence* Sequence;//[Offset: 0x488, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x490, Size: 0xe8]

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 0x14]
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 0x8]
	SoftObjectPath TemplateSequence;//[Offset: 0x250, Size: 0x18]
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x268, Size: 0xc]
	void SetSequence(TemplateSequence* InSequence);// 0xf29920
	void SetBinding(Actor* Actor);// 0xf29890
	TemplateSequence* LoadSequence();// 0xf29860
	TemplateSequencePlayer* GetSequencePlayer();// 0xf29830
	TemplateSequence* GetSequence();// 0xf29800

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	static TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0xf29680

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xe8, Size: 0x24]
	float StartOffset;//[Offset: 0x10c, Size: 0x4]
	float TimeScale;//[Offset: 0x110, Size: 0x4]
	float PrerollTime;//[Offset: 0x114, Size: 0x4]
	MovieSceneSequence* SubSequence;//[Offset: 0x118, Size: 0x8]
	Actor* ActorToRecord;//[Offset: 0x120, Size: 0x1c]
	FString TargetSequenceName;//[Offset: 0x140, Size: 0x10]
	DirectoryPath TargetPathToRecordTo;//[Offset: 0x150, Size: 0x10]
	void SetSequence(MovieSceneSequence* Sequence);// 0x27ddba0
	MovieSceneSequence* GetSequence();// 0x27ddb70

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4]
	float TimeScale;//[Offset: 0x10, Size: 0x4]
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4]
	float StartOffset;//[Offset: 0x18, Size: 0x4]
	float PrerollTime;//[Offset: 0x1c, Size: 0x4]
	float PostrollTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0xf3de60
	static Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0xf3dd40
	static void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0xf3dc70

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	static bool CheckPermission(FString permission);// 0xf3e660
	static AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0xf3e590

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20]
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xf40a30
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xf40870
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xf40690
	static AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xf404b0

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10]
	byte[] ImageData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: ArchVisCharacter.Character.Pawn.Actor.Object
	FString LookUpAxisName;//[Offset: 0x4b8, Size: 0x10]
	FString LookUpAtRateAxisName;//[Offset: 0x4c8, Size: 0x10]
	FString TurnAxisName;//[Offset: 0x4d8, Size: 0x10]
	FString TurnAtRateAxisName;//[Offset: 0x4e8, Size: 0x10]
	FString MoveForwardAxisName;//[Offset: 0x4f8, Size: 0x10]
	FString MoveRightAxisName;//[Offset: 0x508, Size: 0x10]
	float MouseSensitivityScale_Pitch;//[Offset: 0x518, Size: 0x4]
	float MouseSensitivityScale_Yaw;//[Offset: 0x51c, Size: 0x4]

--------------------------------
Class: ArchVisCharMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationalAcceleration;//[Offset: 0xb00, Size: 0xc]
	Rotator RotationalDeceleration;//[Offset: 0xb0c, Size: 0xc]
	Rotator MaxRotationalVelocity;//[Offset: 0xb18, Size: 0xc]
	float MinPitch;//[Offset: 0xb24, Size: 0x4]
	float MaxPitch;//[Offset: 0xb28, Size: 0x4]
	float WalkingFriction;//[Offset: 0xb2c, Size: 0x4]
	float WalkingSpeed;//[Offset: 0xb30, Size: 0x4]
	float WalkingAcceleration;//[Offset: 0xb34, Size: 0x4]

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0xf45210
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0xf450c0
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0xf44fe0
	FName[] GetCollections();// 0xf44f60
	AssetData[] GetAssetsInCollection(const FName Name);// 0xf44dd0
	bool CollectionExists(const FName Name);// 0xf44d30

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8]
	FName PackageName;//[Offset: 0x8, Size: 0x8]
	FName PackagePath;//[Offset: 0x10, Size: 0x8]
	FName AssetName;//[Offset: 0x18, Size: 0x8]
	FName AssetClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioCapture.AudioGenerator.Object
	void StopCapturingAudio();// 0xf46330
	void StartCapturingAudio();// 0xf46310
	bool IsCapturingAudio();// 0xf462e0
	bool GetAudioCaptureDeviceInfo(out AudioCaptureDeviceInfo OutInfo);// 0xf46240

--------------------------------
Class: AudioCaptureDeviceInfo
	FName DeviceName;//[Offset: 0x0, Size: 0x8]
	int NumInputChannels;//[Offset: 0x8, Size: 0x4]
	int SampleRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AudioCaptureFunctionLibrary.BlueprintFunctionLibrary.Object
	static AudioCapture* CreateAudioCapture();// 0xf46210

--------------------------------
Class: AudioCaptureComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int JitterLatencyFrames;//[Offset: 0x6c0, Size: 0x4]

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	ComponentReference AttachEndTo;//[Offset: 0x480, Size: 0x28]
	FName AttachEndToSocketName;//[Offset: 0x4a8, Size: 0x8]
	Vector EndLocation;//[Offset: 0x4b0, Size: 0xc]
	float CableLength;//[Offset: 0x4bc, Size: 0x4]
	int NumSegments;//[Offset: 0x4c0, Size: 0x4]
	float SubstepTime;//[Offset: 0x4c4, Size: 0x4]
	int SolverIterations;//[Offset: 0x4c8, Size: 0x4]
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1]
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 0x1]
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cf, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	float CollisionFriction;//[Offset: 0x4d4, Size: 0x4]
	Vector CableForce;//[Offset: 0x4d8, Size: 0xc]
	float CableGravityScale;//[Offset: 0x4e4, Size: 0x4]
	float CableWidth;//[Offset: 0x4e8, Size: 0x4]
	int NumSides;//[Offset: 0x4ec, Size: 0x4]
	float TileMaterial;//[Offset: 0x4f0, Size: 0x4]
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0xf4b0b0
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0xf4afa0
	void GetCableParticleLocations(out Vector[] Locations);// 0xf4aef0
	SceneComponent* GetAttachedComponent();// 0xf4aec0
	Actor* GetAttachedActor();// 0xf4ae90

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]
	FString PathToComponent;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0xf544a0
	void ClearCustomMeshTriangles();// 0xf54480
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0xf543d0

--------------------------------
Class: CustomMeshTriangle
	Vector Vertex0;//[Offset: 0x0, Size: 0xc]
	Vector Vertex1;//[Offset: 0xc, Size: 0xc]
	Vector Vertex2;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	static enum ShowCellularDataConfirmation();// 0xf553d0
	static enum RequestRemoval(FString Name);// 0xf55330
	static enum RequestInfo(const FString[] AssetPacks);// 0xf54d40
	static enum RequestDownload(const FString[] AssetPacks);// 0xf54d40
	static void ReleaseDownloadState(const int State);// 0xf552b0
	static void ReleaseAssetPackLocation(const int Location);// 0xf552b0
	static int GetTotalBytesToDownload(const int State);// 0xf55070
	static enum GetStorageMethod(const int Location);// 0xf55220
	static enum GetShowCellularDataConfirmationStatus(out enum Status);// 0xf55190
	static enum GetDownloadStatus(const int State);// 0xf55100
	static enum GetDownloadState(FString Name, out int State);// 0xf54eb0
	static int GetBytesDownloaded(const int State);// 0xf55070
	static FString GetAssetsPath(const int Location);// 0xf54fa0
	static enum GetAssetPackLocation(FString Name, out int Location);// 0xf54eb0
	static enum CancelDownload(const FString[] AssetPacks);// 0xf54d40

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object
	static bool StopLocationServices();// 0xf55cd0
	static bool StartLocationServices();// 0xf55ca0
	static bool IsLocationAccuracyAvailable(enum Accuracy);// 0xf55c20
	static bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0xf55b10
	static LocationServicesImpl* GetLocationServicesImpl();// 0xf55af0
	static LocationServicesData GetLastKnownLocation();// 0xf55ab0
	static bool AreLocationServicesEnabled();// 0xf55a80

--------------------------------
Class: LocationServicesImpl.Object
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LocationServicesData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	float Longitude;//[Offset: 0x4, Size: 0x4]
	float Latitude;//[Offset: 0x8, Size: 0x4]
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4]
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4]
	float Altitude;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0xf59dd0
	float GetInstalledContentSize();// 0xf59c30
	float GetDiskFreeSpace();// 0xf59a30

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0xf5a0b0
	float GetTotalDownloadedSize();// 0xf59d70
	float GetRequiredDiskSpace();// 0xf59c60
	float GetInstallProgress();// 0xf59b60
	FText GetDownloadStatusText();// 0xf59ac0
	float GetDownloadSpeed();// 0xf59a90
	float GetDownloadSize();// 0xf59a60

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	static void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0xf59ec0
	static bool HasActiveWiFiConnection();// 0xf59da0
	static FString[] GetSupportedPlatformNames();// 0xf59c90
	static MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0xf59b90
	static FString GetActiveDeviceProfileName();// 0xf599b0

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 0x1]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 0x1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 0x1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1]
	float Mass;//[Offset: 0x148, Size: 0x4]
	WheelSetup[] WheelSetups;//[Offset: 0x150, Size: 0x10]
	float DragCoefficient;//[Offset: 0x160, Size: 0x4]
	float ChassisWidth;//[Offset: 0x164, Size: 0x4]
	float ChassisHeight;//[Offset: 0x168, Size: 0x4]
	float DragArea;//[Offset: 0x16c, Size: 0x4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x170, Size: 0x4]
	float MaxEngineRPM;//[Offset: 0x174, Size: 0x4]
	float DebugDragMagnitude;//[Offset: 0x178, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x17c, Size: 0xc]
	float MinNormalizedTireLoad;//[Offset: 0x188, Size: 0x4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x18c, Size: 0x4]
	float MaxNormalizedTireLoad;//[Offset: 0x190, Size: 0x4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x194, Size: 0x4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x198, Size: 0x4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x19c, Size: 0x4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1a0, Size: 0x4]
	VehicleWheel*[] Wheels;//[Offset: 0x1a8, Size: 0x10]
	float RVOAvoidanceRadius;//[Offset: 0x1d0, Size: 0x4]
	float RVOAvoidanceHeight;//[Offset: 0x1d4, Size: 0x4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1d8, Size: 0x4]
	float RVOSteeringStep;//[Offset: 0x1dc, Size: 0x4]
	float RVOThrottleStep;//[Offset: 0x1e0, Size: 0x4]
	int AvoidanceUID;//[Offset: 0x1e4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1ec, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1f0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x1f4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x1f8, Size: 0xc]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x204, Size: 0x14]
	float RawSteeringInput;//[Offset: 0x21c, Size: 0x4]
	float RawThrottleInput;//[Offset: 0x220, Size: 0x4]
	float RawBrakeInput;//[Offset: 0x224, Size: 0x4]
	float SteeringInput;//[Offset: 0x228, Size: 0x4]
	float ThrottleInput;//[Offset: 0x22c, Size: 0x4]
	float BrakeInput;//[Offset: 0x230, Size: 0x4]
	float HandbrakeInput;//[Offset: 0x234, Size: 0x4]
	float IdleBrakeInput;//[Offset: 0x238, Size: 0x4]
	float StopThreshold;//[Offset: 0x23c, Size: 0x4]
	float WrongDirectionThreshold;//[Offset: 0x240, Size: 0x4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x244, Size: 0x8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x24c, Size: 0x8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x254, Size: 0x8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x25c, Size: 0x8]
	Controller* OverrideController;//[Offset: 0x288, Size: 0x8]
	void SetUseAutoGears(bool bUseAuto);// 0xf6c980
	void SetThrottleInput(float Throttle);// 0xf6c900
	void SetTargetGear(int GearNum, bool bImmediate);// 0xf6c830
	void SetSteeringInput(float Steering);// 0xf6c7b0
	void SetHandbrakeInput(bool bNewHandbrake);// 0xf6c650
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xf6c5c0
	void SetGroupsToIgnore(int GroupFlags);// 0xf6c530
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xf6c4a0
	void SetGroupsToAvoid(int GroupFlags);// 0xf6c410
	void SetGearUp(bool bNewGearUp);// 0xf6c380
	void SetGearDown(bool bNewGearDown);// 0xf6c2f0
	void SetBrakeInput(float Brake);// 0xf6c0d0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xf6c040
	void SetAvoidanceGroup(int GroupFlags);// 0xf6bfb0
	void SetAvoidanceEnabled(bool bEnable);// 0xf6bf20
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0xf6bd30
	bool GetUseAutoGears();// 0xf6bca0
	int GetTargetGear();// 0xf6bc70
	float GetForwardSpeed();// 0xf6bbb0
	float GetEngineRotationSpeed();// 0xf6bb80
	float GetEngineMaxRotationSpeed();// 0xf6bb50
	int GetCurrentGear();// 0xf6bb20

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc]
	bool bDisableSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 0x8]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector Offset;//[Offset: 0x34, Size: 0xc]
	float ShapeRadius;//[Offset: 0x40, Size: 0x4]
	float ShapeWidth;//[Offset: 0x44, Size: 0x4]
	float Mass;//[Offset: 0x48, Size: 0x4]
	float DampingRate;//[Offset: 0x4c, Size: 0x4]
	float SteerAngle;//[Offset: 0x50, Size: 0x4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	TireType* TireType;//[Offset: 0x58, Size: 0x8]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 0x8]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 0x4]
	float LatStiffValue;//[Offset: 0x6c, Size: 0x4]
	float LongStiffValue;//[Offset: 0x70, Size: 0x4]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 0x4]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 0x4]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 0x4]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 0x4]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 0x4]
	byte SweepType;//[Offset: 0x88, Size: 0x1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 0x4]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 0x4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 0x8]
	int WheelIndex;//[Offset: 0xa0, Size: 0x4]
	float DebugLongSlip;//[Offset: 0xa4, Size: 0x4]
	float DebugLatSlip;//[Offset: 0xa8, Size: 0x4]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 0x4]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 0x4]
	float DebugLongForce;//[Offset: 0xb8, Size: 0x4]
	float DebugLatForce;//[Offset: 0xbc, Size: 0x4]
	Vector Location;//[Offset: 0xc0, Size: 0xc]
	Vector OldLocation;//[Offset: 0xcc, Size: 0xc]
	Vector Velocity;//[Offset: 0xd8, Size: 0xc]
	bool IsInAir();// 0xf6bd00
	float GetSuspensionOffset();// 0xf6bc40
	float GetSteerAngle();// 0xf6bc10
	float GetRotationAngle();// 0xf6bbe0

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4]
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]
	float BrakeInput;//[Offset: 0x8, Size: 0x4]
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4]
	int CurrentGear;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4]
	float FallRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SimpleWheeledVehicleMovementComponent.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	void SetSteerAngle(float SteerAngle, int WheelIndex);// 0xf6c6e0
	void SetDriveTorque(float DriveTorque, int WheelIndex);// 0xf6c220
	void SetBrakeTorque(float BrakeTorque, int WheelIndex);// 0xf6c150

--------------------------------
Class: VehicleAnimInstance.AnimInstance.Object
	WheeledVehicleMovementComponent* WheeledVehicleMovementComponent;//[Offset: 0xa40, Size: 0x8]
	WheeledVehicle* GetVehicle();// 0xf6bcd0

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x290, Size: 0xa0]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x330, Size: 0x1c]
	float AckermannAccuracy;//[Offset: 0x34c, Size: 0x4]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x350, Size: 0x30]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x380, Size: 0x88]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x88]
	float MaxRPM;//[Offset: 0x88, Size: 0x4]
	float MOI;//[Offset: 0x8c, Size: 0x4]
	float DampingRateFullThrottle;//[Offset: 0x90, Size: 0x4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x94, Size: 0x4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1]
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4]
	float CentreBias;//[Offset: 0x10, Size: 0x4]
	float FrontBias;//[Offset: 0x14, Size: 0x4]
	float RearBias;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4]
	float FinalRatio;//[Offset: 0xc, Size: 0x4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0x10]
	float ReverseGearRatio;//[Offset: 0x20, Size: 0x4]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 0x4]
	float ClutchStrength;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4]
	float DownRatio;//[Offset: 0x4, Size: 0x4]
	float UpRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ModularSynthPresetBank.Object
	ModularSynthPresetBankEntry[] Presets;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ModularSynthPresetBankEntry
	FString PresetName;//[Offset: 0x0, Size: 0x10]
	ModularSynthPreset Preset;//[Offset: 0x10, Size: 0xe0]

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	enum Osc1Type;//[Offset: 0xc, Size: 0x1]
	float Osc1Gain;//[Offset: 0x10, Size: 0x4]
	float Osc1Octave;//[Offset: 0x14, Size: 0x4]
	float Osc1Semitones;//[Offset: 0x18, Size: 0x4]
	float Osc1Cents;//[Offset: 0x1c, Size: 0x4]
	float Osc1PulseWidth;//[Offset: 0x20, Size: 0x4]
	enum Osc2Type;//[Offset: 0x24, Size: 0x1]
	float Osc2Gain;//[Offset: 0x28, Size: 0x4]
	float Osc2Octave;//[Offset: 0x2c, Size: 0x4]
	float Osc2Semitones;//[Offset: 0x30, Size: 0x4]
	float Osc2Cents;//[Offset: 0x34, Size: 0x4]
	float Osc2PulseWidth;//[Offset: 0x38, Size: 0x4]
	float Portamento;//[Offset: 0x3c, Size: 0x4]
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	float Spread;//[Offset: 0x44, Size: 0x4]
	float Pan;//[Offset: 0x48, Size: 0x4]
	float LFO1Frequency;//[Offset: 0x4c, Size: 0x4]
	float LFO1Gain;//[Offset: 0x50, Size: 0x4]
	enum LFO1Type;//[Offset: 0x54, Size: 0x1]
	enum LFO1Mode;//[Offset: 0x55, Size: 0x1]
	enum LFO1PatchType;//[Offset: 0x56, Size: 0x1]
	float LFO2Frequency;//[Offset: 0x58, Size: 0x4]
	float LFO2Gain;//[Offset: 0x5c, Size: 0x4]
	enum LFO2Type;//[Offset: 0x60, Size: 0x1]
	enum LFO2Mode;//[Offset: 0x61, Size: 0x1]
	enum LFO2PatchType;//[Offset: 0x62, Size: 0x1]
	float GainDb;//[Offset: 0x64, Size: 0x4]
	float AttackTime;//[Offset: 0x68, Size: 0x4]
	float DecayTime;//[Offset: 0x6c, Size: 0x4]
	float SustainGain;//[Offset: 0x70, Size: 0x4]
	float ReleaseTime;//[Offset: 0x74, Size: 0x4]
	enum ModEnvPatchType;//[Offset: 0x78, Size: 0x1]
	enum ModEnvBiasPatchType;//[Offset: 0x79, Size: 0x1]
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 0x1]
	float ModulationEnvelopeDepth;//[Offset: 0x80, Size: 0x4]
	float ModulationEnvelopeAttackTime;//[Offset: 0x84, Size: 0x4]
	float ModulationEnvelopeDecayTime;//[Offset: 0x88, Size: 0x4]
	float ModulationEnvelopeSustainGain;//[Offset: 0x8c, Size: 0x4]
	float ModulationEnvelopeReleaseTime;//[Offset: 0x90, Size: 0x4]
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94, Size: 0x1]
	float FilterFrequency;//[Offset: 0x98, Size: 0x4]
	float FilterQ;//[Offset: 0x9c, Size: 0x4]
	enum FilterType;//[Offset: 0xa0, Size: 0x1]
	enum FilterAlgorithm;//[Offset: 0xa1, Size: 0x1]
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	enum StereoDelayMode;//[Offset: 0xa8, Size: 0x1]
	float StereoDelayTime;//[Offset: 0xac, Size: 0x4]
	float StereoDelayFeedback;//[Offset: 0xb0, Size: 0x4]
	float StereoDelayWetlevel;//[Offset: 0xb4, Size: 0x4]
	float StereoDelayRatio;//[Offset: 0xb8, Size: 0x4]
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	float ChorusDepth;//[Offset: 0xc0, Size: 0x4]
	float ChorusFeedback;//[Offset: 0xc4, Size: 0x4]
	float ChorusFrequency;//[Offset: 0xc8, Size: 0x4]
	EpicSynth1Patch[] Patches;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1]
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4]
	enum Destination;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object
	static void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, out const ModularSynthPreset Preset, FString PresetName);// 0xf9dfe0

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x6c0, Size: 0x4]
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0xfa05d0
	void SetSustainGain(float SustainGain);// 0xfa0550
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0xfa04d0
	void SetStereoDelayTime(float DelayTimeMsec);// 0xfa0450
	void SetStereoDelayRatio(float DelayRatio);// 0xfa03d0
	void SetStereoDelayMode(enum StereoDelayMode);// 0xfa0350
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0xfa02c0
	void SetStereoDelayFeedback(float DelayFeedback);// 0xfa0240
	void SetSpread(float Spread);// 0xfa01c0
	void SetReleaseTime(float ReleaseTimeMsec);// 0xfa0140
	void SetPortamento(float Portamento);// 0xfa00c0
	void SetPitchBend(float PitchBend);// 0xfa0040
	void SetPan(float Pan);// 0xf9ffc0
	void SetOscType(int OscIndex, enum OscType);// 0xf9fef0
	void SetOscSync(const bool bIsSynced);// 0xf9fe60
	void SetOscSemitones(int OscIndex, float Semitones);// 0xf9fd90
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0xf9fcc0
	void SetOscOctave(int OscIndex, float Octave);// 0xf9fbf0
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0xf9fb20
	void SetOscGain(int OscIndex, float OscGain);// 0xf9fa50
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0xf9f980
	void SetOscCents(int OscIndex, float Cents);// 0xf9f8b0
	void SetModEnvSustainGain(const float SustainGain);// 0xf9f830
	void SetModEnvReleaseTime(const float Release);// 0xf9f7b0
	void SetModEnvPatch(const enum InPatchType);// 0xf9f730
	void SetModEnvInvert(const bool bInvert);// 0xf9f6a0
	void SetModEnvDepth(const float Depth);// 0xf9f620
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0xf9f5a0
	void SetModEnvBiasPatch(const enum InPatchType);// 0xf9f520
	void SetModEnvBiasInvert(const bool bInvert);// 0xf9f490
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0xf9f410
	void SetLFOType(int LFOIndex, enum LFOType);// 0xf9f340
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0xf9f270
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0xf9f1a0
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0xf9f0d0
	void SetLFOGain(int LFOIndex, float Gain);// 0xf9f000
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0xf9ef30
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0xf9ee60
	void SetGainDb(float GainDb);// 0xf9ede0
	void SetFilterType(enum FilterType);// 0xf9ed60
	void SetFilterQMod(float FilterQ);// 0xf9ece0
	void SetFilterQ(float FilterQ);// 0xf9ec60
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0xf9ebe0
	void SetFilterFrequency(float FilterFrequencyHz);// 0xf9eb60
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0xf9eae0
	void SetEnableUnison(bool EnableUnison);// 0xf9ea50
	void SetEnableRetrigger(bool RetriggerEnabled);// 0xf9e9c0
	void SetEnablePolyphony(bool bEnablePolyphony);// 0xf9e930
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0xf9e860
	void SetEnableLegato(bool LegatoEnabled);// 0xf9e7d0
	void SetDecayTime(float DecayTimeMsec);// 0xf9e750
	void SetChorusFrequency(float Frequency);// 0xf9e6d0
	void SetChorusFeedback(float Feedback);// 0xf9e650
	void SetChorusEnabled(bool EnableChorus);// 0xf9e5c0
	void SetChorusDepth(float Depth);// 0xf9e540
	void SetAttackTime(float AttackTimeMsec);// 0xf9e4c0
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0xf9e3a0
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0xf9e280
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0xf9e130

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectBitCrusherSettings Settings;//[Offset: 0xc0, Size: 0x30]
	void SetSettings(out const SourceEffectBitCrusherBaseSettings Settings);// 0xfa5a50
	void SetSampleRateModulator(const SoundModulatorBase* Modulator);// 0xfa59c0
	void SetSampleRate(float SampleRate);// 0xfa5940
	void SetModulationSettings(out const SourceEffectBitCrusherSettings ModulationSettings);// 0xfa5790
	void SetBits(float Bits);// 0xfa52d0
	void SetBitModulator(const SoundModulatorBase* Modulator);// 0xfa5240

--------------------------------
Class: SourceEffectBitCrusherBaseSettings
	float SampleRate;//[Offset: 0x0, Size: 0x4]
	float BitDepth;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SourceEffectBitCrusherSettings
	float CrushedSampleRate;//[Offset: 0x0, Size: 0x4]
	SoundModulationDestinationSettings SampleRateModulation;//[Offset: 0x8, Size: 0x10]
	float CrushedBits;//[Offset: 0x18, Size: 0x4]
	SoundModulationDestinationSettings BitModulation;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectChorusSettings Settings;//[Offset: 0x108, Size: 0x78]
	void SetWetModulator(const SoundModulatorBase* Modulator);// 0xfa6390
	void SetWet(float WetAmount);// 0xfa6310
	void SetSpreadModulator(const SoundModulatorBase* Modulator);// 0xfa6280
	void SetSpread(float Spread);// 0xfa6200
	void SetSettings(out const SourceEffectChorusBaseSettings Settings);// 0xfa5b00
	void SetModulationSettings(out const SourceEffectChorusSettings ModulationSettings);// 0xfa5840
	void SetFrequencyModulator(const SoundModulatorBase* Modulator);// 0xfa5700
	void SetFrequency(float Frequency);// 0xfa5680
	void SetFeedbackModulator(const SoundModulatorBase* Modulator);// 0xfa55f0
	void SetFeedback(float Feedback);// 0xfa5570
	void SetDryModulator(const SoundModulatorBase* Modulator);// 0xfa54e0
	void SetDry(float DryAmount);// 0xfa5460
	void SetDepthModulator(const SoundModulatorBase* Modulator);// 0xfa53d0
	void SetDepth(float Depth);// 0xfa5350

--------------------------------
Class: SourceEffectChorusBaseSettings
	float Depth;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float WetLevel;//[Offset: 0xc, Size: 0x4]
	float DryLevel;//[Offset: 0x10, Size: 0x4]
	float Spread;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SourceEffectChorusSettings
	float Depth;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float WetLevel;//[Offset: 0xc, Size: 0x4]
	float DryLevel;//[Offset: 0x10, Size: 0x4]
	float Spread;//[Offset: 0x14, Size: 0x4]
	SoundModulationDestinationSettings DepthModulation;//[Offset: 0x18, Size: 0x10]
	SoundModulationDestinationSettings FrequencyModulation;//[Offset: 0x28, Size: 0x10]
	SoundModulationDestinationSettings FeedbackModulation;//[Offset: 0x38, Size: 0x10]
	SoundModulationDestinationSettings WetModulation;//[Offset: 0x48, Size: 0x10]
	SoundModulationDestinationSettings DryModulation;//[Offset: 0x58, Size: 0x10]
	SoundModulationDestinationSettings SpreadModulation;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb8, Size: 0x28]
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0xfa5bb0

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4]
	float ThresholdDb;//[Offset: 0x10, Size: 0x4]
	float Ratio;//[Offset: 0x14, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4]
	float InputGainDb;//[Offset: 0x1c, Size: 0x4]
	float OutputGainDb;//[Offset: 0x20, Size: 0x4]
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: EnvelopeFollowerListener.ActorComponent.Object
	delegate OnEnvelopeFollowerUpdate;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEnvelopeFollowerSettings Settings;//[Offset: 0x9c, Size: 0xc]
	void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0xfa6420
	void SetSettings(out const SourceEffectEnvelopeFollowerSettings InSettings);// 0xfa5d10
	void RegisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0xfa51b0

--------------------------------
Class: SourceEffectEnvelopeFollowerSettings
	float AttackTime;//[Offset: 0x0, Size: 0x4]
	float ReleaseTime;//[Offset: 0x4, Size: 0x4]
	enum PeakMode;//[Offset: 0x8, Size: 0x1]
	bool bIsAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0xfa5c60

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4]
	float Bandwidth;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFilterSettings Settings;//[Offset: 0xb0, Size: 0x20]
	void SetSettings(out const SourceEffectFilterSettings InSettings);// 0xfa5dc0

--------------------------------
Class: SourceEffectFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1]
	enum FilterType;//[Offset: 0x1, Size: 0x1]
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4]
	float FilterQ;//[Offset: 0x8, Size: 0x4]
	SourceEffectFilterAudioBusModulationSettings[] AudioBusModulation;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SourceEffectFilterAudioBusModulationSettings
	AudioBus* AudioBus;//[Offset: 0x0, Size: 0x8]
	int EnvelopeFollowerAttackTimeMsec;//[Offset: 0x8, Size: 0x4]
	int EnvelopeFollowerReleaseTimeMsec;//[Offset: 0xc, Size: 0x4]
	float EnvelopeGainMultiplier;//[Offset: 0x10, Size: 0x4]
	enum FilterParam;//[Offset: 0x14, Size: 0x1]
	float MinFrequencyModulation;//[Offset: 0x18, Size: 0x4]
	float MaxFrequencyModulation;//[Offset: 0x1c, Size: 0x4]
	float MinResonanceModulation;//[Offset: 0x20, Size: 0x4]
	float MaxResonanceModulation;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFoldbackDistortionSettings Settings;//[Offset: 0x9c, Size: 0xc]
	void SetSettings(out const SourceEffectFoldbackDistortionSettings InSettings);// 0xfa5e90

--------------------------------
Class: SourceEffectFoldbackDistortionSettings
	float InputGainDb;//[Offset: 0x0, Size: 0x4]
	float ThresholdDb;//[Offset: 0x4, Size: 0x4]
	float OutputGainDb;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x98, Size: 0x8]
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0xfa5f40

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4]
	enum InputMode;//[Offset: 0x4, Size: 0x1]
	enum OutputMode;//[Offset: 0x5, Size: 0x1]
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]

--------------------------------
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPannerSettings Settings;//[Offset: 0x98, Size: 0x8]
	void SetSettings(out const SourceEffectPannerSettings InSettings);// 0xfa5ff0

--------------------------------
Class: SourceEffectPannerSettings
	float Spread;//[Offset: 0x0, Size: 0x4]
	float Pan;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0xfa60a0

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	enum LFOType;//[Offset: 0xc, Size: 0x1]
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectRingModulationSettings Settings;//[Offset: 0xb0, Size: 0x20]
	void SetSettings(out const SourceEffectRingModulationSettings InSettings);// 0xfa6160

--------------------------------
Class: SourceEffectRingModulationSettings
	enum ModulatorType;//[Offset: 0x0, Size: 0x1]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Depth;//[Offset: 0x8, Size: 0x4]
	float DryLevel;//[Offset: 0xc, Size: 0x4]
	float WetLevel;//[Offset: 0x10, Size: 0x4]
	AudioBus* AudioBusModulator;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectSimpleDelaySettings Settings;//[Offset: 0xa8, Size: 0x18]
	void SetSettings(out const SourceEffectSimpleDelaySettings InSettings);// 0xfaa8e0

--------------------------------
Class: SourceEffectSimpleDelaySettings
	float SpeedOfSound;//[Offset: 0x0, Size: 0x4]
	float DelayAmount;//[Offset: 0x4, Size: 0x4]
	float DryAmount;//[Offset: 0x8, Size: 0x4]
	float WetAmount;//[Offset: 0xc, Size: 0x4]
	float Feedback;//[Offset: 0x10, Size: 0x4]
	bool bDelayBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb4, Size: 0x24]
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0xfaa990

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1]
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float DelayRatio;//[Offset: 0xc, Size: 0x4]
	float WetLevel;//[Offset: 0x10, Size: 0x4]
	float DryLevel;//[Offset: 0x14, Size: 0x4]
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum FilterType;//[Offset: 0x19, Size: 0x1]
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4]
	float FilterQ;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectWaveShaperSettings Settings;//[Offset: 0x98, Size: 0x8]
	void SetSettings(out const SourceEffectWaveShaperSettings InSettings);// 0xfa5ff0

--------------------------------
Class: SourceEffectWaveShaperSettings
	float Amount;//[Offset: 0x0, Size: 0x4]
	float OutputGainDb;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10]
	int NumChannels;//[Offset: 0x38, Size: 0x4]
	int SampleRate;//[Offset: 0x3c, Size: 0x4]
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4]
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float[] IRData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8]
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28]
	enum BlockSize;//[Offset: 0x98, Size: 0x1]
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0xfaaa60
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0xfaa630

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4]
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4]
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8]
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDelaySettings Settings;//[Offset: 0x9c, Size: 0xc]
	SubmixEffectDelaySettings DynamicSettings;//[Offset: 0xa8, Size: 0xc]
	void SetSettings(out const SubmixEffectDelaySettings InSettings);// 0xfaab00
	void SetInterpolationTime(float Time);// 0xfaa750
	void SetDelay(float Length);// 0xfaa2b0
	float GetMaxDelayInMilliseconds();// 0xfaa010

--------------------------------
Class: SubmixEffectDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4]
	float InterpolationTime;//[Offset: 0x4, Size: 0x4]
	float DelayLength;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x9c, Size: 0xc]
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0xfaabc0
	void SetFilterType(enum InType);// 0xfaa5b0
	void SetFilterQMod(float InQ);// 0xfaa530
	void SetFilterQ(float InQ);// 0xfaa4b0
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0xfaa430
	void SetFilterCutoffFrequency(float InFrequency);// 0xfaa3b0
	void SetFilterAlgorithm(enum InAlgorithm);// 0xfaa330

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1]
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1]
	float FilterFrequency;//[Offset: 0x4, Size: 0x4]
	float FilterQ;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFlexiverbSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SubmixEffectFlexiverbSettings InSettings);// 0xfaac70

--------------------------------
Class: SubmixEffectFlexiverbSettings
	float PreDelay;//[Offset: 0x0, Size: 0x4]
	float DecayTime;//[Offset: 0x4, Size: 0x4]
	float RoomDampening;//[Offset: 0x8, Size: 0x4]
	int Complexity;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectMultibandCompressorSettings Settings;//[Offset: 0xb0, Size: 0x20]
	void SetSettings(out const SubmixEffectMultibandCompressorSettings InSettings);// 0xfaad30

--------------------------------
Class: SubmixEffectMultibandCompressorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4]
	bool bLinkChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bFourPole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	DynamicsBandSettings[] Bands;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DynamicsBandSettings
	float CrossoverTopFrequency;//[Offset: 0x0, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float ThresholdDb;//[Offset: 0xc, Size: 0x4]
	float Ratio;//[Offset: 0x10, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x14, Size: 0x4]
	float InputGainDb;//[Offset: 0x18, Size: 0x4]
	float OutputGainDb;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb4, Size: 0x24]
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0xfaa990

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1]
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float DelayRatio;//[Offset: 0xc, Size: 0x4]
	float WetLevel;//[Offset: 0x10, Size: 0x4]
	float DryLevel;//[Offset: 0x14, Size: 0x4]
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum FilterType;//[Offset: 0x19, Size: 0x1]
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4]
	float FilterQ;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectTapDelaySettings Settings;//[Offset: 0xa8, Size: 0x18]
	void SetTap(int TapId, out const TapDelayInfo TapInfo);// 0xfaafc0
	void SetSettings(out const SubmixEffectTapDelaySettings InSettings);// 0xfaadf0
	void SetInterpolationTime(float Time);// 0xfaa7d0
	void RemoveTap(int TapId);// 0xfaa220
	void GetTapIds(out int[] TapIds);// 0xfaa130
	void GetTap(int TapId, out TapDelayInfo TapInfo);// 0xfaa050
	float GetMaxDelayInMilliseconds();// 0xfaa030
	void AddTap(out int TapId);// 0xfa9f80

--------------------------------
Class: TapDelayInfo
	enum TapLineMode;//[Offset: 0x0, Size: 0x1]
	float DelayLength;//[Offset: 0x4, Size: 0x4]
	float Gain;//[Offset: 0x8, Size: 0x4]
	int OutputChannel;//[Offset: 0xc, Size: 0x4]
	float PanInDegrees;//[Offset: 0x10, Size: 0x4]
	int TapId;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SubmixEffectTapDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4]
	float InterpolationTime;//[Offset: 0x4, Size: 0x4]
	TapDelayInfo[] Taps;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Synth2DSlider.Widget.Visual.Object
	float ValueX;//[Offset: 0x108, Size: 0x4]
	float ValueY;//[Offset: 0x10c, Size: 0x4]
	delegate ValueXDelegate;//[Offset: 0x110, Size: 0x10]
	delegate ValueYDelegate;//[Offset: 0x120, Size: 0x10]
	Synth2DSliderStyle WidgetStyle;//[Offset: 0x130, Size: 0x2b8]
	LinearColor SliderHandleColor;//[Offset: 0x3e8, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	float StepSize;//[Offset: 0x3fc, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x408, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x418, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x428, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x438, Size: 0x10]
	delegate OnValueChangedX;//[Offset: 0x448, Size: 0x10]
	delegate OnValueChangedY;//[Offset: 0x458, Size: 0x10]
	void SetValue(Vector2D InValue);// 0xfab0a0
	void SetStepSize(float InValue);// 0xfaaf40
	void SetSliderHandleColor(LinearColor InValue);// 0xfaaeb0
	void SetLocked(bool InValue);// 0xfaa850
	void SetIndentHandle(bool InValue);// 0xfaa6c0
	Vector2D GetValue();// 0xfaa1e0

--------------------------------
Class: Synth2DSliderStyle.SlateWidgetStyle
	SlateBrush NormalThumbImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush DisabledThumbImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush NormalBarImage;//[Offset: 0x118, Size: 0x88]
	SlateBrush DisabledBarImage;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush BackgroundImage;//[Offset: 0x228, Size: 0x88]
	float BarThickness;//[Offset: 0x2b0, Size: 0x4]

--------------------------------
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* GranulatedSoundWave;//[Offset: 0x6c0, Size: 0x8]
	void SetSustainGain(const float SustainGain);// 0xfaf590
	void SetSoundWave(SoundWave* InSoundWave);// 0xfaf470
	void SetScrubMode(const bool bScrubMode);// 0xfaf2d0
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);// 0xfaf250
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, enum SeekType);// 0xfaeba0
	void SetPlaybackSpeed(const float InPlayheadRate);// 0xfaeb20
	void SetGrainVolume(const float BaseVolume, const Vector2D VolumeRange);// 0xfae890
	void SetGrainsPerSecond(const float InGrainsPerSecond);// 0xfae950
	void SetGrainProbability(const float InGrainProbability);// 0xfae810
	void SetGrainPitch(const float BasePitch, const Vector2D PitchRange);// 0xfae750
	void SetGrainPan(const float BasePan, const Vector2D PanRange);// 0xfae690
	void SetGrainEnvelopeType(const enum EnvelopeType);// 0xfae610
	void SetGrainDuration(const float BaseDurationMsec, const Vector2D DurationRange);// 0xfae550
	void SetDecayTime(const float DecayTimeMsec);// 0xfadc00
	void SetAttackTime(const float AttackTimeMsec);// 0xfadc00
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0xfad420
	void NoteOff(const float Note, const bool bKill);// 0xfad2c0
	bool IsLoaded();// 0xfad260
	float GetSampleDuration();// 0xfad200
	float GetCurrentPlayheadTime();// 0xfacc80

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10]
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4]
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4]
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10]
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object
	delegate OnTableAltered;//[Offset: 0x6c0, Size: 0x10]
	delegate OnNumTablesChanged;//[Offset: 0x6d0, Size: 0x10]
	MonoWaveTableSynthPreset* CurrentPreset;//[Offset: 0x6e0, Size: 0x8]
	void SetWaveTablePosition(float InPosition);// 0xfaf720
	void SetSustainPedalState(bool InSustainPedalState);// 0xfaf610
	void SetPosLfoType(const enum InLfoType);// 0xfaedb0
	void SetPosLfoFrequency(const float InLfoFrequency);// 0xfaed30
	void SetPosLfoDepth(const float InLfoDepth);// 0xfaecb0
	void SetPositionEnvelopeSustainGain(const float InSustainGain);// 0xfaf1d0
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0xfaf150
	void SetPositionEnvelopeInvert(const bool bInInvert);// 0xfaf0c0
	void SetPositionEnvelopeDepth(const float InDepth);// 0xfaf040
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);// 0xfaefc0
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);// 0xfaef30
	void SetPositionEnvelopeBiasDepth(const float InDepth);// 0xfaeeb0
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);// 0xfaee30
	void SetLowPassFilterResonance(float InNewQ);// 0xfae9d0
	void SetFrequencyWithMidiNote(const float InMidiNote);// 0xfae4d0
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);// 0xfae450
	void SetFrequency(const float FrequencyHz);// 0xfae350
	void SetFilterEnvelopeSustainGain(const float InSustainGain);// 0xfae250
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0xfae1d0
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);// 0xfae2d0
	void SetFilterEnvelopeInvert(const bool bInInvert);// 0xfae140
	void SetFilterEnvelopeDepth(const float InDepth);// 0xfae0c0
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);// 0xfae030
	void SetFilterEnvelopeBiasDepth(const float InDepth);// 0xfadfb0
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);// 0xfadf30
	bool SetCurveValue(int TableIndex, int KeyframeIndex, const float NewValue);// 0xfade20
	bool SetCurveTangent(int TableIndex, float InNewTangent);// 0xfadd50
	bool SetCurveInterpolationType(enum InterpolationType, int TableIndex);// 0xfadc80
	void SetAmpEnvelopeSustainGain(const float InSustainGain);// 0xfadb80
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0xfadb00
	void SetAmpEnvelopeInvert(const bool bInInvert);// 0xfada70
	void SetAmpEnvelopeDepth(const float InDepth);// 0xfad9f0
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);// 0xfad970
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);// 0xfad8e0
	void SetAmpEnvelopeBiasDepth(const float InDepth);// 0xfad860
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);// 0xfad7e0
	void RefreshWaveTable(int Index);// 0xfad630
	void RefreshAllWaveTables();// 0xfad610
	void NoteOn(const float InMidiNote, const float InVelocity);// 0xfad540
	void NoteOff(const float InMidiNote);// 0xfad3a0
	int GetNumTableEntries();// 0xfad1d0
	int GetMaxTableIndex();// 0xfad190
	float[] GetKeyFrameValuesForTable(float TableIndex);// 0xfacd50
	float GetCurveTangent(int TableIndex);// 0xfaccb0

--------------------------------
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object
	float Frequency;//[Offset: 0x6c0, Size: 0x4]
	float Volume;//[Offset: 0x6c4, Size: 0x4]
	void SetVolume(float InVolume);// 0xfaf6a0
	void SetFrequency(float InFrequency);// 0xfae3d0

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x6c0, Size: 0x8]
	delegate OnSampleLoaded;//[Offset: 0x6c8, Size: 0x10]
	delegate OnSamplePlaybackProgress;//[Offset: 0x6d8, Size: 0x10]
	void SetSoundWave(SoundWave* InSoundWave);// 0xfaf500
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0xfaf3f0
	void SetScrubMode(bool bScrubMode);// 0xfaf360
	void SetPitch(float InPitch, float TimeSec);// 0xfaea50
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0xfad6c0
	bool IsLoaded();// 0xfad290
	float GetSampleDuration();// 0xfad230
	float GetCurrentPlaybackProgressTime();// 0xfacc50
	float GetCurrentPlaybackProgressPercent();// 0xfacc20

--------------------------------
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0xfacfe0
	static float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0xface30

--------------------------------
Class: SynthKnob.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4]
	float StepSize;//[Offset: 0x10c, Size: 0x4]
	float MouseSpeed;//[Offset: 0x110, Size: 0x4]
	float MouseFineTuneSpeed;//[Offset: 0x114, Size: 0x4]
	bool ShowTooltipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	FText ParameterName;//[Offset: 0x120, Size: 0x18]
	FText ParameterUnits;//[Offset: 0x138, Size: 0x18]
	delegate ValueDelegate;//[Offset: 0x150, Size: 0x10]
	SynthKnobStyle WidgetStyle;//[Offset: 0x160, Size: 0x238]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x3a0, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x3b0, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x3c0, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x3d0, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x3e0, Size: 0x10]
	void SetValue(float InValue);// 0xfb0040
	void SetStepSize(float InValue);// 0xfaffc0
	void SetLocked(bool InValue);// 0xfaff30
	float GetValue();// 0xfaff00

--------------------------------
Class: SynthKnobStyle.SlateWidgetStyle
	SlateBrush LargeKnob;//[Offset: 0x8, Size: 0x88]
	SlateBrush LargeKnobOverlay;//[Offset: 0x90, Size: 0x88]
	SlateBrush MediumKnob;//[Offset: 0x118, Size: 0x88]
	SlateBrush MediumKnobOverlay;//[Offset: 0x1a0, Size: 0x88]
	float MinValueAngle;//[Offset: 0x228, Size: 0x4]
	float MaxValueAngle;//[Offset: 0x22c, Size: 0x4]
	enum KnobSize;//[Offset: 0x230, Size: 0x1]

--------------------------------
Class: AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8]
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4]
	int NumBands;//[Offset: 0x2c, Size: 0x4]
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4]
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4]
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum FFTSize;//[Offset: 0x39, Size: 0x1]
	enum WindowType;//[Offset: 0x3a, Size: 0x1]
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1]
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4]
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1]
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	ConstantQNRTSettings* Settings;//[Offset: 0x78, Size: 0x8]
	void GetNormalizedChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0xfbda10
	void GetChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0xfbd500

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4]
	enum CurveType;//[Offset: 0x34, Size: 0x1]
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8]
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0xfbde40
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0xfbdb40
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0xfbd930
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0xfbd630

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAsset.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4]
	float Sensitivity;//[Offset: 0x30, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAsset.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8]
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0xfbdc60
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0xfbd750

--------------------------------
Class: ChooseNextWaypoint.BTTaskNode.BTNode.Object
	BlackboardKeySelector Index;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector Waypoint;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector bWaypointDirectionIsForward;//[Offset: 0xc0, Size: 0x28]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: TigerBuffStun.TigerBuff.Object

--------------------------------
Class: TigerBuffBlockAILogic.TigerBuff.Object

--------------------------------
Class: TigerBuffImmobilize.TigerBuff.Object

--------------------------------
Class: TigerBuffGround.TigerBuff.Object

--------------------------------
Class: TigerBuffInvulnerable.TigerBuff.Object

--------------------------------
Class: TigerBuffInvisible.TigerBuff.Object

--------------------------------
Class: TigerBuffDisableClimbing.TigerBuff.Object

--------------------------------
Class: TigerBuffBlockOffensiveActions.TigerBuff.Object

--------------------------------
Class: TigerKeyTextureMapping.DataAsset.Object
	<Key,Texture2D*> KeyTextures;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: PatrolComponent.ActorComponent.Object

--------------------------------
Class: TigerActivatedAudioComponent.ActorComponent.Object
	bool bApplyOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	AkAudioEvent* AkEventToPost;//[Offset: 0xb8, Size: 0x8]
	AkAudioEvent* AkStopEventToPost;//[Offset: 0xc0, Size: 0x8]
	bool bDrawActivationDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: TigerRebuildableActor.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	SceneComponent*[] BuildCreatedComponents;//[Offset: 0x230, Size: 0x10]
	void OnRebuild();// 0x197e4f0
	SceneComponent* ConvertToBuildComponent(SceneComponent* BlueprintCreatedComponent);// 0x15cccd0

--------------------------------
Class: TigerActivatedObject.TigerRebuildableActor.Actor.Object
	StaticMeshComponent* BaseMesh;//[Offset: 0x240, Size: 0x8]
	AkAudioEvent* ActivationAudioEvent;//[Offset: 0x248, Size: 0x8]
	bool bActivationAudioShouldPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool bTriggerOnlyOnPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	bool bUseAudioActivationRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 0x1]
	float ActivationRadius;//[Offset: 0x254, Size: 0x4]
	float AudioFadeOutDuration;//[Offset: 0x258, Size: 0x4]
	bool bAllowOnHitEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	PrimitiveComponent* WeakCharacterTrigger;//[Offset: 0x260, Size: 0x8]
	void SetCharacterTriggerComponent(PrimitiveComponent* TriggerComponent);// 0x1475180
	void OnObjectDeactivated();// 0x197e4f0
	void OnObjectActivated();// 0x197e4f0
	void OnEndCharacterOverlap(TigerCharacter* OverlappingCharacter, int TotalOverlapCount);// 0x197e4f0
	void OnCharacterHit(TigerCharacter* InOverlappingCharacter, Vector InNormalImpulse, out const HitResult InHitResult);// 0x197e4f0
	void OnBeginCharacterOverlap(TigerCharacter* OverlappingCharacter, int TotalOverlapCount);// 0x197e4f0
	void EndCharacterOverlap(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex);// 0x1474b80
	void CharacterHit(PrimitiveComponent* InHitComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, Vector InNormalImpulse, out const HitResult InHit);// 0x1474810
	void BeginCharacterOverlap(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex, bool bInFromSweep, out const HitResult InSweepResult);// 0x14745e0

--------------------------------
Class: TigerActivatedObjectSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: TigerActiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: TigerActorGrid.Actor.Object

--------------------------------
Class: TigerActorGridSettings.DeveloperSettings.Object
	<enum,TigerActorGridSettingsData> GridsToInstantiate;//[Offset: 0x38, Size: 0x50]
	float DebugDrawTime;//[Offset: 0x88, Size: 0x4]
	float GridZOffset;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: TigerActorGridSettingsData
	class TigerActorGrid* GridClass;//[Offset: 0x0, Size: 0x8]
	int Rows;//[Offset: 0x8, Size: 0x4]
	int Columns;//[Offset: 0xc, Size: 0x4]
	int ActorReserveSize;//[Offset: 0x10, Size: 0x4]
	int CellActorReserveSize;//[Offset: 0x14, Size: 0x4]
	Color DebugColorGrid;//[Offset: 0x18, Size: 0x4]
	Color DebugColorQueryBounds;//[Offset: 0x1c, Size: 0x4]
	float LineThickness;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: TigerActorGridSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: TigerActorGridVolume.Actor.Object
	<enum,TigerActorGrid*> ActorGrids;//[Offset: 0x228, Size: 0x50]
	BoxComponent* BoundingBox;//[Offset: 0x278, Size: 0x8]
	void DebugStopDrawActorGrid(const enum InCategory);// 0x1474b00
	void DebugDrawActorGrid(const enum InCategory, const float InExtentX, const float InExtentY);// 0x14749f0

--------------------------------
Class: TigerAIAwayFromSuspiciousService.BTService.BTAuxiliaryNode.BTNode.Object
	Box SearchFleeSpotBox;//[Offset: 0x70, Size: 0x1c]
	BlackboardKeySelector FleePoint;//[Offset: 0x90, Size: 0x28]
	BlackboardKeySelector CurrentMasqueradeTarget;//[Offset: 0xb8, Size: 0x28]
	BlackboardKeySelector WantsToReportPlayer;//[Offset: 0xe0, Size: 0x28]
	float KeepFleeingFromSpecificPlayerRadiusSquared;//[Offset: 0x108, Size: 0x4]
	float BoxCenterDistanceFromNPCPosition;//[Offset: 0x10c, Size: 0x4]
	UInt32Property NumberOfTimesToRandomForAFleeSpot;//[Size: 0x4]
	bool bShowDebugFeatures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	TigerPlayer* PlayerFleeingFrom;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: TigerAiBarkTask.BTTaskNode.BTNode.Object
	TigerNpcVoCategory BarkToPlay;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: TigerNpcVoCategory
	FName Category;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x268, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x364a6f0

--------------------------------
Class: TigerPathFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: TigerAIBenchmarkDiablerizeTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaximumDiablerizeDistance;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAiBenchmarkDisciplineTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	TigerLocalAIControllerBase* AIControllerBase;//[Offset: 0x98, Size: 0x8]
	TigerPlayerController* TigerPlayerController;//[Offset: 0xa0, Size: 0x8]
	TigerCharacter* AiTigerCharacter;//[Offset: 0xa8, Size: 0x8]
	TigerPlayer* TigerPlayer;//[Offset: 0xb0, Size: 0x8]
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0xb8, Size: 0x8]
	TigerDisciplineBase* CurrentDisciplineBase;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: TigerAIBenchmarkFindPlayerTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bUseHeightenedSensesSearchRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	float CustomSearchSphereRadius;//[Offset: 0x9c, Size: 0x4]
	bool bDrawSearchSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	float MaxVerticalPositionOffset;//[Offset: 0xa4, Size: 0x4]
	float RaycastDistance;//[Offset: 0xa8, Size: 0x4]
	int SearchLowLevelThreshold;//[Offset: 0xac, Size: 0x4]
	float SearchLowHealthPercentageThreshold;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: TigerAiCalculateFiringLocationsScoreService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector TargetKey;//[Offset: 0x70, Size: 0x28]
	bool bDebugDrawLocations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bDebugDrawSweepChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bDebugDrawInvalidLocationReason;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]

--------------------------------
Class: TigerAiCanCrouch.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float MinCrouchDistanceBuffer;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: TigerAiCanFleeDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: TigerAICanInvestigateDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector CurrentSuspiciousTarget;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: TigerAiCanUseWeaponPowerDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bConditionInvertedOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: TigerAICAP.TigerAICAPBase.Actor.Object
	TigerAICommandBase*[] Commands;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: TigerAiCheckCanDiablerize.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bConditionInvertedOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: TigerAiCheckIsTargetDowned.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bConditionInvertedOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: TigerAIClearMasqueradeTargetTask.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAICommandAbandonCAP.TigerAICommandBase.Object
	float ChanceToAbandonCAP;//[Offset: 0x40, Size: 0x4]
	bool bShouldFindSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: TigerAICommandContextualAction.TigerAICommandBase.Object
	TigerContextualAnimationWrapper[] ContextualAnimations;//[Offset: 0x40, Size: 0x10]
	float WaitTimeBefore;//[Offset: 0x50, Size: 0x4]
	float WaitTimeBeforeRandomDeviation;//[Offset: 0x54, Size: 0x4]
	float WaitTimeAfter;//[Offset: 0x58, Size: 0x4]
	float WaitTimeAfterRandomDeviation;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: TigerContextualAnimationWrapper
	FName AnimationName;//[Offset: 0x0, Size: 0x8]
	float Chance;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerAICommandMoveTo.TigerAICommandBase.Object
	TigerAIMoveToLocationData MoveToData;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: TigerAIMoveToLocationData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float AcceptanceRadius;//[Offset: 0xc, Size: 0x4]
	float Yaw;//[Offset: 0x10, Size: 0x4]
	bool bSetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerAICommandPlayerProximityWait.TigerAICommandBase.Object
	float SquaredPlayerProximityRadiusRequired;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TigerAICommandWaitForOrder.TigerAICommandBase.Object

--------------------------------
Class: TigerAiDisciplineTaskBase.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	TigerLocalAIController* LocalAIController;//[Offset: 0x98, Size: 0x8]
	TigerCharacter* AiTigerCharacter;//[Offset: 0xa0, Size: 0x8]
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0xa8, Size: 0x8]
	TigerDisciplineBase* CurrentDisciplineBase;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: TigerAiEntityMovementModeService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector TargetLocationKey;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector bCanShootKey;//[Offset: 0x98, Size: 0x28]
	float StartSprintDistanceBuffer;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: TigerAIEntityReactPlayersService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector SuspiciousTarget;//[Offset: 0x70, Size: 0x28]
	float ThresholdDistanceSquared;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAiFindFiringLocation.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetKey;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector FiringLocationKey;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector FiringLocationIndexKey;//[Offset: 0xc0, Size: 0x28]
	BlackboardKeySelector bCanShootKey;//[Offset: 0xe8, Size: 0x28]
	float ClaimedLocationDuration;//[Offset: 0x110, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]

--------------------------------
Class: TigerAIFireAtActorTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetToShootActorKey;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector CanShootKey;//[Offset: 0xc0, Size: 0x28]

--------------------------------
Class: TigerAIFleeFromThreatService.BTService.BTAuxiliaryNode.BTNode.Object
	Box SearchFleeSpotBox;//[Offset: 0x70, Size: 0x1c]
	BlackboardKeySelector FleePoint;//[Offset: 0x90, Size: 0x28]
	BlackboardKeySelector ClosestThreatPosition;//[Offset: 0xb8, Size: 0x28]
	BlackboardKeySelector CurrentMasqueradeTarget;//[Offset: 0xe0, Size: 0x28]
	float KeepFleeingFromSpecificPlayerRadiusSquared;//[Offset: 0x108, Size: 0x4]
	float BoxCenterDistanceFromNPCPosition;//[Offset: 0x10c, Size: 0x4]
	bool bShowDebugFeatures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	TigerPlayer* PlayerFleeingFrom;//[Offset: 0x114, Size: 0x8]

--------------------------------
Class: TigerAIGetSuspectTargetService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector SuspectPosition;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector CurrentSuspectTarget;//[Offset: 0x98, Size: 0x28]
	bool bShowDebugFeatures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: TigerAiGiveOrderToSquad.BTTaskNode.BTNode.Object
	enum OrderToGive;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: TigerAIGroupCAP.TigerAiSpawningCap.TigerAICAPBase.Actor.Object
	TigerAiGroupCapSlot[] CapSlots;//[Offset: 0x290, Size: 0x10]
	bool TriggerNextCommandForSlot(TigerNPC* NPC, const int CapSlotIndex);// 0x147c7e0
	bool OnRequestNewCommands(TigerNPC* NPC);// 0x197e4f0
	bool OnIsAvailableCheck();// 0x147c670
	bool IsSlotAvailable(const int Index);// 0x147c5d0
	int GetSlotAssignedToNPC(TigerNPC* NPC);// 0x147c530
	TigerAICommandBase* GetNextCommand(out TigerAiGroupCapSlot CapSlot, const int CapSlotIndex);// 0x147c3e0
	void CapCommandStarted(const int CapSlotIndex, const int CommandIndex);// 0x147c310
	bool AssignNpcToSlot(const int SlotIndex, TigerNPC* NPC);// 0x147c240

--------------------------------
Class: TigerAiGroupCapSlot
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Yaw;//[Offset: 0xc, Size: 0x4]
	TigerNPCAsset* NpcAssetToSpawn;//[Offset: 0x10, Size: 0x8]
	enum[] RestrictedNpcTypesForSlot;//[Offset: 0x18, Size: 0x10]
	TigerAIGroupCapCommandWrapper[] SlotCommands;//[Offset: 0x28, Size: 0x10]
	bool bLoopCommands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	TigerNPC* OccupyingNPC;//[Offset: 0x40, Size: 0x8]
	int CommandIndex;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: TigerAIGroupCapCommandWrapper
	TigerAIGroupCapCondition Condition;//[Offset: 0x0, Size: 0xc]
	TigerAICommandBase* Command;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerAIGroupCapCondition
	int Slot;//[Offset: 0x0, Size: 0x4]
	int CommandIndex;//[Offset: 0x4, Size: 0x4]
	enum ConditionCheckTiming;//[Offset: 0x8, Size: 0x1]
	enum FailedConditionAction;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerAiHasCurrentSquadOrder.BTDecorator.BTAuxiliaryNode.BTNode.Object
	enum SquadOrderToCompare;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: TigerAiHasPlayerInSightDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: TigerAiIsHeightElevationBlockingVision.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector TargetLocationKey;//[Offset: 0x68, Size: 0x28]
	BlackboardKeySelector bCanSeeTargetKey;//[Offset: 0x90, Size: 0x28]
	float MaxVerticalAngleToTarget;//[Offset: 0xb8, Size: 0x4]
	float LargeEnoughHeightDifference;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: TigerAiIsInMovementRestrictionBoundsArea.BTDecorator.BTAuxiliaryNode.BTNode.Object
	enum AreaToCompare;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: TigerAiIsMovingOutOfBounds.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector TargetPositionKey;//[Offset: 0x68, Size: 0x28]
	float OutOfBoundsDistance;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: TigerAIIsReactingDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: TigerAiIsSquadCaptain.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: TigerAimingCameraBehavior.TigerActiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: TigerAiMoveAsyncTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadiusSq;//[Offset: 0x98, Size: 0x4]
	float ObservedBlackboardValueToleranceSq;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8]
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4]
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1]
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerAiMoveToTask.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bResetMoveTargetOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: TigerAiPathToTargetService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector TargetLocationKey;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector SuitableEdgeLocationKey;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector IsTargetOutOfBoundsKey;//[Offset: 0xc0, Size: 0x28]
	BlackboardKeySelector HasPathToTargetKey;//[Offset: 0xe8, Size: 0x28]
	BlackboardKeySelector IsPathOutOfBoundsKey;//[Offset: 0x110, Size: 0x28]
	float OutOfBoundsDistance;//[Offset: 0x138, Size: 0x4]
	float HeightDifferenceOutOfBounds;//[Offset: 0x13c, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]

--------------------------------
Class: TigerAIPerceptionSystem.AIPerceptionSystem.AISubsystem.Object

--------------------------------
Class: TigerAiPerfBenchUseWeapon.BTTaskNode.BTNode.Object
	TigerLocalAIControllerBase* LocalAIController;//[Offset: 0x80, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerAIPetClearPathToMaster.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAIPetComponent.ActorComponent.Object
	bool HasGotEndPoint();// 0x14810a0
	Vector[] GetMasterPlayersStoredPath();// 0x1481010
	Vector GetEndPoint();// 0x1480fe0

--------------------------------
Class: TigerAIPetFindEndOfMastersPath.BTTaskNode.BTNode.Object
	BlackboardKeySelector MasterPlayer;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: TigerAIPetPreparePathContinuing.BTTaskNode.BTNode.Object
	BlackboardKeySelector MasterPlayer;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: TigerAIPetStoreValidMasterPos.BTTaskNode.BTNode.Object
	BlackboardKeySelector MasterPlayer;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: TigerAIPlayAnimationTask.BTTaskNode.BTNode.Object
	AnimMontage* AnimationToPlay;//[Offset: 0x70, Size: 0x8]
	BlackboardKeySelector ContextualActionPointKey;//[Offset: 0x78, Size: 0x28]
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: TigerAiPlayerAtWpRangeDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bConditionInvertedOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: TigerAIPlayerClearPrioritiesTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAIPlayerClimbIfPossibleTask.BTTaskNode.BTNode.Object
	TigerLocalAIControllerBase* LocalAIController;//[Offset: 0x70, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x78, Size: 0x8]
	TigerPlayerCameraManager* PlayerCamera;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* CurrentPawn;//[Offset: 0x88, Size: 0x8]
	TigerCharacterMovementComponent* PlayerMovementComponent;//[Offset: 0x90, Size: 0x8]
	TigerTraversalClimbState* ClimbState;//[Offset: 0x98, Size: 0x8]
	TigerTraversalStateClimbingConfig* ClimbConfig;//[Offset: 0xa0, Size: 0x8]
	float AngleFromForward;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: TigerTraversalClimbState.TigerTraversalBaseFiniteState.Object
	TigerTraversalStateClimbingConfig* ClimbingConfig;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TigerTraversalStateClimbingConfig.TigerTraversalStateConfigBase.Object
	FName CameraClimbingSocketName;//[Offset: 0x50, Size: 0x8]
	FName ClimbingSpeedAnimationCurveName;//[Offset: 0x58, Size: 0x8]
	FName ClimbingBlendSpaceName;//[Offset: 0x60, Size: 0x8]
	FName ClimbStartBlendSpaceName;//[Offset: 0x68, Size: 0x8]
	float ClimbingCameraInterpSpeed;//[Offset: 0x70, Size: 0x4]
	float ClimbingCameraInterpDelay;//[Offset: 0x74, Size: 0x4]
	float ClimbablePrimaryAngleCheckOffset;//[Offset: 0x78, Size: 0x4]
	float ClimbableFeetCheckOffset;//[Offset: 0x7c, Size: 0x4]
	float ClimbableOffset;//[Offset: 0x80, Size: 0x4]
	float ClimbableExtraSearchDepth;//[Offset: 0x84, Size: 0x4]
	float StartingClimbDepth;//[Offset: 0x88, Size: 0x4]
	float ClimbHorizontalAdjustmentSpeed;//[Offset: 0x8c, Size: 0x4]
	float ClimbLowHorizontalAdjustmentSpeed;//[Offset: 0x90, Size: 0x4]
	float IndoorClimbRadiusScale;//[Offset: 0x94, Size: 0x4]
	float IndoorClimbVerticalOffset;//[Offset: 0x98, Size: 0x4]
	float IndoorClimbBackwardOffset;//[Offset: 0x9c, Size: 0x4]
	float IndoorClimbIndoorUpsideDownDeadzoneHalfAngle;//[Offset: 0xa0, Size: 0x4]
	float CornerTraceLength;//[Offset: 0xa4, Size: 0x4]
	float ClimbableCornerAngleTreshold;//[Offset: 0xa8, Size: 0x4]
	float CornerCheckAngle;//[Offset: 0xac, Size: 0x4]
	float DistanceToCheckForClimbingOverhangs;//[Offset: 0xb0, Size: 0x4]
	float MaximumOverhangAdjustmentLength;//[Offset: 0xb4, Size: 0x4]
	float ClimbingOverHangCheckSweepRadius;//[Offset: 0xb8, Size: 0x4]
	float MinimumOverHangLeadUpBufferPercentage;//[Offset: 0xbc, Size: 0x4]
	float ClimbingInputZCutOff;//[Offset: 0xc0, Size: 0x4]
	float MinimumUpwardClimbAngle;//[Offset: 0xc4, Size: 0x4]
	float MaximumSidewaysClimbDeviation;//[Offset: 0xc8, Size: 0x4]
	float ClimbingOverHangZCutOff;//[Offset: 0xcc, Size: 0x4]
	float StartClimbInAirAllowedAngleDifference;//[Offset: 0xd0, Size: 0x4]
	float StartClimbOnGroundAllowedAngleDifference;//[Offset: 0xd4, Size: 0x4]
	float StartClimbInAirAllowedAngleDifferenceGamepad;//[Offset: 0xd8, Size: 0x4]
	float StartClimbOnGroundAllowedAngleDifferenceGamepad;//[Offset: 0xdc, Size: 0x4]
	float ClimbCooldown;//[Offset: 0xe0, Size: 0x4]
	float IndoorClimbingCooldown;//[Offset: 0xe4, Size: 0x4]
	float VerticalClimbSpeed;//[Offset: 0xe8, Size: 0x4]
	float HorizontalClimbSpeed;//[Offset: 0xec, Size: 0x4]
	float MaximumAllowedAngleDifferenceBetweenClimbTargets;//[Offset: 0xf0, Size: 0x4]
	bool bShouldReadClimbSpeedFromAnimationCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool bResetIndoorClimbCooldownWhenOutside;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	bool bResetIndoorClimbCooldownOnLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 0x1]
	bool bShouldAvoidOverhangsDuringClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 0x1]
	bool bOnlyStartClimbIfLookingAtWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bUseSocketForNonLinearCameraWhenClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bShouldInterpClimbingCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]

--------------------------------
Class: TigerAiPlayerCombatService.BTService.BTAuxiliaryNode.BTNode.Object
	TigerLocalAIController* LocalAIController;//[Offset: 0x70, Size: 0x8]
	Actor* CurrentLureTarget;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerAiPlayerDiablerizeTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaximumDiablerizeDistance;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAiPlayerEquipRangedWeapon.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAIPlayerFeeding.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaximumFeedingDistance;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAIPlayerFindBloodHuntedTask.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAIPlayerFindCivilianTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bUseHeightenedSensesSearchRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	float CustomSearchSphereRadius;//[Offset: 0x9c, Size: 0x4]
	bool bDrawSearchSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	float MaxVerticalPositionOffset;//[Offset: 0xa4, Size: 0x4]
	float RaycastDistance;//[Offset: 0xa8, Size: 0x4]
	int SearchLowResonanceThreshold;//[Offset: 0xac, Size: 0x4]
	float SearchLowHealthPercentageThreshold;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: TigerAIPlayerFindClosestItemTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaxVerticalPositionOffset;//[Offset: 0x98, Size: 0x4]
	float RaycastDistance;//[Offset: 0x9c, Size: 0x4]
	float SearchSphereRadius;//[Offset: 0xa0, Size: 0x4]
	float LowAmmoThresholdWorldItems;//[Offset: 0xa4, Size: 0x4]
	float LowAmmoThresholdLootTables;//[Offset: 0xa8, Size: 0x4]
	float SignificantDropChanceThreshold;//[Offset: 0xac, Size: 0x4]
	TigerLocalAIController* LocalAIController;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: TigerAIPlayerFindNewPointTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float NavigablePointRadius;//[Offset: 0x98, Size: 0x4]
	float MaxCenterDistance;//[Offset: 0x9c, Size: 0x4]
	float NextWaveSafetyDistance;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: TigerAiPlayerMainStateService.BTService.BTAuxiliaryNode.BTNode.Object
	TigerLocalAIController* LocalAIController;//[Offset: 0x78, Size: 0x8]
	TigerPlayer* AiPlayer;//[Offset: 0x80, Size: 0x8]
	TigerCharacter* TargetCharacter;//[Offset: 0x88, Size: 0x8]
	TigerInventoryComponent* LocalAiInventory;//[Offset: 0x90, Size: 0x8]
	TigerCharacter* ClosestHostileCharacterFleeingFrom;//[Offset: 0x98, Size: 0x8]
	float FleeAttackDistance;//[Offset: 0xd0, Size: 0x4]
	void OnReactionDelayPassed(Actor* InActor);// 0x14813a0
	void OnPerceptionUpdated(Actor* InActor, AIStimulus InStimulus);// 0x1481210
	void OnDiablerizeStateChanged(bool InIsDiablerizeActive, bool InIsTarget);// 0x14810c0

--------------------------------
Class: TigerAIPlayerMoveToTask.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	TigerAIPlayerClimbIfPossibleTask* ClimbTask;//[Offset: 0xb8, Size: 0x8]
	TigerAIPlayerSlideIfPossibleTask* SlideTask;//[Offset: 0xc0, Size: 0x8]
	TigerAIPlayerWallGrindTask* WallGrindTask;//[Offset: 0xc8, Size: 0x8]
	float CheckStuckDelay;//[Offset: 0xd0, Size: 0x4]
	float CheckClimbTaskTransitionsDelay;//[Offset: 0xd8, Size: 0x4]
	float CheckSlideTaskTransitionsDelay;//[Offset: 0xe0, Size: 0x4]
	float JumpGapTransitionsDelay;//[Offset: 0xe8, Size: 0x4]
	TigerLocalAIController* LocalAIController;//[Offset: 0xf0, Size: 0x8]
	TigerPlayer* CurrentTigerPlayer;//[Offset: 0xf8, Size: 0x8]
	void OnLifeStatusChanged(enum InNewLifeStatus);// 0x1481190

--------------------------------
Class: TigerAIPlayerSlideIfPossibleTask.BTTaskNode.BTNode.Object
	float MinimumSlideDistanceSqrd;//[Offset: 0x70, Size: 0x4]
	TigerLocalAIController* LocalAIController;//[Offset: 0x78, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* CurrentPawn;//[Offset: 0x88, Size: 0x8]
	TigerCharacterMovementComponent* PlayerMovementComponent;//[Offset: 0x90, Size: 0x8]
	TigerTraversalSlideState* SlideState;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: TigerTraversalSlideState.TigerTraversalBaseFiniteState.Object
	TigerTraversalStateSlidingConfig* Slidingconfig;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerTraversalStateSlidingConfig.TigerTraversalStateConfigBase.Object
	float SlideGravityMultiplier;//[Offset: 0x50, Size: 0x4]
	float SlideTerminalSpeed;//[Offset: 0x54, Size: 0x4]
	float BrakingDecelerationSliding;//[Offset: 0x58, Size: 0x4]
	float BrakingDecelerationSlidingStop;//[Offset: 0x5c, Size: 0x4]
	float RequiredVelocityForSlideStart;//[Offset: 0x60, Size: 0x4]
	float RequiredFallingVelocityForSlideStart;//[Offset: 0x64, Size: 0x4]
	float HorizontalSpeedForFallingSlide;//[Offset: 0x68, Size: 0x4]
	float ThresholdVelocityForSlideStop;//[Offset: 0x6c, Size: 0x4]
	float SlideVelocityBoostMultiplier;//[Offset: 0x70, Size: 0x4]
	float SlideFallingHorizontalBoostMultiplier;//[Offset: 0x74, Size: 0x4]
	float SlideFallingVerticalBoostMultiplier;//[Offset: 0x78, Size: 0x4]
	float SlideAirGraceTime;//[Offset: 0x7c, Size: 0x4]
	float SlideBoostDecayRecoverySpeed;//[Offset: 0x80, Size: 0x4]
	float SlideControllerRotationTime;//[Offset: 0x84, Size: 0x4]
	float SlidingWallCollisionCutOffHalfAngle;//[Offset: 0x88, Size: 0x4]
	float SlidingWallCollisionSweepRadius;//[Offset: 0x8c, Size: 0x4]
	float SlidingWallCollisionZecondaryCheckZOffset;//[Offset: 0x90, Size: 0x4]
	float SlideTimeBeforeJumpIsAllowed;//[Offset: 0x94, Size: 0x4]
	float TimeOfForcedSliding;//[Offset: 0x98, Size: 0x4]
	CurveFloat* SlideBoostDecayCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* SlideGravityCurve;//[Offset: 0xa8, Size: 0x8]
	CurveFloat* HorizontalSpeedForFallingSlideCurve;//[Offset: 0xb0, Size: 0x8]
	CurveFloat* DownwardsAngleDifferenceMultiplierCurve;//[Offset: 0xb8, Size: 0x8]
	CurveFloat* DecelerationCurve;//[Offset: 0xc0, Size: 0x8]
	bool bUseSlideAlongSurfaceLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPrintVariablesOnFallSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: TigerAIPlayerWallGrindTask.BTTaskNode.BTNode.Object
	TigerLocalAIController* LocalAIController;//[Offset: 0x78, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* CurrentPawn;//[Offset: 0x88, Size: 0x8]
	TigerCharacterMovementComponent* PlayerMovementComponent;//[Offset: 0x90, Size: 0x8]
	TigerTraversalWallGrindState* GrindState;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: TigerTraversalWallGrindState.TigerTraversalBaseFiniteState.Object
	TigerTraversalStateWallGrindConfig* WallGrindConfig;//[Offset: 0x170, Size: 0x8]
	void UpdateEffect(out const FName InAssociatedBoneName, out const HitResult InHitResult, const TigerCharacter* InTigerCharacter);// 0x197e4f0
	void StopEffect(out const FName InAssociatedBoneName, const TigerCharacter* InTigerCharacter);// 0x197e4f0
	void StartEffect(out const FName InAssociatedBoneName, out const HitResult InHitResult, const TigerCharacter* InTigerCharacter);// 0x197e4f0

--------------------------------
Class: TigerTraversalStateWallGrindConfig.TigerTraversalStateConfigBase.Object
	Vector ColliderOffset;//[Offset: 0x50, Size: 0xc]
	float SphereColliderRadius;//[Offset: 0x5c, Size: 0x4]
	float WallGrindCancelInputHalfAngle;//[Offset: 0x60, Size: 0x4]
	float WallGrindCancelInputDelayTime;//[Offset: 0x64, Size: 0x4]
	float WallGrindVelocityRemapDeadZone;//[Offset: 0x68, Size: 0x4]
	float WallGrindMaxHorizontalSpeed;//[Offset: 0x6c, Size: 0x4]
	float WallGrindBufferDistance;//[Offset: 0x70, Size: 0x4]
	float WallGrindBufferAdjustmentSpeed;//[Offset: 0x74, Size: 0x4]
	float RequiredSuccessfulSimulationTime;//[Offset: 0x78, Size: 0x4]
	float MinRequiredAngleBetweenStartingNormalAndPathDir;//[Offset: 0x7c, Size: 0x4]
	float WallGrindPossibleStartAngleThreshold;//[Offset: 0x80, Size: 0x4]
	float WallGrindSimulationSharpAngleThreshold;//[Offset: 0x84, Size: 0x4]
	float WallGrindObstacleDetectionDepth;//[Offset: 0x88, Size: 0x4]
	float WallGrindObstacleDetectionDistance;//[Offset: 0x8c, Size: 0x4]
	float WallGrindObstacleAvoidanceStrength;//[Offset: 0x90, Size: 0x4]
	float WallGrindObstacleStateActivationSpeed;//[Offset: 0x94, Size: 0x4]
	int8 NumberofSimulationChecksPerSecond;//[Offset: 0x98, Size: 0x1]
	float WallGrindNormalLerpSpeed;//[Offset: 0x9c, Size: 0x4]
	CurveFloat* WallGrindFallVelocitySpeedUp;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* WallGrindFallVelocitySlowDown;//[Offset: 0xa8, Size: 0x8]
	CurveFloat* WallGrindStartingHorizontalSpeedMultipler;//[Offset: 0xb0, Size: 0x8]
	bool bOnlyAdjustFallSpeedWhenFallingTooFast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bShouldBlockWallGrindingWhenHoldingCancelInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bShouldClampHorizontalSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bWallGrindShouldBufferDistanceToWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 0x1]
	bool bValidateWallgrindByCheckingPathAverageToWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bDrawOutWallNormalsUsedInAWallGrind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]

--------------------------------
Class: TigerAIPlayerOpenInteractiveTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAIPlayerPickPriorityTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaxVerticalPositionOffset;//[Offset: 0x98, Size: 0x4]
	float RaycastDistance;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: TigerAIPlayerPickUpItemTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaximumLootingDistance;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAIPlayerTravelBloodVeinTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	CurveFloat* JumpProbabilityDistribution;//[Offset: 0x98, Size: 0x8]
	enum JumpDistributionType;//[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: TigerAIPlayerUseHealingItem.BTTaskNode.BTNode.Object
	TigerAIPlayerUseProtectiveItemData[] RedGasItems;//[Offset: 0x80, Size: 0x10]
	TigerAIPlayerUseProtectiveItemData[] SlowUseHealthItems;//[Offset: 0x90, Size: 0x10]
	TigerAIPlayerUseProtectiveItemData[] SlowUseShieldItems;//[Offset: 0xa0, Size: 0x10]
	TigerAIPlayerUseProtectiveItemData[] FastUseHealthItems;//[Offset: 0xb0, Size: 0x10]
	TigerAIPlayerUseProtectiveItemData[] FastUseShieldItems;//[Offset: 0xc0, Size: 0x10]
	TigerLocalAIControllerBase* LocalAiControllerBase;//[Offset: 0xd8, Size: 0x8]
	TigerLocalAIController* LocalAIController;//[Offset: 0xe0, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: TigerAIPlayerUseProtectiveItemData
	TigerConsumableAsset* ProtectiveAssetToUse;//[Offset: 0x0, Size: 0x28]
	float UseThresholdProtectiveValue;//[Offset: 0x28, Size: 0x4]
	float CanUseThresholdRange;//[Offset: 0x2c, Size: 0x4]
	float DamageTimeThreshold;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TigerAiPlayerUseWeapon.BTTaskNode.BTNode.Object
	TigerLocalAIControllerBase* LocalAIController;//[Offset: 0x80, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerAiPlayerUseWeaponPower.BTTaskNode.BTNode.Object
	TigerLocalAIControllerBase* LocalAiControllerBase;//[Offset: 0x78, Size: 0x8]
	TigerLocalAIController* LocalAIController;//[Offset: 0x80, Size: 0x8]
	TigerPlayerController* PlayerController;//[Offset: 0x88, Size: 0x8]
	TigerDisciplineBase* WeaponAbility;//[Offset: 0x90, Size: 0x8]
	TigerPlayer* PlayerPawn;//[Offset: 0x98, Size: 0x8]
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0xa0, Size: 0x8]
	float ThrowingKnifeUseChance;//[Offset: 0xa8, Size: 0x4]
	float DualBladesUseChance;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: TigerAIRedGasAvoidance.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bCheckInRedGas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bCheckDesireMoveNextWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bCheckInDangerOfWave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]

--------------------------------
Class: TigerAiReloadWeaponTask.BTTaskNode.BTNode.Object
	void OnReloadAborted(const bool bInWeaponDropped);// 0x1481430

--------------------------------
Class: TigerAiReportNewThreatTask.BTTaskNode.BTNode.Object
	BlackboardKeySelector PlayerToReportKey;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: TigerAIReportSuspciousPlayer.BTTaskNode.BTNode.Object
	BlackboardKeySelector PoliceTarget;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector CurrentMasqueradeTarget;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector PlayerNeedsToBeReported;//[Offset: 0xc0, Size: 0x28]

--------------------------------
Class: TigerAiRequestOutOfBoundsPursuitSquad.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetPlayer;//[Offset: 0x70, Size: 0x28]
	float NearbySquadDistance;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: TigerAISense_Masquerade.AISense.Object
	TigerAIMasqueradeEvent[] MasqueradeEvents;//[Offset: 0x80, Size: 0x10]
	static void ReportPlayerAction(TigerPlayer* Instigator, out const TigerAIPlayerAction PlayerAction);// 0x14814c0

--------------------------------
Class: TigerAIMasqueradeEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	TigerCharacter* TargetActor;//[Offset: 0x20, Size: 0x8]
	TigerPlayer* Instigator;//[Offset: 0x28, Size: 0x8]
	TigerAIPlayerAction PlayerAction;//[Offset: 0x30, Size: 0x58]

--------------------------------
Class: TigerAISenseConfig_Masquerade.AISenseConfig.Object
	class TigerAISense_Masquerade* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: TigerAISense_Sight.AISense_Sight.AISense.Object

--------------------------------
Class: TigerAISenseConfig_Sight.AISenseConfig.Object
	class TigerAISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	float CloseSightRadius;//[Offset: 0x5c, Size: 0x4]
	float CloseLoseSightRadius;//[Offset: 0x60, Size: 0x4]
	float ClosePeripheralVisionAngleDegrees;//[Offset: 0x64, Size: 0x4]
	float HeightDifference;//[Offset: 0x68, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x6c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: TigerAiSetCrouchedTask.BTTaskNode.BTNode.Object
	bool bShouldCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: TigerAiSetMovementMode.BTTaskNode.BTNode.Object
	enum MovementMode;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: TigerAiShouldFireFleeDecorator.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: TigerAiShouldReloadDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bBaseUponFullAmmoPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float ReloadAmmoPercentage;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: TigerAiShouldReportNewThreatDecorator.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector PlayerToReportKey;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: TigerAiShouldRequestOutOfBoundsPursuitSquad.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector CurrentTargetKey;//[Offset: 0x68, Size: 0x28]
	float MaxDistanceFromCurrentSquad;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: TigerAiShouldUseDisciplineBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float LowHealthPercentage;//[Offset: 0x68, Size: 0x4]
	TigerLocalAIController* LocalAIController;//[Offset: 0x70, Size: 0x8]
	TigerPlayerController* LocalAiPlayerController;//[Offset: 0x78, Size: 0x8]
	TigerPlayer* AiTigerPlayer;//[Offset: 0x80, Size: 0x8]
	TigerDisciplineComponent* DisciplineComponent;//[Offset: 0x88, Size: 0x8]
	TigerCharacter* AiTigerCharacter;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: TigerAiShouldUseArchDiscipline.TigerAiShouldUseDisciplineBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ShockwavePunchMinimumTargetDistance;//[Offset: 0x98, Size: 0x4]
	float EarthshockUseWithoutJumpChance;//[Offset: 0x9c, Size: 0x4]
	float TrapsAndScoutsUseNearLootDistance;//[Offset: 0xa0, Size: 0x4]
	float ScoutsRedeployChance;//[Offset: 0xa4, Size: 0x4]
	float RejuvenatingVoiceLowHealthPercentage;//[Offset: 0xa8, Size: 0x4]
	float RejuvenatingVoiceUndamagedDurationRequirement;//[Offset: 0xac, Size: 0x4]
	float BlindingBeautyMaxUseRange;//[Offset: 0xb0, Size: 0x4]
	float TankyChargeUseDistance;//[Offset: 0xb4, Size: 0x4]
	float ScoutsDamageWindowThreshold;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: TigerAiShouldUseClanDiscipline.TigerAiShouldUseDisciplineBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float DisableNearTargetDistance;//[Offset: 0x98, Size: 0x4]
	float SoaringLeapRayClearance;//[Offset: 0x9c, Size: 0x4]
	float VanishCombatUseChance;//[Offset: 0xa0, Size: 0x4]
	float ProjectionDashUseDistance;//[Offset: 0xa4, Size: 0x4]
	float FleshOfMarbleHealthThreshold;//[Offset: 0xa8, Size: 0x4]
	float FleshOfMarbleTimeThreshold;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: TigerAiShouldUseWeaponAbility.TigerAiShouldUseDisciplineBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ReflectDamageIntervalThreshold;//[Offset: 0x98, Size: 0x4]
	float ReflectDamageAmountThreshold;//[Offset: 0x9c, Size: 0x4]
	float ThrowingKnifeMinimumRange;//[Offset: 0xa0, Size: 0x4]
	float ThrowingKnifeMaximumRange;//[Offset: 0xa4, Size: 0x4]
	float ThrowingKnifeDamageIntervalThreshold;//[Offset: 0xa8, Size: 0x4]
	float ThrowingKnifeDamageAmountThreshold;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: TigerAISpawner.TigerNPCSpawningBase.Actor.Object
	TigerNPCAsset* NPCAsset;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TigerAiSquadFormationService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector FormationLocationKey;//[Offset: 0x70, Size: 0x28]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: TigerAIsRespondingToRoar.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: TigerAiStopActiveCapTask.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAiTargetOutOfBounds.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector IsTargetOutOfBoundsKey;//[Offset: 0x68, Size: 0x28]
	BlackboardKeySelector HasPathToTargetKey;//[Offset: 0x90, Size: 0x28]
	BlackboardKeySelector IsPathOutOfBoundsKey;//[Offset: 0xb8, Size: 0x28]

--------------------------------
Class: TigerAIThreateningTargetService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ThreatPosition;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector CurrentThreatTarget;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector SuggestedNonObstructedPosition;//[Offset: 0xc0, Size: 0x28]
	BlackboardKeySelector bIsAllowedToChaseKey;//[Offset: 0xe8, Size: 0x28]
	BlackboardKeySelector bCanShoot;//[Offset: 0x110, Size: 0x28]
	bool bUseAttackPermissions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool bShowDebugFeatures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]

--------------------------------
Class: TigerAIThreateningTargetEntityService.TigerAIThreateningTargetService.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector MasqueradeBreachTargetKey;//[Offset: 0x148, Size: 0x28]

--------------------------------
Class: TigerAiTryFindLocationAgainstElevatedTarget.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetLocationKey;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector SuggestedLocationKey;//[Offset: 0x98, Size: 0x28]
	float MaxStepbackDistance;//[Offset: 0xc0, Size: 0x4]
	float MinStepbackDistance;//[Offset: 0xc4, Size: 0x4]
	float DesiredMaxVerticalAngle;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: TigerAIUpdateBloodDrainedService.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxTimeInBloodDrainedState;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: TigerAIUpdateWaypoint.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector Index;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector Waypoint;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector bWaypointDirectionIsForward;//[Offset: 0xc0, Size: 0x28]
	float Distance;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: TigerAiUseArchetypeDisciplineTask.TigerAiDisciplineTaskBase.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAiUseClanDisciplineTask.TigerAiDisciplineTaskBase.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: TigerAIWithinMovementBoundsServices.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector TargetLocationKey;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: TigerDisciplineMetaData.AnimMetaData.Object
	enum DisicplineType;//[Offset: 0x28, Size: 0x1]
	bool bAllowRotationLerp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: TigerCustomSequenceListClan.TigerCustomSequenceList.Object
	AnimSequence* Sequences;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomSequenceListGender.TigerCustomSequenceList.Object
	AnimSequence* Sequences;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomSequenceListClanAndGender.TigerCustomSequenceList.Object
	TigerPlayerSequenceByClan SequencesByClan;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: TigerPlayerSequenceByClan
	AnimSequence* AnimationObjects;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerCustomMontageListClan.TigerCustomMontageList.Object
	AnimMontage* Montages;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomMontageListGender.TigerCustomMontageList.Object
	AnimMontage* Montages;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomMontageListClanAndGender.TigerCustomMontageList.Object
	TigerPlayerMontageByClan MontagesByClan;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: TigerPlayerMontageByClan
	AnimMontage* AnimationObjects;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerCustomMontageListMeleeWeapon.TigerCustomMontageList.Object
	<class TigerMeleeWeapon,AnimMontage*> Montages;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: TigerCustomBlendSpaceListClan.TigerCustomBlendSpaceList.Object
	BlendSpace* BlendSpaces;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomBlendSpaceListGender.TigerCustomBlendSpaceList.Object
	BlendSpace* BlendSpaces;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomBlendSpaceListClanAndGender.TigerCustomBlendSpaceList.Object
	TigerPlayerBlendSpaceByClan BlendSpacesByClan;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: TigerPlayerBlendSpaceByClan
	BlendSpace* AnimationObjects;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerCustomBlendSpace1DListClan.TigerCustomBlendSpace1DList.Object
	BlendSpace1D* BlendSpaces;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomBlendSpace1DListGender.TigerCustomBlendSpace1DList.Object
	BlendSpace1D* BlendSpaces;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerCustomBlendSpace1DListClanAndGender.TigerCustomBlendSpace1DList.Object
	TigerPlayerBlendSpace1DByClan BlendSpacesByClan;//[Offset: 0x28, Size: 0x28]

--------------------------------
Class: TigerPlayerBlendSpace1DByClan
	BlendSpace1D* AnimationObjects;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerAnimIKWindow.AnimNotifyState.Object
	FName SocketName;//[Offset: 0x30, Size: 0x8]
	FName SocketToLineTraceFrom;//[Offset: 0x38, Size: 0x8]
	enum IKSearchDirection;//[Offset: 0x40, Size: 0x1]
	FName TargetJoint;//[Offset: 0x44, Size: 0x8]
	float TargetJointVerticalOffsetAmount;//[Offset: 0x4c, Size: 0x4]
	float TargetJointHorizontalOffsetAmount;//[Offset: 0x50, Size: 0x4]
	float TargetJointDepthOffsetAmount;//[Offset: 0x54, Size: 0x4]
	float IKResultVerticalAdjustment;//[Offset: 0x58, Size: 0x4]
	float IKResultHorizontalAdjustment;//[Offset: 0x5c, Size: 0x4]
	float IKResultDepthAdjustment;//[Offset: 0x60, Size: 0x4]
	float IKResultAlpha;//[Offset: 0x64, Size: 0x4]
	bool bIKShouldRemainActiveWhenAnimationLoops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float InOutBlendSpeed;//[Offset: 0x6c, Size: 0x4]
	bool bShouldBlendInAndOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: TigerAnimNotiftyStateFlying.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotify_AddProps.AnimNotify.Object
	class TigerPropDummy* PropDummyClass;//[Offset: 0x38, Size: 0x8]
	FName[] PropsToSpawn;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerPropDummy.Character.Pawn.Actor.Object
	TigerNpcPropComponent* PropComponent;//[Offset: 0x4b8, Size: 0x8]
	TigerDummyPropAttachment[] Attachments;//[Offset: 0x4c0, Size: 0x10]

--------------------------------
Class: TigerDummyPropAttachment
	TigerPropAttachmentInfo AttachmentInfo;//[Offset: 0x0, Size: 0x60]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: TigerAnimNotify_CameraAnimation.AnimNotify.Object
	CameraAnim* CameraAnimation;//[Offset: 0x38, Size: 0x8]
	float AnimationRate;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TigerAnimNotify_CameraShake.AnimNotify.Object
	class MatineeCameraShake* ShakeType;//[Offset: 0x38, Size: 0x8]
	float ShakeScale;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TigerAnimNotify_Discipline.AnimNotify.Object
	enum Discipline;//[Offset: 0x38, Size: 0x1]
	enum DisciplineEvent;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: TigerAnimNotify_DropProps.AnimNotify.Object

--------------------------------
Class: TigerAnimNotify_Footstep.AnimNotify.Object
	bool bIsLeftFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float FootstepDuration;//[Offset: 0x3c, Size: 0x4]
	void SetData(bool bIsLeftFootIn, float FootstepDurationIn);// 0x14897b0

--------------------------------
Class: TigerAnimNotify_Melee.AnimNotify.Object
	FName EventName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerAnimNotify_NiagaraEffect.AnimNotify.Object
	SoftObjectPath NiagaraPath;//[Offset: 0x38, Size: 0x18]
	NiagaraSystem* CachedNiagaraEffect;//[Offset: 0x50, Size: 0x8]
	FName AttachPointName;//[Offset: 0x58, Size: 0x8]
	Vector EffectLocation;//[Offset: 0x60, Size: 0xc]
	Rotator EffectRotation;//[Offset: 0x6c, Size: 0xc]
	byte AttachLocationRule;//[Offset: 0x78, Size: 0x1]
	bool bOnlySpawnOnLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]

--------------------------------
Class: TigerAnimNotify_ParticleEffect.AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* IndoorPSTemplate;//[Offset: 0x90, Size: 0x8]
	ParticleSystem* OutdoorPSTemplate;//[Offset: 0x98, Size: 0x8]
	enum PlayOnClients;//[Offset: 0xa0, Size: 0x1]
	TigerParticleStrategyChooseSystem* ChooseParticleSystemOverride;//[Offset: 0xc0, Size: 0x8]
	TigerParticleStrategyPostSpawn* ParticlePostSpawnModification;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: TigerParticleStrategyChooseSystem.TigerParticleStrategy.Object
	ParticleSystem* ChooseSpawningSystem(const TigerCharacter* InParticleInstigator);// 0x156fc40

--------------------------------
Class: TigerParticleStrategy.Object

--------------------------------
Class: TigerParticleStrategyPostSpawn.TigerParticleStrategy.Object
	void ExecutePostSpawnStrategy(ParticleSystemComponent* InParticleToExecuteOn, const TigerCharacter* InParticleInstigator);// 0x156ffb0

--------------------------------
Class: TigerAnimNotify_PlayCharEffect.AnimNotify.Object
	class TigerCharacterEffect* Effect;//[Offset: 0x38, Size: 0x8]
	FName SocketToUse;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TigerAnimNotify_PlayVoEvent.AnimNotify.Object
	TigerNpcVoCategory VoCategory;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerAnimNotify_PrimeWeapon.AnimNotify.Object

--------------------------------
Class: TigerAnimNotify_Ragdoll.AnimNotify.Object
	FName RagdollOnlyBelowBone;//[Offset: 0x38, Size: 0x8]
	bool bIncludeNamedBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float VelocityScale;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: TigerAnimNotify_Recklessness.AnimNotify.Object
	bool bActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: TigerAnimNotify_ReloadSlot.AnimNotify.Object

--------------------------------
Class: TigerAnimNotify_ReloadComplete.TigerAnimNotify_ReloadSlot.AnimNotify.Object

--------------------------------
Class: TigerAnimNotify_ReloadFull.TigerAnimNotify_ReloadSlot.AnimNotify.Object

--------------------------------
Class: TigerAnimNotify_ReloadSingle.TigerAnimNotify_ReloadSlot.AnimNotify.Object

--------------------------------
Class: TigerAnimNotify_SetCapContext.AnimNotify.Object
	FName ContextName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: TigerAnimNotify_SpawnMesh.AnimNotify.Object
	StaticMesh* MeshToSpawn;//[Offset: 0x38, Size: 0x8]
	FName SocketToSpawnFrom;//[Offset: 0x40, Size: 0x8]
	Vector Direction;//[Offset: 0x48, Size: 0xc]
	float Speed;//[Offset: 0x60, Size: 0x4]
	float RandomAngularImpulseStrength;//[Offset: 0x68, Size: 0x4]
	bool bShowInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: TigerAnimNotify_TriggerUpdateWpnAppearance.AnimNotify.Object

--------------------------------
Class: TigerAnimNotifyState_AbortAnimationOnInput.AnimNotifyState.Object
	float BlendOutTime;//[Offset: 0x30, Size: 0x4]
	bool bShouldAbortOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bShouldAbortOnHeldBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: TigerAnimNotifyState_CameraPresetOverride.AnimNotifyState.Object
	class TigerCameraPreset* CameraPreset;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerAnimNotifyState_CancelReactionIfThreatened.AnimNotifyState.Object
	enum StateToCancelFor;//[Offset: 0x30, Size: 0x1]
	void OnReactionCanceled(TigerNPC* NPC);// 0x197e4f0

--------------------------------
Class: TigerAnimNotifyState_DamageImmunity.AnimNotifyState.Object
	class DamageType[] ImmunityTo;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerAnimNotifyState_EnableTurnStart.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotifyState_EnableWeaponHitbox.AnimNotifyState.Object
	CurveFloat* pitchOffsetCurve;//[Offset: 0x40, Size: 0x8]
	int WeaponIndex;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: TigerAnimNotifyState_FaceCameraDirection.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotifyState_HeavyAttackRange.AnimNotifyState.Object
	void OnChargeUpEnded(TigerPlayer* Player, TigerMeleeWeapon* EquippedWeapon, float ChargeUpRatio);// 0x197e4f0
	TigerMeleeWeapon* GetEquippedWeapon(SkeletalMeshComponent* MeshComp);// 0x148d6d0

--------------------------------
Class: TigerAnimNotifyState_HideWeapon.AnimNotifyState.Object
	enum WeaponAppearanceUpdate;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: TigerAnimNotifyState_Invulnerability.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotifyState_LockOwner.AnimNotifyState.Object
	bool bStopActiveMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: TigerAnimNotifyState_MeleeRecoveryEnableMove.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotifyState_OverrideCanInteractInDodge.AnimNotifyState.Object
	class TigerMeleeWeapon* RequiredWeapon;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerAnimNotifyState_RangedHitAnimInterruptRange.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotifyState_ResetCloth.AnimNotifyState.Object

--------------------------------
Class: TigerAnimNotifyState_TimedIndoorOutDoorParticleEffect.AnimNotifyState.Object
	ParticleSystem* IndoorPSTemplate;//[Offset: 0x30, Size: 0x8]
	ParticleSystem* OutdoorPSTemplate;//[Offset: 0x38, Size: 0x8]
	enum PlayOnClients;//[Offset: 0x40, Size: 0x1]
	FName SocketName;//[Offset: 0x44, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x4c, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x58, Size: 0xc]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	TigerParticleStrategyChooseSystem* ChooseParticleSystemOverride;//[Offset: 0x68, Size: 0x8]
	TigerParticleStrategyPostSpawn* ParticlePostSpawnModification;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: TigerAnimNotifyState_WallGrindFX.AnimNotifyState.Object
	FName[] SocketsToUse;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerAnimNotifyState_WeaponGlow.AnimNotifyState.Object
	void OnWeaponGlowEnd(SkeletalMeshComponent* WeaponMeshComponent, const TigerMeleeWeaponTrailConfig* WeaponEffectsConfig);// 0x197e4f0
	void OnWeaponGlowBegin(SkeletalMeshComponent* WeaponMeshComponent, const TigerMeleeWeaponTrailConfig* WeaponEffectsConfig);// 0x197e4f0

--------------------------------
Class: TigerAnimNotifyStateAttachMesh.AnimNotifyState.Object
	StaticMesh* MeshToSpawn;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	bool bShowInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float PropTimeout;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: TigerAnimNotifyStateJdgSword.AnimNotifyState.Object

--------------------------------
Class: TigerANS_DeltaCorrectionWindow.AnimNotifyState.Object

--------------------------------
Class: TigerAnsSidewaysClimbBlocker.AnimNotifyState.Object

--------------------------------
Class: TigerApartmentArchetype.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	SceneComponent* Min;//[Offset: 0x230, Size: 0x8]
	SceneComponent* Max;//[Offset: 0x238, Size: 0x8]
	MaterialInterface*[] PossibleWallpapers;//[Offset: 0x240, Size: 0x10]

--------------------------------
Class: TigerApartmentLight.Actor.Object

--------------------------------
Class: TigerArchetypeLevelWidget.TigerWidget.UserWidget.Widget.Visual.Object
	int ArchetypeLevel;//[Offset: 0x280, Size: 0x4]
	TigerPlayer* RepresentedPlayer;//[Offset: 0x284, Size: 0x8]
	void UpdateArchetypeLevel();// 0x197e4f0
	void OnSelectedPerksUpdated();// 0x197e4f0
	void OnSelectedCharacterChanged(TigerPersistentPlayerState* InPersistentPlayerState);// 0x148e480
	void OnArchetypeChanged(TigerPlayerClanData* InClanData, TigerPowerKit* InArchetypeData);// 0x148e070
	void Init(TigerPlayer* InRepresentedPlayer);// 0x148dfe0

--------------------------------
Class: TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	World* DefaultSubLevel;//[Offset: 0x2c0, Size: 0x28]
	TigerSubLevelList* SubLevelList;//[Offset: 0x2f0, Size: 0x8]
	FName DefaultCameraTag;//[Offset: 0x2f8, Size: 0x8]
	FName SpawnLocationTag;//[Offset: 0x300, Size: 0x8]
	ViewTargetTransitionParams CameraTransitionParams;//[Offset: 0x308, Size: 0x10]
	TigerItemPreviewAsset* ItemPreviews;//[Offset: 0x318, Size: 0x28]
	FName ItemParentTag;//[Offset: 0x340, Size: 0x8]
	TigerSingleChildActor* ItemParentActor;//[Offset: 0x348, Size: 0x8]
	class TigerInventoryItemBase* CurrentPreviewItem;//[Offset: 0x350, Size: 0x28]
	CineCameraActor*[] CinematicCameras;//[Offset: 0x378, Size: 0x10]
	delegate OnBackgroundShown;//[Offset: 0x3a8, Size: 0x10]
	bool TransitionToCameraWithTag(out const FName CameraTag, bool bUseCameraTransition);// 0x15d7350
	void ShowDefaultBackgroundScene();// 0x15d7330
	void ShowBackgroundScene(int InSubLevelIndex);// 0x15d72a0
	void RetryPreviewItem();// 0x15d7280
	void PreviewReward(const TigerItemId ItemId);// 0x15d71f0
	void PreviewItem(out const class TigerInventoryItemBase InItemClassPath);// 0x15d7130
	void OnPreviewItemUpdated(TigerInventoryItemBase* InPreviewItem, TigerBattlepassRewardPreview* InPreviewActor, const TigerInventoryItemBase* InCombinedItemParent);// 0x197e4f0
	void OnPreviewItemOpened();// 0x15d7080
	void OnBackgroundSceneShownNative();// 0x14e1610
	void OnBackgroundSceneShown();// 0x197e4f0
	void OnBackgroundSceneLoadedNative();// 0x15d7060
	void HidePreviewItem();// 0x15d6f70
	Actor*[] GetCurrentPaperDollArray(const FName InBattlePassSubLevelName);// 0x15d6e60

--------------------------------
Class: TigerSubLevelList.DataAsset.Object
	TigerSubLevelBackground[] SubLevels;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerSubLevelBackground
	SoftObjectPath SubLevel;//[Offset: 0x0, Size: 0x18]
	FText UiName;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: TigerBattlepassRewardPreview.Actor.Object
	TigerInventoryItemBase* PreviewItem;//[Offset: 0x228, Size: 0x8]
	bool bIsZoomEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	FName[] CameraTags;//[Offset: 0x238, Size: 0x10]
	TigerItemPreviewCamera[] Cameras;//[Offset: 0x248, Size: 0x10]
	ViewTargetTransitionParams CameraTransitionParams;//[Offset: 0x258, Size: 0x10]
	float CameraRadius;//[Offset: 0x268, Size: 0x4]
	float CameraMoveSpeed;//[Offset: 0x26c, Size: 0x4]
	void SetNormalizedCameraHeight(CineCameraActor* InCameraActor, float InNormalizedHeight);// 0x153b930
	void OnToggleCamera(CineCameraActor* InCurrentCamera, CineCameraActor* InNewCamera);// 0x197e4f0
	void OnPreviewItemUpdated();// 0x197e4f0
	void OnPreviewItemOpened();// 0x197e4f0
	void MoveToCameraIndex(int InNewCameraIndex);// 0x153b550
	bool IsValidCameraOffset(Vector InCameraOffset);// 0x153b3a0
	float GetNormalizedCameraHeight(CineCameraActor* InCameraActor);// 0x153b1a0
	void AddWorldRotationToItem(out const Rotator InRotation);// 0x153aa50

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7b0, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x29ef440

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7c0, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x7cc, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x7d8, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x7f0, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x848, Size: 0x4]
	float CurrentAperture;//[Offset: 0x84c, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x850, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x860, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x870, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x880, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0x890, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0x8a0, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0x8b0, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0x8b4, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x29ef980
	void SetFilmbackPresetByName(FString InPresetName);// 0x29ef8e0
	void SetCurrentFocalLength(float InFocalLength);// 0x29ef860
	float GetVerticalFieldOfView();// 0x29ef830
	static NamedLensPreset[] GetLensPresetsCopy();// 0x29ef730
	FString GetLensPresetName();// 0x29ef6b0
	float GetHorizontalFieldOfView();// 0x29ef680
	static NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x29ef5a0
	FString GetFilmbackPresetName();// 0x29ef520
	FString GetDefaultFilmbackPresetName();// 0x29ef460

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: TigerItemPreviewCamera
	CineCameraActor* CameraActor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerItemPreviewAsset.DataAsset.Object
	TigerItemPreviewData[] ItemPreviews;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerItemPreviewData
	class TigerBattlepassRewardPreview* PreviewActorClass;//[Offset: 0x0, Size: 0x8]
	class TigerInventoryItemBase[] ItemClasses;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerSingleChildActor.Actor.Object
	Actor* ChildActor;//[Offset: 0x228, Size: 0x8]
	void SetChildActorClass(class Actor ChildActorClass);// 0x15e0100

--------------------------------
Class: TigerArchetypeSelectElysiumUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPersistentPlayerCharacter[] PlayerCharacters;//[Offset: 0x3c0, Size: 0x10]
	TigerItemId AdditionalCharacterSlotItem;//[Offset: 0x3d0, Size: 0x8]
	byte NumCharacterSlots;//[Offset: 0x3d8, Size: 0x1]
	void SelectCharacter(TigerPersistentCharacterID InCharacterId);// 0x148e5a0
	void OnSelectedCharacterChanged(TigerPersistentPlayerState* InPersistentPlayerState);// 0x148e510
	void OnPlayerInventoryChanged(TigerPersistentPlayerState* InPersistentPlayerState);// 0x148e3f0
	void OnGotPlayerCharacters(out const TigerPersistentPlayerCharacter[] InCharacters, FString InErrorString);// 0x148e290
	void OnBuyCharacterSlotServerResponse(const bool bInSuccess, out const TigerItemId InItemId, FString InErrorMessage);// 0x148e140
	void OnBuyCharacterSlotResults(bool bInSuccess, FString InErrorString);// 0x197e4f0
	void OnArchetypeChanged(TigerPowerKit* InArchetypeData, out const int[] InPlayerArchetypeCharacterIndices);// 0x197e4f0
	TigerItemIdWithPrice GetAdditionalSlotPrice();// 0x148d690
	void CreateNewCharacter(TigerPowerKit* InArchetypeData);// 0x148d530
	void ChangeArchetype(TigerPowerKit* InArchetypeData);// 0x148d4a0
	void BuyAdditionalCharacterSlot();// 0x148d480

--------------------------------
Class: TigerAreaBuffInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerAreaBuff.TigerBuff.Object

--------------------------------
Class: TigerAreaEffectSubsystem.WorldSubsystem.Subsystem.Object
	TigerAreaEffect*[] AreaEffects;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerArena.Object

--------------------------------
Class: TigerArtifactPickedupPrompt.TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	TigerArtifactAsset* ArtifactAsset;//[Offset: 0x2a8, Size: 0x8]
	void OnArtifactAssetSet(TigerArtifactAsset* InArtifactAsset);// 0x197e4f0

--------------------------------
Class: TigerAssistPromptUi.TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayerStateGameData PlayerStateData;//[Offset: 0x2a8, Size: 0xd0]
	int ExperienceGained;//[Offset: 0x378, Size: 0x4]

--------------------------------
Class: TigerAsyncChooseNextWaypoint.BTTaskNode.BTNode.Object
	BlackboardKeySelector Index;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector Waypoint;//[Offset: 0x98, Size: 0x28]
	BlackboardKeySelector bWaypointDirectionIsForward;//[Offset: 0xc0, Size: 0x28]

--------------------------------
Class: TigerAutoScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	bool ResetScrollOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	float ScrollSpeed;//[Offset: 0x88c, Size: 0x4]
	float WaitDurationBeforeScroll;//[Offset: 0x890, Size: 0x4]
	float WaitDurationAfterScroll;//[Offset: 0x894, Size: 0x4]

--------------------------------
Class: TigerBalconyVolumeDefaultValues.DataAsset.Object
	TigerBuildingSystemBalconyVolumeDefaults[] DefaultBalconyVolumeSets;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerBuildingSystemBalconyVolumeDefaults
	Vector BottomVolumeOffset;//[Offset: 0x0, Size: 0xc]
	Vector BottomVolumeScale;//[Offset: 0xc, Size: 0xc]
	Vector LeftVolumeOffset;//[Offset: 0x18, Size: 0xc]
	Vector LeftVolumeScale;//[Offset: 0x24, Size: 0xc]
	Vector RightVolumeOffset;//[Offset: 0x30, Size: 0xc]
	Vector RightVolumeScale;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: TigerBattlepassUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	int MaxPageItems;//[Offset: 0x3c0, Size: 0x4]
	int[] PageSizes;//[Offset: 0x3c8, Size: 0x10]
	int CurrentPageIndex;//[Offset: 0x3d8, Size: 0x4]
	TigerClientSeasonalRewardTier*[] RewardTiers;//[Offset: 0x3e0, Size: 0x10]
	void GetPageItemIndices(int PageIndex, out int FirstItemIndex, out int LastItemIndex);// 0x1491ba0

--------------------------------
Class: TigerBelowBalconyEntryTrigger.TriggerVolume.Volume.Brush.Actor.Object
	FName EnterBalconyFromBelowAnimName;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: TigerBlindingBeautyEffectActor.Actor.Object
	TigerPlayer* Player;//[Offset: 0x228, Size: 0x8]
	float TriggerTime;//[Offset: 0x230, Size: 0x4]
	void OnDashExit(const bool bInShouldTrigger);// 0x197e4f0
	void OnDashEnter();// 0x197e4f0

--------------------------------
Class: TigerBloodDecalTrail.Actor.Object

--------------------------------
Class: TigerBloodResonanceAsset.DataAsset.Object
	FText ResonanceName;//[Offset: 0x30, Size: 0x18]
	Texture2D* ResonanceIcon;//[Offset: 0x48, Size: 0x28]
	FText InventoryLevel0Description;//[Offset: 0x70, Size: 0x18]
	FText InventoryLevel1Description;//[Offset: 0x88, Size: 0x18]
	FText InventoryLevel2Description;//[Offset: 0xa0, Size: 0x18]
	FText InventoryLevel3Description;//[Offset: 0xb8, Size: 0x18]
	FText FeedRewardLevel1Description;//[Offset: 0xd0, Size: 0x18]
	FText FeedRewardLevel2Description;//[Offset: 0xe8, Size: 0x18]
	FText FeedRewardLevel3Description;//[Offset: 0x100, Size: 0x18]
	FText FeedRewardLevelMaxedDescription;//[Offset: 0x118, Size: 0x18]
	Color ResonanceColor;//[Offset: 0x130, Size: 0x4]
	Material* ResonanceVfx;//[Offset: 0x138, Size: 0x28]
	Material* ResonanceMaxedVfx;//[Offset: 0x160, Size: 0x28]

--------------------------------
Class: TigerBloodVein.Actor.Object
	delegate OnEndOfVeinReached;//[Offset: 0x228, Size: 0x10]
	SplineComponent* Spline;//[Offset: 0x238, Size: 0x8]
	SceneComponent* CurrentPlayerSpot;//[Offset: 0x240, Size: 0x8]
	float EarliestDisconnectPoint;//[Offset: 0x248, Size: 0x4]
	float LatestDisconnectPoint;//[Offset: 0x24c, Size: 0x4]
	float VeinMovementSpeed;//[Offset: 0x250, Size: 0x4]
	bool bIsVeinActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	TigerHolyIncense* HolyIncense;//[Offset: 0x258, Size: 0x8]
	float StartSynchronizedTime;//[Offset: 0x26c, Size: 0x4]
	void TigerOnEndOfVeinReached__DelegateSignature();// 0x197e4f0
	void OnVeinActivated();// 0x197e4f0
	void OnRep_IsVeinActive();// 0x1496620
	void Multicast_StartMovement(const float ServerTime);// 0x1496400
	void MatchStateChanged(enum OldMatchState, enum NewMatchState);// 0x1496330
	Vector GetCurrentPlayerLocation();// 0x14961d0
	Vector GetCurrentPlayerDirection();// 0x1496190

--------------------------------
Class: TigerBloodVeinTrackWidget.TigerWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: TigerBlueprintLootComponent.ActorComponent.Object
	TigerItemLootTable* LootTable;//[Offset: 0xb0, Size: 0x8]
	Actor*[] SpawnedItemActors;//[Offset: 0xb8, Size: 0x10]
	Actor*[] GetSpawnedItemActors();// 0x14962a0
	TigerItemLootTable* GetLootTable();// 0x1496230

--------------------------------
Class: TigerBlueprintLootLocationComponent.ActorComponent.Object
	TigerLootLocationConfiguration* Configuration;//[Offset: 0xb0, Size: 0x8]
	byte GameTypeFilter;//[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: TigerBootGameMode.GameModeBase.Info.Actor.Object
	enum SessionTraveledFrom;//[Offset: 0x2c8, Size: 0x1]
	TigerGameFlowStateMap* GameFlowStateMap;//[Offset: 0x2d0, Size: 0x8]
	TigerGameFlowStateMap* BotGameFlowStateMap;//[Offset: 0x2d8, Size: 0x8]
	TigerLegalDocuments* LegalDocumentsObj;//[Offset: 0x2e0, Size: 0x8]
	TigerLegalDocuments* GetLegalDocuments();// 0x1496210

--------------------------------
Class: TigerGameFlowStateMap.DataAsset.Object
	<class TigerGameFlowState,class TigerGameFlowState> FlowStateMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerGameFlowState.BlueprintAsyncActionBase.Object
	void OnEnter();// 0x197e4f0
	TigerPlayerController* GetPlayerController();// 0x150aae0

--------------------------------
Class: TigerLegalDocuments.Object
	DataTable* CountryCodes;//[Offset: 0xe0, Size: 0x8]
	FString GetLegalDocumentString(const enum InDocumentType);// 0x153fc30
	void DownloadLegalDocumentStrings(const Object* InWorldContextObject, FString InLocale, LatentActionInfo InLatentInfo);// 0x153f890

--------------------------------
Class: TigerBootGameState.TigerGameState.GameStateBase.Info.Actor.Object
	void SetBootStateToArchetypeSelect();// 0x14966d0

--------------------------------
Class: TigerBrujahBaneRecklessness.TigerPassiveConfig.DataAsset.Object
	float DamageTakenMultiplier;//[Offset: 0x140, Size: 0x4]
	float AutoDeactivateTimer;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: TigerBrujahBaneRecklessnessLogic.TigerPassiveComponent.ActorComponent.Object
	TigerBrujahBaneRecklessness* Config;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: TigerBrujahTraitMomentum.TigerPassiveConfig.DataAsset.Object
	float MomentumActiveTimer;//[Offset: 0x140, Size: 0x4]
	float GroundSlamRadiusMultiplier;//[Offset: 0x144, Size: 0x4]
	float MightyLeapVelocityMultiplier;//[Offset: 0x148, Size: 0x4]
	float FOTTKnockbackDistanceMultiplier;//[Offset: 0x14c, Size: 0x4]
	float FOTTWallImpactDamageMultiplier;//[Offset: 0x150, Size: 0x4]
	AkAudioEvent* MomentumStartedAudioEvent;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: TigerBrujahTraitMomentumLogic.TigerPassiveComponent.ActorComponent.Object
	TigerBrujahTraitMomentum* Config;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]
	bool IsMomentumActive();// 0x1496300

--------------------------------
Class: TigerBTServiceAvoidRedGas.BTService.BTAuxiliaryNode.BTNode.Object
	float HolyIncenseCountdownThreshold;//[Offset: 0x70, Size: 0x4]
	float DesireMoveNextWaveThreshold;//[Offset: 0x74, Size: 0x4]
	float NextWaveDangerThreshold;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: TigerBTServiceTrackHaven.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector FinalHavenKey;//[Offset: 0x70, Size: 0x28]
	BlackboardKeySelector CapturePointKey;//[Offset: 0x98, Size: 0x28]

--------------------------------
Class: TigerBuffAdrenalineRushInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffAdrenalineRush.TigerBuff.Object

--------------------------------
Class: TigerBuffAnarchHuntingKnife.TigerBuff.Object
	CurveFloat* EffectStrengthBasedOnDistance;//[Offset: 0x268, Size: 0x8]
	CurveFloat* EffectStrengthBasedOnKills;//[Offset: 0x270, Size: 0x8]
	CurveFloat* DamageBasedOnEnemiesKilled;//[Offset: 0x278, Size: 0x8]
	float MaxDistanceToCheckForEnemies;//[Offset: 0x280, Size: 0x4]

--------------------------------
Class: TigerBuffAnarchHuntingKnifeInstance.TigerBuffInstance.Object
	TigerBuffAnarchHuntingKnife* HuntingKnifeBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffAnarchHuntingKnifeStack.TigerBuff.Object

--------------------------------
Class: TigerBuffAnarchHuntingKnifeStackInstance.TigerBuffInstance.Object
	TigerPlayer* Player;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBuffArtifactFeedingBonus.TigerBuff.Object
	float FeedBonusHealthMultiplier;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: TigerBuffArtifactFeedingBonusInstance.TigerBuffInstance.Object
	TigerBuffArtifactFeedingBonus* ArtifactFeedingBonusBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffHealthRegenBase.TigerBuff.Object
	float HealthToHeal;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: TigerBuffArtifactHealthRegen.TigerBuffHealthRegenBase.TigerBuff.Object

--------------------------------
Class: TigerBuffHealthRegenBaseInstance.TigerBuffInstance.Object
	TigerBuffHealthRegenBase* HealthRegenBuff;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBuffArtifactHealthRegenInstance.TigerBuffHealthRegenBaseInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffBlindingBeautyInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffBlindingBeauty.TigerBuff.Object
	float BlockJumpDuration;//[Offset: 0x268, Size: 0x4]
	float TurnRateCap;//[Offset: 0x26c, Size: 0x4]

--------------------------------
Class: TigerBuffClanReducesCooldown.TigerBuff.Object
	float AbilityCooldownReduction;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: TigerBuffClanReducesCooldownInstance.TigerBuffInstance.Object
	TigerBuffClanReducesCooldown* ClanReduceCooldownBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffClimbInterrupt.TigerBuffDisableClimbing.TigerBuff.Object

--------------------------------
Class: TigerBuffClimbInterruptInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffDisciplineVentrueClanInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffDisciplineVentrueClan.TigerBuff.Object

--------------------------------
Class: TigerBuffDOTInstance.TigerBuffInstance.Object
	TigerBuffDOT* BuffDOT;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBufferedActionQuickAttack.TigerBufferedAction.Object

--------------------------------
Class: TigerBuffExtraArtifacts.TigerBuff.Object

--------------------------------
Class: TigerBuffExtraArtifactsInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffFOTTChargeup.TigerBuff.Object

--------------------------------
Class: TigerBuffFOTTChargeupInstance.TigerBuffInstance.Object
	TigerBuffFOTTChargeup* FOTTChargeupBuff;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBuffFOTTKnockbackWallStun.TigerBuff.Object
	float WallStunnedTimer;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: TigerBuffFOTTKnockbackWallStunInstance.TigerBuffInstance.Object
	TigerBuffFOTTKnockbackWallStun* FOTTKnockbackWallStun;//[Offset: 0x80, Size: 0x8]
	TigerCharacter* Target;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: TigerBuffFrenzy.TigerBuff.Object
	float HPRegenPercentPerSecond;//[Offset: 0x268, Size: 0x4]
	class TigerWeapon* WeaponClassToEquip;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TigerBuffFrenzyInstance.TigerBuffInstance.Object
	TigerBuffFrenzy* FrenzyBuff;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBuffInAirMomentumLossInstance.TigerBuffInstance.Object
	void OnLandedDelegate(out const HitResult InHit);// 0x149c260

--------------------------------
Class: TigerBuffInAirMomentumLoss.TigerBuff.Object
	float MinimumHorizontalSpeed;//[Offset: 0x268, Size: 0x4]
	float TimeToDecelerate;//[Offset: 0x26c, Size: 0x4]

--------------------------------
Class: TigerBuffKindredCharmInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffKindredCharm.TigerBuff.Object

--------------------------------
Class: TigerBuffMasqueradeKeepingMovement.TigerBuff.Object

--------------------------------
Class: TigerBuffMasqueradeKeepingMovementInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffMeleeCharge.TigerBuff.Object
	float TimeRunningBeforeBuffIsActive;//[Offset: 0x268, Size: 0x4]
	float MaxDeviationAllowedInDegrees;//[Offset: 0x26c, Size: 0x4]
	class TigerBuff* AttackBuff;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TigerBuffMeleeChargeInstance.TigerBuffInstance.Object
	TigerBuffMeleeCharge* MeleeChargeBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffMeleeChargeAttack.TigerBuff.Object
	ParticleSystem* AttackParticleEffect;//[Offset: 0x268, Size: 0x8]

--------------------------------
Class: TigerBuffMeleeChargeAttackInstance.TigerBuffInstance.Object
	TigerBuffMeleeChargeAttack* MeleeChargeAttackBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]
	ParticleSystemComponent* ActiveAttackParticles;//[Offset: 0x90, Size: 0x8]
	void SwingFinished();// 0x149c5d0

--------------------------------
Class: TigerBuffApathy.TigerBuff.Object

--------------------------------
Class: TigerBuffApathyInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffWrath.TigerBuff.Object

--------------------------------
Class: TigerBuffWrathInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffPreventMasqueradeBreak.TigerBuff.Object
	AkAudioEvent* ArtifactBreakAudioEvent;//[Offset: 0x268, Size: 0x8]

--------------------------------
Class: TigerBuffPreventMasqueradeBreakInstance.TigerBuffInstance.Object
	TigerBuffPreventMasqueradeBreak* PreventMasqueradeBreakBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffRejuvenatingVoiceInstance.TigerBuffInstance.Object
	TigerCharacter* HealerRestriction;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBuffRejuvenatingVoice.TigerBuff.Object
	void OnHealStop(TigerCharacter* InBuffOwner, TigerCharacter* InBuffCaster);// 0x197e4f0
	void OnHealStart(TigerCharacter* InBuffOwner, TigerCharacter* InBuffCaster);// 0x197e4f0

--------------------------------
Class: TigerBuffShacklesInstance.TigerBuffInstance.Object
	TigerBuffShackles* ShacklesBuff;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerBuffShark.TigerBuff.Object

--------------------------------
Class: TigerBuffSharkInstance.TigerBuffInstance.Object
	TigerBuffShark* SharkBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffShieldBase.TigerBuff.Object
	float MaxShield;//[Offset: 0x268, Size: 0x4]
	float InitialShield;//[Offset: 0x26c, Size: 0x4]

--------------------------------
Class: TigerBuffShieldAdrenalineRush.TigerBuffShieldBase.TigerBuff.Object
	float TimeBeforeDecay;//[Offset: 0x270, Size: 0x4]
	float DecayPerSecond;//[Offset: 0x274, Size: 0x4]
	float DamageToShieldScale;//[Offset: 0x278, Size: 0x4]

--------------------------------
Class: TigerBuffShieldBaseInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffShieldAdrenalineRushInstance.TigerBuffShieldBaseInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuffSingleSwing.TigerBuff.Object

--------------------------------
Class: TigerBuffSingleSwingInstance.TigerBuffInstance.Object
	TigerPlayer* Player;//[Offset: 0x80, Size: 0x8]
	void SwingFinished();// 0x149f8b0

--------------------------------
Class: TigerBuffStunBaton.TigerBuff.Object
	float StunBonusDamage;//[Offset: 0x268, Size: 0x4]
	float ChargeGainedOnHit;//[Offset: 0x26c, Size: 0x4]
	float ChargeGainedPerUpdate;//[Offset: 0x270, Size: 0x4]
	float PassiveChargeRate;//[Offset: 0x274, Size: 0x4]
	bool bRegisterMultipleHitsOnChargeUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bRegisterMultipleHitsOnStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	class TigerBuffInstance* TBPInstanceBuff;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: TigerBuffStunBatonInstance.TigerBuffInstance.Object
	TigerBuffStunBaton* StunBatonBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x98, Size: 0x8]
	void TargetHitShockConsumed(TigerCharacter* Target);// 0x197e4f0
	void SwingStarted(bool bWasHeavyAttack);// 0x149f8f0
	void SwingFinished();// 0x149f8d0
	void MaxChargeReachedEvent();// 0x197e4f0
	bool IsStunReady();// 0x149f750
	void HitTarget(TigerCharacter* InTarget);// 0x149f6c0
	void ChargeGainedEvent(float CurrentChargeValue);// 0x197e4f0
	void AddCharge(float ValueToAdd);// 0x149f3e0

--------------------------------
Class: TigerBuffThorns.TigerBuffDOT.TigerBuff.Object
	float HealInterval;//[Offset: 0x278, Size: 0x4]
	float HealPercentage;//[Offset: 0x27c, Size: 0x4]
	class TigerCharacterEffect* HealEffect;//[Offset: 0x280, Size: 0x8]
	AkAudioEvent* DOTTriggerEvent;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: TigerBuffThornsInstance.TigerBuffDOTInstance.TigerBuffInstance.Object
	TigerBuffThorns* ThornsBuff;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: TigerBuffUnholyStimulant.TigerBuff.Object

--------------------------------
Class: TigerBuffUnholyStimulantInstance.TigerBuffInstance.Object
	void OnInsideHolyIncenseChanged(bool bInIsInsideHolyIncense);// 0x149f770

--------------------------------
Class: TigerBuffVanish.TigerBuffInvisible.TigerBuff.Object
	float TimeReductionPerMeterMoved;//[Offset: 0x268, Size: 0x4]
	float NoiseNotifyEventRange;//[Offset: 0x26c, Size: 0x4]
	CurveFloat* MaterialTransitionIntoCurve;//[Offset: 0x270, Size: 0x8]
	CurveFloat* MaterialTransitionOutFromCurve;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* BlendOutParticles;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: TigerBuffVanishInstance.TigerBuffInstance.Object
	TigerBuffVanish* VanishBuff;//[Offset: 0x80, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerBuffVoiceOfInspiration.TigerBuff.Object

--------------------------------
Class: TigerBuffVoiceOfInspirationInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerBuildingWallPreset.Object
	StaticMesh*[] Meshes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TigerBuildingSystem.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	SplineComponent* SplineLeft;//[Offset: 0x230, Size: 0x8]
	SplineComponent* SplineRight;//[Offset: 0x238, Size: 0x8]
	TigerBuildingSystemTransformableCorner[] PoseableCornerFrontComponents;//[Offset: 0x240, Size: 0x10]
	TigerBuildingSystemTransformableCorner[] PoseableCornerLeftComponents;//[Offset: 0x250, Size: 0x10]
	TigerBuildingSystemTransformableCorner[] PoseableCornerBackComponents;//[Offset: 0x260, Size: 0x10]
	TigerBuildingSystemTransformableCorner[] PoseableCornerRightComponents;//[Offset: 0x270, Size: 0x10]
	TigerBuildingSystemWallPieceInstancingData WallPieceInstancingDatas;//[Offset: 0x280, Size: 0x10]
	void OnUpgrade(int InVersion);// 0x149f800

--------------------------------
Class: TigerBuildingSystemTransformableCorner
	PoseableMeshComponent* Component;//[Offset: 0x0, Size: 0x8]
	StaticMeshComponent* StaticComponent;//[Offset: 0x8, Size: 0x8]
	Rotator MiddleBoneRotation;//[Offset: 0x10, Size: 0xc]
	Vector EndBoneLocation;//[Offset: 0x1c, Size: 0xc]
	Vector StartNormal;//[Offset: 0x28, Size: 0xc]
	Vector NextNormal;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: TigerBuildingSystemWallPieceInstancingData
	TigerBuildingSystemWallPieceInstancingDataEntry[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerBuildingSystemWallPieceInstancingDataEntry
	StaticMeshComponent* Component;//[Offset: 0x0, Size: 0x8]
	float[] Data;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerBuildingSystemDepricated.TigerBuildingSystem.Actor.Object
	HierarchicalInstancedStaticMeshComponent* Front_00;//[Offset: 0x290, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_01;//[Offset: 0x298, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_02;//[Offset: 0x2a0, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_03;//[Offset: 0x2a8, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_04;//[Offset: 0x2b0, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_05;//[Offset: 0x2b8, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_06;//[Offset: 0x2c0, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Front_07;//[Offset: 0x2c8, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_00;//[Offset: 0x2d0, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_01;//[Offset: 0x2d8, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_02;//[Offset: 0x2e0, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_03;//[Offset: 0x2e8, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_04;//[Offset: 0x2f0, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_05;//[Offset: 0x2f8, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_06;//[Offset: 0x300, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Left_07;//[Offset: 0x308, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_00;//[Offset: 0x310, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_01;//[Offset: 0x318, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_02;//[Offset: 0x320, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_03;//[Offset: 0x328, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_04;//[Offset: 0x330, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_05;//[Offset: 0x338, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_06;//[Offset: 0x340, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Back_07;//[Offset: 0x348, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_00;//[Offset: 0x350, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_01;//[Offset: 0x358, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_02;//[Offset: 0x360, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_03;//[Offset: 0x368, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_04;//[Offset: 0x370, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_05;//[Offset: 0x378, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_06;//[Offset: 0x380, Size: 0x8]
	HierarchicalInstancedStaticMeshComponent* Right_07;//[Offset: 0x388, Size: 0x8]
	StaticMeshComponent* CornerFL_00;//[Offset: 0x390, Size: 0x8]
	StaticMeshComponent* CornerFL_01;//[Offset: 0x398, Size: 0x8]
	StaticMeshComponent* CornerFL_02;//[Offset: 0x3a0, Size: 0x8]
	StaticMeshComponent* CornerFL_03;//[Offset: 0x3a8, Size: 0x8]
	StaticMeshComponent* CornerFL_04;//[Offset: 0x3b0, Size: 0x8]
	StaticMeshComponent* CornerFL_05;//[Offset: 0x3b8, Size: 0x8]
	StaticMeshComponent* CornerFL_06;//[Offset: 0x3c0, Size: 0x8]
	StaticMeshComponent* CornerFL_07;//[Offset: 0x3c8, Size: 0x8]
	StaticMeshComponent* CornerLB_00;//[Offset: 0x3d0, Size: 0x8]
	StaticMeshComponent* CornerLB_01;//[Offset: 0x3d8, Size: 0x8]
	StaticMeshComponent* CornerLB_02;//[Offset: 0x3e0, Size: 0x8]
	StaticMeshComponent* CornerLB_03;//[Offset: 0x3e8, Size: 0x8]
	StaticMeshComponent* CornerLB_04;//[Offset: 0x3f0, Size: 0x8]
	StaticMeshComponent* CornerLB_05;//[Offset: 0x3f8, Size: 0x8]
	StaticMeshComponent* CornerLB_06;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* CornerLB_07;//[Offset: 0x408, Size: 0x8]
	StaticMeshComponent* CornerBR_00;//[Offset: 0x410, Size: 0x8]
	StaticMeshComponent* CornerBR_01;//[Offset: 0x418, Size: 0x8]
	StaticMeshComponent* CornerBR_02;//[Offset: 0x420, Size: 0x8]
	StaticMeshComponent* CornerBR_03;//[Offset: 0x428, Size: 0x8]
	StaticMeshComponent* CornerBR_04;//[Offset: 0x430, Size: 0x8]
	StaticMeshComponent* CornerBR_05;//[Offset: 0x438, Size: 0x8]
	StaticMeshComponent* CornerBR_06;//[Offset: 0x440, Size: 0x8]
	StaticMeshComponent* CornerBR_07;//[Offset: 0x448, Size: 0x8]
	StaticMeshComponent* CornerRF_00;//[Offset: 0x450, Size: 0x8]
	StaticMeshComponent* CornerRF_01;//[Offset: 0x458, Size: 0x8]
	StaticMeshComponent* CornerRF_02;//[Offset: 0x460, Size: 0x8]
	StaticMeshComponent* CornerRF_03;//[Offset: 0x468, Size: 0x8]
	StaticMeshComponent* CornerRF_04;//[Offset: 0x470, Size: 0x8]
	StaticMeshComponent* CornerRF_05;//[Offset: 0x478, Size: 0x8]
	StaticMeshComponent* CornerRF_06;//[Offset: 0x480, Size: 0x8]
	StaticMeshComponent* CornerRF_07;//[Offset: 0x488, Size: 0x8]
	void RemoveUnusedParts();// 0x149f890
	HierarchicalInstancedStaticMeshComponent* GetFloorMeshComponent(enum Side, int FloorNumber);// 0x149f5f0
	StaticMeshComponent* GetCornerMeshComponent(enum Side, int FloorNumber);// 0x149f520
	HierarchicalInstancedStaticMeshComponent*[] GetAllFloorMeshComponents();// 0x149f490
	StaticMeshComponent*[] GetAllCornerMeshComponents();// 0x149f460

--------------------------------
Class: SharkLocalDeveloperSettings.DeveloperSettings.Object

--------------------------------
Class: TigerBuildingWallStreamingSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	int WallsToStreamPerFrame;//[Offset: 0x38, Size: 0x4]
	bool bLoggingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: TigerBuildingSystemWallStreamer.Actor.Object
	TigerStreamableBuildingSides[] StreamableBuildingParts;//[Offset: 0x228, Size: 0x10]
	StaticMeshComponent*[] ComponentsToCreateRenderstateOn;//[Offset: 0x238, Size: 0x10]

--------------------------------
Class: TigerStreamableBuildingSides
	TigerStreamableBuildingSide[] BuildingWalls;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerStreamableBuildingSide
	StaticMeshComponent*[] SideSegments;//[Offset: 0x0, Size: 0x10]
	Vector Normal;//[Offset: 0x10, Size: 0xc]
	Vector Center;//[Offset: 0x1c, Size: 0xc]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: TigerBuildingWallPreviewer.Actor.Object
	class TigerBuildingWallPreset* Preset;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TigerCamarillaDecal.DecalActor.Actor.Object

--------------------------------
Class: TigerChallengeBreakMasquerade.TigerChallenge.Object
	void OnTigerPlayerStateCreated(TigerPlayerState* InPlayerState);// 0x14a4830
	void HandlePlayerMasqueradeChange(bool InIsMasqueradeBreached, enum InPlayerAction);// 0x14a4570

--------------------------------
Class: TigerChallengeCollectibles.TigerChallenge.Object
	void HandleCollectibleCollected(const InCollectibleId(UInt32Property) InCollectibleId);// 0x14a44e0

--------------------------------
Class: TigerChallengeCollectibleSet.TigerChallenge.Object
	TigerGrimoireCategory* CategoryToComplete;//[Offset: 0x110, Size: 0x8]
	TigerGrimoireEntry* EntryToComplete;//[Offset: 0x118, Size: 0x8]
	void OnPersistentPlayerInitialised();// 0x14a4810

--------------------------------
Class: TigerGrimoireCategory.DataAsset.Object
	FText Title;//[Offset: 0x30, Size: 0x18]
	FText Description;//[Offset: 0x48, Size: 0x18]
	DataTable* Entries;//[Offset: 0x60, Size: 0x8]
	TigerGrimoireCategory*[] SubCategories;//[Offset: 0x68, Size: 0x10]
	TigerGrimoireCategory* ParentCategory;//[Offset: 0x78, Size: 0x8]
	bool bHideCategory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	enum NewNotificationCategory;//[Offset: 0x81, Size: 0x1]
	Texture* BackfaceTextureDMNR;//[Offset: 0x88, Size: 0x28]
	float DefaultOrderValue;//[Offset: 0xb0, Size: 0x4]
	TigerGrimoireEntry*[] GetAllEntries(const bool bInIncludeSubEntries);// 0x151a900

--------------------------------
Class: TigerChallengeCollection.DataAsset.Object
	TigerChallengeCollectionEntry[] Challenges;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerChallengeCollectionEntry
	TigerChallengeTypeID ChallengeTypeID;//[Offset: 0x0, Size: 0x4]
	TigerChallenge* ReferenceChallenge;//[Offset: 0x8, Size: 0x8]
	enum ChallengeCategory;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TigerChallengeDealDamage.TigerChallenge.Object
	bool bNeedsToDamagePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	TigerChallengeRequirementWeaponType RequiredWeaponConstraint;//[Offset: 0x118, Size: 0x18]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x130, Size: 0x10]
	TigerChallengeRequirementBloodhunted EnemyBloodhuntedRequirement;//[Offset: 0x140, Size: 0x10]
	TigerChallengeRequirementDistance DistanceToEnemyRequirement;//[Offset: 0x150, Size: 0x10]
	TigerChallengeRequirementPowerKit PlayerArchetypeRequirement;//[Offset: 0x160, Size: 0x10]

--------------------------------
Class: TigerChallengeRequirementWeaponType.TigerChallengeRequirementBase
	bool bAnyRangedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAnyMeleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAllowDisciplineDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bAllowReflectedDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	TigerItemAsset* RequiredWeaponAsAsset;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerChallengeRequirementBase

--------------------------------
Class: TigerChallengeRequirementBloodhunted.TigerChallengeRequirementBase
	bool bOnlyWhenBloodhunted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TigerChallengeRequirementDistance.TigerChallengeRequirementBase
	bool bMeasureDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int Distance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerChallengeRequirementPowerKit.TigerChallengeRequirementBase
	bool bCheckPowerKit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum PowerKit;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerChallengeDiablerize.TigerChallenge.Object
	TigerChallengeRequirementClan TargetRequiredClan;//[Offset: 0x110, Size: 0x10]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x120, Size: 0x10]
	TigerChallengeRequirementBloodhunted EnemyBloodhuntedRequirement;//[Offset: 0x130, Size: 0x10]
	void OnDiablerizedPlayerEvent(enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14a9460
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14a9160

--------------------------------
Class: TigerChallengeRequirementClan.TigerChallengeRequirementBase
	bool bSpecificClan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum RequiredClan;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerChallengeDownPlayer.TigerChallenge.Object
	TigerChallengeRequirementWeaponType RequiredWeaponConstraint;//[Offset: 0x110, Size: 0x18]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x128, Size: 0x10]
	TigerChallengeRequirementBloodhunted EnemyBloodhuntedRequirement;//[Offset: 0x138, Size: 0x10]
	TigerChallengeRequirementDisciplineSlot DisciplineFailRequirement;//[Offset: 0x148, Size: 0x10]
	TigerChallengeRequirementAirborne AirborneRequirement;//[Offset: 0x158, Size: 0x10]
	bool bIsAirborneRequirementForPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bDownWithHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	void OnDownedPlayerEvent(enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14a9600
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14a91f0

--------------------------------
Class: TigerChallengeRequirementDisciplineSlot.TigerChallengeRequirementBase
	bool bUseSpecificSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum RequiredSlot;//[Offset: 0x9, Size: 0x1]
	bool bUseAnyDisciplineSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TigerChallengeRequirementAirborne.TigerChallengeRequirementBase
	bool bCheckAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TigerChallengeDrainNpc.TigerChallenge.Object
	bool bSpecificNPCType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	enum TargetNPCType;//[Offset: 0x111, Size: 0x1]
	enum MinimumPotency;//[Offset: 0x112, Size: 0x1]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x118, Size: 0x10]
	bool IsBloodPotencyRelevant();// 0x14a9430
	void InitOnPlayerEvent(Controller* NewPlayer);// 0x14a9280
	void HandleOnFeedingDoneEvent(bool bTargetIsDrained, TigerCharacter* InTargetFedOn);// 0x14a8cc0

--------------------------------
Class: TigerChallengeDropOffItem.TigerChallenge.Object
	TigerInteractiveItemDropOff* DropOffPoint;//[Offset: 0x110, Size: 0x28]
	void HandleDropoffCompleted(TigerInteractiveItemDropOff* InDropoffPoint);// 0x14a8bb0

--------------------------------
Class: TigerInteractiveItemDropOff.TigerClientInteractiveObject.TigerInteractiveObject.Actor.Object
	StaticMeshComponent* DropOffMesh;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* DropOffSoundEffect;//[Offset: 0x2b8, Size: 0x8]
	TigerGrimoireUnlock GrimoireUnlock;//[Offset: 0x2c0, Size: 0x10]
	ParticleSystemComponent* DropOffParticleSystem;//[Offset: 0x310, Size: 0x8]
	FText PlayerFacingItemName;//[Offset: 0x318, Size: 0x18]
	FText ActionOverrideText;//[Offset: 0x330, Size: 0x18]
	float InteractionTimeIfNoAnimation;//[Offset: 0x348, Size: 0x4]
	bool HasDroppedOff(TigerPlayerState* inTigerPlayerState);// 0x152f560
	void ClientOnDropOffComplete();// 0x197e4f0

--------------------------------
Class: TigerClientInteractiveObject.TigerInteractiveObject.Actor.Object

--------------------------------
Class: TigerChallengeEliminateGroup.TigerChallenge.Object
	bool bDownedPlayersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	void OnKilledOrDownedPlayerEvent(enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14a97a0
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14a9310

--------------------------------
Class: TigerChallengeGetEatenByShark.TigerChallenge.Object
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x110, Size: 0x10]
	void OnRestartPlayer(Controller* InNewPlayer);// 0x14a9ad0
	void OnPlayerEvent(const enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14a9a00

--------------------------------
Class: TigerChallengeHeadshots.TigerChallenge.Object
	TigerChallengeRequirementWeaponType RequiredWeaponConstraint;//[Offset: 0x110, Size: 0x18]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x128, Size: 0x10]
	TigerChallengeRequirementBloodhunted EnemyBloodhuntedRequirement;//[Offset: 0x138, Size: 0x10]
	bool bOnlyOnPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: TigerChallengeHitBullets.TigerChallenge.Object
	TigerChallengeRequirementWeaponType RequiredWeaponConstraint;//[Offset: 0x110, Size: 0x18]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x128, Size: 0x10]
	TigerChallengeRequirementBloodhunted EnemyBloodhuntedRequirement;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: TigerChallengeKillEntity.TigerChallenge.Object
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x110, Size: 0x10]
	TigerChallengeRequirementClan EnemyClanRequirement;//[Offset: 0x120, Size: 0x10]
	void HandleOnNpcDeathEvent(TigerNPC* NPC, Controller* Instigator);// 0x14a8d90

--------------------------------
Class: TigerChallengeKillMultipleTimed.TigerChallenge.Object
	float TimeToKillGroup;//[Offset: 0x110, Size: 0x4]
	enum TypeOfEnemy;//[Offset: 0x114, Size: 0x1]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x118, Size: 0x10]
	int NumOfEnemiesToKill;//[Offset: 0x128, Size: 0x4]
	void OnKilledPlayer(TigerPlayer* InDeadPlayer, out const DamageEvent InDamageEvent);// 0x14a9870
	void OnKilledNpc(TigerNPC* InNpc, Controller* InInstigator);// 0x14a96d0
	void HandlePlayerLeft(TigerPlayerState* InPlayerState);// 0x14a8e60

--------------------------------
Class: TigerChallengeKillPlayers.TigerChallenge.Object
	TigerChallengeRequirementWeaponType RequiredWeaponConstraint;//[Offset: 0x110, Size: 0x18]
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x128, Size: 0x10]
	TigerChallengeRequirementBloodhunted EnemyBloodhuntedRequirement;//[Offset: 0x138, Size: 0x10]
	TigerChallengeRequirementClan EnemyClanRequirement;//[Offset: 0x148, Size: 0x10]
	bool bKillOnlyDownedStateInstigators;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	void OnDownedByPlayerEvent(enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14a9530
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14a93a0

--------------------------------
Class: TigerChallengePlayGames.TigerChallenge.Object
	TigerChallengeRequirementClan RequiredClanCondition;//[Offset: 0x110, Size: 0x10]
	TigerChallengeRequirementBalanceMode RequiredBalanceModeCondition;//[Offset: 0x120, Size: 0x10]
	TigerChallengeRequirementGameMode RequiredGameModeCondition;//[Offset: 0x130, Size: 0x20]
	TigerChallengeRequirementExcludeGameMode RequiredExcludeGameModeCondition;//[Offset: 0x150, Size: 0x20]
	bool bWithoutBecomingBloodhunted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bResetOnBloodhunted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	void OnTigerPlayerStateCreated(TigerPlayerState* InPlayerState);// 0x14a9b60
	void HandlePlayerMasqueradeChange(bool InIsMasqueradeBreached, enum InPlayerAction);// 0x14a8f80
	void HandlePlayerLeft(TigerPlayerState* InPlayerState);// 0x14a8ef0

--------------------------------
Class: TigerChallengeRequirementBalanceMode.TigerChallengeRequirementBase
	bool bSpecificBalanceMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum RequiredBalanceMode;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerChallengeRequirementGameMode.TigerChallengeRequirementBase
	bool bSpecificGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FString RequiredGameModeId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerChallengeRequirementExcludeGameMode.TigerChallengeRequirementBase
	bool bExcludeGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	FString ExcludedGameModeId;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerChallengeQuestItemPickup.TigerChallenge.Object
	TigerInteractiveQuestItem* QuestItem;//[Offset: 0x110, Size: 0x28]
	void HandleQuestItemCollected(TigerInteractiveQuestItem* InQuestItem);// 0x14a9050

--------------------------------
Class: TigerInteractiveQuestItem.TigerClientInteractiveObject.TigerInteractiveObject.Actor.Object
	StaticMeshComponent* QuestMesh;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* QuestSoundEffect;//[Offset: 0x2b8, Size: 0x8]
	TigerGrimoireUnlock GrimoireUnlock;//[Offset: 0x2c0, Size: 0x10]
	ParticleSystemComponent* QuestParticleSystem;//[Offset: 0x310, Size: 0x8]
	FText PlayerFacingItemName;//[Offset: 0x318, Size: 0x18]
	FText ActionOverrideText;//[Offset: 0x330, Size: 0x18]

--------------------------------
Class: TigerChallengeReachLevel.TigerChallenge.Object
	enum LevelType;//[Offset: 0x114, Size: 0x1]
	bool bIsAnyArchetypeAtTargetLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	enum ArchetypeLevelType;//[Offset: 0x116, Size: 0x1]
	void OnTigerPlayerStateCreated(TigerPlayerState* InPlayerState);// 0x14a9bf0
	void OnPersistentPlayerInitialised();// 0x14a99e0
	void OnLevelChanged(int InLevel);// 0x14a9950

--------------------------------
Class: TigerChallengeRevive.TigerChallenge.Object
	TigerChallengeRequirementBloodhunted PlayerBloodhuntedRequirement;//[Offset: 0x110, Size: 0x10]
	void OnRevivedPlayerEvent(enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14b0450
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14aebc0

--------------------------------
Class: TigerChallengeSharkAssist.TigerChallenge.Object
	void OnRestartPlayer(Controller* InNewPlayer);// 0x14b03c0
	void OnPlayerEvent(const enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14b00e0

--------------------------------
Class: TigerChallengeSpeakToNpc.TigerChallenge.Object
	FText RequiredNpcToSpeakToName;//[Offset: 0x110, Size: 0x18]
	TigerChallengeRequirementClan PlayerClanRequirment;//[Offset: 0x128, Size: 0x10]
	bool bTestAgainstSpecificDialogue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	FString RequiredDialogueBaseKey;//[Offset: 0x140, Size: 0x10]
	FString RequiredDialogueKey;//[Offset: 0x150, Size: 0x10]
	void HandleNpcSpokenTo(FText InNPCName);// 0x14ae400

--------------------------------
Class: TigerChallengeSurviveBeingDowned.TigerChallenge.Object
	void OnPlayerEvent(const enum InEvent, TigerCharacter* InEventTiedCharacter);// 0x14b01b0
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14aec50

--------------------------------
Class: TigerChallengeSurviveBloodhunt.TigerChallenge.Object
	void OnTigerPlayerStateCreated(TigerPlayerState* InPlayerState);// 0x14b0520
	void HandlePlayerMasqueradeChange(bool InIsMasqueradeBreached, enum InPlayerAction);// 0x14ae570

--------------------------------
Class: TigerChallengeSurviveTime.TigerChallenge.Object
	void OnPlayerDeath(TigerPlayer* InDeadPlayer, Actor* InInstigator, bool bInWillRespawn);// 0x14affd0
	void InitOnPlayerStart(Controller* InNewPlayer);// 0x14aee90

--------------------------------
Class: TigerChallengeTopPlayer.TigerChallenge.Object
	int TopPlacementRequirement;//[Offset: 0x110, Size: 0x4]
	bool bWithoutBecomingBloodhunted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool bWithoutUsingDiscipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	TigerChallengeRequirementPowerKit PlayerRequiredArchetype;//[Offset: 0x118, Size: 0x10]
	TigerChallengeRequirementWeaponType OnlyUseWeaponTypeConstraint;//[Offset: 0x128, Size: 0x18]
	void OnTigerPlayerStateCreated(TigerPlayerState* InPlayerState);// 0x14b05b0
	void OnPlayerDealtDamage(TigerCharacter* InTargetCharacter, out const DamageEvent InDamageEvent, const float InActualDamage);// 0x14afea0
	void OnDisciplineActivated(enum InDisciplineActivated);// 0x14afcd0
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14aece0
	void HandlePlayerMasqueradeChange(bool InIsMasqueradeBreached, enum InPlayerAction);// 0x14ae640
	void HandlePlayerLeft(TigerPlayerState* InPlayerState);// 0x14ae4e0

--------------------------------
Class: TigerChallengeTravelDistance.TigerChallenge.Object
	void OnMovementUpdated(float InDelta, TigerPlayerController* InPlayerController);// 0x14afdd0
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14aed70

--------------------------------
Class: TigerChallengeTypeDatabase.Object
	bool bFirstDailyChallengeIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	<enum,TigerChallengeCollectionArray> ChallengeCategoryCollections;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerChallengeCollectionArray
	TigerChallengeCollection*[] ChallengeCollections;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerChallengeUseDiscipline.TigerChallenge.Object
	TigerChallengeRequirementDisciplineSlot DisciplineSlotRequirement;//[Offset: 0x110, Size: 0x10]
	void OnDisciplineActivated(enum InDisciplineActivated);// 0x14afd50
	void InitOnPlayerEvent(Controller* InNewPlayer);// 0x14aee00

--------------------------------
Class: TigerChallengeUtilityBFL.BlueprintFunctionLibrary.Object
	static bool HasRequirement_WeaponType(out const TigerChallengeRequirementWeaponType InRequirement);// 0x14aeb10
	static bool HasRequirement_TraversalState(out const TigerChallengeRequirementTraversalState InRequirement);// 0x14ae710
	static bool HasRequirement_PowerKit(out const TigerChallengeRequirementPowerKit InRequirement);// 0x14ae710
	static bool HasRequirement_GameMode(out const TigerChallengeRequirementGameMode InRequirement);// 0x14aea50
	static bool HasRequirement_ExcludeGameMode(out const TigerChallengeRequirementExcludeGameMode InRequirement);// 0x14aea50
	static bool HasRequirement_Distance(out const TigerChallengeRequirementDistance InRequirement);// 0x14ae9a0
	static bool HasRequirement_DisciplineSlot(out const TigerChallengeRequirementDisciplineSlot InRequirement);// 0x14ae8f0
	static bool HasRequirement_Clan(out const TigerChallengeRequirementClan InRequirement);// 0x14ae850
	static bool HasRequirement_Bloodhunted(out const TigerChallengeRequirementBloodhunted InRequirement);// 0x14ae710
	static bool HasRequirement_BalanceMode(out const TigerChallengeRequirementBalanceMode InRequirement);// 0x14ae7b0
	static bool HasRequirement_Airborne(out const TigerChallengeRequirementAirborne InRequirement);// 0x14ae710

--------------------------------
Class: TigerChallengeRequirementTraversalState.TigerChallengeRequirementBase
	bool bCheckTraversal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum RequiredTraversalState;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: TigerChallengeVisitLocation.TigerChallenge.Object
	TigerVisitLocationTriggerVolume* TriggerVolume;//[Offset: 0x110, Size: 0x28]
	bool bHasInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool bHideInteractorUntillVolumeEntered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool bHideMapMarkerUntilVolumeEntered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	TigerInteractivePoint* InteractionPoint;//[Offset: 0x140, Size: 0x28]
	void HandleLocationEntered(TigerPlayerController* InIntersectingPlayerController);// 0x14ae370
	void HandleInteractionComplete(const TigerInteractivePoint* InInteractedItem);// 0x14ae260

--------------------------------
Class: TigerInteractivePoint.TigerClientInteractiveObject.TigerInteractiveObject.Actor.Object
	bool bHasMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bShowMeshPreInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool bShowMeshPostInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	StaticMesh* InteractivePointStaticMesh;//[Offset: 0x2b8, Size: 0x8]
	StaticMeshComponent* InteractivePointMeshComponent;//[Offset: 0x2c0, Size: 0x8]
	bool bHasSoundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	AkAudioEvent* InteractivePointSoundEffect;//[Offset: 0x2d0, Size: 0x8]
	bool bHasParticleSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bShowParticleSystemPreInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bShowParticleSystemPostInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	ParticleSystem* InteractivePointParticleSystem;//[Offset: 0x2e0, Size: 0x8]
	ParticleSystemComponent* InteractivePointParticleSystemComponent;//[Offset: 0x2e8, Size: 0x8]
	TigerGrimoireUnlock GrimoireUnlock;//[Offset: 0x2f0, Size: 0x10]
	float InteractionTimeIfNoAnimation;//[Offset: 0x300, Size: 0x4]
	bool bForceNotValidForPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bDestroyPostInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	FText PlayerFacingInteractionText;//[Offset: 0x308, Size: 0x18]
	void Client_SetParticeVisibility(bool InParticleVisibile);// 0x152e2f0
	void Client_SetMeshVisibility(bool InMeshVisibile);// 0x152e260

--------------------------------
Class: TigerVisitLocationTriggerVolume.TriggerVolume.Volume.Brush.Actor.Object
	void OnEndOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x1623a70
	void OnBeginOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x16239a0
	void OnAreaLeft__DelegateSignature();// 0x197e4f0
	void OnAreaEntered__DelegateSignature(TigerPlayerController* InPlayerController);// 0x197e4f0
	void HandleOnRestartPlayer(Controller* InNewPlayer);// 0x1623650

--------------------------------
Class: TigerCharacterCardBase.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayerState* RepresentedPlayer;//[Offset: 0x280, Size: 0x8]
	void OnInit(TigerPlayerState* InRepresentedPlayer);// 0x197e4f0
	void Init(TigerPlayerState* InRepresentedPlayer);// 0x14b76a0
	TigerPlayerState* GetRepresentedPlayer();// 0x14b7670
	void BuildCharacterCard();// 0x197e4f0

--------------------------------
Class: TigerCharacterCustomizablePreviewThumbnailUI.TigerWidget.UserWidget.Widget.Visual.Object
	class TigerThumbnailActor* ThumbnailActorType;//[Offset: 0x280, Size: 0x8]
	bool bIsRealtime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	MaterialInterface* PostRenderMaterial;//[Offset: 0x290, Size: 0x8]
	TigerThumbnailActor* ThumbnailActor;//[Offset: 0x2d8, Size: 0x8]
	float FOV;//[Offset: 0x2e0, Size: 0x4]
	void TickViewport(float InDeltaTime);// 0x14b7730

--------------------------------
Class: TigerThumbnailActor.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	SceneComponent* ViewOrientation;//[Offset: 0x230, Size: 0x8]
	int IconWidth;//[Offset: 0x238, Size: 0x4]
	int IconHeight;//[Offset: 0x23c, Size: 0x4]
	bool bIsRealtime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	float FOV;//[Offset: 0x244, Size: 0x4]
	TextureCube* Cubemap;//[Offset: 0x248, Size: 0x28]
	float CubemapIntensity;//[Offset: 0x270, Size: 0x4]
	bool bShouldGenerateImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	SoftClassPath[] ItemPaths;//[Offset: 0x278, Size: 0x10]
	void Generate(TigerInventoryItemBase* InItem);// 0x197e4f0

--------------------------------
Class: TigerClanCustomizationOptions.Object
	TigerCharacterCustomizationOutfitData[] Outfits;//[Offset: 0x28, Size: 0x10]
	TigerCharacterCustomizationHeadData[] Heads;//[Offset: 0x38, Size: 0x10]
	TigerCharacterCustomizationItem[] Hairs;//[Offset: 0x48, Size: 0x10]
	TigerCharacterCustomizationItem[] HairColors;//[Offset: 0x58, Size: 0x10]
	TigerCharacterCustomizationItem[] EyeColors;//[Offset: 0x68, Size: 0x10]
	TigerCharacterCustomizationItem[] Tattoos;//[Offset: 0x78, Size: 0x10]
	TigerCharacterCustomizationItem[] FacePaints;//[Offset: 0x88, Size: 0x10]
	TigerCharacterCustomizationItem[] PiercingSets;//[Offset: 0x98, Size: 0x10]
	TigerCharacterCustomizationItem[] Headgears;//[Offset: 0xa8, Size: 0x10]
	TigerCharacterCustomizationItem[] Eyewears;//[Offset: 0xb8, Size: 0x10]
	TigerCharacterCustomizationItem[] Eyebrows;//[Offset: 0xc8, Size: 0x10]
	TigerCharacterCustomizationItem[] EyebrowColors;//[Offset: 0xd8, Size: 0x10]
	TigerCharacterCustomizationItem[] Beards;//[Offset: 0xe8, Size: 0x10]
	TigerCharacterCustomizationItem[] BeardColors;//[Offset: 0xf8, Size: 0x10]
	TigerCharacterCustomizationItem[] CharacterIcons;//[Offset: 0x108, Size: 0x10]
	TigerCharacterCustomizationItem[] CharacterCardShapes;//[Offset: 0x118, Size: 0x10]
	TigerCharacterCustomizationItem[] CharacterCardTextures;//[Offset: 0x128, Size: 0x10]
	TigerCharacterCustomizationItem[] Emotes;//[Offset: 0x138, Size: 0x10]
	TigerCharacterCustomizationItem[] BodyTypeModifiers;//[Offset: 0x148, Size: 0x10]
	<enum,TigerCombinedItemCustomizations> CombinedItems;//[Offset: 0x158, Size: 0x50]
	TigerCharacterCardData DefaultPlayerCard;//[Offset: 0x1a8, Size: 0x78]
	<TelemetryIdToItemLut_Key(UInt64Property),class TigerInventoryItemBase> TelemetryIdToItemLut;//[Offset: 0x220, Size: 0x50]
	<class TigerInventoryItemBase,ItemToTelemetryIdLut(UInt64Property)> ItemToTelemetryIdLut;//[Offset: 0x270, Size: 0x50]
	<TelemetryIdToIndexLut_Key(UInt64Property),int> TelemetryIdToIndexLut;//[Offset: 0x2c0, Size: 0x50]
	<TelemetryIdToCombinedTelemetryIdMap_Key(UInt64Property),TelemetryIdToCombinedTelemetryIdMap(UInt64Property)> TelemetryIdToCombinedTelemetryIdMap;//[Offset: 0x310, Size: 0x50]
	<StandardSetItemTelemetryIds(UInt64Property)> StandardSetItemTelemetryIds;//[Offset: 0x360, Size: 0x50]

--------------------------------
Class: TigerCharacterCustomizationOutfitData.TigerCharacterCustomizationItem

--------------------------------
Class: TigerCharacterCustomizationItem
	class TigerInventoryItemBase* ItemClassPath;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: TigerCharacterCustomizationHeadData.TigerCharacterCustomizationItem

--------------------------------
Class: TigerCombinedItemCustomizations
	TigerCharacterCustomizationItem[] CombinedItems;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerCharacterMenuUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void OnDisciplinesUpdated();// 0x197e4f0

--------------------------------
Class: TigerSceneRenderItemWidget.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnItemSpawned;//[Offset: 0x280, Size: 0x10]
	Vector ItemSpawnLocation;//[Offset: 0x290, Size: 0xc]
	class Actor* DefaultItemClass;//[Offset: 0x2a0, Size: 0x28]
	MaterialInterface* RenderTargetMaterial;//[Offset: 0x2c8, Size: 0x8]
	bool bOverrideItemRenderTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Actor* SpawnedItem;//[Offset: 0x2d8, Size: 0x8]
	void SpawnItem(class Actor InActorClass);// 0x15db650
	void OverrideRenderTextureTarget(Actor* InActor);// 0x15db210
	void OnItemSpawned__DelegateSignature(Actor* InSpawnedItem);// 0x197e4f0
	TextureRenderTarget2D* GetRenderTextureFromMaterial();// 0x15dae40

--------------------------------
Class: TigerCharacterPaperDollWidget.TigerSceneRenderItemWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerCharacterAppearance Appearance;//[Offset: 0x2f0, Size: 0xc8]
	TigerPlayerClanData* ClanData;//[Offset: 0x3b8, Size: 0x8]
	bool bUseSharedPaperDoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	void SetFromApperance(out const TigerPreviewerData InAppearance, TigerPlayerClanData* InClanData, delegate InDelegate);// 0x14bb180
	void OnCharacterAppearanceUpdated__DelegateSignature();// 0x197e4f0
	TigerPaperDoll* GetPaperDoll();// 0x14ba3d0

--------------------------------
Class: TigerPhysicalInteractionAnimationAsset.DataAsset.Object
	TigerPhysicalInteractionMontages FeedingDataByVampireGender;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: TigerPhysicalInteractionMontages
	TigerPhysicalInteractionDescription DescriptionByTargetGender;//[Offset: 0x0, Size: 0x30]

--------------------------------
Class: TigerPhysicalInteractionDescription
	AnimMontage* PrimeStart;//[Offset: 0x0, Size: 0x8]
	AnimMontage* PrimeMid;//[Offset: 0x8, Size: 0x8]
	AnimMontage* PrimeEnd;//[Offset: 0x10, Size: 0x8]
	AnimMontage* SecondaryStart;//[Offset: 0x18, Size: 0x8]
	AnimMontage* SecondaryMid;//[Offset: 0x20, Size: 0x8]
	AnimMontage* SecondaryEnd;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerPhysicalInteractionDiablerize.TigerPhysicalInteraction.Object
	float DiablerizeTime;//[Offset: 0x40, Size: 0x4]
	bool bInstantInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bResetPowerCooldownsOnSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	TigerPhysicalInteractionAnimationAsset* DiablerizeAnimationAsset;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: TigerPhysicalInteractionRevive.TigerPhysicalInteraction.Object

--------------------------------
Class: TigerPoseableSkeletalMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetPoseableMesh(SkeletalMesh* InSkeletalMesh, SceneComponent* InParent, class TigerCharacterPoseableMeshAnimInstance InAnimClass, bool bInUseUpdateRateOptimization);// 0x14c0040

--------------------------------
Class: TigerCharacterPoseableMesh.Object
	SkeletalMesh* Mesh;//[Offset: 0x28, Size: 0x8]
	class TigerCharacterPoseableMeshAnimInstance* AnimClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerCheatManager.CheatManager.Object
	class TigerVideoCameraController* TigerVideoCameraControllerClass;//[Offset: 0x78, Size: 0x8]
	TigerVideoCameraController* TigerVideoCameraController;//[Offset: 0x80, Size: 0x8]
	<FString,TigerContextualHelp*> ContextualHelpMessages;//[Offset: 0x88, Size: 0x50]
	void TigerUpdateSeasonProgress(int ExpToAdd, int LevelsToAdd);// 0x14c17b0
	void TigerUnlockVanityItem(const FString InItemName);// 0x14c16c0
	void TigerUnlockThrall(const enum InThrallId);// 0x1474b00
	void TigerUnlockItemsInCategory(const FName InCategoryName);// 0x14c1630
	void TigerUnlockAllThralls();// 0xb7a5a0
	void TigerUnlockAllPerks();// 0xb7a5a0
	void TigerToggleVisualLogger();// 0xb7a5a0
	void TigerToggleNoAggro();// 0xb7a5a0
	void TigerToggleClientSideHitDetectionRanged();// 0xb7a5a0
	void TigerToggleClientSideHitDetectionMelee();// 0xb7a5a0
	void TigerThrallTickAllStatModifiers();// 0xb7a5a0
	void TigerThrallMissionUpdateAll();// 0xb7a5a0
	void TigerThrallMissionStatusChange(const int InThrallMissionId, const bool bIsActive);// 0x14c0ff0
	void TigerThrallMissionAdvanceTurns(const int InThrallMissionId, InTurns(UInt32Property) InTurns);// 0x14c1560
	void TigerThrallAddStatModifier(const byte InSlotIndex, const FName InModifierName);// 0x14c1490
	void TigerTestLoadingScreenTooltip(out const FText InToolTipHeaderText);// 0x14c13c0
	void TigerTestContextualHelp(FString InContextualHelpName);// 0x14c0250
	void TigerTestAllLoadingScreenTooltips(const float InDelayBetweenMessages);// 0x14c0a00
	void TigerTestAllCurrentContextualHelpCandiates(const float InDelayBetweenMessages);// 0x14c0a00
	void TigerTestAllContextualHelp(const float InDelayBetweenMessages);// 0x14c0a00
	void TigerTeleportToCameraLink(FString InUrl);// 0x14c0250
	void TigerSubmitChallengeProgress();// 0xb7a5a0
	void TigerStartQuest(FString InQuestlineId, FString InQuestId);// 0x14c0820
	void TigerSpawnNpcsAroundPlayer(out const FName InNpcType, int InCount);// 0x14c12f0
	void TigerSpawnNpcAtCursorWithPotency(out const FName NPCType, const enum InPotency, const enum InBloodType);// 0x14c11d0
	void TigerSpawnNpcAtCursor(out const FName NPCType);// 0x14c1140
	void TigerSleep(const float SleepMs);// 0x14c0a00
	void TigerSkipPsoCaching();// 0xb7a5a0
	void TigerShowPlayerLevel();// 0xb7a5a0
	void TigerShowMatchTimer();// 0xb7a5a0
	void TigerShowDoNotUseMeshes();// 0xb7a5a0
	void TigerShowArchetypeLevel();// 0xb7a5a0
	void TigerShowActiveAnimationsOnActors(bool bShouldShow);// 0x149f8f0
	void TigerSetXeSSQuality(enum InQuality);// 0x14c10c0
	void TigerSetWeatherScenario(FString InScenarioName);// 0x14c0250
	void TigerSetSessionProgressToBattlepassLevel(const int InLevel, bool bInShouldOwnBattlepass);// 0x14c0ff0
	void TigerSetPlayerLevel(int InPlayerLevel);// 0x14c0500
	void TigerSetMatchesPlayed(const int InNumberMatches);// 0x14c0500
	void TigerSetFsrQuality(enum InFsrQuality);// 0x14c0f70
	void TigerSetFsr2Sharpness(const float InSharpness);// 0x14c0ef0
	void TigerSetFsr2Quality(enum InFsr2Quality);// 0x14c0e70
	void TigerSetFov(const float InFov);// 0x14c0a00
	void TigerSetDutchAngle(FString InAngle);// 0x14c0250
	void TigerSetDlssQuality(enum InQuality);// 0x14c0df0
	void TigerSetCinematicQuality(enum InQualityLevel);// 0x1474b00
	void TigerSetCinematicOutfit(FString InCharacterName);// 0x14c0250
	void TigerSetCharacterData(FString ClanText, int PowerKitIndex, FString GenderText);// 0x14c0cb0
	void TigerSetArchetypeLevel(int InArchetypeLevel);// 0x14c0500
	void TigerSetAppearanceItemById(FString InDatabaseId);// 0x14c0250
	void TigerSetAppearance(FString AppearanceText);// 0x14c0250
	void TigerServerCrash();// 0xb7a5a0
	void TigerSerializeStatistics();// 0xb7a5a0
	void TigerResetQuests();// 0xb7a5a0
	void TigerReportSelf(int InReportReason);// 0x14c0500
	void TigerRemoveThrall(const byte InSlot);// 0x14c0c30
	void TigerRemoveHolyIncense();// 0xb7a5a0
	void TigerRemoveAllThralls();// 0xb7a5a0
	void TigerRegisterGrimoireEntryAsUnread(FString InGrimoireEntryId);// 0x14c0250
	void TigerRegisterGrimoireEntryAsUnlocked(FString InGrimoireEntryId);// 0x14c0250
	void TigerRegisterGrimoireEntryAsRead(FString InGrimoireEntryId);// 0x14c0250
	void TigerRegisterGrimoireEntryAsLocked(FString InGrimoireEntryId);// 0x14c0250
	void TigerRegisterGrimoireEntryAndSiblingsAsUnlocked(FString InGrimoireEntryId);// 0x14c0250
	void TigerRegisterAllGrimoireEntriesAsUnread();// 0xb7a5a0
	void TigerRegisterAllGrimoireEntriesAsUnlocked();// 0xb7a5a0
	void TigerRegisterAllGrimoireEntriesAsRead();// 0xb7a5a0
	void TigerRegisterAllGrimoireEntriesAsLocked();// 0xb7a5a0
	void TigerRainAmount(float RainAmount);// 0x14c0a00
	void TigerQuitTutorial();// 0xb7a5a0
	void TigerPrintCompleteQuestInfo();// 0xb7a5a0
	void TigerPrintAllLoadingScreenToolTips();// 0xb7a5a0
	void TigerPrintAllContextualHelpHints();// 0xb7a5a0
	void TigerPrintActiveQuestInfo();// 0xb7a5a0
	void TigerMatchAddPlayerExp(int InPlayerExp);// 0x14c0500
	void TigerMatchAddArchetypeExp(int InArchetypeExp);// 0x14c0500
	void TigerListThrallTrueStats();// 0xb7a5a0
	void TigerListThralls();// 0xb7a5a0
	void TigerListSoftCurrencies();// 0xb7a5a0
	void TigerListPlayerCharacters();// 0xb7a5a0
	void TigerKickByMod();// 0xb7a5a0
	void TigerJumpToLink(FString InUrl);// 0x14c0250
	void TigerIncrementPremiumCurrency(InAmountToAdd(UInt64Property) InAmountToAdd);// 0x14c0ba0
	void TigerFreeReload();// 0xb7a5a0
	void TigerExportMetadata();// 0xb7a5a0
	void TigerEnableVideoFreeCamPlayerController();// 0x14c0b80
	void TigerEnableStatisticsGathering(bool bShouldBeEnabled);// 0x149f8f0
	void TigerDisableDisciplineCost();// 0xb7a5a0
	void TigerDestroyNpcWithinRadiusIgnoreDebugTarget(const float InRadius);// 0x14c0b00
	void TigerDestroyNpcWithinRadius(const float Radius);// 0x14c0a80
	void TigerDemoStop();// 0xb7a5a0
	void TigerDemoRec(FString InRecordingName);// 0x14c0250
	void TigerDebugHolyIncenseProgressBetweenServerAndClient(bool bInEnable);// 0x149f8f0
	void TigerDebugHolyIncenseDrawServerAndClientVertices(const float InDuration);// 0x14c0a00
	void TigerDebugDrawPlayerGrid(const float DebugDrawLifetime);// 0x14c0a00
	void TigerDeactivateEvent(FString InEventName);// 0x14c0250
	void TigerCreateFakeLoadingScreen();// 0xb7a5a0
	void TigerCreateDefaultCharacterAtSlot(FString InArchetypeName, byte InCharacterSlot);// 0x14c0920
	void TigerCrash();// 0xb7a5a0
	void TigerCopyPlayerId();// 0xb7a5a0
	void TigerCompleteQuestActiveObjectiveSet(FString InQuestlineId, FString InQuestId);// 0x14c0820
	void TigerCompleteQuest(FString InQuestlineId, FString InQuestId);// 0x14c0820
	void TigerCompleteNextTierMastery();// 0xb7a5a0
	void TigerCompleteNextChallengeWeekly();// 0xb7a5a0
	void TigerCompleteNextChallengeMastery();// 0xb7a5a0
	void TigerCompleteNextChallengeDaily();// 0xb7a5a0
	void TigerClearQuest(FString InQuestlineId, FString InQuestId);// 0x14c0820
	void TigerChangeThrallStats(const byte InSlotIndex, const int InPerception, const int InCommitment, const int InDominance, const int InSociability, const int InProficiency, const int InStealth, const int InStamina, const int InCombat);// 0x14c0590
	void TigerChangeRespawnTokenCount(const int InChange);// 0x14c0500
	void TigerChallengeSetProgressMastery(FString InChallengeName, const int InProgressValue);// 0x14c0420
	void TigerBringMeHome();// 0xb7a5a0
	void TigerBreakMasquerade();// 0xb7a5a0
	void TigerBanMeForProfanity();// 0xb7a5a0
	void TigerBanMeForLoadData();// 0xb7a5a0
	void TigerBanMeForAntiCheat();// 0xb7a5a0
	void TigerAddSoftCurrency(int InAmount, FString InCurrencyIdAsString);// 0x14c02f0
	void TigerActivateEventForQuest(FString InQuestlineId);// 0x14c0250
	void TigerActivateEvent(FString InEventName);// 0x14c0250
	void OnGetPlayerCharactersRsp(out const TigerPersistentPlayerCharacter[] InCharacters, FString InErrorString);// 0x14bf950
	void LoadContextualHelp();// 0xb7a5a0

--------------------------------
Class: TigerVideoCameraController.DebugCameraController.PlayerController.Controller.Actor.Object

--------------------------------
Class: TigerCinematicGameMode.GameModeBase.Info.Actor.Object
	enum Quality;//[Offset: 0x2c8, Size: 0x1]
	bool bHideMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	int NumShadowCastingLights;//[Offset: 0x2cc, Size: 0x4]

--------------------------------
Class: TigerCinematicQualitySettings.DeveloperSettings.Object
	FString[] GlobalCommands;//[Offset: 0x38, Size: 0x10]
	FString[] CinematicQualityCommands;//[Offset: 0x48, Size: 0x10]
	FString[] LowQualityCommands;//[Offset: 0x58, Size: 0x10]
	TigerCharacterCinematicTemplate[] CharacterTemplates;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: TigerCharacterCinematicTemplate
	FString PresetName;//[Offset: 0x0, Size: 0x10]
	FString Clan;//[Offset: 0x10, Size: 0x10]
	FString PowerKitIndex;//[Offset: 0x20, Size: 0x10]
	FString Gender;//[Offset: 0x30, Size: 0x10]
	FString OutfitCommand;//[Offset: 0x40, Size: 0x10]
	FString[] UtilityItems;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TigerClanLevelWidget.UserWidget.Widget.Visual.Object
	void UpdateClanLevel(enum Clan);// 0x14c6c50
	void OnClanLevelUpdated(const int NewClanLevel);// 0x197e4f0
	int GetCurrentClanLevel();// 0x14c5ed0

--------------------------------
Class: TigerOnlineSettings.DeveloperSettings.Object
	bool bResetPlayerDataInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FString PlayerDataServiceUri;//[Offset: 0x40, Size: 0x10]
	FString SessionServiceUri;//[Offset: 0x50, Size: 0x10]
	FString PushServiceUri;//[Offset: 0x60, Size: 0x10]
	FString PartyServiceUri;//[Offset: 0x70, Size: 0x10]
	FString FriendServiceUri;//[Offset: 0x80, Size: 0x10]
	FString PresenceServiceUri;//[Offset: 0x90, Size: 0x10]
	FString LoginQueueServiceUri;//[Offset: 0xa0, Size: 0x10]
	FString StoreServiceUri;//[Offset: 0xb0, Size: 0x10]
	FString ConsoleServiceUri;//[Offset: 0xc0, Size: 0x10]
	FString ConfigServiceUri;//[Offset: 0xd0, Size: 0x10]
	FString TelemetryServiceUri;//[Offset: 0xe0, Size: 0x10]
	FString FeatureSwitchServiceUri;//[Offset: 0xf0, Size: 0x10]
	UInt32Property EntitlementTokenTimeoutSeconds;//[Size: 0x4]
	UInt32Property EntitlementTokenRetryTimeoutSeconds;//[Size: 0x4]
	UInt32Property GameModesConfigTimerIntervalSeconds;//[Size: 0x4]
	UInt32Property GameModesConfigRetryTimeoutSeconds;//[Size: 0x4]
	FString GameModesConfigBranchName;//[Offset: 0x110, Size: 0x10]
	FString GameModesConfigDebugFileName;//[Offset: 0x120, Size: 0x10]
	UInt32Property GameModesMetricsTimerIntervalSeconds;//[Size: 0x4]
	UInt32Property PushConnectionLowHeartbeatIntervalSeconds;//[Size: 0x4]
	UInt32Property PushConnectionHighHeartbeatIntervalSeconds;//[Size: 0x4]

--------------------------------
Class: TigerClientPushConnectionManager.TigerPushConnectionManager.Object

--------------------------------
Class: TigerSessionSettings.DeveloperSettings.Object
	bool bFindOnlyLocalSessions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int GroupSize;//[Offset: 0x3c, Size: 0x4]
	bool bEnableFakeMatchmakingDelayInElysium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bEnableCloudSessions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: TigerClimbablePipe.Actor.Object

--------------------------------
Class: TigerCollectibleSystemSettings.DeveloperSettings.Object
	DataTable* CollectiblesTable;//[Offset: 0x38, Size: 0x28]
	static bool IsTableReady();// 0x14c6150
	static DataTable* GetCollectiblesTable();// 0x14c5ea0

--------------------------------
Class: TigerFloatAverageAggregator.Object
	void RemoveValue(const float Value);// 0x14c6780
	void AddValue(const float Value);// 0x14c55a0

--------------------------------
Class: TBFL_UIColors_C.BlueprintFunctionLibrary.Object
	static void GetColorByItemType(TigerItemAsset* InItemAsset, Object* __WorldContext, out LinearColor OutColor, enum Temp_byte_Variable, LinearColor CallFunc_GetUIColor_LinearColor, LinearColor CallFunc_GetUIColor_LinearColor, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, TigerAmmoAsset* K2Node_DynamicCast_AsTiger_Ammo_Asset, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, LinearColor CallFunc_GetUIColor_LinearColor);// 0x197e4f0
	static void GetOutlineColor(enum InOutlineMode, byte InPlayerIndex, Object* __WorldContext, out LinearColor Color, enum Temp_byte_Variable, LinearColor CallFunc_GetUIColor_LinearColor, LinearColor CallFunc_GetUIColor_LinearColor, LinearColor CallFunc_GetUIColor_LinearColor, LinearColor CallFunc_GetUIColor_LinearColor, LinearColor K2Node_Select_Default);// 0x197e4f0
	static void GetBackgroundColorByPlayerStatus(byte InPlayerStatus, Object* __WorldContext, out SlateColor OutAccentColor, byte Temp_byte_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_Select_Default);// 0x197e4f0
	static void GetAccentColorByPlayerStatus(byte InPlayerStatus, Object* __WorldContext, out LinearColor OutAccentColor, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor K2Node_Select_Default);// 0x197e4f0
	static void GetPlayerColorByIndex(byte InPlayerIndex, enum InColorSpace, Object* __WorldContext, out LinearColor Color, byte Temp_byte_Variable, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, LinearColor CallFunc_GetUIColor_LinearColor);// 0x197e4f0
	static void GetUIColorSlate(enum UIColor, enum ColorSpace, Object* __WorldContext, out SlateColor SlateColor, LinearColor CallFunc_GetUIColor_LinearColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x197e4f0
	static void GetUIColorAsText(enum UIColor, enum ColourSpace, Object* __WorldContext, out FText ColorText, TigerUIColorSet* CallFunc_GetData_ColorSet, LinearColor CallFunc_GetColor_ReturnValue, FString CallFunc_Conv_ColorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x197e4f0
	static void GetUIColor(enum UIColor, enum ColourSpace, Object* __WorldContext, out LinearColor LinearColor, TigerUIColorSet* CallFunc_GetData_ColorSet, LinearColor CallFunc_GetColor_ReturnValue);// 0x197e4f0
	static void GetData(Object* __WorldContext, out TigerUIColorSet* ColorSet);// 0x197e4f0

--------------------------------
Class: TBP_UI_CompassObject_C.TigerCompassMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	CanvasPanel* CompassMarker;//[Offset: 0x2a8, Size: 0x8]
	Image* CompassMarkerImage;//[Offset: 0x2b0, Size: 0x8]
	MaterialInstanceDynamic* CompassMarkerMaterial;//[Offset: 0x2b8, Size: 0x8]
	void GetCompassObjectScreenMinMax(out float Screen Pos Min, out float Screen Pos Max, float EdgeSizeBorder, float CallFunc_GetObjectImageSizeX_Image_Size_X, float CallFunc_Multiply_FloatFloat_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_GetDesiredSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x197e4f0
	void GetProximityToCompassAreaCenter(out float 0-1 Proximity, float CallFunc_GetCompassObjectScreenMinMax_Screen_Pos_Min, float CallFunc_GetCompassObjectScreenMinMax_Screen_Pos_Max, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, PanelWidget* CallFunc_GetParent_ReturnValue, Vector2D CallFunc_GetDesiredSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x197e4f0
	void GetObjectImageSizeX(out float Image Size X, Vector2D CallFunc_GetDesiredSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x197e4f0
	void GetCompassAreaSizeX(out float Compass Area Size X, PanelWidget* CallFunc_GetParent_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0x197e4f0
	void UpdatePosition(float MarkerTopOffsetY, float MarkerBottomOffsetY, float PositionX, float ParentX, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum Temp_byte_Variable, float K2Node_Select_Default, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_GetCompassObjectScreenMinMax_Screen_Pos_Min, float CallFunc_GetCompassObjectScreenMinMax_Screen_Pos_Max, float CallFunc_GetRelativeAngleOnCompass_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_GetDesiredSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x197e4f0
	void Construct();// 0x197e4f0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x197e4f0
	void SetColorBasedOnPlayerIndex(const byte InIndex);// 0x197e4f0
	void ExecuteUbergraph_TBP_UI_CompassObject(int EntryPoint, const byte K2Node_Event_InIndex, LinearColor CallFunc_GetPlayerColorByIndex_Color, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x197e4f0

--------------------------------
Class: SharkOnlineSettings.DeveloperSettings.Object
	float MaximumRetryDelaySeconds;//[Offset: 0x38, Size: 0x4]
	int MinimumAccountCreationAge;//[Offset: 0x3c, Size: 0x4]
	int PartyMaintenancePollIntervalSeconds;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: TigerConsequenceBroadcastCoordinator.Object

--------------------------------
Class: TigerHealingConsumableAsset.TigerConsumableAsset.TigerItemAsset.DataAsset.Object
	float HealAmount;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: TigerBuffingConsumableAsset.TigerConsumableAsset.TigerItemAsset.DataAsset.Object
	class TigerBuff* BuffToApply;//[Offset: 0x178, Size: 0x8]

--------------------------------
Class: TigerRevealItemConsumableAsset.TigerConsumableAsset.TigerItemAsset.DataAsset.Object
	float MaxDistanceToItem;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: TigerSupplyDropConsumableAsset.TigerConsumableAsset.TigerItemAsset.DataAsset.Object
	class Actor* SupplyDropFlare;//[Offset: 0x178, Size: 0x8]
	class Actor* SupplyDropHelicopterActor;//[Offset: 0x180, Size: 0x8]
	float DistanceFromPlayer;//[Offset: 0x188, Size: 0x4]
	float Height;//[Offset: 0x18c, Size: 0x4]

--------------------------------
Class: TigerControllerDiagram.TigerWidget.UserWidget.Widget.Visual.Object
	TigerGamepadPresetPromptPairing[] PromptPairings;//[Offset: 0x280, Size: 0x10]
	void UnhighlightDesignatedKeys(out const Key[] InKeys);// 0x14d2770
	void UnhighlightAllKeys();// 0x14d2750
	void UnassignActionByPairing(TigerGamepadPresetPromptPairing InPairing);// 0x14d2660
	void UnassignActionByKey(const Key InKey);// 0x14d2580
	void SetPromptActionByKey(const Key InKey, const FText InMainAction, const FText InHeldAction);// 0x14d1c40
	void SetLabelsAsModifiedByKeys(out const Key[] InKeys, const bool InAreModified);// 0x14d1a20
	void SetLabelAsModifiedByKey(const Key InKey, const bool InIsModified);// 0x14d18f0
	void SetAllLabelAsModified(const bool InIsModified);// 0x14d14d0
	void HighlightDesignatedKeys(out const Key[] InKeys);// 0x14d0d70
	void ClearPromptPairings();// 0x14cf9b0
	void AddPromptPairing(TigerControllerDiagramLabel* InAssociatedWidget);// 0x14cf7f0

--------------------------------
Class: TigerGamepadPresetPromptPairing
	Key AssociatedKey;//[Offset: 0x0, Size: 0x18]
	TigerControllerDiagramLabel* AssociatedWidget;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TigerControllerDiagramLabel.TigerWidget.UserWidget.Widget.Visual.Object
	float HighlightedOpacity;//[Offset: 0x280, Size: 0x4]
	float DefaultOpacity;//[Offset: 0x284, Size: 0x4]
	float LockedOpacity;//[Offset: 0x288, Size: 0x4]
	byte IconAlignment;//[Offset: 0x28c, Size: 0x1]
	Key RepresentativeKey;//[Offset: 0x290, Size: 0x18]
	FText MainActionName;//[Offset: 0x2a8, Size: 0x18]
	FText HeldActionName;//[Offset: 0x2c0, Size: 0x18]
	bool bHasHeldAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bHasBeenModified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	void UnHighlightInput();// 0x14d2560
	void SetMainActionName(const FText InActionName);// 0x14d1b60
	void SetIsLocked(const bool InNewStatus);// 0x14d1860
	void SetHeldActionName(const FText InActionName);// 0x14d1780
	void SetHasBeenModified(const bool InHasBeenModified);// 0x14d16f0
	void SetBothActionNames(const FText InMainAction, const FText InHeldAction);// 0x14d1560
	void OnSetActionName();// 0x197e4f0
	bool IsInputLocked();// 0x14d0f70
	void HighlightInput();// 0x14d0e60
	FText GetUnassignedText();// 0x14d0bf0
	FText GetHeldActionText();// 0x14d02c0

--------------------------------
Class: TigerControllerPresetMenu.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	enum PlatformInputType;//[Offset: 0x510, Size: 0x1]
	bool TryChangeMultiActionsKey(const Key InKey, const FName[] InNewActionNames, const bool InReplaceExisting);// 0x14d2390
	bool TryChangeKey(const Key InKey, out const FName InNewActionName, const bool InReplaceExisting);// 0x14d21f0
	void SavePresetOfId(const int InPresetId);// 0x14d1440
	void SaveConfiguringPreset();// 0x14d1420
	bool ResetKeyToDefault(const Key InKey);// 0x14d1330
	void ResetAllToDefaultOfPreset(const int InPresetId);// 0x14d12a0
	void ResetAllToDefault();// 0x14d1280
	bool ResetActionToDefault(out const FName InAction, out Key OutDefaultKey);// 0x14d1150
	void OnInputBindingsReset(const bool bInResetKeyboard, const bool bInResetGamepad);// 0x14d1080
	bool IsKeyLocked(const Key Key);// 0x14d0f90
	bool IsConfiguringKeyModified(const Key InKey);// 0x14d0e80
	bool HasAnyBeenModifiedOfPreset(const int InPresetId);// 0x14d0cd0
	bool HasAnyBeenModified();// 0x14d0ca0
	void GetPresetKeyAndTextPairs(int InPresetId, out TigerActionKeyMappingInfo[] OutMappings, const bool InIncludeLockedActions);// 0x14d0a30
	void GetPresetData(out TigerPresetListItemIdPair[] OutPresetData);// 0x14d0930
	Key[] GetModifiedKeysOfPreset(const int InPresetId);// 0x14d0830
	Key[] GetModifiedKeys();// 0x14d0780
	void GetMappings(out const TigerCustomisedControlsPreset InCustomisedControlsPreset, out InputActionKeyMapping[] OutActionMappings, out InputAxisKeyMapping[] OutAxisMappings, const enum InBindingListType);// 0x14d0440
	<Key> GetLockedKeys();// 0x14d0350
	void GetCurrentTypeOfMappings(out InputActionKeyMapping[] OutActionMappings, out InputAxisKeyMapping[] OutAxisMappings, const enum InBindingListType);// 0x14d00d0
	void GetCurrentSharedKeys(out TigerActionKeyMappingInfo[] OutMappings, const bool InIncludeLockedActions);// 0x14cff30
	int GetCurrentSetPresetID();// 0x14cff00
	void GetCurrentMappings(out InputActionKeyMapping[] OutActionMappings, out InputAxisKeyMapping[] OutAxisMappings);// 0x14cfd60
	void GetCurrentDiscreteActions(out TigerActionKeyMappingInfo[] OutMappings, const bool InIncludeLockedActions);// 0x14cfbc0
	void GetActionsForConfiguringPreset(const int InPresetId, out InputActionKeyMapping[] OutActionList);// 0x14cfa60
	void EditConfiguringPreset(const int InNewActivePresetID);// 0x14cf9d0
	bool AreAnyActionsUnassigned();// 0x14cf980
	bool ApplyPresetOfId(const int InPresetId, out FName[] OutMissingActionNames);// 0x14cf880

--------------------------------
Class: TigerActionKeyMappingInfo
	FText Name;//[Offset: 0x0, Size: 0x18]
	Key Key;//[Offset: 0x18, Size: 0x18]
	FName[] BackendNames;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerPresetListItemIdPair
	int PresetId;//[Offset: 0x0, Size: 0x4]
	FText PresetName;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: TigerCustomisedControlsPreset
	<Key,TigerMappingList> ModifiedKeyMappings;//[Offset: 0x0, Size: 0x50]
	<Key,TigerMappingList> ModifiedAxisKeyMappings;//[Offset: 0x50, Size: 0x50]
	int PresetId;//[Offset: 0xa0, Size: 0x4]
	int DefaultPresetVersion;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: TigerMappingList
	InputActionKeyMapping[] ActionMapping;//[Offset: 0x0, Size: 0x10]
	InputAxisKeyMapping[] AxisMapping;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerCrosshairNotificationDataAsset.DataAsset.Object
	<enum,TigerCrosshairNotificationData> NotificationData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerCrosshairNotificationData
	FText DisplayText;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: TigerCrosshairNotificationsWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerCrosshairNotificationDataAsset* NotificationData;//[Offset: 0x280, Size: 0x8]
	void SetNotification(enum InNotification);// 0x197e4f0
	bool IsInAnimation();// 0x197e4f0
	bool IsFree();// 0x197e4f0

--------------------------------
Class: TigerCSVTable.Object
	void WriteToFile(FString Filename, FString Path);// 0x14d2860
	void SetValueString(int Row, int Column, FString Value);// 0x14d1fa0
	void SetValueFloat(int Row, int Column, float Value);// 0x14d1e60
	int AddColumn(FString ColumnName);// 0x14cf6a0
	void AccumulateValue(int Row, int Column, float Value);// 0x14cf530

--------------------------------
Class: TigerCustomizationRandomizerSet.DataAsset.Object
	<TigerGenderArchetypeKey,TigerOutfitList> Outfits;//[Offset: 0x30, Size: 0x50]
	<TigerGenderArchetypeKey,TigerHairStyleList> HairStyles;//[Offset: 0x80, Size: 0x50]
	<TigerGenderArchetypeKey,TigerHairColorList> HairColors;//[Offset: 0xd0, Size: 0x50]
	<TigerGenderArchetypeKey,TigerHeadgearList> Headgears;//[Offset: 0x120, Size: 0x50]

--------------------------------
Class: TigerOutfitList
	class TigerCharacterOutfitConfiguration[] Customizations;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerGenderArchetypeKey
	enum Gender;//[Offset: 0x0, Size: 0x1]
	enum Archetype;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerHairStyleList
	class TigerCharacterHairStyleCustomization[] Customizations;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerHairColorList
	class TigerCharacterHairColorCustomization[] Customizations;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerHeadgearList
	class TigerCharacterHeadgearCustomization[] Customizations;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerDamageTriggerVolume.TriggerVolume.Volume.Brush.Actor.Object
	float DamagePerSecond;//[Offset: 0x260, Size: 0x4]
	bool bOnlyDamageKindred;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	bool bDoNotDamageDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1]
	float DamageRate;//[Offset: 0x268, Size: 0x4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	DamageTriggerOverlapData[] OverlappingCharacters;//[Offset: 0x270, Size: 0x10]
	void OnEndOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x14d8130
	void OnBeginOverlap(Actor* OverlappedActor, Actor* OtherActor);// 0x14d8060

--------------------------------
Class: DamageTriggerOverlapData
	TigerCharacter* Character;//[Offset: 0x0, Size: 0x8]
	float TimerAccumulator;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_Ranged.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_RangedCritical.DmgType_Ranged.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_Melee.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_Discipline.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_DisciplineFOTT.DmgType_Discipline.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_DOT.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_FireDOT.DmgType_DOT.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_ToreadorDOT.DmgType_DOT.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_GameInflicted.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_Environmental.DmgType_GameInflicted.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_Mosquito.DmgType_GameInflicted.TigerDamageBase.DamageType.Object

--------------------------------
Class: DmgType_OutOfBoundsMosquito.DmgType_GameInflicted.TigerDamageBase.DamageType.Object

--------------------------------
Class: TigerDataDependentWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void OnDataLoaded();// 0x197e4f0
	void ListenToDataLoadingEvent();// 0x197e4f0
	bool IsDataLoaded(TigerPlayerController* InTigerPlayerController);// 0x197e4f0
	void CheckDataLoaded(TigerPlayerController* InTigerPlayerController);// 0x14d7480

--------------------------------
Class: TigerDebugCameraHUD.DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1]
	int Phase;//[Offset: 0x124, Size: 0x4]
	int PhaseCount;//[Offset: 0x128, Size: 0x4]
	MaterialInterface* EffectMaterial;//[Offset: 0x130, Size: 0x8]
	FName TextureParameter;//[Offset: 0x138, Size: 0x8]
	void SetTextureParameter(FName TextureParameter);// 0x29ccd00
	void SetRetainRendering(bool bInRetainRendering);// 0x29cca00
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x29cc930
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x29cc1b0
	void RequestRender();// 0x29cc190
	MaterialInstanceDynamic* GetEffectMaterial();// 0x29cbb70

--------------------------------
Class: TigerDeferredGroupRetainerBox.RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	void Construct();// 0x197e4f0

--------------------------------
Class: TigerDeferredRenderBox.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: TigerDestroySessionAsync.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailed;//[Offset: 0x40, Size: 0x10]
	static TigerDestroySessionAsync* DestroySession(const Object* WorldContextObject, enum SESSIONTYPE);// 0x14d7690

--------------------------------
Class: TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerDisciplineAnimTriggeredConfig* AnimConfig;//[Offset: 0x78, Size: 0x8]
	AnimMontage* LastPlayingMontage;//[Offset: 0x80, Size: 0x8]
	<AnimMontage*,float> TriggerTimes;//[Offset: 0x98, Size: 0x50]

--------------------------------
Class: TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* Montage;//[Offset: 0x180, Size: 0x8]
	enum DisciplineType;//[Offset: 0x188, Size: 0x1]
	float ActiveTimeAfterTrigger;//[Offset: 0x18c, Size: 0x4]

--------------------------------
Class: TigerBlindingBeautyConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* Montage;//[Offset: 0x180, Size: 0x8]
	class TigerBlindingBeautyEffectActor* BlueprintActor;//[Offset: 0x188, Size: 0x8]
	float BlueprintActorLifetime;//[Offset: 0x190, Size: 0x4]
	class TigerBuff* BlindingDebuff;//[Offset: 0x198, Size: 0x8]
	class TigerBuff* CharmDebuffPlayer;//[Offset: 0x1a0, Size: 0x8]
	class TigerBuff* CharmDebuffNpc;//[Offset: 0x1a8, Size: 0x8]
	float[] BlindDuration;//[Offset: 0x1b0, Size: 0x10]
	float CharmPlayerDuration;//[Offset: 0x1c0, Size: 0x4]
	float CharmNpcDuration;//[Offset: 0x1c4, Size: 0x4]
	float TriggerTime;//[Offset: 0x1c8, Size: 0x4]
	float ActiveTimeAfterTrigger;//[Offset: 0x1cc, Size: 0x4]
	float GuaranteedBlindRange;//[Offset: 0x1d0, Size: 0x4]
	float LookBlindRange;//[Offset: 0x1d4, Size: 0x4]
	float LookDotProductHitThreshold;//[Offset: 0x1d8, Size: 0x4]
	float[] BlindDamage;//[Offset: 0x1e0, Size: 0x10]
	bool bShouldDamageCivilians;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bUseCameraAsLookDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	bool bUseAimGlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]

--------------------------------
Class: TigerDisciplineBlindingBeauty.TigerDisciplineBase.Object
	TigerBlindingBeautyConfig* Config;//[Offset: 0x78, Size: 0x8]
	TigerBlindingBeautyEffectActor* BlueprintActor;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerCharmConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float Damage;//[Offset: 0x190, Size: 0x4]
	float BondMaxDistance;//[Offset: 0x194, Size: 0x4]
	float BackgroundFindTargetInterval;//[Offset: 0x198, Size: 0x4]
	float BondPlayerDuration;//[Offset: 0x19c, Size: 0x4]
	float BondNPCDuration;//[Offset: 0x1a0, Size: 0x4]
	class TigerMajestyBuff[] CharmedBuff;//[Offset: 0x1a8, Size: 0x10]
	class TigerBondingBuff[] BondingBuff;//[Offset: 0x1b8, Size: 0x10]
	class TigerCharacterEffect* OnHitEffect;//[Offset: 0x1c8, Size: 0x8]
	class TigerBuff* ThornsBuff;//[Offset: 0x1d0, Size: 0x8]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	float MaxDistance;//[Offset: 0x1dc, Size: 0x4]
	float MinDistance;//[Offset: 0x1e0, Size: 0x4]
	float PlayerTargetMultiplier;//[Offset: 0x1e4, Size: 0x4]
	CurveFloat* AimAxisValueCurve;//[Offset: 0x1e8, Size: 0x8]
	CurveFloat* DistanceFromUseValueCurve;//[Offset: 0x1f0, Size: 0x8]

--------------------------------
Class: TigerMajestyBuff.TigerBuff.Object
	float NPCDuration;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: TigerBondingBuff.TigerBuff.Object

--------------------------------
Class: TigerBondingBuffInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerDisciplineCharm.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerCharmConfig* Config;//[Offset: 0x108, Size: 0x8]
	void OnTickBond(TigerCharacter* Player, TigerCharacter* TargetNpc);// 0x197e4f0
	void OnStoppedBond();// 0x197e4f0
	void OnStartedBond(TigerCharacter* Player, TigerCharacter* TargetNpc);// 0x197e4f0

--------------------------------
Class: TeleportMarker_C.StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMesh1;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: TigerDisplacementConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	float AttackingRange;//[Offset: 0x194, Size: 0x4]
	float AttackingRadius;//[Offset: 0x198, Size: 0x4]
	float PlayerTargetMultiplier;//[Offset: 0x19c, Size: 0x4]
	float MeleeAreaMultiplier;//[Offset: 0x1a0, Size: 0x4]
	CurveFloat* AimAxisValueCurve;//[Offset: 0x1a8, Size: 0x8]
	CurveFloat* DistanceFromUseValueCurve;//[Offset: 0x1b0, Size: 0x8]
	float Damage;//[Offset: 0x1b8, Size: 0x4]
	float BackgroundFindTargetInterval;//[Offset: 0x1bc, Size: 0x4]
	float PlayerToScoutedTargetDotProductCutoff;//[Offset: 0x1c0, Size: 0x4]
	SoundBase* ActivationSound;//[Offset: 0x1c8, Size: 0x8]
	class TigerBuffDOT* DOTToApply;//[Offset: 0x1d0, Size: 0x8]
	class TigerBuff* BuffToApplyOnCasterWhenTeleporting;//[Offset: 0x1d8, Size: 0x8]
	class TigerWidget* TargetMarkerWidgetClass;//[Offset: 0x1e0, Size: 0x8]
	AnimMontage* AirMontage;//[Offset: 0x1e8, Size: 0x8]
	bool bInterruptClimbOnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: TigerDisciplineDisplacement.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerWidget* TargetMarker;//[Offset: 0xf0, Size: 0x8]
	TigerDisplacementConfig* Config;//[Offset: 0xf8, Size: 0x8]
	TigerCharacter* ClientSidePotentialTarget;//[Offset: 0x110, Size: 0x8]
	void OnLockTarget();// 0x197e4f0

--------------------------------
Class: TigerEarthshockConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	FText EffectRadiusText;//[Offset: 0x180, Size: 0x18]
	FText EffectRadiusSuffix;//[Offset: 0x198, Size: 0x18]
	float SurfaceAngleThreshold;//[Offset: 0x1b0, Size: 0x4]
	float KnockupInitialVelocity;//[Offset: 0x1b4, Size: 0x4]
	float HitboxConeHalfAngleInDegrees;//[Offset: 0x1b8, Size: 0x4]
	float TerrainBlockTraceHeightGrace;//[Offset: 0x1bc, Size: 0x4]
	float ConeDamageRadius;//[Offset: 0x1c0, Size: 0x4]
	float InnerHitSphereRadius;//[Offset: 0x1c4, Size: 0x4]
	float ConeForwardOffset;//[Offset: 0x1c8, Size: 0x4]
	float SphereTraceRadius;//[Offset: 0x1cc, Size: 0x4]
	float MaxRangeAngleDeviationThreshold;//[Offset: 0x1d0, Size: 0x4]
	float MaximumRange;//[Offset: 0x1d4, Size: 0x4]
	float MaximumHeight;//[Offset: 0x1d8, Size: 0x4]
	float DownTraceLength;//[Offset: 0x1dc, Size: 0x4]
	float InitialJumpApexHeight;//[Offset: 0x1e0, Size: 0x4]
	bool bUseSurfaceProjectedForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]
	float AirAttackSpeed;//[Offset: 0x1e8, Size: 0x4]
	float MaxTargetEffectDistanceUp;//[Offset: 0x1ec, Size: 0x4]
	float MaxTargetEffectDistanceDown;//[Offset: 0x1f0, Size: 0x4]
	float StunTime;//[Offset: 0x1f4, Size: 0x4]
	CurveFloat* TravelDistanceDamageMultiplierCurve;//[Offset: 0x1f8, Size: 0x8]
	float Damage;//[Offset: 0x200, Size: 0x4]
	float WallAngleLandingAnimationThreshold;//[Offset: 0x204, Size: 0x4]
	float StartLandingAnimationOffsetGround;//[Offset: 0x208, Size: 0x4]
	float StartLandingAnimationOffsetWall;//[Offset: 0x20c, Size: 0x4]
	AnimMontage* AirAttackAnimationJump;//[Offset: 0x210, Size: 0x8]
	AnimMontage* AirAttackAnimationMidAir;//[Offset: 0x218, Size: 0x8]
	AnimMontage* AirAttackAnimationLandGround;//[Offset: 0x220, Size: 0x8]
	AnimMontage* AirAttackAnimationLandWall;//[Offset: 0x228, Size: 0x8]
	AkAudioEvent* TakeOffAudioEvent;//[Offset: 0x230, Size: 0x8]
	AkAudioEvent* LaunchAudioEvent;//[Offset: 0x238, Size: 0x8]
	AkAudioEvent* HitGroundSound;//[Offset: 0x240, Size: 0x8]
	AkAudioEvent* ImpactWarningSound;//[Offset: 0x248, Size: 0x8]
	float CameraShakeBoundaryHeight;//[Offset: 0x250, Size: 0x4]
	class MatineeCameraShake* CameraLowEffectShake;//[Offset: 0x258, Size: 0x8]
	class MatineeCameraShake* CameraHighEffectShake;//[Offset: 0x260, Size: 0x8]
	class MatineeCameraShake* CameraAirEffectShake;//[Offset: 0x268, Size: 0x8]

--------------------------------
Class: TigerDisciplineEarthshock.TigerDisciplineBase.Object
	EarthshockUseDataNetworked EarthshockUseData;//[Offset: 0x78, Size: 0x34]
	TigerEarthshockConfig* EarthshockConfig;//[Offset: 0xb0, Size: 0x8]
	void OnTargetIndicatorUpdated(const bool bInHasTargetLocation, const Vector InTargetLocation, const Vector InSurfaceNormal, const bool bInTargetIsWall);// 0x197e4f0
	void OnSpawnTargetIndicator();// 0x197e4f0
	void OnRemoveTargetIndicator();// 0x197e4f0
	void OnOwnerLifeStatusChanged(const enum InNewLifeStatus);// 0x14e18e0
	void OnLanded(const Vector InLocation, const Vector InSurfaceNormal, const bool bInTargetIsWall);// 0x197e4f0
	void OnEnemyCharacterHit(const TigerCharacter* InHitCharacter);// 0x197e4f0
	void OnDescentForcedMoveDone(const enum ForcedMoveResult);// 0x14e1860
	void Multicast_SimulatedProxyImpact(const Vector InConeDirection);// 0x14e14d0
	float GetLeapTime(out const Vector InLeapVector);// 0x14e1200
	Vector GetConeDirection();// 0x14e11d0
	bool EvaluateIsTargetLocationValid(const bool bIsWall, out const HitResult InHitSurface);// 0x197e4f0
	Vector CalculateKnockbackForce(const TigerCharacter* InHitCharacter);// 0x14e1090
	Vector CalculateConeDirection();// 0x14e1050

--------------------------------
Class: EarthshockUseDataNetworked
	Vector StartLocation;//[Offset: 0x0, Size: 0xc]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	Vector SurfaceNormal;//[Offset: 0x18, Size: 0xc]
	Vector ConeDirection;//[Offset: 0x24, Size: 0xc]
	bool bTargetIsWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: TigerEpsilonClanConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* StartMontage;//[Offset: 0x180, Size: 0x8]
	AnimMontage* EndMontage;//[Offset: 0x188, Size: 0x8]
	Vector InitialVelocityBoost;//[Offset: 0x190, Size: 0xc]
	float InitialInputVelocityBoost;//[Offset: 0x19c, Size: 0x4]
	float MaxSpeed;//[Offset: 0x1a0, Size: 0x4]
	float Braking;//[Offset: 0x1a4, Size: 0x4]
	float MinimumActiveTime;//[Offset: 0x1a8, Size: 0x4]
	float MaxResource;//[Offset: 0x1ac, Size: 0x4]
	float InitialDrain;//[Offset: 0x1b0, Size: 0x4]
	float IdleDrainRate;//[Offset: 0x1b4, Size: 0x4]
	float MovingDrainRate;//[Offset: 0x1b8, Size: 0x4]
	float VerticalDrainMultiplier;//[Offset: 0x1bc, Size: 0x4]
	float RegenRateOnGround;//[Offset: 0x1c0, Size: 0x4]
	float RegenRateInAir;//[Offset: 0x1c4, Size: 0x4]
	float RegenCooldown;//[Offset: 0x1c8, Size: 0x4]
	float[] MelancholicRegenMultiplier;//[Offset: 0x1d0, Size: 0x10]

--------------------------------
Class: TigerDisciplineEpsilonClan.TigerDisciplineBase.Object
	TigerEpsilonClanConfig* Config;//[Offset: 0x78, Size: 0x8]
	void Server_RequestSyncResource();// 0x14e19f0
	void OnSilencedChanged(bool bInIsSilenced);// 0x14e1960
	void OnResourceChanged(float InNewValue, float InPreviousValue);// 0x197e4f0
	void OnLevitateStart();// 0x197e4f0
	void OnLevitateFailed();// 0x197e4f0
	void OnLevitateEnd();// 0x197e4f0
	void OnDisciplineCreated();// 0x197e4f0
	void Multicast_StopDiscipline();// 0x14e1610
	Vector GetVelocity();// 0x14e1490
	float GetResource();// 0x14e1460
	float GetMaxSpeed();// 0x14e1430
	float GetMaxResource();// 0x14e1400
	void Client_SyncResource(const float InResource);// 0x14e1140

--------------------------------
Class: TigerEpsilonOneConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	MaterialInterface* PassThroughDecalMaterial;//[Offset: 0x190, Size: 0x8]
	class TigerAreaEffect* OnDownedAreaEffect;//[Offset: 0x198, Size: 0x8]
	class TigerAimAssistSettings* AimAssist;//[Offset: 0x1a0, Size: 0x8]
	class TigerEpsilonOneProjectile* ProjectileActor;//[Offset: 0x1a8, Size: 0x8]
	float ProjectileSpeed;//[Offset: 0x1b0, Size: 0x4]
	float Range;//[Offset: 0x1b4, Size: 0x4]
	float PassThroughDecalRadius;//[Offset: 0x1b8, Size: 0x4]
	float PassThroughDecalLifetime;//[Offset: 0x1bc, Size: 0x4]
	float PassThroughDecalFadeOutDuration;//[Offset: 0x1c0, Size: 0x4]
	float Damage;//[Offset: 0x1c4, Size: 0x4]
	float AllyHeal;//[Offset: 0x1c8, Size: 0x4]
	float CasterHeal;//[Offset: 0x1cc, Size: 0x4]
	float CasterExtraHealOnDowned;//[Offset: 0x1d0, Size: 0x4]
	float LevitationResourceGain;//[Offset: 0x1d4, Size: 0x4]
	bool bCasterCancelCooldownsOnDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bSkipDownedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	bool bOnHitDownedEffectsAffectNpcs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 0x1]
	bool bUseAimGlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db, Size: 0x1]

--------------------------------
Class: TigerEpsilonOneProjectile.Actor.Object
	TigerEpsilonOneConfig* Config;//[Offset: 0x228, Size: 0x8]
	TigerDisciplineEpsilonOne* Discipline;//[Offset: 0x230, Size: 0x8]
	SphereComponent* AudioCollider;//[Offset: 0x238, Size: 0x8]
	SphereComponent* DamageCollider;//[Offset: 0x240, Size: 0x8]
	SphereComponent* HealCollider;//[Offset: 0x248, Size: 0x8]
	SphereComponent* DecalCollider;//[Offset: 0x250, Size: 0x8]
	Vector StartLocation;//[Offset: 0x258, Size: 0xc]
	Actor*[] ObjectsHitForwards;//[Offset: 0x268, Size: 0x10]
	Actor*[] ObjectsHitBackwards;//[Offset: 0x278, Size: 0x10]
	TigerCharacter*[] HitCharacters;//[Offset: 0x288, Size: 0x10]
	TigerCharacter*[] HealedCharacters;//[Offset: 0x298, Size: 0x10]
	Actor*[] DecalSweepBackwardsIgnoreActors;//[Offset: 0x2a8, Size: 0x10]
	void OnHealedCharacter(TigerCharacter* InCharacter, out const Vector InHitLocation);// 0x197e4f0
	void OnExitedObject(out const Vector InLocation);// 0x197e4f0
	void OnEnteredObject(out const Vector InLocation);// 0x197e4f0
	void OnDamagedCharacter(TigerCharacter* InCharacter, out const Vector InHitLocation, const bool bInGotDowned, const bool bInCasterWasHealed);// 0x197e4f0

--------------------------------
Class: TigerDisciplineEpsilonOne.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerEpsilonOneConfig* Config;//[Offset: 0xf0, Size: 0x8]
	TigerEpsilonOneProjectile* Projectile;//[Offset: 0xf8, Size: 0x8]
	void OnStop();// 0x197e4f0
	void OnExecute();// 0x197e4f0
	void Multicast_TriggerHealFeedback(TigerCharacter* InCharacter, const Vector InHitLocation);// 0x14e1790
	void Multicast_TriggerDamageFeedback(TigerCharacter* InCharacter, const Vector InHitLocation, const bool bInGotDowned, const bool bInCasterWasHealed);// 0x14e1630
	void Multicast_SpawnProjectileSimulatedProxies(const Vector InLocation, const Vector InDirection);// 0x14e1550

--------------------------------
Class: TigerFlowerOfDeathConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	bool ShowDebugCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	float TargetRadius;//[Offset: 0x184, Size: 0x4]
	float OverrideDuration;//[Offset: 0x188, Size: 0x4]
	float Damage;//[Offset: 0x18c, Size: 0x4]
	class Object* EffectBlueprint;//[Offset: 0x190, Size: 0x8]
	AnimMontage* AttackerAnimation;//[Offset: 0x198, Size: 0x8]
	SoundBase* ActivationSound;//[Offset: 0x1a0, Size: 0x8]
	class TigerBuff* SpeedBuff;//[Offset: 0x1a8, Size: 0x8]

--------------------------------
Class: TigerDisciplineFlowerOfDeath.TigerDisciplineBase.Object
	TigerFlowerOfDeathConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerFOTTConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	bool bDebugHitboxVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bDebugWallhitAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	Vector HitBoxExtents;//[Offset: 0x184, Size: 0xc]
	Vector HitBoxOffset;//[Offset: 0x190, Size: 0xc]
	FText KnockbackDistanceText;//[Offset: 0x1a0, Size: 0x18]
	float[] KnockbackDistanceTooltipValues;//[Offset: 0x1b8, Size: 0x10]
	FText KnockbackDistanceSuffix;//[Offset: 0x1c8, Size: 0x18]
	float KnockbackTime;//[Offset: 0x1e0, Size: 0x4]
	float TimeBeforeRagdollOnDeadNPCs;//[Offset: 0x1e4, Size: 0x4]
	float RagdollKnockbackForceMultiplier;//[Offset: 0x1e8, Size: 0x4]
	float KnockbackStunDuration;//[Offset: 0x1ec, Size: 0x4]
	float KnockbackAngle;//[Offset: 0x1f0, Size: 0x4]
	float MaxChargeDuration;//[Offset: 0x1f4, Size: 0x4]
	float AttackDuration;//[Offset: 0x1f8, Size: 0x4]
	float MaxWallStunAnglePitchDiff;//[Offset: 0x1fc, Size: 0x4]
	float MaxWallStunAngleYawDiff;//[Offset: 0x200, Size: 0x4]
	float MinimumChargeupTime;//[Offset: 0x204, Size: 0x4]
	float EndOfAttackPercentageSpeedKept;//[Offset: 0x208, Size: 0x4]
	float HitTargetsPercentageSpeedKept;//[Offset: 0x20c, Size: 0x4]
	class TigerBuff* SelfbuffWhileCharging;//[Offset: 0x210, Size: 0x8]
	class TigerBuff* TargetKnockedIntoWallBuff;//[Offset: 0x218, Size: 0x8]
	CurveFloat* TravelDistance;//[Offset: 0x220, Size: 0x8]
	CurveFloat*[] KnockbackDistance;//[Offset: 0x228, Size: 0x10]
	CurveFloat* FistDamage;//[Offset: 0x238, Size: 0x8]
	CurveFloat* TargetWallHitDamage;//[Offset: 0x240, Size: 0x8]
	CurveFloat* TargetWallHitStun;//[Offset: 0x248, Size: 0x8]
	float WallEffectRadius;//[Offset: 0x250, Size: 0x4]
	float WallEffectStayTime;//[Offset: 0x254, Size: 0x4]
	float WallEffectFadeTime;//[Offset: 0x258, Size: 0x4]
	TigerAnimationSetAsset* ChargeupBlendspaceAnimationSet;//[Offset: 0x260, Size: 0x8]
	AnimMontage* TargetKnockbackAnimation;//[Offset: 0x268, Size: 0x8]
	CurveFloat* KnockbackAnimationPlayrate;//[Offset: 0x270, Size: 0x8]
	AnimMontage* ChargeupAnimation;//[Offset: 0x278, Size: 0x8]
	AnimMontage* ChargeupAnimationAir;//[Offset: 0x280, Size: 0x8]
	float ChargeupAnimationSpeed;//[Offset: 0x288, Size: 0x4]
	FName FullyChargedSectionName;//[Offset: 0x28c, Size: 0x8]
	AnimMontage* AttackerAnimation;//[Offset: 0x298, Size: 0x8]
	AnimMontage* AttackerAnimationAir;//[Offset: 0x2a0, Size: 0x8]
	float AttackAnimationSpeed;//[Offset: 0x2a8, Size: 0x4]
	AnimMontage* RecoverAnimation;//[Offset: 0x2b0, Size: 0x8]
	AnimMontage* RecoverAnimationAir;//[Offset: 0x2b8, Size: 0x8]
	AnimMontage* WallHitStunAnimation;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* WallHitAudioEvent;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: TigerDisciplineFOTT.TigerDisciplineBase.Object
	TigerFOTTConfig* Config;//[Offset: 0x78, Size: 0x8]
	ParticleSystemComponent* PlayerChargeupParticles;//[Offset: 0xb0, Size: 0x8]
	ParticleSystemComponent* PlayerAttackParticles;//[Offset: 0xb8, Size: 0x8]
	ParticleSystemComponent* PlayerAttackEndParticles;//[Offset: 0xc0, Size: 0x8]
	void TickDisciplineEvent(float DeltaTime);// 0x197e4f0
	void OwnerCollided(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x14e64c0
	void OnTargetHitSomething(TigerCharacter* Target, out const Vector HitLocation, out const Vector HitNormal);// 0x197e4f0
	void OnStartedChargeup();// 0x197e4f0
	void OnReleasedChargeup();// 0x197e4f0
	void OnHitSomething(bool bHitACharacter);// 0x197e4f0
	void OnCollidedWithWall(out const Vector HitLocation, out const Vector HitNormal);// 0x197e4f0
	void OnAbortedChargeup();// 0x197e4f0
	void Multicast_FOTTKnockback(TigerCharacter* TigerChar, const Vector HitLocation, const Vector EndLocation, const bool bWasKilledByHit);// 0x14e61a0
	float GetChargeupProgress(bool ClampProgressAtOne);// 0x14e5fa0
	void CharacterCollided(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x14e5dc0
	void ApplyFOTT(out const DisciplineUse DisciplineUse);// 0x14e5cd0

--------------------------------
Class: TigerFrenzyConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float RoarRadius;//[Offset: 0x180, Size: 0x4]
	float RoarDamage;//[Offset: 0x184, Size: 0x4]
	float GroundedTime;//[Offset: 0x188, Size: 0x4]
	float ImmobilizeTime;//[Offset: 0x18c, Size: 0x4]
	float DelayBeforeRoarEffect;//[Offset: 0x190, Size: 0x4]
	class TigerBuff* FrenzyBuff;//[Offset: 0x198, Size: 0x8]
	AnimMontage* RoarAnimation;//[Offset: 0x1a0, Size: 0x8]
	SoundBase* RoarSound;//[Offset: 0x1a8, Size: 0x8]
	SoundBase* BuffActiveSound;//[Offset: 0x1b0, Size: 0x8]
	ParticleSystem* RoarParticles;//[Offset: 0x1b8, Size: 0x8]

--------------------------------
Class: TigerDisciplineFrenzy.TigerDisciplineBase.Object
	TigerFrenzyConfig* Config;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerGuardBreakConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float DashDistance;//[Offset: 0x180, Size: 0x4]
	float StartupTime;//[Offset: 0x184, Size: 0x4]
	float DashTime;//[Offset: 0x188, Size: 0x4]
	float StrikeDelay;//[Offset: 0x18c, Size: 0x4]
	float StrikeDuration;//[Offset: 0x190, Size: 0x4]
	float OnHitDamage;//[Offset: 0x194, Size: 0x4]
	float BlockedOnHitDamage;//[Offset: 0x198, Size: 0x4]
	class TigerBuff* OnHitDebuff;//[Offset: 0x1a0, Size: 0x8]
	Vector HitBoxSize;//[Offset: 0x1a8, Size: 0xc]
	bool DrawDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	void OnTargetsHitByStrike(out const TigerCharacter*[] Targets);// 0x197e4f0
	void OnStrike(TigerCharacter* Character);// 0x197e4f0
	void OnStartup(TigerCharacter* Character);// 0x197e4f0
	void OnDash(TigerCharacter* Character, out const Vector Location, out const Vector Direction);// 0x197e4f0

--------------------------------
Class: TigerDisciplineGuardBreak.TigerDisciplineBase.Object
	TigerGuardBreakConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerIncitePainConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float DamageAmount;//[Offset: 0x190, Size: 0x4]
	float Radius;//[Offset: 0x194, Size: 0x4]
	float Reach;//[Offset: 0x198, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]

--------------------------------
Class: TigerDisciplineIncitePain.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerIncitePainConfig* Config;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: TigerJumpConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	bool bDebugJumpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bDebugBlockJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	float JumpVelocity;//[Offset: 0x194, Size: 0x4]
	bool bAllowDoublejumpAfterDiscipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	bool bShouldDelayJumpInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	AnimMontage* LaunchMontage;//[Offset: 0x1a0, Size: 0x8]
	AnimMontage* GroundAnticipationMontage;//[Offset: 0x1a8, Size: 0x8]
	float CameraPresetDuration;//[Offset: 0x1b0, Size: 0x4]
	Material* JumpFullscreenPostFX;//[Offset: 0x1b8, Size: 0x8]
	MaterialParameterCollection* JumpPostFXCollection;//[Offset: 0x1c0, Size: 0x8]
	FName JumpPostFXStrengthParameterName;//[Offset: 0x1c8, Size: 0x8]
	float JumpPostFXMaxStrength;//[Offset: 0x1d0, Size: 0x4]
	float JumpEffectsDuration;//[Offset: 0x1d4, Size: 0x4]
	float JumpEffectsLerpInTime;//[Offset: 0x1d8, Size: 0x4]
	float JumpEffectsLerpOutTime;//[Offset: 0x1dc, Size: 0x4]
	AkAudioEvent* LeapStartedAudio;//[Offset: 0x1e0, Size: 0x8]
	Vector FeetObstacleOffset;//[Offset: 0x1e8, Size: 0xc]
	float ObstacleDistanceCheck;//[Offset: 0x1f4, Size: 0x4]
	float PartiallyBlockedJumpModifier;//[Offset: 0x1f8, Size: 0x4]
	float BackLeapPitch;//[Offset: 0x1fc, Size: 0x4]
	CurveFloat* LeapPitchCurve;//[Offset: 0x200, Size: 0x8]
	bool bCanLeapBackward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	float AnimationBlendoutTime;//[Offset: 0x20c, Size: 0x4]

--------------------------------
Class: TigerDisciplineJump.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerJumpConfig* Config;//[Offset: 0xf8, Size: 0x8]
	CapsuleComponent* CapsuleOverlapComponent;//[Offset: 0x100, Size: 0x8]
	delegate LeapConfirmed;//[Offset: 0x108, Size: 0x10]
	Actor*[] ActorsThatOverlapped;//[Offset: 0x158, Size: 0x10]
	void TigerLeapConfirmedMulticastDelegate__DelegateSignature();// 0x197e4f0
	void OnLeapStarted();// 0x197e4f0
	void OnLeapEnded();// 0x197e4f0
	void Multicast_OnLeapConfirmed();// 0x14e62f0
	Vector GetTargetPosition(out const Vector PlayerEyeLocation, out const Rotator CameraRotation, float JumpCheckDistance);// 0x14e6040

--------------------------------
Class: TigerLaceratingThrowConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerDisciplineProjectile* KnifeActor;//[Offset: 0x190, Size: 0x8]
	class TigerBuff[] BuffToApplyOnHit;//[Offset: 0x198, Size: 0x10]
	float ProjectileSpeed;//[Offset: 0x1a8, Size: 0x4]
	float DamageOnHit;//[Offset: 0x1ac, Size: 0x4]
	float Reach;//[Offset: 0x1b0, Size: 0x4]
	float ProjectileLifespanSeconds;//[Offset: 0x1b4, Size: 0x4]
	FText SlowText;//[Offset: 0x1b8, Size: 0x18]
	FText SlowSuffix;//[Offset: 0x1d0, Size: 0x18]

--------------------------------
Class: TigerDisciplineProjectile.TigerProjectileBase.Actor.Object
	TigerDisciplineConfigBase* Config;//[Offset: 0x2b0, Size: 0x8]
	enum AttackType;//[Offset: 0x2b8, Size: 0x1]

--------------------------------
Class: TigerProjectileBase.Actor.Object
	SphereComponent* CollisionComponent;//[Offset: 0x230, Size: 0x8]
	ProjectileMovementComponent* MovementComponent;//[Offset: 0x238, Size: 0x8]
	bool bSimulationHitEventsOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool bSimulationHitEventsOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	float OnHitLifeSpan;//[Offset: 0x244, Size: 0x4]
	int AllowedCharacterHits;//[Offset: 0x248, Size: 0x4]
	interface class None* ReplicationRouter;//[Offset: 0x250, Size: 0x10]
	TigerCharacter*[] HitCharacters;//[Offset: 0x288, Size: 0x10]
	Pawn* InstigatingPawn;//[Offset: 0x2a0, Size: 0x8]
	void OnVerifiedCharacterHit(out const TigerProjectileBaseHitInfo InHitInfo);// 0x197e4f0
	void OnSimulationHit(PrimitiveComponent* InHitComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, Vector InNormalImpulse, out const HitResult InHit);// 0x15bf6b0
	bool OnCharacterHit(TigerCharacter* InHitCharacter);// 0x197e4f0
	void DeactivateProjectileBeforeDestroy(out const TigerProjectileBaseHitInfo InHitInfo);// 0x15bf110

--------------------------------
Class: TigerProjectileBaseHitInfo
	TigerCharacter* HitCharacter;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize HitLocation;//[Offset: 0x8, Size: 0xc]
	Rotator HitRotation;//[Offset: 0x14, Size: 0xc]
	int HitNum;//[Offset: 0x20, Size: 0x4]
	bool bHitTerrain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: TigerDisciplineLaceratingThrow.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerDisciplineProjectile* Projectile;//[Offset: 0xf8, Size: 0x8]
	TigerLaceratingThrowConfig* Config;//[Offset: 0x100, Size: 0x8]
	void Server_ProjectileHit(TigerCharacter* InHitCharacter, const Vector InHitLocation);// 0x14e6810
	void Multicast_SpawnProjectile(const DisciplineUse InDisciplineUse);// 0x14e63e0
	void Multicast_ProjectileCopyAndReflect();// 0x14e63c0
	void Multicast_ProjectileBlock();// 0x14e63a0
	void Multicast_OnVerifiedCharacterHit(const TigerProjectileBaseHitInfo InHitInfo);// 0x14e6310

--------------------------------
Class: TigerMajestyConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* Montage;//[Offset: 0x180, Size: 0x8]
	float ApplyEffectTime;//[Offset: 0x188, Size: 0x4]
	FText CharmDurationText;//[Offset: 0x190, Size: 0x18]
	FText CharmDurationSuffix;//[Offset: 0x1a8, Size: 0x18]
	class TigerMajestyBuff[] CharmedBuff;//[Offset: 0x1c0, Size: 0x10]
	bool bDoFacingCheckOnNPCs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bIsEntityImmune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	bool bRequireLineOfSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 0x1]
	float Radius;//[Offset: 0x1d4, Size: 0x4]
	float FacingAllowedYawDifference;//[Offset: 0x1d8, Size: 0x4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]

--------------------------------
Class: TigerMajestyBuffInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerDisciplineMajesty.TigerDisciplineBase.Object
	TigerMajestyConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerDisciplineParticleStrategy.TigerParticleStrategyPostSpawn.TigerParticleStrategy.Object
	LinearColor StandardColorOverride;//[Offset: 0x28, Size: 0x10]
	LinearColor EnemyColorOverride;//[Offset: 0x38, Size: 0x10]
	enum ColorOverrideMode;//[Offset: 0x48, Size: 0x1]
	FName ColorParameterName;//[Offset: 0x4c, Size: 0x8]
	void PickColors(ParticleSystemComponent* InParticleToExecuteOn, const TigerCharacter* InParticleInstigator, out LinearColor OutStandardColorOverride, out LinearColor OutEnemyColorOverride);// 0x14e66a0
	void ApplyColors(ParticleSystemComponent* InParticleToExecuteOn, const TigerCharacter* InParticleInstigator, out const LinearColor InStandardColorOverride, out const LinearColor InEnemyColorOverride);// 0x14e5b60

--------------------------------
Class: TigerPassionConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float ProjectileMinLengthScale;//[Offset: 0x180, Size: 0x4]
	float ProjectileMaxLengthScale;//[Offset: 0x184, Size: 0x4]
	float ProjectileMinWidthScale;//[Offset: 0x188, Size: 0x4]
	float ProjectileMaxWidthScale;//[Offset: 0x18c, Size: 0x4]
	float ProjectileMinHeightScale;//[Offset: 0x190, Size: 0x4]
	float ProjectileMaxHeightScale;//[Offset: 0x194, Size: 0x4]
	float ProjectileMinSpeed;//[Offset: 0x198, Size: 0x4]
	float ProjectileMaxSpeed;//[Offset: 0x19c, Size: 0x4]
	float ProjectileMinRange;//[Offset: 0x1a0, Size: 0x4]
	float ProjectileMaxRange;//[Offset: 0x1a4, Size: 0x4]
	float PanicMinDuration;//[Offset: 0x1a8, Size: 0x4]
	float PanicMaxDuration;//[Offset: 0x1ac, Size: 0x4]
	float ApathyMinDuration;//[Offset: 0x1b0, Size: 0x4]
	float ApathyMaxDuration;//[Offset: 0x1b4, Size: 0x4]
	float ApathyStartSlowMultiplier;//[Offset: 0x1b8, Size: 0x4]
	float ApathyEndSlowMultiplier;//[Offset: 0x1bc, Size: 0x4]
	float WrathMinDuration;//[Offset: 0x1c0, Size: 0x4]
	float WrathMaxDuration;//[Offset: 0x1c4, Size: 0x4]
	float WrathMinAdditionalDamageMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float WrathMaxAdditionalDamageMultiplier;//[Offset: 0x1cc, Size: 0x4]
	AnimMontage* ChooseEffectAnimation;//[Offset: 0x1d0, Size: 0x8]
	AnimMontage* ChargeEffectAnimation;//[Offset: 0x1d8, Size: 0x8]
	AnimMontage* ReleaseEffectAnimation;//[Offset: 0x1e0, Size: 0x8]
	<enum,class TigerBuff> EffectBuffs;//[Offset: 0x1e8, Size: 0x50]
	<enum,ParticleSystem*> ProjectileParticles;//[Offset: 0x238, Size: 0x50]
	class TigerPassionProjectile* ProjectileActor;//[Offset: 0x288, Size: 0x8]
	float TimeBetweenEffectChange;//[Offset: 0x290, Size: 0x4]
	float ChooseEffectTimeOut;//[Offset: 0x294, Size: 0x4]
	float MaxChargeTime;//[Offset: 0x298, Size: 0x4]
	float UsageCooldown;//[Offset: 0x29c, Size: 0x4]

--------------------------------
Class: TigerPassionProjectile.Actor.Object
	Vector TargetLocation;//[Offset: 0x228, Size: 0xc]
	Vector Velocity;//[Offset: 0x234, Size: 0xc]
	float ScaledSpeedValue;//[Offset: 0x240, Size: 0x4]
	float BuffDuration;//[Offset: 0x244, Size: 0x4]
	float BuffStrength;//[Offset: 0x248, Size: 0x4]
	float TimeUntilParticleFadeTiemout;//[Offset: 0x24c, Size: 0x4]
	TimerHandle TimerHandle;//[Offset: 0x250, Size: 0x8]
	byte Effect;//[Offset: 0x258, Size: 0x1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bTurnOnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1]
	TigerCharacter* TigerCharacterOwner;//[Offset: 0x260, Size: 0x8]
	TigerDisciplinePassion* PassionDiscipline;//[Offset: 0x268, Size: 0x8]
	class TigerPassionConfig* ConfigType;//[Offset: 0x270, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x278, Size: 0x8]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x280, Size: 0x8]
	void Server_DestroyProjectile();// 0x15709b0
	void OnRep_TargetLocation();// 0x1570850
	void OnRep_Effect();// 0x1570830

--------------------------------
Class: TigerDisciplinePassion.TigerDisciplineBase.Object
	TigerPassionConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerProjectionDashConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* DownedMontage;//[Offset: 0x190, Size: 0x8]
	AnimMontage* DashStartMontage;//[Offset: 0x198, Size: 0x8]
	AnimMontage* DashEnterMontage;//[Offset: 0x1a0, Size: 0x8]
	AnimMontage* DashExitMontage;//[Offset: 0x1a8, Size: 0x8]
	Texture2D* DashIcon;//[Offset: 0x1b0, Size: 0x8]
	class TigerBuff* DashBuff;//[Offset: 0x1b8, Size: 0x8]
	class TigerBuff* ThornsBuff;//[Offset: 0x1c0, Size: 0x8]
	class TigerProjectionDashProjectile* ProjectionActor;//[Offset: 0x1c8, Size: 0x8]
	class Actor* TargetIndicatorActor;//[Offset: 0x1d0, Size: 0x8]
	Vector TargetingRayStartOffset;//[Offset: 0x1d8, Size: 0xc]
	float DelayBeforeDashIsPossible;//[Offset: 0x1e4, Size: 0x4]
	float DashSpeed;//[Offset: 0x1e8, Size: 0x4]
	float DashExitVelocityScale;//[Offset: 0x1ec, Size: 0x4]
	float DashEnterDuration;//[Offset: 0x1f0, Size: 0x4]
	float DashExitDuration;//[Offset: 0x1f4, Size: 0x4]
	float ProjectionMaxDistance;//[Offset: 0x1f8, Size: 0x4]
	float ProjectionAutoDespawnDistance;//[Offset: 0x1fc, Size: 0x4]
	float ProjectionSpeed;//[Offset: 0x200, Size: 0x4]
	float ProjectionStoppedLifetime;//[Offset: 0x204, Size: 0x4]
	float TargetIndicatorLerpSpeed;//[Offset: 0x208, Size: 0x4]
	bool bDashMoveToExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 0x1]
	enum CooldownStart;//[Offset: 0x20d, Size: 0x1]

--------------------------------
Class: TigerProjectionDashProjectile.Actor.Object
	float MovementSpeed;//[Offset: 0x228, Size: 0x4]
	float Duration;//[Offset: 0x22c, Size: 0x4]
	Vector TargetPosition;//[Offset: 0x230, Size: 0xc]
	Vector StartingPosition;//[Offset: 0x23c, Size: 0xc]
	Vector LastValidPosition;//[Offset: 0x254, Size: 0xc]
	SphereComponent* SphereCollider;//[Offset: 0x268, Size: 0x8]
	class TigerBuff* ThornsBuff;//[Offset: 0x270, Size: 0x8]
	void OverlapCharacter(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x15bf8c0
	void OnProjectileStopped();// 0x197e4f0
	void OnProjectileDeath();// 0x197e4f0
	void Multicast_OnStopped();// 0x14c5b50
	void Multicast_OnDeath();// 0xbc0f10

--------------------------------
Class: TigerDisciplineProjectionDash.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	Vector DashStartLocation;//[Offset: 0xf0, Size: 0xc]
	Vector DashEnterLocation;//[Offset: 0xfc, Size: 0xc]
	Vector DashExitLocation;//[Offset: 0x108, Size: 0xc]
	Vector DashEndLocation;//[Offset: 0x114, Size: 0xc]
	TigerProjectionDashConfig* Config;//[Offset: 0x120, Size: 0x8]
	TigerProjectionDashProjectile* SpawnedProjection;//[Offset: 0x128, Size: 0x8]
	Actor* TargetIndicator;//[Offset: 0x148, Size: 0x8]
	bool WillDashAfterEnter();// 0x14eb990
	void Server_StopProjection(const float InLerpAlpha);// 0x14eb6a0
	void OnProjectionDestroyedOnClient(enum InReason);// 0x197e4f0
	void OnOwnerLifeStatusChanged(const enum InNewLifeStatus);// 0x14eb1f0
	void OnForcedMoveResult(const enum InForcedMoveResult);// 0x14eb170
	void OnDashStart();// 0x197e4f0
	void OnDashExit();// 0x197e4f0
	void OnDashEnter();// 0x197e4f0
	void OnDashEnd();// 0x197e4f0
	void Multicast_DashStart(const Vector InStartLocation, const Vector InEnterLocation, const Vector InEndLocation);// 0x14ead90
	void Multicast_DashExit(const Vector InExitLocation, const Vector InEndLocation);// 0x14eaca0
	void Multicast_DashEnter();// 0x14eac80
	void Multicast_DashEnd(const Vector InStartLocation, const Vector InEnterLocation, const Vector InExitLocation, const Vector InEndLocation);// 0x14eaaf0
	float GetCurrentProjectionMaxDistanceRatio();// 0x14ea7a0
	void Client_TimeoutProjection();// 0x14ea5c0
	void Client_DespawnProjectionDueToRange();// 0x14ea5a0
	bool CheckIfTeleportIsRequired();// 0x14ea570

--------------------------------
Class: TigerRejuvenatingVoiceConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* DownedMontage;//[Offset: 0x180, Size: 0x8]
	AnimMontage* DownedCancelMontage;//[Offset: 0x188, Size: 0x8]
	AnimMontage* DownedInterruptMontage;//[Offset: 0x190, Size: 0x8]
	AnimMontage* NormalMontage;//[Offset: 0x198, Size: 0x8]
	AnimMontage* CancelMontage;//[Offset: 0x1a0, Size: 0x8]
	AnimMontage* InterruptMontage;//[Offset: 0x1a8, Size: 0x8]
	class TigerBuffRejuvenatingVoice* HealingBuff;//[Offset: 0x1b0, Size: 0x8]
	float ReceivedDamageThreshold;//[Offset: 0x1b8, Size: 0x4]
	float ActiveTimeAfterStop;//[Offset: 0x1bc, Size: 0x4]
	float FailNormalMontageResetTime;//[Offset: 0x1c0, Size: 0x4]
	float DownedIntroDuration;//[Offset: 0x1c4, Size: 0x4]
	float CasterHealRange;//[Offset: 0x1c8, Size: 0x4]
	float ProjectionHealRange;//[Offset: 0x1cc, Size: 0x4]
	float ProjectionHealMultiplier;//[Offset: 0x1d0, Size: 0x4]
	float FirstHealMultiplier;//[Offset: 0x1d4, Size: 0x4]
	float SelfHealFlat;//[Offset: 0x1d8, Size: 0x4]
	float SelfHealPercent;//[Offset: 0x1dc, Size: 0x4]
	float TeamHealFlat;//[Offset: 0x1e0, Size: 0x4]
	float TeamHealPercent;//[Offset: 0x1e4, Size: 0x4]
	float HealTickRate;//[Offset: 0x1e8, Size: 0x4]
	bool bOnlyHealRecentDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	bool bAllowExtendedGroupHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 0x1]
	bool bRestrictHealStacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 0x1]
	bool bRecentDamageVisibleForGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef, Size: 0x1]
	bool bShouldGlideWhenActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: TigerDisciplineRejuvenatingVoice.TigerDisciplineBase.Object
	TigerRejuvenatingVoiceConfig* Config;//[Offset: 0x78, Size: 0x8]
	TigerDisciplineProjectionDash* ProjectionDash;//[Offset: 0x80, Size: 0x8]
	AnimMontage* CurrentAnimMontage;//[Offset: 0x88, Size: 0x8]
	float StopTimeLeft;//[Offset: 0xbc, Size: 0x4]
	bool bIsChanneling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	void PulseHeal(const float InHealMultiplier, const bool bInOnCaster, const bool bInOnProjection, const bool bInDisregardHealRestriction);// 0x14eb530
	void OnSilencedChanged(bool bInIsSilenced);// 0x14eb4a0
	void OnPlayerExit(TigerPlayer* InPlayer);// 0x197e4f0
	void OnPlayerEnter(TigerPlayer* InPlayer);// 0x197e4f0
	void OnPlayerDamageTaken(Actor* InDamagedActor, float InDamage, const DamageType* InDamageType, Controller* InInstigatedBy, Actor* InDamageCauser);// 0x14eb2f0
	void OnOwnerLifeStatusChanged(const enum InNewLifeStatus);// 0x14eb270
	void OnHealStop();// 0x197e4f0
	void OnHealStart();// 0x197e4f0
	void OnHealPulse(const bool bInOnProjection);// 0x197e4f0
	void OnDownedIntroIsDone();// 0x14eb150
	void Multicast_PlayerExit(TigerPlayer* InPlayer);// 0x14eb030
	void Multicast_PlayerEnter(TigerPlayer* InPlayer);// 0x14eafa0
	void Multicast_InterruptChanneling();// 0x14e1610
	void Multicast_HealStop();// 0x14eaf80
	void Multicast_HealStart();// 0x14eaf60
	void Multicast_HealPulse(const bool bInOnProjection);// 0x14eaed0
	void Multicast_BuffHealTick(TigerPlayer* InBuffOwner, const byte InHealAmount);// 0x14eaa20
	bool HasProjection();// 0x14ea9f0
	Vector GetProjectionLocation();// 0x14ea890
	Actor* GetProjectionActor();// 0x14ea860

--------------------------------
Class: TigerRepositionConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerRepositionTracer* TracerActor;//[Offset: 0x180, Size: 0x8]
	class TigerBuffReposition* RewindBuff;//[Offset: 0x188, Size: 0x8]
	float RewindTimeSeconds;//[Offset: 0x190, Size: 0x4]
	float SampleRate;//[Offset: 0x194, Size: 0x4]
	float RewindSpeed;//[Offset: 0x198, Size: 0x4]
	float RewindPlaybackTimeMin;//[Offset: 0x19c, Size: 0x4]
	float RewindPlaybackTimeMax;//[Offset: 0x1a0, Size: 0x4]

--------------------------------
Class: TigerRepositionTracer.Actor.Object
	void Trace(out const Vector[] PreviousLocations, float Duration);// 0x197e4f0

--------------------------------
Class: TigerBuffReposition.TigerBuffStun.TigerBuff.Object
	float NoiseNotifyEventRange;//[Offset: 0x268, Size: 0x4]

--------------------------------
Class: TigerBuffRepositionInstance.TigerBuffInstance.Object
	PrimitiveComponent* Root;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerDisciplineReposition.TigerDisciplineBase.Object
	TigerRepositionConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerScoutsConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerFamiliarScout* ScoutActor;//[Offset: 0x190, Size: 0x8]
	class TigerFamiliarScoutPassive* PassiveClass;//[Offset: 0x198, Size: 0x8]
	float RevealDuration;//[Offset: 0x1a0, Size: 0x4]
	float PassiveScanRadius;//[Offset: 0x1a4, Size: 0x4]
	float ActiveScanRadius;//[Offset: 0x1a8, Size: 0x4]
	float ScoutDespawnDistance;//[Offset: 0x1ac, Size: 0x4]
	float ScoutLifetime;//[Offset: 0x1b0, Size: 0x4]
	float Reach;//[Offset: 0x1b4, Size: 0x4]
	float ScoutingMaxDistanceFromOwner;//[Offset: 0x1b8, Size: 0x4]
	float TargetLocationNormalOffset;//[Offset: 0x1bc, Size: 0x4]
	AnimMontage* AirMontage;//[Offset: 0x1c0, Size: 0x8]
	AkAudioEvent* RevealedCharacterAudioEvent;//[Offset: 0x1c8, Size: 0x8]
	FName BoneToSpawnFrom;//[Offset: 0x1d0, Size: 0x8]
	bool bShouldAlwaysStartFromPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]

--------------------------------
Class: TigerFamiliarScout.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	SphereComponent* ScanSphereComponent;//[Offset: 0x230, Size: 0x8]
	float MoveSpeed;//[Offset: 0x238, Size: 0x4]
	float RecallMoveSpeed;//[Offset: 0x23c, Size: 0x4]
	Vector TargetLocation;//[Offset: 0x240, Size: 0xc]
	TimerHandle ArrivalTimerHandle;//[Offset: 0x250, Size: 0x8]
	Vector ManuallyScoutAtLocation;//[Offset: 0x258, Size: 0xc]
	int Rank;//[Offset: 0x264, Size: 0x4]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	Vector Velocity;//[Offset: 0x26c, Size: 0xc]
	float ScoutTimeToReachTarget;//[Offset: 0x278, Size: 0x4]
	float RevealDurationMultiplier;//[Offset: 0x27c, Size: 0x4]
	void OnTargetLocationChanged();// 0x197e4f0
	void OnScoutStartedReturnToOwner();// 0x197e4f0
	void OnRep_TargetLocation();// 0x14ffe00
	void OnRep_ManuallyScoutAtLocation();// 0x14ffda0
	void OnArrivedAtOwner();// 0x197e4f0
	void DeactivateScouting();// 0x197e4f0
	void AttachToCharacter(TigerCharacter* InCharacter);// 0x14fed00
	void AddCachedAchievementTarget(TigerPlayerState* InTargetPlayerState);// 0x14fec70
	void ActivateScouting();// 0x197e4f0

--------------------------------
Class: TigerFamiliarScoutPassive.ActorComponent.Object
	TigerCharacter*[] OverlappingCharacters;//[Offset: 0xb0, Size: 0x10]
	ParticleSystemComponent* OrbitingParticles;//[Offset: 0xc0, Size: 0x8]
	SphereComponent* ScanSphere;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]
	class TigerScoutsConfig* Config;//[Offset: 0xd8, Size: 0x8]
	bool bIsPassiveActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bPlayerIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	void ScoutSpawned(TigerFamiliarScout* SpawnedScout);// 0x197e4f0
	void OnComponentEndOverlapScanSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x14ffc20
	void OnComponentBeginOverlapScanSphere(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex, bool bInFromSweep, out const HitResult InSweepResult);// 0x14ff9f0
	void EvaluateVisibility();// 0x197e4f0
	ParticleSystemComponent* CreateOrbitingParticles();// 0x197e4f0

--------------------------------
Class: TigerDisciplineScouts.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerFamiliarScoutPassive* Server_PassiveComponent;//[Offset: 0xf0, Size: 0x8]
	TigerFamiliarScout* Server_SpawnedFamiliar;//[Offset: 0xf8, Size: 0x8]
	TigerScoutsConfig* Config;//[Offset: 0x100, Size: 0x8]
	void Multicast_ScoutSpawnedResult(const bool bInAreScoutsOut);// 0x14eb0c0

--------------------------------
Class: TigerShacklesConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	MaterialInterface* ShacklesAimingDecal;//[Offset: 0x180, Size: 0x8]
	float MaxRange;//[Offset: 0x188, Size: 0x4]
	float ShacklesAoeSize;//[Offset: 0x18c, Size: 0x4]
	float ExplosionDepth;//[Offset: 0x190, Size: 0x4]
	float[] ExplosionDamage;//[Offset: 0x198, Size: 0x10]
	class TigerShacklesMine* ShackleMine;//[Offset: 0x1a8, Size: 0x8]
	float MineLifeTime;//[Offset: 0x1b0, Size: 0x4]
	float DelayBeforeShackleActivation;//[Offset: 0x1b4, Size: 0x4]
	FName CastAnimationName;//[Offset: 0x1b8, Size: 0x8]

--------------------------------
Class: TigerShacklesMine.Actor.Object
	class TigerBuff* ThornsBuff;//[Offset: 0x228, Size: 0x8]
	class TigerBuff* ShacklesBuff;//[Offset: 0x230, Size: 0x8]
	SceneComponent* Root;//[Offset: 0x238, Size: 0x8]
	SceneComponent* IndicatorAnchor;//[Offset: 0x240, Size: 0x8]
	void OnShackleMineTriggered();// 0x197e4f0
	void OnOverlapBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x15db120

--------------------------------
Class: TigerDisciplineShackles.TigerDisciplineBase.Object
	TigerShacklesConfig* Config;//[Offset: 0x80, Size: 0x8]
	DecalActor* ClientAimDecal;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: TigerShockwavePunchConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage*[] PunchMontages;//[Offset: 0x190, Size: 0x10]
	class TigerShockwaveWall[] ShockwaveActorToSpawn;//[Offset: 0x1a0, Size: 0x10]
	TigerShockwaveWallData ShockwaveWallData;//[Offset: 0x1b0, Size: 0x60]

--------------------------------
Class: TigerDisciplineShockwavePunch.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerShockwavePunchConfig* DisciplineConfig;//[Offset: 0x110, Size: 0x8]
	AnimMontage* PickedMontage;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: TigerStunConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float StunTime;//[Offset: 0x180, Size: 0x4]
	float StunRadius;//[Offset: 0x184, Size: 0x4]

--------------------------------
Class: TigerDisciplineStun.TigerDisciplineBase.Object
	TigerStunConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerSwiftStrikeConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float DashDistance;//[Offset: 0x180, Size: 0x4]
	float StartupTime;//[Offset: 0x184, Size: 0x4]
	float DashTime;//[Offset: 0x188, Size: 0x4]
	float DashDamage;//[Offset: 0x18c, Size: 0x4]
	Vector2D DashHitBoxSize;//[Offset: 0x190, Size: 0x8]
	float StrikeDelay;//[Offset: 0x198, Size: 0x4]
	float StrikeDuration;//[Offset: 0x19c, Size: 0x4]
	float StrikeDamage;//[Offset: 0x1a0, Size: 0x4]
	class TigerBuff* StrikeDebuff;//[Offset: 0x1a8, Size: 0x8]
	Vector StrikeHitBoxSize;//[Offset: 0x1b0, Size: 0xc]
	bool DrawDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	void OnTargetsHitByStrike(out const TigerCharacter*[] Targets);// 0x197e4f0
	void OnTargetsHitByDash(out const TigerCharacter*[] Targets);// 0x197e4f0
	void OnStrike(TigerCharacter* Character);// 0x197e4f0
	void OnStartup(TigerCharacter* Character);// 0x197e4f0
	void OnDash(TigerCharacter* Character, out const Vector Location, out const Vector Direction);// 0x197e4f0

--------------------------------
Class: TigerDisciplineSwiftStrike.TigerDisciplineBase.Object
	TigerSwiftStrikeConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerTeleportConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float TeleportDistance;//[Offset: 0x180, Size: 0x4]

--------------------------------
Class: TigerDisciplineTeleport.TigerDisciplineBase.Object
	TigerTeleportConfig* Config;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerTrapsConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AkAudioEvent* ThrowAudioEvent;//[Offset: 0x190, Size: 0x8]
	AkAudioEvent* LandAudioEvent;//[Offset: 0x198, Size: 0x8]
	AkAudioEvent* ArmingAudioEvent;//[Offset: 0x1a0, Size: 0x8]
	AkAudioEvent* ExplosionAudioEvent;//[Offset: 0x1a8, Size: 0x8]
	AkAudioEvent* FizzleAudioEvent;//[Offset: 0x1b0, Size: 0x8]
	AkAudioEvent* StartGasAudioEvent;//[Offset: 0x1b8, Size: 0x8]
	AkAudioEvent* StopGasAudioEvent;//[Offset: 0x1c0, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0x1c8, Size: 0x8]
	CurveFloat* EmissiveCurve;//[Offset: 0x1d0, Size: 0x8]
	float EmissiveCurveLoopTime;//[Offset: 0x1d8, Size: 0x4]
	LinearColor AllyStatusColor;//[Offset: 0x1dc, Size: 0x10]
	LinearColor EnemyStatusColor;//[Offset: 0x1ec, Size: 0x10]
	float MaxEmissiveBoost;//[Offset: 0x1fc, Size: 0x4]
	MaterialInterface* DecalMaterial;//[Offset: 0x200, Size: 0x8]
	AnimMontage* AimMontage;//[Offset: 0x208, Size: 0x8]
	FName AimTrapSpawnSocket;//[Offset: 0x210, Size: 0x8]
	float FailAimMontageResetTime;//[Offset: 0x218, Size: 0x4]
	class Actor* AimTrapType;//[Offset: 0x220, Size: 0x8]
	class TigerTrap* TrapType;//[Offset: 0x228, Size: 0x8]
	class TigerBuff[] GasBuff;//[Offset: 0x230, Size: 0x10]
	int[] MaxTrapsActive;//[Offset: 0x240, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x250, Size: 0xc]
	float TerminalVelocity;//[Offset: 0x25c, Size: 0x4]
	float GravitationalPull;//[Offset: 0x260, Size: 0x4]
	float AirFriction;//[Offset: 0x264, Size: 0x4]
	float ThrowForce;//[Offset: 0x268, Size: 0x4]
	float ThrowMaxForce;//[Offset: 0x26c, Size: 0x4]
	float ThrowPlayerVelocityForceScale;//[Offset: 0x270, Size: 0x4]
	float ThrowPitchOffset;//[Offset: 0x274, Size: 0x4]
	float ThrowMinPitch;//[Offset: 0x278, Size: 0x4]
	float ThrowMaxPitch;//[Offset: 0x27c, Size: 0x4]
	float LifeTime;//[Offset: 0x280, Size: 0x4]
	float TriggerDelay;//[Offset: 0x284, Size: 0x4]
	float ReleaseDelay;//[Offset: 0x288, Size: 0x4]
	float DecalFadeDuration;//[Offset: 0x28c, Size: 0x4]
	float ArmingDuration;//[Offset: 0x290, Size: 0x4]
	float[] GasDuration;//[Offset: 0x298, Size: 0x10]
	float[] TriggerRadius;//[Offset: 0x2a8, Size: 0x10]
	float[] ExplosionRadius;//[Offset: 0x2b8, Size: 0x10]
	float[] GasRadius;//[Offset: 0x2c8, Size: 0x10]
	float DecalTriggerRadiusScale;//[Offset: 0x2d8, Size: 0x4]
	float[] AreaEffectScale;//[Offset: 0x2e0, Size: 0x10]
	float[] ExplosionEffectScale;//[Offset: 0x2f0, Size: 0x10]
	float[] GasEffectScale;//[Offset: 0x300, Size: 0x10]
	float[] ExplosionDamage;//[Offset: 0x310, Size: 0x10]
	bool bHostileNpcTriggersTrap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bAllyAreaVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	bool bAllyImmunityExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 0x1]
	bool bAllyImmunityGas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 0x1]
	bool bClearGasBuffOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	float TraceStartOffset;//[Offset: 0x328, Size: 0x4]
	float TraceUpOffset;//[Offset: 0x32c, Size: 0x4]
	bool bDrawDebugSpheres;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]

--------------------------------
Class: TigerTrap.Actor.Object
	delegate OnTriggered;//[Offset: 0x230, Size: 0x10]
	SceneComponent* Root;//[Offset: 0x240, Size: 0x8]
	StaticMeshComponent* TrapMesh;//[Offset: 0x248, Size: 0x8]
	BoxComponent* ShootingVolume;//[Offset: 0x250, Size: 0x8]
	SphereComponent* TriggerVolume;//[Offset: 0x258, Size: 0x8]
	SphereComponent* ExplosionVolume;//[Offset: 0x260, Size: 0x8]
	SphereComponent* GasVolume;//[Offset: 0x268, Size: 0x8]
	ParticleSystemComponent* ArmedParticle;//[Offset: 0x270, Size: 0x8]
	ParticleSystemComponent* AreaParticle;//[Offset: 0x278, Size: 0x8]
	ParticleSystemComponent* ExplosionParticle;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* GasParticle;//[Offset: 0x288, Size: 0x8]
	class TigerTrapsConfig* Config;//[Offset: 0x290, Size: 0x8]
	TigerTrapsConfig* RawConfig;//[Offset: 0x298, Size: 0x8]
	class TigerBuff* GasBuff;//[Offset: 0x2a0, Size: 0x8]
	DecalComponent* Decal;//[Offset: 0x2a8, Size: 0x8]
	TigerPersistentPlayerID OwnerPersistentId;//[Offset: 0x2b0, Size: 0x10]
	float ExplosionDamageMultiplier;//[Offset: 0x2cc, Size: 0x4]
	int PowerLevel;//[Offset: 0x2d0, Size: 0x4]
	bool bIsPlaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bIsArmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bUseAreaTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	TigerCharacter*[] BuffAffectedCharacters;//[Offset: 0x2e0, Size: 0x10]
	Vector ForwardDirection;//[Offset: 0x2f0, Size: 0xc]
	Vector Velocity;//[Offset: 0x2fc, Size: 0xc]
	MaterialInstanceDynamic* TrapMaterialInstance;//[Offset: 0x320, Size: 0x8]
	bool ShouldTrapSeeCharacterAsFriendly(const TigerCharacter* InCharacter);// 0x1602b90
	bool ShouldPlayerSeeTrapAsFriendly(const TigerPlayer* InPlayer);// 0x1602af0
	void OnTriggeredTrap();// 0x197e4f0
	void OnPlacedTrap();// 0x197e4f0
	void OnGasBuffTick(TigerBuffDOTInstance* InGasBuffInstance);// 0x16027c0
	void OnActivatedTrap();// 0x197e4f0
	void Multicast_TriggerTrap();// 0x1602770
	void Multicast_Stick(const Vector InLocation, const Rotator InRotation);// 0x16026b0
	void Multicast_ActivateTrap();// 0x1602660
	bool IsTriggered();// 0x15ba3c0
	bool IsPlaced();// 0x1602610
	bool IsArmed();// 0x16025f0
	void BeginOverlappedProjectile(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x16021a0

--------------------------------
Class: TigerDisciplineTraps.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerTrapsConfig* Config;//[Offset: 0xf0, Size: 0x8]
	Actor* AimTrapActor;//[Offset: 0xf8, Size: 0x8]
	TigerTrap*[] CurrentTraps;//[Offset: 0x100, Size: 0x10]
	int[] FreeTrapIndices;//[Offset: 0x110, Size: 0x10]
	void RemoveActiveTrap(TigerTrap* InTrap);// 0x14efc60
	void Multicast_StopDiscipline();// 0x14ef850

--------------------------------
Class: TigerVanishConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerBuff[] VanishBuff;//[Offset: 0x180, Size: 0x10]
	float AttackDelayAfterBuff;//[Offset: 0x190, Size: 0x4]
	FText MovementSpeedText;//[Offset: 0x198, Size: 0x18]
	FText MovementSpeedSuffix;//[Offset: 0x1b0, Size: 0x18]

--------------------------------
Class: TigerDisciplineVanish.TigerDisciplineBase.Object
	TigerVanishConfig* Config;//[Offset: 0x78, Size: 0x8]
	void OnBuffRemoved(TigerBuff* InBuffType, int InID, float InDuration);// 0x14ef870

--------------------------------
Class: TigerVentrueClanConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerBuff* BuffType;//[Offset: 0x180, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x188, Size: 0x8]
	AnimMontage* EndMontage;//[Offset: 0x190, Size: 0x8]
	float TriggerTime;//[Offset: 0x198, Size: 0x4]
	float EndingLockDuration;//[Offset: 0x19c, Size: 0x4]
	float ActiveTimeAfterEnd;//[Offset: 0x1a0, Size: 0x4]
	float Duration;//[Offset: 0x1a4, Size: 0x4]
	float BuffActiveTimeAfterEnd;//[Offset: 0x1a8, Size: 0x4]
	float CooldownReductionPerDamageMitigated;//[Offset: 0x1ac, Size: 0x4]
	float CooldownReductionSecondsPerDamageMitigated;//[Offset: 0x1b0, Size: 0x4]
	float HealPerDamageMitigated;//[Offset: 0x1b4, Size: 0x4]
	bool bIncludeArchetypeDisciplineMitigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]

--------------------------------
Class: TigerDisciplineVentrueClan.TigerDisciplineBase.Object
	TigerVentrueClanConfig* Config;//[Offset: 0x78, Size: 0x8]
	void OnDamageMitigatedCosmetic();// 0x197e4f0
	void OnDamageMitigated(const float InTotalDamage, const float InDamageMitigated);// 0x14ef990
	void Multicast_StartEndMontage();// 0x14e1610
	void Multicast_OnDamageMitigatedCosmetic();// 0x14ef810

--------------------------------
Class: TigerVentrueOneConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerBuff* DashStartBuffType;//[Offset: 0x180, Size: 0x8]
	class TigerBuff* DashEndBuffType;//[Offset: 0x188, Size: 0x8]
	class TigerBuff* DebuffType;//[Offset: 0x190, Size: 0x8]
	AnimMontage* OnHitStopMontage;//[Offset: 0x198, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x1a0, Size: 0x8]
	float DashDistance;//[Offset: 0x1a8, Size: 0x4]
	float DashDuration;//[Offset: 0x1ac, Size: 0x4]
	float DashExitVelocity;//[Offset: 0x1b0, Size: 0x4]
	float DashMaxUpAngle;//[Offset: 0x1b4, Size: 0x4]
	float DashMaxDownAngle;//[Offset: 0x1b8, Size: 0x4]
	float ActiveTimeAfterDash;//[Offset: 0x1bc, Size: 0x4]
	Vector DashHitboxExtents;//[Offset: 0x1c0, Size: 0xc]
	float DashEndHitRadius;//[Offset: 0x1cc, Size: 0x4]
	float SurfaceStopThreshold;//[Offset: 0x1d0, Size: 0x4]
	float HitDamage;//[Offset: 0x1d4, Size: 0x4]
	float KnockbackPitch;//[Offset: 0x1d8, Size: 0x4]
	float KnockbackForce;//[Offset: 0x1dc, Size: 0x4]
	bool bDepleteShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bDashEndBuffRequiresHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	bool bShouldStopDashOnHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2, Size: 0x1]
	bool bShouldStopMontageWhenDashStops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e3, Size: 0x1]
	bool bShouldPlayOnHitMontageOnTerrainHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 0x1]

--------------------------------
Class: TigerDisciplineVentrueOne.TigerDisciplineBase.Object
	Actor*[] PreviouslyHitCharacters;//[Offset: 0x78, Size: 0x10]
	Vector TargetLocation;//[Offset: 0x88, Size: 0xc]
	TigerVentrueOneConfig* Config;//[Offset: 0x98, Size: 0x8]
	void OnTerrainHit(PrimitiveComponent* InHitComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, Vector InNormalImpulse, out const HitResult InHit);// 0x14efa60
	void OnHitTerrain(out const HitResult InHitResult);// 0x197e4f0
	void OnHitCharacter(TigerCharacter* InCharacter);// 0x197e4f0
	void OnDashStart();// 0x197e4f0
	void OnDashEnd();// 0x197e4f0
	void Multicast_PlayOnHitStopMontage();// 0x14e1610

--------------------------------
Class: TigerVentrueTwoConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	class TigerDisciplineVentrueTwoLeashPoint* LeashPointActor;//[Offset: 0x180, Size: 0x8]
	class TigerWidget* TargetingWidget;//[Offset: 0x188, Size: 0x8]
	class TigerBuff* BreakBuffType;//[Offset: 0x190, Size: 0x8]
	class TigerBuff* BreakMomentumDrainBuffType;//[Offset: 0x198, Size: 0x8]
	class TigerBuff* BreakBuffTypeNpc;//[Offset: 0x1a0, Size: 0x8]
	class TigerBuff* LeashedBuffType;//[Offset: 0x1a8, Size: 0x8]
	class TigerBuff* PreLeashedBuffType;//[Offset: 0x1b0, Size: 0x8]
	class TigerBuff* OnHitBuffType;//[Offset: 0x1b8, Size: 0x8]
	CurveFloat* AimAxisValueCurve;//[Offset: 0x1c0, Size: 0x8]
	CurveFloat* DistanceFromUseValueCurve;//[Offset: 0x1c8, Size: 0x8]
	AnimMontage* AimMontage;//[Offset: 0x1d0, Size: 0x8]
	AnimMontage* AbortMontage;//[Offset: 0x1d8, Size: 0x8]
	AnimMontage* CastMontage;//[Offset: 0x1e0, Size: 0x8]
	float AimIntroTime;//[Offset: 0x1e8, Size: 0x4]
	float TriggerTime;//[Offset: 0x1ec, Size: 0x4]
	float ActiveTimeAfterTrigger;//[Offset: 0x1f0, Size: 0x4]
	float LeashPointCreationDelay;//[Offset: 0x1f4, Size: 0x4]
	float NpcHitCooldownRefundPercent;//[Offset: 0x1f8, Size: 0x4]
	float BreakMomentumDrainSpeedMultiplier;//[Offset: 0x1fc, Size: 0x4]
	float BreakDamage;//[Offset: 0x200, Size: 0x4]
	float BreakStunDuration;//[Offset: 0x204, Size: 0x4]
	float BreakDamageNpc;//[Offset: 0x208, Size: 0x4]
	float BreakStunDurationNpc;//[Offset: 0x20c, Size: 0x4]
	float LeashInstantBreakRange;//[Offset: 0x210, Size: 0x4]
	float LeashTimedBreakRange;//[Offset: 0x214, Size: 0x4]
	float LeashTimedBreakDuration;//[Offset: 0x218, Size: 0x4]
	float LeashLifetime;//[Offset: 0x21c, Size: 0x4]
	float LeashDestroyDelayAfterBreak;//[Offset: 0x220, Size: 0x4]
	float PlayerTargetMultiplier;//[Offset: 0x224, Size: 0x4]
	float TargetingSweepRadius;//[Offset: 0x228, Size: 0x4]
	float ShowTargetRange;//[Offset: 0x22c, Size: 0x4]
	float ValidTargetRange;//[Offset: 0x230, Size: 0x4]
	float TargetWidthForProjection;//[Offset: 0x234, Size: 0x4]
	float TargetHeightOffsetForProjection;//[Offset: 0x238, Size: 0x4]
	float WidgetHeightScale;//[Offset: 0x23c, Size: 0x4]
	float RemovalDelay;//[Offset: 0x240, Size: 0x4]
	bool bAllowBloodhuntedTargetingThroughWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	bool bAllowScoutedTargetingThroughWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245, Size: 0x1]
	bool bAllowPassiveTargetingThroughWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246, Size: 0x1]
	bool bLeashInstantBreakOnNpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x247, Size: 0x1]
	bool bShowTargetingDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	bool bRotateWidgetWithTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	bool bLeashDestroyOnCasterDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24a, Size: 0x1]
	bool bShowLeashDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b, Size: 0x1]

--------------------------------
Class: TigerDisciplineVentrueTwoLeashPoint.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	TigerCharacter* LeashedCharacter;//[Offset: 0x230, Size: 0x8]
	float LeashLength;//[Offset: 0x238, Size: 0x4]
	bool bIsLeashBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	float InstantBreakRange;//[Offset: 0x248, Size: 0x4]
	float TimedBreakRange;//[Offset: 0x24c, Size: 0x4]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	void OnBreakTimerStarted();// 0x197e4f0
	void OnBreakLeash();// 0x197e4f0
	void Multicast_BreakTimerStarted();// 0x14c5b50
	void Multicast_BreakLeash();// 0xbc0f10
	void HandleLeashedLifeStatusChanged(enum InNewLifeStatus);// 0x14ef790
	void HandleCasterLifeStatusChanged(enum InNewLifeStatus);// 0x14ef710

--------------------------------
Class: TigerDisciplineVentrueTwo.TigerDisciplineBase.Object
	TigerCharacter* TargetCharacter;//[Offset: 0x78, Size: 0x8]
	TigerWidget* TargetingWidget;//[Offset: 0x80, Size: 0x8]
	TigerVentrueTwoConfig* Config;//[Offset: 0x88, Size: 0x8]
	void OnTriggerCastEffects();// 0x197e4f0
	void OnTargetValidStateUpdated(const bool bInIsTargetInRange);// 0x197e4f0
	void OnNewTarget(const bool bInIsTargetInRange);// 0x197e4f0
	void OnCastStarted();// 0x197e4f0
	void OnAimStopped();// 0x197e4f0
	void OnAimStarted();// 0x197e4f0
	void Multicast_TriggerCastEffects();// 0x14e1610
	void Multicast_StopAim();// 0x14ef830
	void Multicast_StartCast();// 0x14ef810
	float GetTargetRangePercentage(const bool bInUseShowRange);// 0x14ef670
	void DoTargetLockedLogic();// 0x197e4f0

--------------------------------
Class: TigerDodgeBuff.TigerBuff.Object
	CurveFloat* MaxSpeedCurve;//[Offset: 0x268, Size: 0x8]

--------------------------------
Class: TigerDodgeBuffInstance.TigerBuffInstance.Object
	TigerDodgeBuff* BuffClassDefaultObject;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerDoor.TigerInteractiveObject.Actor.Object
	TigerPlayer* InteractingPlayer;//[Offset: 0x2a0, Size: 0x8]
	bool IsOpen();// 0x14f4c50

--------------------------------
Class: TigerDownedEnemyPromptUi.TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayerStateGameData PlayerStateData;//[Offset: 0x2a8, Size: 0xd0]

--------------------------------
Class: TigerDsPresenceSubsystem.GameInstanceSubsystem.Subsystem.Object
	TigerPresenceService* PresenceService;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerPresenceService.Object

--------------------------------
Class: TigerDsReliableTimeSubSystem.GameInstanceSubsystem.Subsystem.Object
	bool IsReliableDateTimeSet();// 0x9661c0
	static DateTime GetCurrentDateTimeUtc(const Object* InWorldContextObject);// 0x14f4a40

--------------------------------
Class: TigerDynamicObject.Actor.Object
	ComponentReference MeshComponentRef;//[Offset: 0x228, Size: 0x28]
	float PlayerImpactMultiplier;//[Offset: 0x250, Size: 0x4]

--------------------------------
Class: TigerEditorGameSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	bool bMatchWaitsForMultipleGroupsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bMatchWaitsForReadyStatesInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bEnableSpawnCountdownInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bForceRespawnPlayerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bEnableNpcSpawningInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bUseLocalVendorCategories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	TigerSeasonConfigAsset* SeasonConfigOverride;//[Offset: 0x40, Size: 0x28]
	bool bShowGeneratedMeshActorsInOutliner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bSimulateParticlesInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	class TigerPlayer* PreviewerClass;//[Offset: 0x70, Size: 0x28]
	Color IndoorVolumeColor;//[Offset: 0x98, Size: 0x4]
	TigerEventConfigAsset* EventConfigOverrideAsset;//[Offset: 0xa0, Size: 0x28]
	FString EventConfigOverridePath;//[Offset: 0xc8, Size: 0x10]
	FString GAMEMODEID;//[Offset: 0xd8, Size: 0x10]
	bool bAllowApplyVisualSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: TigerSeasonConfigAsset.DataAsset.Object
	TigerSeasonConfig Config;//[Offset: 0x30, Size: 0x3b0]

--------------------------------
Class: TigerEventConfigAsset.DataAsset.Object
	TigerEventConfig EventConfig;//[Offset: 0x30, Size: 0x178]

--------------------------------
Class: TigerEliminationPromptUi.TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayerStateGameData PlayerStateData;//[Offset: 0x2a8, Size: 0xd0]

--------------------------------
Class: TigerGameMode.GameModeBase.Info.Actor.Object
	delegate OnRestartPlayer;//[Offset: 0x2d8, Size: 0x10]
	TigerGroupCoordinator* GroupCoordinator;//[Offset: 0x2e8, Size: 0x8]
	TigerSoloCoordinator* SoloCoordinator;//[Offset: 0x2f0, Size: 0x8]
	TigerMasqueradeCoordinator* MasqueradeCoordinator;//[Offset: 0x2f8, Size: 0x8]
	class TigerSpawnMechanic* SpawnMechanicClass;//[Offset: 0x5e0, Size: 0x28]
	TigerAICoordinator* AICoordinator;//[Offset: 0x608, Size: 0x8]
	TigerNPCSpawningCoordinator* NPCSpawner;//[Offset: 0x610, Size: 0x8]
	enum SessionTraveledFrom;//[Offset: 0x618, Size: 0x1]
	enum GameType;//[Offset: 0x619, Size: 0x1]
	enum MatchMode;//[Offset: 0x9dc, Size: 0x1]
	TigerSpawnMechanic* SpawnMechanic;//[Offset: 0xa08, Size: 0x8]
	TigerSessionService* TigerSessionService;//[Offset: 0xa10, Size: 0x8]
	class TigerItemCluster* ItemClusterClass;//[Offset: 0xa68, Size: 0x8]
	float LootSpawnFrameBudget;//[Offset: 0xa74, Size: 0x4]
	float ServerLoadScalabilityUpdateFrequency;//[Offset: 0xa78, Size: 0x4]
	float ServerLoadScalability30HzTarget;//[Offset: 0xa7c, Size: 0x4]
	float ServerLoadScalability20HzTarget;//[Offset: 0xa80, Size: 0x4]
	bool ServerLoadScalabilityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa84, Size: 0x1]
	TigerPlayerServerLoginProcess* PlayerServerLoginProcess;//[Offset: 0xaa0, Size: 0x8]
	TigerLootSpawner*[] PendingLootSpawners;//[Offset: 0xaa8, Size: 0x10]
	float NetworkProfileOnPlayerConnectionDuration;//[Offset: 0xad0, Size: 0x4]
	bool TryRestartPlayerIfNeeded(TigerPlayerController* Player);// 0x150f4b0
	void TigerEnableServerScalability(bool InEnabled);// 0x149f8f0
	void ShutdownServer();// 0x150f490
	void SetPlayerIsReadyToPlay(TigerPlayerController* PlayerController);// 0x150f400
	void SendChatMessageToGroupMembers(TigerChatComponent* InMessageSender, out const FText InMessageText);// 0x150f160
	void SendChatMessageToAllClients(TigerChatComponent* InMessageSender, out const FText InMessageText);// 0x150f050
	void OnRestartPlayer__DelegateSignature(Controller* NewPlayer);// 0x197e4f0
	void OnNpcDeathEvent__DelegateSignature(TigerNPC* NPC, Controller* InstigatorController);// 0x197e4f0
	bool IsMatchSettingsSet();// 0x150eef0
	TigerMatchSettings GetMatchSettings();// 0x150ead0
	enum GetMatchMode();// 0x150eab0
	TigerAICoordinator* GetAICoordinator();// 0x150e7c0
	void CreateClientSpawners(Controller* InNewPlayer);// 0x150e730

--------------------------------
Class: TigerGroupCoordinator.ActorComponent.Object
	TigerPlayerGroup*[] Groups;//[Offset: 0xc0, Size: 0x10]
	TigerExtendedGroupState*[] ExtendedGroupStates;//[Offset: 0xd0, Size: 0x10]
	TigerPlayerGroup* GetGroupFromPlayerController(TigerPlayerController* TigerPlayerController);// 0x151f360

--------------------------------
Class: TigerPlayerGroup.Object
	TigerPlayerState*[] Members;//[Offset: 0x78, Size: 0x10]
	TigerPlayerState*[] Invitations;//[Offset: 0x98, Size: 0x10]
	TigerPingCoordinator* PingCoordinator;//[Offset: 0xa8, Size: 0x8]
	void TigerOnReservedGroupMemberJoinedDelegate__DelegateSignature(TigerPlayerGroup* InPlayerGroup, TigerPlayerState* InPlayerState);// 0x197e4f0
	TigerPlayerState*[] GetMembersAsRawPointers();// 0x15b09d0

--------------------------------
Class: TigerExtendedGroupState.Info.Actor.Object
	TigerGroupId ExtendedGroupId;//[Offset: 0x228, Size: 0x10]
	TigerExtendedGroupPlayerInfo[] ReplicatedPlayerInfo;//[Offset: 0x240, Size: 0x10]
	TigerExtendedGroupMemberClientData[] ExtendedGroupMembers;//[Offset: 0x250, Size: 0x10]
	TigerPlayerState*[] AuthPlayersInExtendedTeam;//[Offset: 0x260, Size: 0x10]
	void OnRep_ReplicatedPlayerInfo();// 0x14ffdc0
	void HandlePreMatchStateChanged(TigerPreMatchStateInfo InPreMatchState);// 0x14ff790

--------------------------------
Class: TigerExtendedGroupPlayerInfo
	int PlayerId;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 0xc]
	float Yaw;//[Offset: 0x10, Size: 0x4]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerExtendedGroupMemberClientData
	TigerGroupMemberMarkerProxy* MapMarkerProxy;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerSoloCoordinator.ActorComponent.Object

--------------------------------
Class: TigerMasqueradeCoordinator.ActorComponent.Object

--------------------------------
Class: TigerNPCSpawningCoordinator.ActorComponent.Object
	TigerNPCAsset* JudgeNpcAsset;//[Offset: 0xb0, Size: 0x8]
	DataTable* NpcSpawningGroupBudget;//[Offset: 0xb8, Size: 0x8]
	float JudgeSpawnTime;//[Offset: 0xc0, Size: 0x4]
	bool bShouldSpawnJudge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	float NpcSpawnFrameBudgetInSeconds;//[Offset: 0xc8, Size: 0x4]
	void TrySpawnNpcs();// 0x1567f80
	void SpawnNpcs();// 0x1567f60
	void OnSpawnerEndPlay(Actor* InActor, byte InEndPlayReason);// 0x1567d00
	void OnMatchStateChanged(const enum OldState, const enum NewState);// 0x1567c30
	void OnMatchSettingsSet();// 0x1567c10

--------------------------------
Class: TigerSessionService.Object

--------------------------------
Class: TigerPlayerServerLoginProcess.Object
	<FString,TigerPlayerBeingLoggedInToServer*> playersBeingLoggedInToServerByUniqueLoginId;//[Offset: 0x28, Size: 0x50]
	TigerGroupCoordinator* GroupCoordinator;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerPlayerBeingLoggedInToServer.Object
	TigerGroupCoordinator* GroupCoordinator;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerMatchGameModeSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	DataTable* RangedWeaponsDatatable;//[Offset: 0x38, Size: 0x28]
	float HighPotenceBloodTransferTime;//[Offset: 0x60, Size: 0x4]
	int SpawnCountdownTime;//[Offset: 0x64, Size: 0x4]
	int MatchStartTimeOutSeconds;//[Offset: 0x68, Size: 0x4]
	int PlayerConnectionTimeOutSeconds;//[Offset: 0x6c, Size: 0x4]
	int PlayerConnectionMinimumWaitTimeSeconds;//[Offset: 0x70, Size: 0x4]
	int SecondsOfNetworkInactivityAllowedBeforeForcingReady;//[Offset: 0x74, Size: 0x4]
	int MinPlayersToStartMatch;//[Offset: 0x78, Size: 0x4]
	bool bEnableSpawnCountdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool bEnableWinningCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	bool bReturnPlayersToElysiumOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 0x1]
	bool bRebootServerOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 0x1]
	bool bEnableAssaults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bEnableGroupFill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bLogTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bAutoSpectateOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bAllowSpectateNonTeamMembersInGroupMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	TigerEntityCheckpointsSettings EntityCheckpointsSettings;//[Offset: 0x88, Size: 0x10]
	TigerRatSpawnpointSettings RatSpawnpointSettings;//[Offset: 0xa8, Size: 0x8]
	TigerSHPBSettings SHPBSettings;//[Offset: 0xb8, Size: 0x1c]
	TigerHavenCapturePointSettings CapturePointSettings;//[Offset: 0xf0, Size: 0x20]
	TigerBattleRoyalePlayerSpawnSettings BattleRoyalePlayerSpawnSettings;//[Offset: 0x130, Size: 0x8]
	TigerPreSpawnSettings PreSpawnSettings;//[Offset: 0x138, Size: 0x28]
	TigerHighTierLootSettings HighTierLootSettings;//[Offset: 0x160, Size: 0x30]
	TigerWinConditions DefaultWinConditions;//[Offset: 0x190, Size: 0x10]
	PrimaryAssetId DefaultPlacementStrategy;//[Offset: 0x1a0, Size: 0x10]
	float DownedRegenDuration;//[Offset: 0x1b0, Size: 0x4]
	int AssistDamageTreshold;//[Offset: 0x1b8, Size: 0x4]
	float AssistDuration;//[Offset: 0x1bc, Size: 0x4]
	float EnvironmentalKillStealDuration;//[Offset: 0x1c0, Size: 0x4]
	TigerMatchScoreSettings ScoreSettings;//[Offset: 0x1c8, Size: 0x40]
	static bool ShouldReturnPlayersToElysiumOnFinish();// 0x154ee70
	static bool ShouldRebootServerOnFinish();// 0x154ee40
	static TigerSHPBSettings GetSHPBSettings(enum BalanceMode);// 0x154e5f0
	static TigerRatSpawnpointSettings GetRatSpawnpointSettings(enum BalanceMode);// 0x154e570
	static DataTable* GetRangedWeaponsDatatable();// 0x154e540
	static TigerPreSpawnSettings GetPreSpawnSettings();// 0x154e500
	static TigerEntityCheckpointsSettings GetEntityCheckpointSettings(enum BalanceMode);// 0x154e400
	static float GetDownedRegenDuration(const enum InBalanceMode);// 0x154e380
	static TigerHavenCapturePointSettings GetCapturePointSettings(enum BalanceMode);// 0x154e1c0
	static TigerBattleRoyalePlayerSpawnSettings GetBattleRoyalePlayerSpawnSettings();// 0x154e190

--------------------------------
Class: TigerEntityCheckpointsSettings
	int MinEntityCheckpoints;//[Offset: 0x0, Size: 0x4]
	int MaxEntityCheckpoints;//[Offset: 0x4, Size: 0x4]
	float MinAutomaticSupplyDropCallInDelay;//[Offset: 0x8, Size: 0x4]
	float MaxAutomaticSupplyDropCallInDelay;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerRatSpawnpointSettings
	int MinRatSpawnpoints;//[Offset: 0x0, Size: 0x4]
	int MaxRatSpawnpoints;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerSHPBSettings
	int StartMinSHPBNPCs;//[Offset: 0x0, Size: 0x4]
	int StartMaxSHPBNPCs;//[Offset: 0x4, Size: 0x4]
	int IntervalMinSHPBNPCs;//[Offset: 0x8, Size: 0x4]
	int IntervalMaxSHPBNPCs;//[Offset: 0xc, Size: 0x4]
	float MinSpawnInterval;//[Offset: 0x10, Size: 0x4]
	float MaxSpawnInterval;//[Offset: 0x14, Size: 0x4]
	float LastIntervalSpawnMatchTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TigerHavenCapturePointSettings
	float TimeUntilEnableCapturePoint;//[Offset: 0x0, Size: 0x4]
	float TimeUntilRevealEveryoneAndSpeedupCapturePercentages;//[Offset: 0x4, Size: 0x4]
	float CaptureSpeedPercentageIncreasePerSecondWhenEveryoneIsRevealed;//[Offset: 0x8, Size: 0x4]
	float MaxCaptureSpeedPercentagePerSecondWhenEveryoneIsRevealed;//[Offset: 0xc, Size: 0x4]
	float CaptureTime;//[Offset: 0x10, Size: 0x4]
	float CapturePercentageIncreasePerSecond;//[Offset: 0x14, Size: 0x4]
	float FastDecrementPercentageDropPerSecond;//[Offset: 0x18, Size: 0x4]
	float SlowDecrementPercentageDropPerSecond;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: TigerBattleRoyalePlayerSpawnSettings
	float MinimumDistanceCentimetersBetweenGroups;//[Offset: 0x0, Size: 0x4]
	float DesiredDistanceCentimetersBetweenGroups;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerPreSpawnSettings
	int GroupSyncSettleTime;//[Offset: 0x0, Size: 0x4]
	int InitialArchetypeSelectCountDown;//[Offset: 0x4, Size: 0x4]
	int PostArchetypeSelectTime;//[Offset: 0x8, Size: 0x4]
	int PreSpawnSelectionTime;//[Offset: 0xc, Size: 0x4]
	int SpawnSelectionTime;//[Offset: 0x10, Size: 0x4]
	int TimeUntilAutomaticSpawnAssignment;//[Offset: 0x14, Size: 0x4]
	int PostSpawnSelectionTime;//[Offset: 0x18, Size: 0x4]
	int ArchetypeSelectTimePerPlayer;//[Offset: 0x1c, Size: 0x4]
	int TeamViewTime;//[Offset: 0x20, Size: 0x4]
	int FreeLookPreparationTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: TigerHighTierLootSettings
	SharkRandomDeviationInt NumberOfHighTierLootLocations;//[Offset: 0x0, Size: 0x8]
	TigerItemLootTable* HighTierLootTable;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: SharkRandomDeviationInt
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerWinConditions
	PrimaryAssetId[] SoftGameModeFeatureAssets;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerMatchScoreSettings
	DataTableRowHandle DamageScoreHandle;//[Offset: 0x0, Size: 0x10]
	DataTableRowHandle EliminationScoreHandle;//[Offset: 0x10, Size: 0x10]
	DataTableRowHandle CapturePointScoreHandle;//[Offset: 0x20, Size: 0x10]
	DataTableRowHandle AssistScoreHandle;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerElysiumGameMode.TigerGameMode.GameModeBase.Info.Actor.Object
	float TigerAutoRestartZLocation;//[Offset: 0xb18, Size: 0x4]
	void OnShowAdminMessages();// 0x14f5210
	void OnReloadAdminMessages();// 0x14f5120

--------------------------------
Class: TigerGameSession.GameSession.Info.Actor.Object

--------------------------------
Class: TigerElysiumGameSession.TigerGameSession.GameSession.Info.Actor.Object

--------------------------------
Class: TigerElysiumGameState.TigerGameState.GameStateBase.Info.Actor.Object
	bool PartyMaintenanceMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	int64 Checksum;//[Offset: 0x508, Size: 0x8]
	void Server_RequestStoreChecksum();// 0x14f5bf0
	void OnRep_PartyMaintenanceModeChanged();// 0x14f51d0
	void OnRep_Checksum(const int64 InOldChecksum);// 0x14f5140
	void Client_SendChecksum(int64 InChecksum);// 0x14f4800

--------------------------------
Class: TigerElysiumNpcBase.Actor.Object
	bool bAllowCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	SkeletalMeshComponent* BodyMesh;//[Offset: 0x238, Size: 0x8]
	SkeletalMeshComponent* HeadMesh;//[Offset: 0x240, Size: 0x8]
	SkeletalMeshComponent* HairMesh;//[Offset: 0x248, Size: 0x8]
	SkeletalMeshComponent* HoodieMesh;//[Offset: 0x250, Size: 0x8]
	TigerElysiumNpcData NpcData;//[Offset: 0x260, Size: 0x190]
	StaticMeshComponent* FirstPropSm;//[Offset: 0x3f0, Size: 0x8]
	SkeletalMeshComponent* FirstPropSk;//[Offset: 0x3f8, Size: 0x8]
	StaticMeshComponent* SecondPropSm;//[Offset: 0x400, Size: 0x8]
	SkeletalMeshComponent* SecondPropSk;//[Offset: 0x408, Size: 0x8]
	void LoadAssetsCompleted();// 0x197e4f0
	void LoadAssets();// 0x14f4f10
	void CreatePropFromNonActorAsset(out const TigerElysiumNpcProp InPropStructure);// 0x14f48d0

--------------------------------
Class: TigerElysiumNpcProp
	Object* PropAsset;//[Offset: 0x0, Size: 0x28]
	Transform LocalTransform;//[Offset: 0x30, Size: 0x30]
	FName AttachmentPoint;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TigerElysiumNpcData
	SkeletalMesh* BodyMesh;//[Offset: 0x0, Size: 0x28]
	SkeletalMesh* HeadMesh;//[Offset: 0x28, Size: 0x28]
	SkeletalMesh* HairMesh;//[Offset: 0x50, Size: 0x28]
	SkeletalMesh* HoodieMesh;//[Offset: 0x78, Size: 0x28]
	TigerElysiumNpcProp FirstPropAsset;//[Offset: 0xa0, Size: 0x70]
	TigerElysiumNpcProp SecondPropAsset;//[Offset: 0x110, Size: 0x70]
	TigerElysiumNpcAnimationData AnimationData;//[Offset: 0x180, Size: 0x10]

--------------------------------
Class: TigerElysiumNpcAnimationData
	AnimSequenceBase* AnimationToPlay;//[Offset: 0x0, Size: 0x8]
	float AnimationOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerElysiumPlayerState.TigerPlayerState.PlayerState.Info.Actor.Object
	delegate OnIsInPartyChanged;//[Offset: 0x9e8, Size: 0x10]
	delegate OnSelectedGameModeChanged;//[Offset: 0x9f8, Size: 0x10]
	delegate OnPartySizeChanged;//[Offset: 0xa08, Size: 0x10]
	delegate OnAppearanceChanged;//[Offset: 0xa18, Size: 0x10]
	bool bIsInParty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	int8 PartySize;//[Offset: 0xa29, Size: 0x1]
	bool bIsReadyForMatchmaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 0x1]
	delegate OnDisplayGroupNotReady;//[Offset: 0xa48, Size: 0x10]
	delegate OnGroupReadyStateChanged;//[Offset: 0xa58, Size: 0x10]
	delegate OnLocalPlayerReadyStateChanged;//[Offset: 0xa68, Size: 0x10]
	TigerGrimoireEntry* TrainingVideoGrimoireEntry;//[Offset: 0xa78, Size: 0x8]
	void TryInvitePlayerToGroup(TigerPlayerState* OtherPlayer);// 0x14f61d0
	void ToggleReadyState(out bool bOutNewReadyState);// 0x14f6120
	void TigerOnAppearanceChanged__DelegateSignature(enum InReason);// 0x197e4f0
	void SetSelectedGameMode(FString InSelectedGameModeId);// 0x14f5f90
	void SetReadyState(bool bInNewReadyState);// 0x14f5f00
	void Server_TryInvitePlayerToGroup(TigerPlayerState* OtherPlayer);// 0x14f5e40
	void Server_SetSelectedGameMode(FString InSelectedGameModeId);// 0x14f5d80
	void Server_SetPartySize(int8 InPartySize);// 0x14f5cd0
	void Server_SetJoinReadyState(bool bInIsReady);// 0x14f5c10
	void Server_PersistPlayerCardChanges();// 0x14f5ba0
	void Server_PersistCharacterChanges();// 0x14f5b50
	void Server_OnUnmatched();// 0x14f5b30
	void Server_OnMatched();// 0x14f5b10
	void Server_GetStoreCategories();// 0x14f5ac0
	void Server_EquipItem(const class TigerInventoryItemBase InItemPath, const class TigerInventoryItemBase InPotentialCombinedItemPath, const int InSlot);// 0x14f5940
	void Server_EquipCardItem(const class TigerInventoryItemBase InItemPath);// 0x14f5860
	void Server_DeclineInvitation(const TigerGroupInvitation GroupInvitation);// 0x14f57b0
	void Server_BlockedPlayerJoinedParty(TigerElysiumPlayerState* InBlockedPlayer);// 0x14f5720
	void Server_AddPlayerToGroup(const TigerPartyId InPartyId, bool bInAssignLeader);// 0x14f5610
	void Server_AcceptInvitation(const TigerGroupInvitation GroupInvitation);// 0x14f5560
	void RemoveBlockedPlayerFromGroup(TigerPlayerGroup* InGroup, TigerPlayerState* InPlayerState);// 0x14f5470
	void PartyMemberJoinedOrLeft(out const TigerPartyId InPartyId, FString InPlayerId);// 0x14f52e0
	void OnSelectedGameModeChanged__DelegateSignature(FString InSelectedGameModeId);// 0x197e4f0
	void OnRep_PartySize();// 0x14f51f0
	void OnPartySizeChanged__DelegateSignature(int InPartySize);// 0x197e4f0
	void OnNewPlayerCard(out const TigerPersistentPlayerCardData InCard);// 0x14f5080
	void OnNewCharacterAppearanceFromPreview(out const TigerPreviewerData InAppearance);// 0x14f4fd0
	void OnIsInPartyChanged__DelegateSignature(bool bInIsInParty);// 0x197e4f0
	void OnGroupReadyStateChanged__DelegateSignature(bool bInIsGroupReady);// 0x197e4f0
	void OnDisplayGroupNotReady__DelegateSignature();// 0x197e4f0
	void Multicast_OnAppearanceChanged(enum InReason);// 0x14f4f30
	void LeftPartyDelegate__DelegateSignature(out const TigerParty InParty);// 0x197e4f0
	void LeftParty(out const TigerParty InParty);// 0x14f4e20
	void JoinedPartyDelegate__DelegateSignature(out const TigerParty InParty);// 0x197e4f0
	void JoinedParty(out const TigerParty InParty);// 0x14f4d30
	bool IsFirstTimeMatchMaking();// 0x14f4c20
	int GetPartySize();// 0x14f4ad0
	void Client_ReceiveOutfitVendorCategories(const TigerClientCategoryDefinition[] ClientCategories);// 0x14f4730
	void Client_ReceiveGroupInvitation(const TigerGroupInvitation GroupInvitation, TigerPlayerState* Inviter);// 0x14f4650
	void Client_OnUnmatched();// 0x14f4630
	void Client_OnSelectedGameModeChanged(FString InSelectedGameModeId);// 0x14f4590
	void Client_OnMatched();// 0x14f4570
	void Client_OnGroupMemberReadyStateChanged(TigerElysiumPlayerState* InGroupMember, bool bInNewReadyState, bool bInIsEveryoneReady);// 0x14f4450
	void Client_LeavePartyDueToBlocked();// 0x14f4430
	void Client_DisplayWaitingForGroupUi();// 0x14f4410
	void Client_BlockedPlayerWasRemovedFromParty(bool bWasBlockedByMe);// 0x14f4380

--------------------------------
Class: TigerClientCategoryDefinition
	enum Category;//[Offset: 0x0, Size: 0x1]
	TigerClientItemDefinition[] AvailableItems;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerClientItemDefinition
	TigerItemId ItemId;//[Offset: 0x0, Size: 0x8]
	int Cost;//[Offset: 0x8, Size: 0x4]
	TigerItemId SoftCurrencyId;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerEmptyActorWithChild.Actor.Object
	ChildActorComponent* ChildActorComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TigerEngineSettings.DeveloperSettings.Object
	bool bVerifyGc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCreateGameInstanceGcCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float AcousticPortalAutoCloseDistance;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: TigerEnragedEffectActor.Actor.Object
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bHasDamageBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	bool bIsRegenerating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1]
	void OnRegenStopped();// 0x197e4f0
	void OnRegenStarted();// 0x197e4f0
	void OnEnragedDeactivated();// 0x197e4f0
	void OnEnragedActivated();// 0x197e4f0
	void OnDamageBuffRemoved();// 0x197e4f0
	void OnCharacterAction(const enum InAction);// 0x14f9b90
	void Multicast_RegenStopped();// 0x14c5b50
	void Multicast_RegenStarted();// 0xbc0f10
	void Multicast_EnragedDeactivated();// 0x14f9ae0
	void Multicast_EnragedActivated();// 0xce3100
	void Multicast_DamageBuffRemoved();// 0x14f9ac0
	TigerPlayer* GetPlayer();// 0x14f97d0

--------------------------------
Class: TigerEntityCheckpointActorSpawner.SceneComponent.ActorComponent.Object
	class Actor* ActorToSpawn;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: TigerEntityLeaderSpawner.TigerNPCInstantSpawner.TigerNPCSpawningBase.Actor.Object
	TigerBaseNPC* SpawnEntityLeader();// 0x197e4f0

--------------------------------
Class: TigerEntityCheckpointSupplyDropLocation.Actor.Object
	SceneComponent* SupplyRoot;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TigerNPCPointSpawner.TigerNPCSpawningBase.Actor.Object
	TigerNPCSpawningPoint[] SpawningPoints;//[Offset: 0x270, Size: 0x10]
	int MaxNPCsToSpawn;//[Offset: 0x280, Size: 0x4]
	int MinNPCsToSpawn;//[Offset: 0x284, Size: 0x4]
	int MaxNPCsToSpawnGroup;//[Offset: 0x288, Size: 0x4]
	int MinNPCsToSpawnGroup;//[Offset: 0x28c, Size: 0x4]

--------------------------------
Class: TigerNPCSpawningPoint
	TigerNPCAsset* NPCAsset;//[Offset: 0x0, Size: 0x8]
	Vector SpawnPoint;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: TigerEntityCheckpoint.TigerNPCPointSpawner.TigerNPCSpawningBase.Actor.Object
	TigerBaseNPC* EntityLeader;//[Offset: 0x298, Size: 0x8]
	Actor* SupplyDropLocation;//[Offset: 0x2a0, Size: 0x8]
	TigerSupplyDropConsumableAsset* SupplyDropConsumable;//[Offset: 0x2a8, Size: 0x8]
	class ActorComponent* SupplyDropComponent;//[Offset: 0x2b0, Size: 0x8]
	bool bIsAcknowledged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	void OnRep_Acknowledged(const bool bOldIsAcknowledged);// 0x14f9da0
	void MatchStateChanged(enum OldMatchState, enum NewMatchState);// 0x14f99f0

--------------------------------
Class: TigerEquipWheelWidget.TigerWheelWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	bool bEnableAnalogue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	void Populate(out const TigerInventoryItemBase*[] InItemArray, const int InMaxItemCount);// 0x14ffe20
	Vector2D GetRightAnalogueStick();// 0x14ff170

--------------------------------
Class: TigerCheatExperienceEvent.TigerExperienceEvent.Object

--------------------------------
Class: TigerExtendedGroupScoreComponent.ActorComponent.Object
	delegate OnScoreChanged;//[Offset: 0xb0, Size: 0x10]
	TigerExtendedGroupScore[] ExtendedGroupScores;//[Offset: 0xc0, Size: 0x10]
	void UpdatePlayerScoresForExtendedGroups(enum InRelativeExtendedGroup, out const delegate InDelegate);// 0x1500040
	void OnRep_ScoreChanged();// 0x14ffde0
	void Multicast_SetFinalGroupScores(const TigerExtendedGroupScore[] InFinalGroupScores);// 0x14ff8e0
	void HandlePlayerRecapDataUpdated(TigerMatchRecapComponent* InMatchRecapComponent, out const TigerRecapData InSyncData, out const TigerRecapData InData);// 0x14ff240
	int GetScoreOfRelativeExtendedGroup(enum InRelativeExtendedGroup);// 0x14ff1b0
	int GetIndexOfGroupBelongingToPlayer(const TigerPlayerState* InPlayerState);// 0x14ff0a0

--------------------------------
Class: TigerExtendedGroupScore
	int TotalScore;//[Offset: 0x0, Size: 0x4]
	FString ExtendedGroupId;//[Offset: 0x8, Size: 0x10]
	TigerScoreByPlayerId[] IndividualScores;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerScoreByPlayerId
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	int Score;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerEyewearAnimInstance.TigerAnimInstance.AnimInstance.Object
	Transform NoseTransform;//[Offset: 0x3c0, Size: 0x30]
	Transform EarRightTransform;//[Offset: 0x3f0, Size: 0x30]
	Transform EarLeftTransform;//[Offset: 0x420, Size: 0x30]

--------------------------------
Class: TigerFirstTimeArchetypeSelectionUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnPreloadingDone;//[Offset: 0x3c0, Size: 0x10]
	delegate OnSelectedArchetypeChanged;//[Offset: 0x3d0, Size: 0x10]
	FName CameraSocketName;//[Offset: 0x3e0, Size: 0x8]
	FName AnimationSequenceName;//[Offset: 0x3e8, Size: 0x8]
	AkAudioEvent* CharacterSelectedAudioEvent;//[Offset: 0x3f0, Size: 0x8]
	AkAudioEvent* CharacterHoveredAudioEvent;//[Offset: 0x3f8, Size: 0x8]
	AkAudioEvent* EnterElysiumAudioEvent;//[Offset: 0x400, Size: 0x8]
	enum DefaultSelectedArchetype;//[Offset: 0x408, Size: 0x1]
	class TigerPaperDoll* PaperDollClass;//[Offset: 0x410, Size: 0x28]
	class TigerPaperDoll* CachedPaperDollClass;//[Offset: 0x438, Size: 0x8]
	TigerPaperDoll* PaperDoll;//[Offset: 0x440, Size: 0x8]
	int SelectedAppearanceIndex;//[Offset: 0x448, Size: 0x4]
	enum SelectedArchetypeType;//[Offset: 0x44c, Size: 0x1]
	TigerPlayerClanData* CurrentClanData;//[Offset: 0x450, Size: 0x8]
	TigerCharacterAppearance[] ArchetypeApperances;//[Offset: 0x458, Size: 0x10]
	void PreviewArchetype(TigerPowerKit* InArchetypeData);// 0x1504990
	void OnStartGameNative();// 0x1504970
	void OnStartGame(TigerPersistentCharacterID InSelectedCharacterId);// 0x197e4f0
	void OnPreloadingDone__DelegateSignature();// 0x197e4f0
	void ArchetypeSelectionDelegate__DelegateSignature(TigerPowerKit* InArchetypeData, TigerCharacterAppearance InCharacterAppearance);// 0x197e4f0

--------------------------------
Class: TigerFriendService.Object

--------------------------------
Class: TigerFriendSubsystem.GameInstanceSubsystem.Subsystem.Object
	TigerFriend*[] Friends;//[Offset: 0x50, Size: 0x10]
	TigerFriendInvite*[] Invites;//[Offset: 0x60, Size: 0x10]
	enum ServiceStatus;//[Offset: 0x70, Size: 0x1]
	TigerPersistentPlayerID[] BlockedPlayers;//[Offset: 0x78, Size: 0x10]
	TigerPersistentPlayerID[] MutedPlayers;//[Offset: 0x88, Size: 0x10]
	TigerPresenceSubsystem* PresenceSubsystem;//[Offset: 0x188, Size: 0x8]
	FString FriendSubsystemType;//[Offset: 0x1a0, Size: 0x10]
	TigerFriendSubsystemImpl* Impl;//[Offset: 0x1b0, Size: 0x8]
	void TigerFriendSetServiceStatus(const enum InServiceStatus);// 0x1474b00
	void TigerFriendListFriends();// 0xb7a5a0
	void TigerDebugUnmutePlayer(FString InPlayerId);// 0x14c0250
	void TigerDebugUnblockPlayer(FString InPlayerId);// 0x14c0250
	void TigerDebugMutePlayer(FString InPlayerId);// 0x14c0250
	void TigerDebugBlockPlayer(FString InPlayerId);// 0x14c0250
	void SortFriends();// 0x1505200
	void SetPlayerMuteStatus(out const TigerPersistentPlayerID InPlayerId, bool bInMute);// 0x1505100
	void SendInvite(out const SharkUserId InInviteeSharkmobUserId, out const TigerPersistentPlayerID InInviteePlayerId);// 0x1504fe0
	void SendChatNotification(FString InRecipientPlayerId, FString InChatNotificationCommand);// 0x1504ee0
	void SearchPlayer(FString InUsername);// 0x1504c90
	void RemoveFriend(out const SharkUserId InFriendSharkmobUserId);// 0x1504ad0
	void RejectInvite(out const SharkUserId InFromSharkmobUserId);// 0x1504a20
	void OnPlayerToPlayerStatusChanged__DelegateSignature(out const TigerPersistentPlayerID InPlayerId, const bool bInBool);// 0x197e4f0
	void OnPlayersPresenceChange(out const TigerPlayerPresenceInfo[] InPlayersPresenceInfo);// 0x1504890
	void OnPlayerPresenceChange(out const TigerPlayerPresenceInfo InPlayerPresenceInfo);// 0x15047d0
	void LoadInvites();// 0x15047b0
	void LoadFriends();// 0x1504790
	bool IsMuted(out const TigerPersistentPlayerID InPlayerId);// 0x15046d0
	bool IsFriendOrInvited(out const SharkUserId InSharkmobUserId);// 0x1504610
	bool IsFriend(out const TigerPersistentPlayerID InPlayerId);// 0x1504550
	bool IsBlocked(out const TigerPersistentPlayerID InPlayerId);// 0x1504490
	int GetNumFriendsOnline();// 0x15041b0
	bool GetIsEnabled();// 0x1504140
	FText GetInvitesUnsupportedReason();// 0x15040a0
	enum GetInvitesLoadStatus();// 0x1504070
	enum GetFriendsLoadStatus();// 0x1504040
	TigerFriend* GetFriendByPersistentId(out const TigerPersistentPlayerID InPlayerId);// 0x1503f80
	FText GetDisabledReason();// 0x1503e60
	bool GetAreInvitesSupported();// 0x1503d50
	void AcceptInvite(const TigerFriendInvite* InInvite);// 0x1503ad0

--------------------------------
Class: TigerPresenceSubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnPlayerPresenceChange;//[Offset: 0x30, Size: 0x10]
	delegate OnPlayersPresenceChange;//[Offset: 0x40, Size: 0x10]
	TigerPresenceService* PresenceService;//[Offset: 0x50, Size: 0x8]
	int HeartbeatIntervalInSeconds;//[Offset: 0x58, Size: 0x4]
	void TigerOnPlayersPresenceChange__DelegateSignature(out const TigerPlayerPresenceInfo[] InPlayersPresenceInfo);// 0x197e4f0
	void TigerOnPlayerPresenceChange__DelegateSignature(out const TigerPlayerPresenceInfo InPlayerPresenceInfo);// 0x197e4f0
	void SetPlayerInformation(FString InPlayerLevel, FString InPlayerCard);// 0x15bb020
	void SetLocation(FString InLocation);// 0x15baf80
	void SetInterestedPlayers(out const FString[] InInterestedPlayerIds);// 0x15baeb0
	void Register(FString InLocation, out const FString[] InInterestedPlayerIds);// 0x15bad80
	TigerPlayerPresenceInfo[] GetInterestedPlayers();// 0x15ba380
	void DeRegister();// 0x15ba030

--------------------------------
Class: TigerPlayerPresenceInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString PlayerLocation;//[Offset: 0x10, Size: 0x10]
	bool bIsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: TigerFriendSubsystemImpl.Object

--------------------------------
Class: TigerFriendSubsystemMockImpl.TigerFriendSubsystemImpl.Object

--------------------------------
Class: TigerFriendSubsystemSharkmobImpl.TigerFriendSubsystemImpl.Object
	TigerFriendService* FriendService;//[Offset: 0x38, Size: 0x8]
	TigerGetSharkmobAccountIdsBatcher* GetSharkmobAccountIdsBatcher;//[Offset: 0x40, Size: 0x8]
	void TigerFriendReadPlatformFriends();// 0x150b3a0
	void TigerFriendGetUserInfo(FString InOpenId);// 0x150b300
	void TigerFriendForceReloadInvites();// 0x150b2e0
	void TigerFriendForceReloadFriends();// 0x150b2c0

--------------------------------
Class: TigerGetSharkmobAccountIdsBatcher.Object
	TigerFriendService* FriendService;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerGameActivitySubsystem.GameInstanceSubsystem.Subsystem.Object
	delegate OnSoloOrGroupGameActivityRequestedWhileStayingInElysium;//[Offset: 0x30, Size: 0x10]
	void SoloOrGroupGameActivityRequestedWhileStayingInElysium__DelegateSignature(enum InGameActivityType);// 0x197e4f0
	void HandleTutorialStarted();// 0x150aed0

--------------------------------
Class: TigerGameActivityStatics.BlueprintFunctionLibrary.Object
	static bool GetGameModeIdForActivity(const Object* InWorldContextObject, enum InGameActivityType, out FString OutGameModeId);// 0x150a810

--------------------------------
Class: TigerGameFlowStateBoot.TigerGameFlowState.BlueprintAsyncActionBase.Object
	delegate OnLaunchTutorial;//[Offset: 0x40, Size: 0x10]
	delegate OnEnterElysiumFirstTime;//[Offset: 0x50, Size: 0x10]
	delegate OnEnterElysium;//[Offset: 0x60, Size: 0x10]
	delegate OnPreloadingDone;//[Offset: 0x70, Size: 0x10]
	bool IsLandingPageEnabled();// 0x150b0b0
	bool IsIntroEnabled();// 0x150b060
	static TigerGameFlowStateBoot* EnterBoot(const Object* InWorldContextObject);// 0x150a110
	bool CommandlineSkipTutorial();// 0x1509d00
	bool CommandlineForceTutorial();// 0x1509cd0

--------------------------------
Class: TigerGameGCClusterSubSystem.GameInstanceSubsystem.Subsystem.Object
	Actor*[] CurrentActorsToProcess;//[Offset: 0x38, Size: 0x10]
	void FillClusterFromLevels();// 0x150a1a0

--------------------------------
Class: TigerGCClusterObject.Object

--------------------------------
Class: TigerGameSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	SoftObjectPath QuestCollection;//[Offset: 0x38, Size: 0x18]
	bool bEnableNpcSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float NpcLocationCorrectionInterval;//[Offset: 0x54, Size: 0x4]
	float ItemClusterSize;//[Offset: 0x58, Size: 0x4]
	float ItemClusterExtraReplicationRange;//[Offset: 0x5c, Size: 0x4]
	int BuildingSystemVersion;//[Offset: 0x60, Size: 0x4]
	int RoofSystemVersion;//[Offset: 0x64, Size: 0x4]
	int RoofSystemFreeTransformableVersion;//[Offset: 0x68, Size: 0x4]
	Vector SideVolumeExtents;//[Offset: 0x6c, Size: 0xc]
	float BelowSideMargin;//[Offset: 0x78, Size: 0x4]
	float BelowDepthMargin;//[Offset: 0x7c, Size: 0x4]
	float BelowVolumeHeight;//[Offset: 0x80, Size: 0x4]
	float ShallowBalconyDepth;//[Offset: 0x84, Size: 0x4]
	bool bEnableApartments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	class TigerBuildingWallPreviewer* BuildingWallPreviewerClass;//[Offset: 0x90, Size: 0x8]
	bool bEnableStatisticsGathering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableLandingPage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bEnableIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	SoftObjectPath TutorialLevel;//[Offset: 0xa0, Size: 0x18]
	SoftObjectPath TransferFromMatchLevel;//[Offset: 0xb8, Size: 0x18]
	class TigerClanCustomizationOptions* CustomizationOptions;//[Offset: 0xd0, Size: 0x28]
	TigerCustomizationRandomizerSet* BotCustomizationRandomizerSet;//[Offset: 0xf8, Size: 0x28]
	class TigerItemDatabase* ItemsDatabase;//[Offset: 0x120, Size: 0x28]
	class TigerGrimoireTree* GrimoireTree;//[Offset: 0x148, Size: 0x28]
	class TigerGrimoireSeasonDatabase* GrimoireSeasonDatabase;//[Offset: 0x170, Size: 0x28]
	TigerGrimoireEntry* TrainingVideoGrimoireEntry;//[Offset: 0x198, Size: 0x28]
	class TigerChallengeTypeDatabase* ChallengeDatabase;//[Offset: 0x1c0, Size: 0x28]
	class TigerWidget* LogPopUp;//[Offset: 0x1e8, Size: 0x28]
	SoftObjectPath MasteryChallenges;//[Offset: 0x210, Size: 0x18]
	SoftObjectPath TestChallenges;//[Offset: 0x228, Size: 0x18]
	SoftObjectPath MatchStatMedalRequirements;//[Offset: 0x240, Size: 0x18]
	SoftObjectPath RankConfig;//[Offset: 0x258, Size: 0x18]
	FString PromotionalPopupConfigUrl;//[Offset: 0x270, Size: 0x10]
	FString FavoriteConsumableAssetName;//[Offset: 0x280, Size: 0x10]
	<int,TigerCustomisedControlsPreset> CustomisedPresets;//[Offset: 0x290, Size: 0x50]
	int CurrentlyUsingPreset;//[Offset: 0x2e0, Size: 0x4]
	bool bEnableVirtualCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bEnableUIDPadNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	bool bEnableUIDPadAnalogueControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e6, Size: 0x1]
	Material* AssetStatusDoNotUseMaterial;//[Offset: 0x2e8, Size: 0x28]
	bool bLogNetworkMovementFlagsOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	Rotator SavedPlayerRotation;//[Offset: 0x314, Size: 0xc]
	Vector SavedPlayerLocation;//[Offset: 0x320, Size: 0xc]
	SoftObjectPath ArchetypePerkRewards;//[Offset: 0x330, Size: 0x18]
	bool bForceCollectibleLootDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	TigerChallengeTypeDatabase* GetChallengeDatabaseMutable();// 0x150a400

--------------------------------
Class: TigerItemDatabase.Object
	<FName,TigerItemDatabaseCategory> ItemsByCategory;//[Offset: 0x38, Size: 0x50]
	<TigerGenderClanKey,TigerCharacterPreset*> StartingPresets;//[Offset: 0x88, Size: 0x50]
	TigerCharacterCardData DefaultPlayerCard;//[Offset: 0xd8, Size: 0x78]
	<TigerItemId,TigerItemId> SubToCombinedItemMap;//[Offset: 0x150, Size: 0x50]
	void OnItemLoaded__DelegateSignature(TigerItemId ItemId, TigerInventoryItemBase* InventoryItem);// 0x197e4f0
	void LoadItemIdAsync(out const TigerItemId InItemId, out const delegate InDelegate);// 0x153b440
	class TigerInventoryItemBase GetItemPathFromCategory(out const TigerItemId InItemId, out const FName InCategory);// 0x153b070
	class TigerInventoryItemBase GetItemPath(out const TigerItemId InItemId);// 0x153af90
	TigerItemId GetItemIdFromPath(out const SoftObjectPath InObjectPath);// 0x153aed0
	TigerInventoryItemBase* GetItem(out const TigerItemId InItemId);// 0x153ae20

--------------------------------
Class: TigerItemDatabaseCategory
	TigerItemDatabaseCategoryEntry[] Items;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerItemDatabaseCategoryEntry
	UInt64Property ItemId;//[Size: 0x8]
	class TigerInventoryItemBase* ItemPath;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: TigerGenderClanKey
	enum Gender;//[Offset: 0x0, Size: 0x1]
	enum Clan;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TigerGrimoireTree.Object
	TigerGrimoireCategory*[] Categories;//[Offset: 0x28, Size: 0x10]
	TigerGrimoireCategory*[] CategoryAssets;//[Offset: 0x38, Size: 0x10]
	StringTable* LocalisationVisiblePsStringTable;//[Offset: 0x48, Size: 0x8]
	void SearchTreeByName(FString InSearch, out const delegate InOnCompleteDelegate);// 0x151b520
	void PopulateSearchMap();// 0x151b3d0
	void GetSubEntriesForEntryId(FString InEntryId, out bool OutIsPartial, out TigerGrimoireEntry*[] OutSubEntries);// 0x151b020
	void GetSubEntriesForEntry(const TigerGrimoireEntry* InEntry, out bool OutIsPartial, out TigerGrimoireEntry*[] OutSubEntries);// 0x151aee0
	TigerGrimoireEntry* GetEntry(FString InEntryId);// 0x151ad20
	TigerGrimoireCategory* GetCategoryForEntry(FString InEntryId);// 0x151ab40

--------------------------------
Class: TigerGrimoireSeasonDatabase.Object
	TigerGrimoireSeasonData*[] Seasons;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TigerGrimoireSeasonData.DataAsset.Object
	int SeasonId;//[Offset: 0x30, Size: 0x4]
	DateTime StartDate;//[Offset: 0x38, Size: 0x8]
	DateTime EndDate;//[Offset: 0x40, Size: 0x8]
	TigerGrimoireEntry*[] Entries;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: BP_G_Industrial_1W_01_C.TigerBuildingWallPreset.Object

--------------------------------
Class: TBP_BuildingWallPresetTester_C.TigerBuildingWallPreviewer.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	int SegmentsHorizontal;//[Offset: 0x238, Size: 0x4]
	int SegmentsVertical;//[Offset: 0x23c, Size: 0x4]
	void UserConstructionScript(float CurrentHighestPieceInSegment, float CurrentZOffset, float CurrentXOffset, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, TigerBuildingWallPreset* CallFunc_GetClassDefaultObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, StaticMesh* CallFunc_Array_Get_Item, StaticMesh* CallFunc_LoadObjectOfType_ReturnValue, int CallFunc_Array_Length_ReturnValue, StaticMeshSocket* CallFunc_FindSocket_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, StaticMeshSocket* CallFunc_FindSocket_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Box CallFunc_GetBoundingBox_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_FMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, const Transform Temp_struct_Variable, int Temp_int_Variable, StaticMeshComponent* CallFunc_AddComponent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x197e4f0

--------------------------------
Class: TigerGameModeDescriptorStatics.BlueprintFunctionLibrary.Object
	static void SetLastPlayedGameModeId(const Object* InWorldContextObject, FString InGameModeId);// 0x150f330
	static bool GetLastPlayedGameModeId(const Object* InWorldContextObject, out FString OutLastPlayedGameModeId);// 0x150e9c0
	static enum GetGameModeAvailability(const Object* InWorldContextObject, out const TigerGameModeDescriptor InGameModeDescriptor);// 0x150e870

--------------------------------
Class: TigerGameModeDescriptor
	FString ID;//[Offset: 0x0, Size: 0x10]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString Body;//[Offset: 0x20, Size: 0x10]
	FString TileUrl;//[Offset: 0x30, Size: 0x10]
	enum GroupMode;//[Offset: 0x40, Size: 0x1]
	DateTime ActiveStart;//[Offset: 0x48, Size: 0x8]
	DateTime ActiveEnd;//[Offset: 0x50, Size: 0x8]
	int MinPlayersInMatch;//[Offset: 0x58, Size: 0x4]
	int MaxPlayersInMatch;//[Offset: 0x5c, Size: 0x4]
	int64 PlayerLevelMin;//[Offset: 0x60, Size: 0x8]
	int64 PlayerLevelMax;//[Offset: 0x68, Size: 0x8]
	int GroupSize;//[Offset: 0x70, Size: 0x4]
	enum MatchMode;//[Offset: 0x74, Size: 0x1]
	bool bCrossplayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	TigerGameModeDescriptorBotfillingConfig BotfillingConfig;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerGameModeDescriptorBotfillingConfig
	bool AutofillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool RefillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float Difficulty;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerGameModeFeature.Object

--------------------------------
Class: TigerGameModeFeatureBundle.PrimaryDataAsset.DataAsset.Object
	class TigerGameModeFeature* GameModeFeatureClass;//[Offset: 0x30, Size: 0x28]
	TigerGameModeFeatureWidget[] WidgetClasses;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: TigerRespawnSettingsBundle.TigerGameModeFeatureBundle.PrimaryDataAsset.DataAsset.Object
	TigerRespawnFeatureSettings RespawnSettings;//[Offset: 0x68, Size: 0xe8]

--------------------------------
Class: TigerRespawnStatics.BlueprintFunctionLibrary.Object
	static bool IsScheduledForRespawnOrGhost(const TigerPlayer* InPlayer);// 0x150efc0
	static bool IsFirstTimePlayingWithRespawnFeature(const TigerPlayerController* InPlayerController);// 0x150ee60
	static bool HasInfiniteLives(const TigerPlayerController* InPlayerController);// 0x150edd0
	static TigerGameModeFeatureRespawn* GetFeatureComponentForPlayer(const TigerPlayerController* InPlayerController);// 0x150e7e0

--------------------------------
Class: TigerGameplayPerfBenchmarkController.TigerLocalAIControllerBase.AIController.Controller.Actor.Object
	void StartBehaviorTree(BehaviorTree* InBehaviorTree);// 0x1516bc0

--------------------------------
Class: TigerGameplayStatics.GameplayStatics.BlueprintFunctionLibrary.Object

--------------------------------
Class: TigerGameSingleton.Object
	<AnimSequence*,AnimMontage*> GeneratedMontages;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: TigerGameViewportClient.GameViewportClient.ScriptViewportClient.Object

--------------------------------
Class: TigerGeneralUserSettingsPS5.Object

--------------------------------
Class: TigerGhostCameraBehavior.TigerActiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x120, Size: 0x1]
	byte StretchDirection;//[Offset: 0x121, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x124, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x29d1e30
	void SetStretchDirection(byte InStretchDirection);// 0x29d1bd0
	void SetStretch(byte InStretch);// 0x29d1b50
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x29d1090

--------------------------------
Class: TransientScaleBox.ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: TigerGrimoireCard.Actor.Object
	StaticMeshComponent* Mesh;//[Offset: 0x228, Size: 0x8]
	Texture* FrontTexture;//[Offset: 0x230, Size: 0x8]
	Texture* BackfaceTextureDMNR;//[Offset: 0x238, Size: 0x8]
	bool bIsFloating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	void RestartFloatingAnimation();// 0x197e4f0
	void PlayFloatingAnimation();// 0x197e4f0
	int GenerateSeed(TigerGrimoireEntry* InEntry);// 0x151a860

--------------------------------
Class: TigerGrimoireLandingUi.TigerWidget.UserWidget.Widget.Visual.Object
	TigerGrimoireEntry*[] CachedUnlockedEntries;//[Offset: 0x290, Size: 0x10]
	TigerGrimoireEntry*[] CachedReadEntries;//[Offset: 0x2a0, Size: 0x10]
	TigerSuggestedArticlesData CachedSuggestedArticlesData;//[Offset: 0x2b0, Size: 0x18]
	void RemoveSuggestedEntry(const FString InEntryId);// 0x151b430
	TigerGrimoireEntry* GetRandomEntry();// 0x151aeb0
	void GetArticleEntries(out TigerGrimoireEntry* OutFeaturedEntry, out TigerGrimoireEntry*[] OutSuggestedEntries, out TigerGrimoireEntry*[] OutNewEntries);// 0x151a9e0

--------------------------------
Class: TigerGrimoireRichBlockDecorator.RichTextBlockDecorator.Object
	SlateBrush SummaryBackground;//[Offset: 0x28, Size: 0x88]
	TigerGrimoireUi* GrimoireUI;//[Offset: 0xb0, Size: 0x8]
	ButtonStyle ButtonStyle;//[Offset: 0xb8, Size: 0x278]
	TextBlockStyle UnlockedEntryTextStyle;//[Offset: 0x330, Size: 0x270]
	TextBlockStyle LockedEntryTextStyle;//[Offset: 0x5a0, Size: 0x270]

--------------------------------
Class: TigerGrimoireUi.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	bool bNotificationIdsSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	TigerModelViewerItem* GrimoireItem;//[Offset: 0x3c8, Size: 0x8]
	TigerGrimoireCard* GrimoireCard;//[Offset: 0x3d0, Size: 0x8]
	Actor* ModelCam;//[Offset: 0x3d8, Size: 0x8]
	Actor* CloseModelCam;//[Offset: 0x3e0, Size: 0x8]
	FName ItemRotationNodeTag;//[Offset: 0x3e8, Size: 0x8]
	FName CloseViewerCamName;//[Offset: 0x3f0, Size: 0x8]
	FName ViewerCamName;//[Offset: 0x3f8, Size: 0x8]
	FName ExaminablePropsLevelName;//[Offset: 0x400, Size: 0x8]
	Actor* ItemRotationNode;//[Offset: 0x408, Size: 0x8]
	FName LightingSubLevelName;//[Offset: 0x410, Size: 0x8]
	void TigerDelegate__DelegateSignature();// 0x197e4f0
	static void SortEntries(out const TigerGrimoireEntry*[] InGrimoireEntries, TigerPersistentPlayerState* InPersistentPlayerState, const enum InSortType, out TigerGrimoireEntry*[] OutSortedEntries);// 0x151b7d0
	static void SortCategories(out const TigerGrimoireCategory*[] InGrimoireCategories, TigerPersistentPlayerState* InPersistentPlayerState, const enum InSortType, out TigerGrimoireCategory*[] OutSortedCategories);// 0x151b640
	void SetupNotificationEntryIds();// 0x151b620
	void RefreshLanguageOnGrimoireProps();// 0x151b3f0
	void MarkAllEntriesAsRead();// 0x151b3b0
	void MarkAllCategoryEntriesAsRead(TigerGrimoireCategory* InCategory);// 0x151b320
	static void LoadMediaForGrimoireEntriesAsync(out const TigerGrimoireEntry*[] InGrimoireEntries, out const delegate OnLoadedDelegate);// 0x151b210
	void JumpToSubCategory(TigerGrimoireCategory* InSubCategory);// 0x197e4f0
	void JumpToEntry(FString InEntryId);// 0x197e4f0
	void JumpToCategory(TigerGrimoireCategory* InCategory);// 0x197e4f0
	static bool IsGrimoireEntryMediaLoaded(const TigerGrimoireEntry* InEntry);// 0x151b180
	Actor* GetFirstActorWithTag(Level* InLoadedLevel, out const FName InTag);// 0x151add0
	TigerGrimoireCategory* GetCategoryFromNewNotificationCategory(const enum InNewNotificationCategory);// 0x151abf0
	void FindGrimoireDisplayItems();// 0x151a820

--------------------------------
Class: TigerModelViewerItem.Actor.Object
	StaticMeshComponent* Mesh;//[Offset: 0x228, Size: 0x8]
	float DesiredScreenSize;//[Offset: 0x230, Size: 0x4]
	float CurrentScreenSize;//[Offset: 0x234, Size: 0x4]
	float GetCurrentScreenSize(out const Vector InOrigin, const float InDistance, out const Vector InViewOrigin, out const Matrix InProjectionMatrix);// 0x155e580

--------------------------------
Class: TigerGrimoireUnlockPickup.TigerInteractiveObject.Actor.Object
	StaticMeshComponent* PickupMesh;//[Offset: 0x2a0, Size: 0x8]
	TigerGrimoireEntry* EntryToUnlock;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: TigerGrimoireUnlockTriggerVolume.TriggerVolume.Volume.Brush.Actor.Object
	TigerGrimoireEntryTimeThreshold[] EntriesToUnlock;//[Offset: 0x260, Size: 0x10]
	FString LocationName;//[Offset: 0x270, Size: 0x10]
	void OnEndOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x151fbd0
	void OnBeginOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x151fae0
	void HandleOnRestartPlayer(Controller* InNewPlayer);// 0x151f620

--------------------------------
Class: TigerGrimoireEntryTimeThreshold
	TigerGrimoireEntry* Entry;//[Offset: 0x0, Size: 0x8]
	float TimeToSpend;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerGroupSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	TigerGroupSettingsData GroupSettingsData;//[Offset: 0x38, Size: 0x38]

--------------------------------
Class: TigerGroupSettingsData
	Texture2D* CompassMarkerTexture;//[Offset: 0x0, Size: 0x8]
	class UserWidget* MapMarkerWidgetType;//[Offset: 0x8, Size: 0x8]
	class TigerInWorldWidget* ExtendedGroupMemberWidgetClass;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xf0, Size: 0xa0]

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe8, Size: 0x98]

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	byte DefaultValue;//[Offset: 0x18, Size: 0x1]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	byte[] Values;//[Offset: 0x20, Size: 0x10]
	Enum* Enum;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xf0, Size: 0x4]
	MovieSceneFloatChannel Translation;//[Offset: 0xf8, Size: 0xa0]
	MovieSceneFloatChannel Rotation;//[Offset: 0x238, Size: 0xa0]
	MovieSceneFloatChannel Scale;//[Offset: 0x2d8, Size: 0xa0]
	MovieSceneFloatChannel Shear;//[Offset: 0x418, Size: 0xa0]

--------------------------------
Class: MovieScene2DTransformMask
	UInt32Property Mask;//[Size: 0x4]

--------------------------------
Class: TigerMapMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnMarkerUpdated;//[Offset: 0x280, Size: 0x10]
	bool bIsDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	int CustomZOrder;//[Offset: 0x298, Size: 0x4]
	int MarkerId;//[Offset: 0x29c, Size: 0x4]
	bool bIsOnMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool bShouldUseCustomZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	bool bStartHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1]
	TigerMapMarkerProxy* MapMarkerProxy;//[Offset: 0x2b4, Size: 0x8]
	float CurrentOpacity;//[Offset: 0x2bc, Size: 0x4]
	float FadeSpeed;//[Offset: 0x2c0, Size: 0x4]
	void Update();// 0x1549c60
	Vector2D ToCanvasSpace(const Vector2D ZeroToOneSpace);// 0x1549bc0
	void SetMapMarkerProxy(TigerMapMarkerProxy* Proxy);// 0x15498c0
	void SetIsOnMinimap(const bool bInIsOnMinimap);// 0x1549790
	void SetCanvasSize(const Vector2D ParentCanvasSize);// 0x1549610
	void OnUpdated();// 0x197e4f0
	void OnIsOnMinimapIsSet(const bool bInIsOnMinimap);// 0x197e4f0
	void HandleGameplaySettingsChanged(out const TigerGameplaySettings InGameplaySettings);// 0x1548fa0
	TigerMapGameData* GetMapGameData();// 0x1548cc0
	void FadeIn(float InDurationInSeconds);// 0x1548b40
	void CollapseUnseenIcons();// 0x1548b20

--------------------------------
Class: TBP_UI_MapMarker_C.TigerMapMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8, Size: 0x8]
	void Construct();// 0x197e4f0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x197e4f0
	void ExecuteUbergraph_TBP_UI_MapMarker(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x197e4f0

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: TBP_GroupMemberMapMarkerWidget_C.TBP_UI_MapMarker_C.TigerMapMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2d0, Size: 0x8]
	WidgetAnimation* OnRespawned;//[Offset: 0x2d8, Size: 0x8]
	WidgetAnimation* OnDeath;//[Offset: 0x2e0, Size: 0x8]
	Image* PlayerImageDead;//[Offset: 0x2e8, Size: 0x8]
	Image* PlayerImageGroup;//[Offset: 0x2f0, Size: 0x8]
	Image* PlayerImageGroupOutline;//[Offset: 0x2f8, Size: 0x8]
	Image* PlayerImageGroupShadow;//[Offset: 0x300, Size: 0x8]
	Image* PlayerImageTeam;//[Offset: 0x308, Size: 0x8]
	Image* PlayerImageTeamOutline;//[Offset: 0x310, Size: 0x8]
	Image* PlayerImageTeamShadow;//[Offset: 0x318, Size: 0x8]
	bool bIsExtendedGroupMember;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	TigerGroupMemberMarkerProxy* GroupMemberMarkerProxy;//[Offset: 0x328, Size: 0x8]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bShouldShowDeathIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	void UpdateDeathIcon(enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, TigerMapMarkerProxy* CallFunc_Show_ReturnValue, TigerMapMarkerProxy* CallFunc_Hide_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, WidgetAnimation* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_Select_Default, bool CallFunc_EqualEqual_BoolBool_ReturnValue);// 0x197e4f0
	void UpdateExtendedGroupMember(bool bNewIsExtendedGroupMember, bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D K2Node_Select_Default, bool CallFunc_IsExtendedGroupMember_bExtendedGroupMember, bool CallFunc_EqualEqual_BoolBool_ReturnValue);// 0x197e4f0
	void IsExtendedGroupMember(out bool bExtendedGroupMember, bool CallFunc_IsValid_ReturnValue);// 0x197e4f0
	void GetPlayerIndex(out byte PlayerIndex, TigerGroupMemberMarkerProxy* K2Node_DynamicCast_AsTiger_Group_Member_Marker_Proxy, bool K2Node_DynamicCast_bSuccess);// 0x197e4f0
	void OnUpdated();// 0x197e4f0
	void Construct();// 0x197e4f0
	void HandleMatchSettings();// 0x197e4f0
	void ExecuteUbergraph_TBP_GroupMemberMapMarkerWidget(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, byte CallFunc_GetPlayerIndex_PlayerIndex, LinearColor CallFunc_GetUIColor_LinearColor, LinearColor CallFunc_GetPlayerColorByIndex_Color, LinearColor K2Node_Select_Default, TigerGroupMemberMarkerProxy* K2Node_DynamicCast_AsTiger_Group_Member_Marker_Proxy, bool K2Node_DynamicCast_bSuccess, TigerMatchGameState* CallFunc_GetTigerMatchGameState_ReturnValue, const TigerMatchSettings CallFunc_GetMatchSettings_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x197e4f0

--------------------------------
Class: TigerGuardVolume.Actor.Object
	bool bTriggerThreatState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	ShapeComponent*[] Colliders;//[Offset: 0x230, Size: 0x10]
	void EndOverlappedActor(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x151f0c0
	void BeginOverlappedActor(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x151ec50

--------------------------------
Class: TigerHavenTriggerVolume.TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TigerHavenCapturePoint.Actor.Object
	FText PointActivatedText;//[Offset: 0x228, Size: 0x18]
	float HavenMarkerHeightOffset;//[Offset: 0x240, Size: 0x4]
	TigerHaven* AssignedHaven;//[Offset: 0x248, Size: 0x8]
	bool bRevealedEveryone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	void StatusChanged(enum Status);// 0x197e4f0
	void OnRep_RevealEveryone();// 0x15200f0
	void OnPlayerDeath(TigerPlayer* InDeadPlayer, Actor* InInstigator, bool bInWillRespawn);// 0x151fe40
	void OnOverlapEnd(Actor* OverlappedActor, Actor* OtherActor);// 0x151fd70
	void OnOverlapBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x151fca0
	void OnAssaultFinished();// 0x151fac0
	void Multicast_OnEnableCapturePoint();// 0xbc0f10
	void Multicast_OnCurrentCaptureeChanged(TigerPlayer* Capturee, enum Status, float AuthCurrentCaptureTime);// 0x151f9b0
	void HandleMatchSettingsSet();// 0x151f600

--------------------------------
Class: TigerHealingBuff.TigerBuff.Object
	float FlatHealPerSecond;//[Offset: 0x268, Size: 0x4]
	float PercentageHealPerSecond;//[Offset: 0x26c, Size: 0x4]
	class TigerCharacterEffect* HealEffect;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TigerHealingBuffInstance.TigerBuffInstance.Object
	TigerHealingBuff* BuffConfig;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: TigerHealthBarUI.UserWidget.Widget.Visual.Object
	delegate OnHealthChanged;//[Offset: 0x260, Size: 0x10]
	TigerCharacter* TigerCharacterOwner;//[Offset: 0x270, Size: 0x8]
	MaterialInstanceDynamic* HealthBarMaterial;//[Offset: 0x278, Size: 0x8]
	float LostHealthDelay;//[Offset: 0x280, Size: 0x4]
	float LostHealthBarSpeed;//[Offset: 0x284, Size: 0x4]
	float HealthAmountPerBar;//[Offset: 0x288, Size: 0x4]
	float WidthBetweenSegments;//[Offset: 0x28c, Size: 0x4]
	float LostHealthPercentage;//[Offset: 0x290, Size: 0x4]
	float DefaultHealthAmount;//[Offset: 0x2a4, Size: 0x4]
	void TigerDelegateHealthChanged__DelegateSignature(float InNewHealthPercentage);// 0x197e4f0
	void SetOwner(TigerCharacter* TigerCharacter);// 0x15203b0
	void OnSegmentEmptied(float HorizontalProgress);// 0x197e4f0
	void OnHealthLost();// 0x197e4f0
	float GetRecentDamageTaken();// 0x151f550
	float GetNumberOfBars();// 0x151f400
	float GetCurrentShield();// 0x151f330
	float GetCurrentMaxHealth();// 0x151f300
	float GetCurrentHealth();// 0x151f2d0

--------------------------------
Class: TigerHeatmapCollector.Object
	<TigerCharacter*,TigerCampingData> CampingData;//[Offset: 0xe8, Size: 0x50]
	TimerHandle CharacterMovementTimerHandle;//[Offset: 0x138, Size: 0x8]
	void RecordCharacterMovement();// 0x15201f0

--------------------------------
Class: TigerCampingData

--------------------------------
Class: TigerHeightenedSensesActor.Actor.Object

--------------------------------
Class: TigerHighTierLootComponent.ActorComponent.Object
	class TigerHighTierLootGroup* HighTierLootGroup;//[Offset: 0xb0, Size: 0x28]

--------------------------------
Class: TigerHitVerificationSettings.DeveloperSettings.Object
	bool bEnableVerification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float MaxEndPointDistance;//[Offset: 0x3c, Size: 0x4]
	float MaxStartingPointDistance;//[Offset: 0x40, Size: 0x4]
	float SkipSimulatePathDistanceSquared;//[Offset: 0x44, Size: 0x4]
	float MaxAngleDeviationFromPredictedPath;//[Offset: 0x48, Size: 0x4]
	float MaxDistanceFromProjectilePath;//[Offset: 0x4c, Size: 0x4]
	int MinPathCountForLOSSubdivideCheck;//[Offset: 0x50, Size: 0x4]
	int MinPathCountForComplexLOSCheck;//[Offset: 0x54, Size: 0x4]
	int MaxComplexLOSChecks;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: TigerHolyIncenseVolume.Actor.Object
	PrimitiveComponent* CachedCollision;//[Offset: 0x228, Size: 0x8]
	PrimitiveComponent* GetCollision();// 0x197e4f0

--------------------------------
Class: TigerHookingBuff.TigerBuff.Object

--------------------------------
Class: TigerHookedBuff.TigerBuff.Object

--------------------------------
Class: TigerHook.Actor.Object
	SphereComponent* HookTrigger;//[Offset: 0x228, Size: 0x8]
	Vector HookLocation;//[Offset: 0x230, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x23c, Size: 0xc]
	Vector StartLocation;//[Offset: 0x248, Size: 0xc]
	enum HookState;//[Offset: 0x254, Size: 0x1]
	TigerHookConfig* Config;//[Offset: 0x258, Size: 0x8]
	float CurrentThrowTime;//[Offset: 0x260, Size: 0x4]
	int HookingBuffID;//[Offset: 0x264, Size: 0x4]
	TigerCharacter* HitCharacter;//[Offset: 0x268, Size: 0x8]
	Vector PullBackStartAtLocation;//[Offset: 0x270, Size: 0xc]
	Vector PullBackStopAtLocation;//[Offset: 0x27c, Size: 0xc]
	float TimeUntilPulledBack;//[Offset: 0x288, Size: 0x4]
	float CurrentTimeLeftUntilPulledBack;//[Offset: 0x28c, Size: 0x4]
	float HitCharacterCameraRotateCurrentTime;//[Offset: 0x290, Size: 0x4]
	Rotator HitCharacterCameraRotationStart;//[Offset: 0x294, Size: 0xc]
	Rotator HitCharacterRotationStart;//[Offset: 0x2a0, Size: 0xc]
	Rotator HitCharacterCameraRotationEnd;//[Offset: 0x2ac, Size: 0xc]
	Vector OriginalVelocity;//[Offset: 0x2b8, Size: 0xc]
	float CharacterVelocityCutoffCurrentTime;//[Offset: 0x2c4, Size: 0x4]
	AnimMontage* ThrowMontage;//[Offset: 0x2c8, Size: 0x8]
	AnimMontage* ReelMontage;//[Offset: 0x2d0, Size: 0x8]
	TimerHandle PreReelTimerHandle;//[Offset: 0x2d8, Size: 0x8]
	void OnStartThrow();// 0x197e4f0
	void OnOwnerMovementUpdated(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x1524f80
	void OnNothingHit();// 0x197e4f0
	void OnNonCharacterHit(Actor* Actor);// 0x197e4f0
	void OnCharacterHit(TigerCharacter* Character);// 0x197e4f0
	void Multicast_StartThrow(const Vector InStartLocation, const Vector InTargetLocation);// 0x1524ea0
	void Multicast_OnHookNothingHit();// 0x14f9ac0
	void Multicast_OnHookNonCharacterHit(Actor* Actor);// 0x1524b20
	void Multicast_OnHookCharacterHit(Vector StopPullLocation, TigerCharacter* Character, float TimeUntilReturn, bool bCharacterAlive);// 0x15249b0
	void AuthHookBlockingHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1523500
	void AuthHookBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x15232d0

--------------------------------
Class: TigerHookConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	float MaxThrowDistance;//[Offset: 0x180, Size: 0x4]
	float StopPullDistance;//[Offset: 0x184, Size: 0x4]
	float TimeUntilReachMaxThrowDistance;//[Offset: 0x188, Size: 0x4]
	float TimeUntilReturn;//[Offset: 0x18c, Size: 0x4]
	float FastReelTime;//[Offset: 0x190, Size: 0x4]
	float RotateTime;//[Offset: 0x194, Size: 0x4]
	float TimeBeforeReel;//[Offset: 0x198, Size: 0x4]
	float TimeUntilCutoffVelocity;//[Offset: 0x19c, Size: 0x4]
	float TimeLeftWhenToAllowHookingPlayerActions;//[Offset: 0x1a0, Size: 0x4]
	float HookDamage;//[Offset: 0x1a4, Size: 0x4]
	float StunDurationPostHook;//[Offset: 0x1a8, Size: 0x4]
	class TigerHook* HookType;//[Offset: 0x1b0, Size: 0x8]
	class TigerHookedBuff* HookedBuffType;//[Offset: 0x1b8, Size: 0x8]
	class TigerHookingBuff* HookingBuffType;//[Offset: 0x1c0, Size: 0x8]
	AnimMontage* ThrowAnimation;//[Offset: 0x1c8, Size: 0x8]
	AnimMontage* ReelAnimation;//[Offset: 0x1d0, Size: 0x8]
	AnimMontage* AirThrowAnimation;//[Offset: 0x1d8, Size: 0x8]
	AnimMontage* AirReelAnimation;//[Offset: 0x1e0, Size: 0x8]
	AnimMontage* HookedReactionAnimation;//[Offset: 0x1e8, Size: 0x8]
	AnimMontage* HookedReelAnimation;//[Offset: 0x1f0, Size: 0x8]
	AnimMontage* HookedPostReelAnimation;//[Offset: 0x1f8, Size: 0x8]
	bool bUseForcedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]

--------------------------------
Class: TigerHorizontalArchetypeSelectorUI.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	TigerGameInstance* TigerGameInstance;//[Offset: 0x370, Size: 0x8]
	UserWidget* CreateWidgetForArchetype(enum InArchetypeType);// 0x197e4f0
	void CreateDivider();// 0x197e4f0
	void CreateArchetypeWidgetsForClan(TigerPlayerClanData* InClanData);// 0x197e4f0

--------------------------------
Class: TigerImageUI.TigerWidget.UserWidget.Widget.Visual.Object
	Image* GetImage();// 0x197e4f0

--------------------------------
Class: TigerInboxRewardSectionWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerItemId[] ParseRewardIdsFromString(FString inString);// 0x1529d10

--------------------------------
Class: TigerInboxUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerInboxMessage[] MessageList;//[Offset: 0x3c0, Size: 0x10]
	ReadIdsCache(UInt64Property)[] ReadIdsCache;//[Offset: 0x3d0, Size: 0x10]
	DeletedIdsCache(UInt64Property)[] DeletedIdsCache;//[Offset: 0x3e0, Size: 0x10]
	<MessageLookup_Key(UInt64Property),MessageLookup(UInt32Property)> MessageLookup;//[Offset: 0x3f0, Size: 0x50]
	bool bIsRefreshing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	void UpdateNotificationState();// 0x152ab10
	void SendStatusUpdatesToBackend();// 0x152a0c0
	void RebuildMessageLookup();// 0x1529e50
	void OnGetInboxSucceeded(out const TigerInbox InInbox);// 0x1529c00
	void OnGetInboxFailed(FString InErrorMessage);// 0x1529b60
	void OnFetchMessageInfoListComplete(bool InSuccess);// 0x197e4f0
	void MarkMessageRead(out const TigerInboxMessage InMessage);// 0x1529990
	void MarkMessageDeleted(out const TigerInboxMessage InMessage);// 0x15298a0
	bool IsStillLoggedIn();// 0x1529730
	void FetchMessages();// 0x1529570

--------------------------------
Class: TigerInboxMessage
	UInt64Property ID;//[Size: 0x8]
	enum Category;//[Offset: 0x8, Size: 0x1]
	FString Header;//[Offset: 0x10, Size: 0x10]
	enum Status;//[Offset: 0x20, Size: 0x1]
	DateTime ReceivedAt;//[Offset: 0x28, Size: 0x8]
	TigerInboxMessageBody Body;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerInboxMessageBody
	TigerInboxMessageSection[] Sections;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerInboxMessageSection
	enum Type;//[Offset: 0x0, Size: 0x1]
	FString Content;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerInbox
	int Page;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int TotalCount;//[Offset: 0x8, Size: 0x4]
	TigerInboxMessage[] Messages;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerIndoorComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: TigerIndoorVolume.TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TigerInGameGraphSettings.DeveloperSettings.Object
	bool bEnableNetGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: TigerInputIcon.TigerWidget.UserWidget.Widget.Visual.Object
	void SetIconFromKey(out const Key Key);// 0x197e4f0

--------------------------------
Class: TigerInputPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	FText PrefixText;//[Offset: 0x280, Size: 0x18]
	FText PostfixText;//[Offset: 0x298, Size: 0x18]
	bool bUseKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bUseAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	FName InputAction;//[Offset: 0x2b4, Size: 0x8]
	FName InputAxis;//[Offset: 0x2bc, Size: 0x8]
	Key InputKey;//[Offset: 0x2c8, Size: 0x18]
	bool bToggleVisibilityOnGamepadChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	void UpdateProperties(out const FText NewPrefixText, out const FText NewPostfixText, bool bNewUseKey, FName NewInputAction, FName NewInputAxis, Key NewInputKey);// 0x152ab30
	void UpdateInputKey(const Key NewInputKey);// 0x152aa30
	void UpdateInputAxis(const FName NewInputAxis);// 0x152a9a0
	void UpdateInputAction(const FName NewInputAction);// 0x152a910
	void UpdateIcon();// 0x197e4f0
	void ResetDirtyFlag();// 0x1529ff0
	void RegisterInputActionListener(out const delegate Delegate);// 0x1529e70
	bool IsDirty();// 0x15296d0

--------------------------------
Class: TigerInteractiveCollectible.TigerClientInteractiveObject.TigerInteractiveObject.Actor.Object
	TigerCollectibleData* Collectible;//[Offset: 0x2b0, Size: 0x8]
	StaticMeshComponent* CollectibleMesh;//[Offset: 0x2b8, Size: 0x8]
	AkAudioEvent* CollectibleSoundEffect;//[Offset: 0x2c0, Size: 0x8]
	ParticleSystemComponent* CollectibleParticleSystem;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: TigerInteractiveElevator.TigerInteractiveObject.Actor.Object
	Actor* ElevatorDestination;//[Offset: 0x2a0, Size: 0x8]
	Actor* ElevatorDestinationClanSpecific;//[Offset: 0x2a8, Size: 0x8]
	enum ElevatorDestinationClanType;//[Offset: 0x2b0, Size: 0x1]
	float TravelDelay;//[Offset: 0x2b4, Size: 0x4]
	bool bGunRangeElevator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	AkAudioEvent* ButtonPushedSound;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* ElevatorArriveSound;//[Offset: 0x2c8, Size: 0x8]
	AkAudioEvent* ElevatorTravelSound;//[Offset: 0x2d0, Size: 0x8]
	void OnClientStartTravelTimer();// 0x197e4f0
	void OnClientEndTravel();// 0x197e4f0

--------------------------------
Class: TigerInteractiveGrimoireProp.TigerInteractiveObject.Actor.Object
	StaticMeshComponent* ItemMesh;//[Offset: 0x2a0, Size: 0x8]
	TigerGrimoireEntry* EntryToUnlock;//[Offset: 0x2a8, Size: 0x8]
	class TigerIngameSubmenuWidget* GrimoireSubmenu;//[Offset: 0x2b0, Size: 0x8]
	byte CustomStencilGroup;//[Offset: 0x2b8, Size: 0x1]
	void OpenGrimoire();// 0x197e4f0
	void OnLanguageChanged();// 0x197e4f0
	bool IsDeactivated();// 0x152f990
	void DisableHighlight();// 0x197e4f0

--------------------------------
Class: TigerCollectibleItemAsset.TigerItemAsset.DataAsset.Object
	TigerCollectibleData* Collectible;//[Offset: 0x130, Size: 0x8]

--------------------------------
Class: TigerMultipleAmmoAsset.TigerItemAsset.DataAsset.Object
	<TigerAmmoAsset*,int> AmmoCount;//[Offset: 0x130, Size: 0x50]

--------------------------------
Class: TigerBodyArmorAsset.TigerItemAsset.DataAsset.Object
	int Durability;//[Offset: 0x130, Size: 0x4]
	TigerCharacterStatModification StatChanges;//[Offset: 0x134, Size: 0xa8]

--------------------------------
Class: TigerRelicAsset.TigerItemAsset.DataAsset.Object

--------------------------------
Class: TigerItemPreviewInputComponent.InputComponent.ActorComponent.Object
	float CameraSensitivityTurnMultiplier;//[Offset: 0x138, Size: 0x4]
	float CameraSensitivityTurnAtRateMultiplier;//[Offset: 0x13c, Size: 0x4]
	float CameraSensitivityVerticalMovementMultiplier;//[Offset: 0x140, Size: 0x4]
	TigerBattlepassRewardPreview* ItemActor;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: TigerItemSpawner.Actor.Object

--------------------------------
Class: TigerJoinSessionAsync.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailed;//[Offset: 0x40, Size: 0x10]
	static TigerJoinSessionAsync* JoinSession(const Object* WorldContextObject, PlayerController* PlayerController, out const TigerBpFindSessionSelectedSession FoundSession);// 0x153fe10

--------------------------------
Class: TigerJudgeAnimInstance.TigerAnimInstance.AnimInstance.Object
	class TigerJudgeBaseState* CurrentJudgeState;//[Offset: 0x3c0, Size: 0x8]
	class TigerJudgeBaseState* OldJudgeState;//[Offset: 0x3c8, Size: 0x8]
	void OnJudgeStateChanged();// 0x197e4f0
	TigerJudge* GetOwningJudge();// 0x153fd10

--------------------------------
Class: TigerJudgeSwingData.DataAsset.Object
	<FName,TigerJudgeSwingCollisionInfo> SwingCollisionInfos;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerJudgeSwingCollisionInfo
	TigerJudgeSwingCollisionInstant[] CollisionInstants;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerJudgeSwingCollisionInstant
	float TimeInSwing;//[Offset: 0x0, Size: 0x4]
	Vector SwordStartSweepLoc;//[Offset: 0x4, Size: 0xc]
	Vector SwordEndSweepLoc;//[Offset: 0x10, Size: 0xc]
	Quat SwordRot;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TigerJudgeBaseAttackState.TigerJudgeBaseState.Object
	TigerCharacter*[] HitCharacters;//[Offset: 0x60, Size: 0x10]
	float Cooldown;//[Offset: 0x70, Size: 0x4]
	float AttackFailSafeDuration;//[Offset: 0x74, Size: 0x4]
	float AttackMinRange;//[Offset: 0x78, Size: 0x4]
	float AttackMaxRange;//[Offset: 0x7c, Size: 0x4]
	bool bUseAttackRangeHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float MaxHeightDiff;//[Offset: 0x84, Size: 0x4]
	class TigerJudgeBaseState* PreviousState;//[Offset: 0x88, Size: 0x8]
	TigerJudgeSwingData* SwingData;//[Offset: 0x90, Size: 0x8]
	bool bJudgeSwordActiveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bIsCheckingAttackCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	Vector SwordHitBox;//[Offset: 0x9c, Size: 0xc]
	CurveFloat* SwordLengthCurve;//[Offset: 0xa8, Size: 0x8]
	void OnJudgeSwordActiveStatusChanged();// 0x197e4f0
	void OnCharactersHitWithSword(TigerCharacter* CharacterHitBySword);// 0x197e4f0
	bool IsOffCooldown();// 0x153fde0

--------------------------------
Class: TigerJudgeCombatState.TigerJudgeBaseState.Object
	class TigerJudgeBaseAttackState[] AttackTypes;//[Offset: 0x60, Size: 0x10]
	class TigerJudgeBaseAttackState[] AvailableAttacks;//[Offset: 0x70, Size: 0x10]
	float TimeWithoutSeeingBloodhuntedPlayers;//[Offset: 0x80, Size: 0x4]
	bool UpdateAvailableAttacks();// 0x15407a0
	void MoveToClosestBloodhuntedPlayer();// 0x15400d0
	bool IsAttackOffCooldown(const class TigerJudgeBaseAttackState StateType);// 0x153fd40
	TigerPlayer* GetClosestBloodhuntedPlayer();// 0x153fad0
	class TigerJudgeBaseAttackState[] GetApplicableAttacksForTarget(TigerPlayer* Player);// 0x153f9f0

--------------------------------
Class: TigerJudgeDownedState.TigerJudgeBaseState.Object

--------------------------------
Class: TigerJudgeFedOnState.TigerJudgeBaseState.Object
	float FeedingOffset;//[Offset: 0x60, Size: 0x4]
	FName FeedingAnimationName;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: TigerJudgePatrollingState.TigerJudgeBaseState.Object
	FName IndexKeyName;//[Offset: 0x60, Size: 0x8]
	FName WaypointKeyName;//[Offset: 0x68, Size: 0x8]
	FName DirectionKeyName;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: TigerKindredCharmEffectActor.Actor.Object
	float KindredCharmPercent;//[Offset: 0x228, Size: 0x4]
	void OnShouldDestroy(const bool bInIsDedicatedServer);// 0x197e4f0
	void OnPercentChanged(const bool bInIsDedicatedServer);// 0x197e4f0
	void Multicast_ShouldDestroy();// 0x14c5b50
	void Multicast_SetKindredCharmPercent(const float InPercent);// 0x1540190

--------------------------------
Class: TigerKindredCharmWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void OnKindredCharmCountChanged(const int InNewCount);// 0x197e4f0

--------------------------------
Class: TigerLocalPlayer.LocalPlayer.Player.Object

--------------------------------
Class: TigerLockOnCameraBehavior.TigerActiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: TigerLoginQueueService.Object

--------------------------------
Class: TigerLootBoxSpawner.TigerLootSpawner.Actor.Object
	class TigerLootBox* LootBoxClass;//[Offset: 0x278, Size: 0x8]
	int MinimumNumberOfItems;//[Offset: 0x280, Size: 0x4]
	int MaximumNumberOfItems;//[Offset: 0x284, Size: 0x4]
	enum TelemetryIDSource;//[Offset: 0x28c, Size: 0x1]

--------------------------------
Class: TigerLootableVehicleDoorSpawner.TigerLootBoxSpawner.TigerLootSpawner.Actor.Object
	TigerVehicle* VehicleBody;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: TigerVehicle.TigerActivatedObject.TigerRebuildableActor.Actor.Object
	TigerLootableVehicleDoorSpawner* LootableDoorSpawner;//[Offset: 0x280, Size: 0x8]
	TigerLootContainer* LootContainer;//[Offset: 0x288, Size: 0x8]
	void ChangeLootableDoorActorClass(class TigerLootableVehicleDoorSpawner InClass);// 0x1623060

--------------------------------
Class: TigerLootContainer.TigerInteractiveObject.Actor.Object
	bool bDoorIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	TigerBlueprintLootComponent* LootSpawnerComponent;//[Offset: 0x2b0, Size: 0x8]
	TigerBlueprintLootComponent*[] LootSpawnerComponents;//[Offset: 0x2b8, Size: 0x10]
	void OnStoppedBeingClosestLootContainerInHeightenedSenses();// 0x197e4f0
	void OnBecameClosestLootContainerInHeightenedSenses();// 0x197e4f0

--------------------------------
Class: TigerLootBundleSpawner.Actor.Object
	bool bLooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	void OnRep_LootedValueChanged();// 0x1544b70
	void OnItemSpawned();// 0x197e4f0
	void OnAllItemsLooted();// 0x197e4f0

--------------------------------
Class: TigerLootDropComponent.ActorComponent.Object
	int DropChance;//[Offset: 0xb0, Size: 0x4]
	TigerLootItemType[] LootAssets;//[Offset: 0xb8, Size: 0x10]
	enum TelemetryIDSource;//[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: TigerLootItemType
	TigerItemAsset* LootAsset;//[Offset: 0x0, Size: 0x8]
	int AmmoCount;//[Offset: 0x8, Size: 0x4]
	int DropChanceWeight;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerMapIncenseLine.UserWidget.Widget.Visual.Object
	FName LineLengthParam;//[Offset: 0x260, Size: 0x8]
	void UpdateLinePosition(MaterialInstanceDynamic* InDynamicMaterial);// 0x1549d10
	void SetStartPos(const Vector2D InPos);// 0x1549a70
	void SetEndPos(const Vector2D InPos);// 0x1549710
	void SetActualEndPos(float InLineLengthCutoff, float InInterpSpeed, float InDeltaTime);// 0x1549460
	void ResetLinePosition(MaterialInstanceDynamic* InLineMaterial);// 0x15493d0
	Vector2D GetStartPos();// 0x1548f40
	Vector2D GetEndPos();// 0x1548c50
	void ExternalUpdateLinePosition();// 0x197e4f0
	void ExternalResetLinePosition();// 0x197e4f0

--------------------------------
Class: TigerMapMarkerOverlay.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnPlayerMarkerAdded;//[Offset: 0x280, Size: 0x10]
	TigerPlayerMarkerWidget* PlayerMarkerPtr;//[Offset: 0x290, Size: 0x8]
	void SetPlayerMarkerWidget(TigerPlayerMarkerWidget* InPlayerMarkerWidget);// 0x1549950
	TigerPlayerMarkerWidget* GetPlayerMarkerWidget();// 0x14ae230

--------------------------------
Class: TigerPlayerMarkerWidget.TigerMapMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void SetGroupPlayerIndex(byte InPlayerIndex);// 0x197e4f0
	void HandleSpectateeChanged(TigerPlayerState* InSpectatee, TigerPlayerState* InPreviousSpectatee);// 0x15b0b70
	void HandlePlayerStateCreated(TigerPlayerState* InPlayerState);// 0x15b0ae0
	void HandlePlayerPawnChanged(Pawn* InNewPawn);// 0x15b0a50

--------------------------------
Class: TigerMapUi.TigerWidget.UserWidget.Widget.Visual.Object
	FName GasOverlayWorldTimeSeconds;//[Offset: 0x280, Size: 0x8]
	FName GasOverlayWaveRevealTime;//[Offset: 0x288, Size: 0x8]
	TigerMapMarkerOverlay* MapMarkerOverlay;//[Offset: 0x290, Size: 0x8]
	void UpdateMapIncenseLine(TigerMapIncenseLine* InMapIncenceLineWidget, CanvasPanel* InMapCanvas, TigerMapMarkerOverlay* InMapMarkerOverlay);// 0x1549da0
	void UpdateGasOverlay(Image* InGasOverlayImage);// 0x1549c80
	void OnPlayerStateCreated(TigerPlayerState* inTigerPlayerState);// 0x15492b0
	void OnMasqueradeStateChanged(bool InIsMasqueradeBreached, enum InPlayerAction);// 0x197e4f0
	TigerMapInfo GetMapInfo();// 0x1548cf0

--------------------------------
Class: TigerMasqueradeMarker.TigerMapMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	float MarkerRadius;//[Offset: 0x2c8, Size: 0x4]
	void EventScaleToCurrentMap();// 0x197e4f0

--------------------------------
Class: TigerMasqueradeMarkerProxy.TigerMapMarkerProxy.Object
	bool bIsMarkingFriendlyOrLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float MarkerRadius;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: TigerMatchGameMode.TigerGameMode.GameModeBase.Info.Actor.Object
	delegate OnPlayerDeathEvent;//[Offset: 0xae0, Size: 0x10]
	delegate OnMatchSettingsAndWeponConfigSetEvent;//[Offset: 0xaf0, Size: 0x10]
	TigerSHPBCoordinator* SHPBCoordinator;//[Offset: 0xb50, Size: 0x8]
	TigerHeatmapCollector* HeatmapCollector;//[Offset: 0xb58, Size: 0x8]
	TigerConsequenceBroadcastCoordinator* ConsequenceBroadcastCoordinator;//[Offset: 0xb60, Size: 0x8]
	TigerReadyToPlayState[] ReadyToPlayStates;//[Offset: 0xb68, Size: 0x10]
	TigerMatchStateComponent* MatchStateManager;//[Offset: 0xbc0, Size: 0x8]
	TigerMatchWinConditionComponent* WinConditionComponent;//[Offset: 0xbc8, Size: 0x8]
	TigerMatchPlacementStrategy* PlacementStrategy;//[Offset: 0xbd0, Size: 0x8]
	TigerMatchGameModeReporter* MatchReporter;//[Offset: 0xbd8, Size: 0x8]
	class TigerBuffShieldBase* DefaultShieldBuff;//[Offset: 0xbe0, Size: 0x8]
	void StartReturnToElysiumSequence(TigerPlayerController* PlayerController);// 0x197e4f0
	void ShowEndScreenOnClients();// 0x154efb0
	void ShowDeathScreenOnClient(TigerPlayerController* InTigerPlayerController, int InInstigatorStateId, enum InKillerType);// 0x154eea0
	void ReportMatchResults(out const delegate Delegate);// 0x154ecf0
	void PlayerLeavingMatch(TigerPlayerController* InTigerPlayerController);// 0x154ec60
	void OnRegisterPlayerPlacement__DelegateSignature(TigerPlayerState* InPlayerState);// 0x197e4f0
	void OnPlayerDeathEvent__DelegateSignature(TigerPlayer* InDeadPlayer, Actor* InInstigator, bool bInWillRespawn);// 0x197e4f0
	void OnMatchStatsReceivedDelegate__DelegateSignature();// 0x197e4f0
	void OnMatchSettingsSetEvent__DelegateSignature();// 0x197e4f0
	TigerMatchStats GenerateMatchStatsForPlayer(TigerPlayerController* Player);// 0x154e080
	void ApplyGameModeSettings();// 0x154e060

--------------------------------
Class: TigerSHPBCoordinator.ActorComponent.Object
	TigerNPCAsset* SHPBNPCAsset;//[Offset: 0xb0, Size: 0x8]
	class TigerSHPBMarker* SHPBWorldMarker;//[Offset: 0xb8, Size: 0x8]
	FName WaypointKeyName;//[Offset: 0xc0, Size: 0x8]
	FName WaypointIndexKeyName;//[Offset: 0xc8, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	TigerNPC*[] ActiveSHPB;//[Offset: 0xd8, Size: 0x10]
	TigerSHPBSettings Settings;//[Offset: 0xe8, Size: 0x1c]
	TigerNPCInstantSpawner* SHPBSpawner;//[Offset: 0x108, Size: 0x8]
	TigerMatchGameMode* MatchGameMode;//[Offset: 0x110, Size: 0x8]
	TigerMatchGameState* MatchGameState;//[Offset: 0x118, Size: 0x8]
	void MatchStateChanged(enum OldMatchState, enum NewMatchState);// 0x15dfcd0

--------------------------------
Class: TigerReadyToPlayState
	TigerPlayerController* PlayerController;//[Offset: 0x0, Size: 0x8]
	bool bIsReadyToPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TigerMatchStateComponent.ActorComponent.Object
	TigerMatchGameMode* MatchGameMode;//[Offset: 0xb0, Size: 0x8]
	TigerMatchGameState* MatchGameState;//[Offset: 0xb8, Size: 0x8]
	TigerMatchWinConditionComponent* WinConditionComponent;//[Offset: 0xc0, Size: 0x8]
	void OnBalanceModeSet();// 0x1558ee0

--------------------------------
Class: TigerMatchWinConditionComponent.ActorComponent.Object
	TigerMatchWinCondition*[] ActiveWinConditions;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: TigerMatchWinCondition.TigerGameModeFeature.Object

--------------------------------
Class: TigerMatchPlacementStrategy.TigerGameModeFeature.Object

--------------------------------
Class: TigerMatchGameModeReporter.ActorComponent.Object

--------------------------------
Class: TigerMatchGameSession.TigerGameSession.GameSession.Info.Actor.Object

--------------------------------
Class: TigerMedalSettingsBundle.TigerGameModeFeatureBundle.PrimaryDataAsset.DataAsset.Object
	MatchMedalSettings MedalSettings;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: TigerMatchMedalPromptUi.TigerSimpleTextPrompt.TigerWidget.UserWidget.Widget.Visual.Object
	DataTable* MedalData;//[Offset: 0x2a8, Size: 0x8]
	FString MatchMedalName;//[Offset: 0x2b0, Size: 0x10]
	FString PlayerName;//[Offset: 0x2c0, Size: 0x10]
	enum PlatformType;//[Offset: 0x2d0, Size: 0x1]

--------------------------------
Class: TigerMatchPlacementStrategyBundle.TigerGameModeFeatureBundle.PrimaryDataAsset.DataAsset.Object
	TigerGameModeFeatureWidget WinScreenWidgetClass;//[Offset: 0x68, Size: 0x30]
	TigerGameModeFeatureWidget PlacementWidgetClass;//[Offset: 0x98, Size: 0x30]

--------------------------------
Class: TigerMatchPlacementStrategy_ExtendedGroupScore.TigerMatchPlacementStrategy.TigerGameModeFeature.Object
	TigerExtendedGroupScoreComponent* ScoreComponent;//[Offset: 0x30, Size: 0x8]
	void HandlePlayerLeftMatch(TigerPlayerState* InPlayerState);// 0x1553a90

--------------------------------
Class: TigerMatchPlacementStrategy_LastManStanding.TigerMatchPlacementStrategy.TigerGameModeFeature.Object
	TigerPlayerState*[] PlayersAtCapturePoint;//[Offset: 0x30, Size: 0x10]
	void HandlePlayerDeath(TigerPlayer* InDeadPlayer, Actor* InInstigator, bool bInWillRespawn);// 0x1553980

--------------------------------
Class: TigerMatchWinCondition_LastManStanding.TigerMatchWinCondition.TigerGameModeFeature.Object
	void HandleNumberOfPlayersChanged(int InNumPlayersAlive);// 0x1558860

--------------------------------
Class: TigerMatchWinCondition_ScoreTarget.TigerMatchWinCondition.TigerGameModeFeature.Object
	void HandlePreMatchStateChanged(TigerPreMatchStateInfo InPreMatchState);// 0x1558980
	void HandleNumberOfPlayersChanged(int InNumPlayersAlive);// 0x15588f0
	void HandleMatchStateChanged(enum InOldState, enum InNewState);// 0x1558790
	void HandleExtendedGroupScoreChanged(TigerExtendedGroupScoreComponent* InScoreComponent);// 0x1558700

--------------------------------
Class: TigerMatchWinCondition_TimeLimit.TigerMatchWinCondition.TigerGameModeFeature.Object

--------------------------------
Class: TigerMeleeCrosshairWidget.TigerWeaponCrosshairWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerMeleeWeaponComponent* OwnerMelee;//[Offset: 0x2b8, Size: 0x8]
	Image* CrosshairImage;//[Offset: 0x2c0, Size: 0x8]

--------------------------------
Class: TigerWeaponAnimInstance.AnimInstance.Object

--------------------------------
Class: TigerMeleeWeaponAnimInstance.TigerWeaponAnimInstance.AnimInstance.Object
	Vector LeftHandIkOffset;//[Offset: 0x2b8, Size: 0xc]
	Vector RootJointOffset;//[Offset: 0x2c4, Size: 0xc]
	enum BodyType;//[Offset: 0x2d0, Size: 0x1]
	bool bIsSecondaryWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	void OnPossibleMeshChange();// 0x197e4f0

--------------------------------
Class: TigerMemoryBenchmarkManager.GameInstanceSubsystem.Subsystem.Object
	void HandleOnPreMatchStateChanged(TigerPreMatchStateInfo InPreMatchState);// 0x155ef60

--------------------------------
Class: TigerMenuTransition.TigerWidget.UserWidget.Widget.Visual.Object
	void Transition(delegate InDelegate);// 0x155f250
	void StopTransition();// 0x155f230
	void StartTransitionAnimation();// 0x197e4f0
	void PerformTransition();// 0x155f1f0
	void OnPerformTransition();// 0x197e4f0

--------------------------------
Class: TigerMetaStoreCacheSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: TigerMetaStoreSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	FString LocalStoreConfigPath;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TigerMetaStoreUtilityBFL.BlueprintFunctionLibrary.Object
	static FString GetTotalPriceAsString(out const TigerMetaStoreEntry InStoreEntry);// 0x155ed90
	static void GetTotalPayloadPriceAsString(const TigerVendorComponent* InVendorComponent, out const TigerMetaStoreBuyPayloadElement[] InStoreBuyPayloadElements, out FString OutPrice, out bool bOutCouldGetTotalPrice);// 0x155ebf0
	static FString GetStoreEntryIdAsString(out const TigerMetaStoreEntry InStoreEntry);// 0x155eae0
	static FString GetQuantityAsString(out const TigerMetaStoreEntryItem InStoreEntryItem);// 0x155ea00
	static FString GetPremiumPriceAsString(out const TigerMetaStoreEntry InStoreEntry);// 0x155e8f0
	static int GetNumBoughtItems(out const TigerBuyStoreEntryResponsePayload InBuyResponse);// 0x155e830
	static FString GetDiscountAsString(out const TigerMetaStoreEntry InStoreEntry);// 0x155e720
	static FText GetCategory(out const TigerMetaStoreEntryCategory IMetaStoreEntryCategory);// 0x155e470
	static bool GetBoughtItemInfo(out const TigerBuyStoreEntryResponsePayload InBuyResponse, const int InItemIndex, out TigerItemId OutItemId, out FString OutItemQuantity);// 0x155e2c0
	static TigerMetaStoreBuyPayloadElement CreateStoreEntryBuyElement(out const TigerMetaStoreEntry InStoreEntry, const int InQuantity);// 0x155e190

--------------------------------
Class: TigerMetaStoreEntryCategory
	SharkRuntimeTextNetSerializer CategoryRuntimeLocalized;//[Offset: 0x0, Size: 0x30]
	int CategoryId;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SharkRuntimeTextNetSerializer
	FName TextKey;//[Offset: 0x0, Size: 0x8]
	SharkRuntimeTextLocalizationPair[] Localizations;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SharkRuntimeTextLocalizationPair
	FString Culture;//[Offset: 0x0, Size: 0x10]
	FString DisplayString;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TigerMiniMap.TigerWidget.UserWidget.Widget.Visual.Object
	TigerMapUi* MapUnderlay;//[Offset: 0x280, Size: 0x8]
	TigerMapUi* MapOverlay;//[Offset: 0x288, Size: 0x8]
	Widget*[] UnrotatedWidgets;//[Offset: 0x298, Size: 0x10]
	TigerMapMarkerWidget*[] VisibleMarkersThisFrame;//[Offset: 0x2a8, Size: 0x10]
	Widget* MinimapRootNative;//[Offset: 0x2b8, Size: 0x8]
	class UserWidget* GroupMemberWidgetClass;//[Offset: 0x2c0, Size: 0x8]
	void UpdatePlayerMarkerAlignmentAndMinimapSize();// 0x155f450
	void SetupMarkerUpdates();// 0x155f210
	void OnPlayerStateCreated(TigerPlayerState* inTigerPlayerState);// 0x155f140
	void OnMasqueradeStateChanged(bool InIsMasqueradeBreached, enum InPlayerAction);// 0x197e4f0
	void HandleGameplaySettingsChanged(out const TigerGameplaySettings InGameplaySettings);// 0x155eea0

--------------------------------
Class: TigerModularList.TigerWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: TigerMultiplayAgent.TigerDsBackendAgent.Object

--------------------------------
Class: TigerMultiplayRegionCache.GameInstanceSubsystem.Subsystem.Object
	float RefreshRegionsIntervalSeconds;//[Offset: 0x40, Size: 0x4]
	float MaxWaitTimeSecondsAfterRegionDetermination;//[Offset: 0x44, Size: 0x4]
	TigerRegionPingerSettings PingerSettings;//[Offset: 0x48, Size: 0x14]
	float MinimumMeasurementTime;//[Offset: 0x88, Size: 0x4]
	int DesiredMeasuredRegions;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: TigerRegionPingerSettings
	int PingNumSamples;//[Offset: 0x0, Size: 0x4]
	int NumPingsToDisregard;//[Offset: 0x4, Size: 0x4]
	float PingTimeoutSeconds;//[Offset: 0x8, Size: 0x4]
	int AllowedConsecutiveFailures;//[Offset: 0xc, Size: 0x4]
	float WaitSecondsOnUnreachable;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerMusicAsset.DataAsset.Object
	SoundCue* SoundCue;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerMusicVolume.Volume.Brush.Actor.Object
	TigerMusicAsset* MusicAsset;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: TigerNearbySoundCueComponent.ActorComponent.Object
	float DistanceToPlaySoundOnSquared;//[Offset: 0xb0, Size: 0x4]
	float DistanceToStopSoundOnSquared;//[Offset: 0xb4, Size: 0x4]
	AkAudioEvent* PlayEvent;//[Offset: 0xb8, Size: 0x8]
	AkAudioEvent* StopEvent;//[Offset: 0xc0, Size: 0x8]
	bool bDisableOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	TigerCharacter* CharacterOwner;//[Offset: 0xd0, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: TigerNearCameraFadeMaterialDb.DataAsset.Object
	<MaterialInterface*,MaterialInterface*> OriginalMaterialToFadingMaterialLut;//[Offset: 0x30, Size: 0x50]
	<MaterialInterface*,MaterialInterface*> FadingMaterialToOriginalMaterialLut;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: TigerNearCameraFadeSettings.DeveloperSettings.Object
	bool bEnableNearCameraFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	<FName,FName> CollisionProfileChangesWhenTogglingFade;//[Offset: 0x40, Size: 0x50]
	class TigerNearCameraFadeMaterialDb* MaterialDatabase;//[Offset: 0x90, Size: 0x8]
	float FadeLength;//[Offset: 0x98, Size: 0x4]
	TigerNearCameraFadeMaterialMasterData[] MasterMaterialDatas;//[Offset: 0xa0, Size: 0x10]
	TigerNearCameraFadeDebugData DebugData;//[Offset: 0xb0, Size: 0x28]

--------------------------------
Class: TigerNearCameraFadeMaterialMasterData
	MaterialInterface* MasterMaterial;//[Offset: 0x0, Size: 0x8]
	FName UseCameraDitherFadeName;//[Offset: 0x8, Size: 0x8]
	FName FadeLengthName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerNearCameraFadeDebugData
	bool bDebugNearCameraFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	MaterialInterface* NearCameraFadeDebugMaterial;//[Offset: 0x8, Size: 0x8]
	MaterialInterface* DebugVisualizationMaterialEnabled;//[Offset: 0x10, Size: 0x8]
	MaterialInterface* DebugVisualizationMaterialNoMaster;//[Offset: 0x18, Size: 0x8]
	MaterialInterface* DebugVisualizationMaterialNoSimpleCollision;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: DA_NearCameraFadeDb_C.TigerNearCameraFadeMaterialDb.DataAsset.Object

--------------------------------
Class: TigerNetInfoSubSystem.GameInstanceSubsystem.Subsystem.Object
	bool IsPublicIpv6Set();// 0x1563540
	bool IsPublicIpv4Set();// 0x1563510
	FString GetPublicIpv6();// 0x15632b0
	FString GetPublicIpv4();// 0x15631f0

--------------------------------
Class: TigerBestialTrailPart.SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: TigerBestialTrailVisualizer.Actor.Object
	TigerPlayerSavedLocation[] LocationHistory;//[Offset: 0x228, Size: 0x10]
	TigerGameState* GameState;//[Offset: 0x238, Size: 0x8]
	float SecondsUntilTimeStamp(const float Timestamp);// 0x1563f00
	float SecondsSinceTimeStamp(const float Timestamp);// 0x1563e60
	void ReceiveNewTrackingPoint(out const TigerPlayerSavedLocation NewLocation);// 0x197e4f0
	void ReceiveInitialTrackingPoints(out const TigerPlayerSavedLocation[] Locations, TigerPlayer* TrackedPlayer);// 0x197e4f0
	void BeginEndTracking();// 0x197e4f0

--------------------------------
Class: TigerTrackedBuffInstance.TigerBuffInstance.Object

--------------------------------
Class: TigerTrackedBuff.TigerBuff.Object

--------------------------------
Class: TigerNosferatuPassiveBestialConfig.TigerPassiveConfig.DataAsset.Object
	class TigerBestialTrailVisualizer* TrailVisualizationActor;//[Offset: 0x140, Size: 0x8]
	class TigerTrackedBuff* TrackedBuffType;//[Offset: 0x148, Size: 0x8]
	float RevealDistanceSquared;//[Offset: 0x150, Size: 0x4]
	float LoseDistanceSquared;//[Offset: 0x154, Size: 0x4]
	float[] RevealHealthThreshold;//[Offset: 0x158, Size: 0x10]
	float TrackingTimeSeconds;//[Offset: 0x168, Size: 0x4]
	bool bEnableTrackingFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]

--------------------------------
Class: TigerPassiveArchetypeLogic.TigerPassiveComponent.ActorComponent.Object
	TigerCharacterStatModification PowerLevelStatChanges;//[Offset: 0xc8, Size: 0xa8]
	void OnPowerLevelIncreased();// 0x197e4f0
	int GetPowerLevel();// 0x1577210

--------------------------------
Class: TigerNosferatuPassiveBestialLogic.TigerPassiveArchetypeLogic.TigerPassiveComponent.ActorComponent.Object
	<int,TigerTrackedPlayerData> RevealedPlayers;//[Offset: 0x178, Size: 0x50]
	TigerNosferatuPassiveBestialConfig* Config;//[Offset: 0x1c8, Size: 0x8]
	void NewTrackedLocation(TigerPlayer* InTrackedPlayer, out const Vector InNewLocation, const float InTimeStamp);// 0x1563c80
	bool CalculateIsWithinDistanceToTrail(const float InDistance);// 0x1562e10
	float CalculateDistanceToTrail();// 0x1562de0

--------------------------------
Class: TigerTrackedPlayerData
	PlayerState* PlayerState;//[Offset: 0x0, Size: 0x8]
	TigerBestialTrailVisualizer* Visualizer;//[Offset: 0x8, Size: 0x8]
	int TrackingBuffID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TigerNotificationsUIStacker.TigerWidget.UserWidget.Widget.Visual.Object
	DisplayedItemWidget[] ShownItemWidgets;//[Offset: 0x280, Size: 0x10]
	delegate OnItemHiding;//[Offset: 0x290, Size: 0x10]
	enum AnimationMethod;//[Offset: 0x2a0, Size: 0x1]
	int MaxDisplayedItems;//[Offset: 0x2a4, Size: 0x4]
	float ItemMargin;//[Offset: 0x2a8, Size: 0x4]
	float ItemDisplayTime;//[Offset: 0x2ac, Size: 0x4]
	float ItemMoveTime;//[Offset: 0x2b0, Size: 0x4]
	float ItemFadeOffsetX;//[Offset: 0x2b4, Size: 0x4]
	float ItemForceFadeTime;//[Offset: 0x2b8, Size: 0x4]
	UserWidget*[] WaitingItems;//[Offset: 0x2c0, Size: 0x10]
	UserWidget* ItemWidgetFadingIn;//[Offset: 0x2e0, Size: 0x8]
	UserWidget* ItemWidgetFadingOut;//[Offset: 0x2f0, Size: 0x8]
	void OnItemHiding__DelegateSignature();// 0x197e4f0
	bool HasAnyItems();// 0x1563480
	void ForceTopItemRemainingDisplayTime();// 0x15631a0
	void ForceItemRemainingDisplayTime(const UserWidget* InWidget);// 0x1563110
	void EnqueueItem(UserWidget* ItemWidget);// 0x1563080

--------------------------------
Class: DisplayedItemWidget
	UserWidget* Widget;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerNpcAnimInstance.TigerAnimInstance.AnimInstance.Object
	enum AnimationMode;//[Offset: 0x3c0, Size: 0x1]
	class TigerPropDummy* PropDummyClass;//[Offset: 0x3c8, Size: 0x8]
	bool bIsReadyToFireWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	float TimeAnimModeChanged;//[Offset: 0x3d4, Size: 0x4]
	bool bIsBurstFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	bool bIsBeingFedOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1]
	bool bCanSeeLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 0x1]
	bool bIsLookingAtLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3db, Size: 0x1]
	Vector AimDirection;//[Offset: 0x3dc, Size: 0xc]
	Vector StrafeDirection;//[Offset: 0x3e8, Size: 0xc]
	float LocalPlayerLookAtPitch;//[Offset: 0x3f4, Size: 0x4]
	float LocalPlayerLookAtYaw;//[Offset: 0x3f8, Size: 0x4]
	float LocalPlayerLookAtDistance;//[Offset: 0x3fc, Size: 0x4]
	float LocalPlayerLookAtActivationDistance;//[Offset: 0x400, Size: 0x4]
	float LocalPlayerLookAtDeactivationDistance;//[Offset: 0x404, Size: 0x4]
	SharkRandomDeviation LocalPlayerLookAtDuration;//[Offset: 0x408, Size: 0x8]
	SharkRandomDeviation LocalPlayerLookAtAgainCooldown;//[Offset: 0x410, Size: 0x8]
	float DeathDirection;//[Offset: 0x418, Size: 0x4]
	float ReactionCooldown;//[Offset: 0x41c, Size: 0x4]
	float TurnCooldownTime;//[Offset: 0x420, Size: 0x4]
	void UpdateSpeed();// 0x1567fa0
	void OnVisualAssetReceived(TigerNPCVisualAsset* VisualAsset);// 0x197e4f0
	void OnPropAssetReceivedEvent();// 0x197e4f0
	void OnNpcThreatStateChangedEvent(const enum OldThreatState, const enum NewThreatState);// 0x197e4f0
	void OnNpcReactionEvent(out const TigerNpcReactionEvent ReactionEvent);// 0x197e4f0
	void OnEntityEvent(const enum EntityEvent);// 0x197e4f0
	void OnBumpedByPlayerEvent(const TigerPlayer* InPlayer, out const Vector InDirectionToPlayer);// 0x197e4f0
	void OnAnimationModeChanged(const enum LastAnimationMode);// 0x197e4f0
	bool IsReactionOnCooldown();// 0x1567bc0
	bool IsFootIKEnabled();// 0x1567b90
	TigerAIController* GetTigerAIController();// 0x1567940
	TigerNPC* GetOwningNpc();// 0x1567870
	void DetachProps();// 0x1567850
	void AttachProps();// 0x15675b0

--------------------------------
Class: TigerNpcCapSpawner.TigerNPCSpawningBase.Actor.Object
	TigerAiSpawningCap* OwningSpawningCap;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TigerDroppedPropTrackerComponent.ActorComponent.Object

--------------------------------
Class: TigerNPCDetachedProp.StaticMeshActor.Actor.Object

--------------------------------
Class: TigerDialogueCondition_Clan.TigerDialogueCondition.Object
	enum ClanEquality;//[Offset: 0x30, Size: 0x1]
	enum ClanRequirement;//[Offset: 0x31, Size: 0x1]

--------------------------------
Class: TigerDialogueCondition_DialogueRead.TigerDialogueCondition.Object
	FString ListId;//[Offset: 0x30, Size: 0x10]
	FString DialogueId;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerDialogueCondition_FinishedCertainGame.TigerDialogueCondition.Object
	enum ModeFinished;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: TigerDialogueCondition_GrimoireEntry.TigerDialogueCondition.Object
	TigerGrimoireEntry* RequiredEntry;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerDialogueCondition_MatchCount.TigerDialogueCondition.Object
	int RequiredMatches;//[Offset: 0x30, Size: 0x4]
	enum MatchEquality;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: TigerDialogueCondition_MatchStats.TigerDialogueCondition.Object
	enum StatType;//[Offset: 0x30, Size: 0x1]
	enum StatEquality;//[Offset: 0x31, Size: 0x1]
	int StatValue;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: TigerDialogueCondition_Outfit.TigerDialogueCondition.Object
	enum OutfitRequirement;//[Offset: 0x30, Size: 0x1]
	enum Clan;//[Offset: 0x31, Size: 0x1]
	enum Gender;//[Offset: 0x32, Size: 0x1]
	FString OutfitAssetName;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TigerDialogueCondition_Quest.TigerDialogueCondition.Object
	enum Requirement;//[Offset: 0x30, Size: 0x1]
	TigerQuestIdentifier questIdToCheck;//[Offset: 0x38, Size: 0x40]
	bool bTestSpecificObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int ObjectiveSetIdToCheck;//[Offset: 0x7c, Size: 0x4]
	int ObjectiveIdToCheck;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: TigerDialogueCondition_SeasonLevel.TigerDialogueCondition.Object
	int RequiredSeasonLevel;//[Offset: 0x30, Size: 0x4]
	enum SeasonEquality;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: TigerNpcMovementRestrictionBounds.Actor.Object
	SplineComponent* InnerSpline;//[Offset: 0x228, Size: 0x8]
	SplineComponent* OuterSpline;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: TigerNPCSpawningSpline.TigerNPCSpawningBase.Actor.Object
	SplineComponent* Spline;//[Offset: 0x270, Size: 0x8]
	TigerNPCAsset* NPCAsset;//[Offset: 0x278, Size: 0x8]
	TigerAISplinePathData PathData;//[Offset: 0x280, Size: 0xa0]

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x110, Size: 0x120]
	SlateBrush BorderBrush;//[Offset: 0x230, Size: 0x88]
	SlateColor BorderColor;//[Offset: 0x2b8, Size: 0x28]
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float MaxHeight;//[Offset: 0x2e4, Size: 0x4]
	Margin HeaderPadding;//[Offset: 0x2e8, Size: 0x10]
	Margin AreaPadding;//[Offset: 0x2f8, Size: 0x10]
	delegate OnExpansionChanged;//[Offset: 0x308, Size: 0x10]
	Widget* HeaderContent;//[Offset: 0x318, Size: 0x8]
	Widget* BodyContent;//[Offset: 0x320, Size: 0x8]
	void SetIsExpanded_Animated(bool IsExpanded);// 0x29c39b0
	void SetIsExpanded(bool IsExpanded);// 0x29c3920
	bool GetIsExpanded();// 0x29c2ea0

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush ExpandedImage;//[Offset: 0x90, Size: 0x88]
	float RolloutAnimationSeconds;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: TigerOneWayExpandableArea.ExpandableArea.Widget.Visual.Object
	void CloseArea();// 0x156a980

--------------------------------
Class: TigerOnlineBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FString PartyIdToUserString(out const TigerPartyId InID);// 0x156b0f0
	static FString InviteIdToUserString(out const TigerInviteId InID);// 0x156b0f0
	static int GetMinimumAccountCreationAge();// 0x156ae70
	static FString GetAccountRecoverUrl();// 0x156acb0

--------------------------------
Class: TigerOnlineError.Object
	FText Message;//[Offset: 0x28, Size: 0x18]
	FText Title;//[Offset: 0x40, Size: 0x18]
	FString ErrorCodeString;//[Offset: 0x58, Size: 0x10]
	TigerOnlineErrorCode ErrorCode;//[Offset: 0x68, Size: 0xc]
	bool WasKicked();// 0x156c390
	bool WasBanned();// 0x156c360

--------------------------------
Class: TigerOnlineStatusSubsystem.GameInstanceSubsystem.Subsystem.Object
	TigerOnlineStatusMessages* OnlineStatusMessages;//[Offset: 0x58, Size: 0x8]
	void TigerTestOnlineError(const enum InCategory, const int InID);// 0x156c290
	void TigerCauseNetworkError(const int InID);// 0x14c0500
	void SetOnlineErrorAndGoToTitle(const TigerOnlineErrorCode InErrorCode, FString InDebugReason);// 0x156bec0
	void SetOnlineError(const TigerOnlineErrorCode InErrorCode, FString InDebugReason);// 0x156bdc0
	bool IsStatusOk();// 0x156b2b0
	float GetRetryDelaySeconds();// 0x156aed0
	TigerOnlineError* GetOnlineError();// 0x156aea0
	void ClearOnlineError();// 0x156a960

--------------------------------
Class: TigerOutfitVendorUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerVendorComponent* VendorComponent;//[Offset: 0x3c0, Size: 0x8]
	TigerVendorStoreCategory* CurrentCategory;//[Offset: 0x3c8, Size: 0x8]
	void OnCategoryItemsReceived(enum CategoryType, out const TigerVendorStoreCategoryItem[] CategoryItems);// 0x197e4f0
	void OnBuyItemResponseBP(out const class TigerInventoryItemBase ItemClassPath, FString ErrorMessage, int InventoryCount);// 0x197e4f0
	void OnBuyItemResponse(const bool bInSuccess, out const TigerItemId InItemId, FString InErrorMessage);// 0x156b3f0
	void GetStoreCategoriesResponse(enum CategoryType);// 0x156af00
	void FetchCategoryItems(enum CategoryType);// 0x156ac30
	TigerVendorStoreCategoryItem CreateStoreCategoryItemFromStoreEntry(out const TigerMetaStoreEntry InStoreEntry);// 0x156a9a0
	void BuyItem(out const TigerItemId InItemId, TigerItemId InSoftCurrencyId);// 0x156a880

--------------------------------
Class: TigerPaperDollAnimInstance.TigerAnimInstance.AnimInstance.Object
	FName DefaultSequenceName;//[Offset: 0x3c0, Size: 0x8]

--------------------------------
Class: TigerPassiveOverpower.TigerPassiveConfig.DataAsset.Object

--------------------------------
Class: TigerPassiveAdrenalineRushConfig.TigerPassiveConfig.DataAsset.Object
	class TigerBuffAdrenalineRush* OnEnemyWithinRadiusBuff;//[Offset: 0x140, Size: 0x8]
	float RadiusInUnits;//[Offset: 0x148, Size: 0x4]

--------------------------------
Class: TigerPassiveAdrenalineRushLogicComponent.TigerPassiveArchetypeLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveAdrenalineRushConfig* PassiveConfig;//[Offset: 0x178, Size: 0x8]

--------------------------------
Class: TigerPassiveAHuntForPleasure.TigerPassiveConfig.DataAsset.Object
	float MinEffectDistance;//[Offset: 0x140, Size: 0x4]
	float MaxEffectDistance;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: TigerPassiveCollectorConfig.TigerPassiveConfig.DataAsset.Object
	float CarryCapacityMultiplier;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: TigerPassiveColossalStrength.TigerPassiveConfig.DataAsset.Object
	float UnarmedDamageMultiplier;//[Offset: 0x140, Size: 0x4]

--------------------------------
Class: TigerPassiveEnragedConfig.TigerPassiveConfig.DataAsset.Object
	AnimMontage* ActivationMontage;//[Offset: 0x140, Size: 0x8]
	class TigerEnragedEffectActor* EffectActor;//[Offset: 0x148, Size: 0x8]
	float EffectActorDestructionDelay;//[Offset: 0x150, Size: 0x4]
	class TigerBuff* OnHitBuff;//[Offset: 0x158, Size: 0x8]
	float DisciplineDamageMultiplier;//[Offset: 0x160, Size: 0x4]
	float RegenSpeed;//[Offset: 0x164, Size: 0x4]
	float RegenDelay;//[Offset: 0x168, Size: 0x4]
	float HealthPercentThreshold;//[Offset: 0x16c, Size: 0x4]
	bool bUseBaseHealthPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bDamageMultiplierOneTimeUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]

--------------------------------
Class: TigerPassiveEnragedLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveEnragedConfig* Config;//[Offset: 0xc8, Size: 0x8]
	TigerEnragedEffectActor* EffectActor;//[Offset: 0xd0, Size: 0x8]
	bool IsEnraged();// 0x1577470

--------------------------------
Class: TigerPassiveEpsilonOneConfig.TigerPassiveConfig.DataAsset.Object
	AkAudioEvent* RevealedCharacterAudioEvent;//[Offset: 0x140, Size: 0x8]
	class TigerBuff* RevealDebuff;//[Offset: 0x148, Size: 0x8]
	float RevealDuration;//[Offset: 0x150, Size: 0x4]
	float RemoveRevealDistance;//[Offset: 0x154, Size: 0x4]

--------------------------------
Class: TigerPassiveEpsilonOneLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveEpsilonOneConfig* Config;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]
	<TigerPlayer*,float> TimerMap;//[Offset: 0xd8, Size: 0x50]
	void OnDamageDealt(float InDealtDamage, const DamageType* InDamageType, TigerCharacter* InDamagedCharacter);// 0x15777f0

--------------------------------
Class: TigerPassiveFinalActConfig.TigerPassiveConfig.DataAsset.Object

--------------------------------
Class: TigerPassiveFinalActLogic.TigerPassiveComponent.ActorComponent.Object

--------------------------------
Class: TigerPassiveHideousConfig.TigerPassiveConfig.DataAsset.Object
	float TimeUntilMasqueradeTicks;//[Offset: 0x140, Size: 0x4]
	float HideousReachDistance;//[Offset: 0x144, Size: 0x4]
	CurveFloat* ScaleCurve;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: TigerPassiveHideousLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveHideousConfig* Config;//[Offset: 0xc8, Size: 0x8]
	<TigerBaseNPC*,HideousTimingData> TimingData;//[Offset: 0xd0, Size: 0x50]
	TigerPlayer* Player;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: HideousTimingData

--------------------------------
Class: TigerPassiveKindredCharmConfig.TigerPassiveConfig.DataAsset.Object
	class TigerKindredCharmEffectActor* EffectActor;//[Offset: 0x140, Size: 0x8]
	FName EffectSocketR;//[Offset: 0x148, Size: 0x8]
	FName EffectSocketL;//[Offset: 0x150, Size: 0x8]
	float[] CharmCountCooldownSpeed;//[Offset: 0x158, Size: 0x10]
	int MaxCharmedCharacterCount;//[Offset: 0x168, Size: 0x4]
	class TigerBuffKindredCharm* CharmBuff;//[Offset: 0x170, Size: 0x8]
	float PlayerPulseRange;//[Offset: 0x178, Size: 0x4]
	float PlayerPulseInterval;//[Offset: 0x17c, Size: 0x4]
	float BuffDuration;//[Offset: 0x180, Size: 0x4]
	float NpcDamageBreakCharmRadius;//[Offset: 0x184, Size: 0x4]
	float NpcDamageBreakCharmThreshold;//[Offset: 0x188, Size: 0x4]
	float NpcDamageBreakCharmImmunityTime;//[Offset: 0x18c, Size: 0x4]
	float CharmedFeedingSpeedMultiplier;//[Offset: 0x190, Size: 0x4]

--------------------------------
Class: TigerPassiveKindredCharmLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveKindredCharmConfig* Config;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]
	TigerKindredCharmEffectActor* EffectActorR;//[Offset: 0xd8, Size: 0x8]
	TigerKindredCharmEffectActor* EffectActorL;//[Offset: 0xe0, Size: 0x8]
	int GetKindredCharmCount();// 0x14c6000

--------------------------------
Class: TigerPassiveMomentum.TigerPassiveConfig.DataAsset.Object

--------------------------------
Class: TigerPassiveMomentumLogicComponent.TigerPassiveComponent.ActorComponent.Object
	float CoolDownReduction;//[Offset: 0xc8, Size: 0x4]
	float PassiveCoolDown;//[Offset: 0xcc, Size: 0x4]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]
	float EndTime;//[Offset: 0xd8, Size: 0x4]
	bool bIsInCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]

--------------------------------
Class: TigerPassiveNightstalkerConfig.TigerPassiveConfig.DataAsset.Object
	float CrouchedTimeUntilUnseen;//[Offset: 0x140, Size: 0x4]
	float CrouchedTimePerAdditionalPowerLevel;//[Offset: 0x144, Size: 0x4]
	class TigerBuffUnseenPresence[] InvisibilityBuff;//[Offset: 0x148, Size: 0x10]
	TigerSightConfigProperties OverrideSightProperties;//[Offset: 0x158, Size: 0x1c]

--------------------------------
Class: TigerBuffUnseenPresence.TigerBuff.Object
	class TigerBuffUnseenPresenceInstance* BuffInstanceClass;//[Offset: 0x268, Size: 0x8]
	AkAudioEvent* NearbySound;//[Offset: 0x270, Size: 0x8]
	float NearbySoundPlayDistanceSquared;//[Offset: 0x278, Size: 0x4]

--------------------------------
Class: TigerBuffUnseenPresenceInstance.TigerBuffInstance.Object
	void UpdateInvisibilityMaterial(float DeltaTime, TigerPlayer* Player, MaterialInstanceDynamic* MaterialInstance);// 0x197e4f0

--------------------------------
Class: TigerPassiveNightstalkerLogic.TigerPassiveArchetypeLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveNightstalkerConfig* Config;//[Offset: 0x178, Size: 0x8]
	void OnCharacterAction(const enum Action);// 0x15776e0
	void OnBuffRemoved(TigerBuff* BuffType, int ID, float Duration);// 0x15775c0
	void OnBuffAdded(TigerBuff* BuffType, int ID, float Duration);// 0x15774a0

--------------------------------
Class: TigerPassivePerkNosferatuConfig.TigerPassiveConfig.DataAsset.Object
	class TigerBuff* VanishBuffOverride;//[Offset: 0x140, Size: 0x8]
	float DurationOverride;//[Offset: 0x148, Size: 0x4]
	float AttackDelayAfterBuffModifier;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: TigerPassivePerkAnimalistConfig.TigerPassivePerkNosferatuConfig.TigerPassiveConfig.DataAsset.Object
	class TigerFamiliarScoutPassive* PassiveClassOverride;//[Offset: 0x150, Size: 0x8]
	float ScoutLifetimeOverride;//[Offset: 0x158, Size: 0x4]
	float RevealDurationMultiplier;//[Offset: 0x15c, Size: 0x4]
	float ActiveScanRadiusMultiplier;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: TigerPassivePerkCrouchedConfig.TigerPassiveConfig.DataAsset.Object
	TigerCharacterStatModification CrouchedStatModification;//[Offset: 0x140, Size: 0xa8]

--------------------------------
Class: TigerPassivePerkCrouchedLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassivePerkCrouchedConfig* PassiveConfig;//[Offset: 0xc8, Size: 0x8]
	void OnCrouchStateUpdated(const bool bInIsCrouched);// 0x1577760

--------------------------------
Class: TigerPassivePerkTechnocratConfig.TigerPassivePerkNosferatuConfig.TigerPassiveConfig.DataAsset.Object
	class TigerBuffUnseenPresence* InvisibilityBuffOverride;//[Offset: 0x150, Size: 0x8]
	float CrouchedTimeUntilUnseenMultiplier;//[Offset: 0x158, Size: 0x4]
	float ExplosionDamageMultiplier;//[Offset: 0x15c, Size: 0x4]
	bool bDisableAreaTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]

--------------------------------
Class: TigerPassivePerkToreadorConfig.TigerPassiveConfig.DataAsset.Object
	float ProjectionSpeedMultiplier;//[Offset: 0x140, Size: 0x4]
	float ProjectionStoppedLifetimeMultiplier;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: TigerPassivePerkVentrueConfig.TigerPassiveConfig.DataAsset.Object
	class TigerBuff* BuffOverride;//[Offset: 0x140, Size: 0x8]

--------------------------------
Class: TigerPassiveUnbridledRageConfig.TigerPassiveConfig.DataAsset.Object
	float MinimumLoudnessMultiplier;//[Offset: 0x140, Size: 0x4]
	float MaximumLoudnessMultiplier;//[Offset: 0x144, Size: 0x4]

--------------------------------
Class: TigerPassiveUnbridledRageLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveUnbridledRageConfig* Config;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: TigerPassiveVentrueOneConfig.TigerPassiveConfig.DataAsset.Object
	class TigerBuff* Debuff;//[Offset: 0x140, Size: 0x8]
	float DebuffCylinderRadius;//[Offset: 0x148, Size: 0x4]
	float DebuffCooldown;//[Offset: 0x14c, Size: 0x4]
	bool bOnlyRemoveDebuffWhenOutsideRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]

--------------------------------
Class: TigerPassiveVentrueOneLogic.TigerPassiveComponent.ActorComponent.Object
	TigerPassiveVentrueOneConfig* Config;//[Offset: 0xc8, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xd0, Size: 0x8]
	TigerGameModeFeatureRespawn* RespawnFeature;//[Offset: 0xd8, Size: 0x8]
	CapsuleComponent* DebuffRadiusComponent;//[Offset: 0xe0, Size: 0x8]
	TigerCharacter*[] CharactersInDebuffRange;//[Offset: 0xe8, Size: 0x10]
	<TigerCharacter*,float> CharacterDebuffCooldown;//[Offset: 0xf8, Size: 0x50]
	void OnRespawnFinished();// 0x1577990
	void OnPlayerLifeStatusChanged(enum InNewLifeStatus);// 0x1577910
	void EndDebuffOverlappedRange(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex);// 0x1576ed0
	void BeginDebuffOverlappedRange(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex, bool bInFromSweep, out const HitResult InSweepResult);// 0x15769e0

--------------------------------
Class: TigerPassiveVoiceOfInspirationConfig.TigerPassiveConfig.DataAsset.Object

--------------------------------
Class: TigerPassiveVoiceOfInspirationLogic.TigerPassiveArchetypeLogic.TigerPassiveComponent.ActorComponent.Object
	class TigerBuff* ActiveBuff;//[Offset: 0x178, Size: 0x8]

--------------------------------
Class: TigerPerformanceIndicatorSettings.DeveloperSettings.Object
	bool bEnablePerformanceIndicators;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	TigerPerformanceIndicatorValues FPS;//[Offset: 0x3c, Size: 0x10]
	TigerPerformanceIndicatorValues ServerFPS;//[Offset: 0x4c, Size: 0x10]
	TigerPerformanceIndicatorValues Latency;//[Offset: 0x5c, Size: 0x10]
	TigerPerformanceIndicatorValues LatencyVariation;//[Offset: 0x6c, Size: 0x10]
	TigerPerformanceIndicatorValues PacketLoss;//[Offset: 0x7c, Size: 0x10]
	TigerPerformanceIndicatorValues PsoCompilation;//[Offset: 0x8c, Size: 0x10]

--------------------------------
Class: TigerPerformanceIndicatorValues
	float WarmupTimer;//[Offset: 0x0, Size: 0x4]
	float CooldownTimer;//[Offset: 0x4, Size: 0x4]
	float SevereValue;//[Offset: 0x8, Size: 0x4]
	float WarningValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerCharacterSlotExpansion.TigerInventoryItemBase.Object

--------------------------------
Class: TigerConsumableInventoryItemBase.TigerInventoryItemBase.Object
	int Count;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: TigerPremiumCurrencyPack.TigerConsumableInventoryItemBase.TigerInventoryItemBase.Object

--------------------------------
Class: TigerSeasonExpPack.TigerConsumableInventoryItemBase.TigerInventoryItemBase.Object
	int GetExpRewardAmount();// 0x1577030

--------------------------------
Class: TigerSeasonPlacementExpBoostPercentage.TigerConsumableInventoryItemBase.TigerInventoryItemBase.Object

--------------------------------
Class: TigerSeasonRankSkip.TigerConsumableInventoryItemBase.TigerInventoryItemBase.Object

--------------------------------
Class: TigerBattlepassItem.TigerInventoryItemBase.Object
	int SeasonId;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: TigerSoftCurrency.TigerInventoryItemBase.Object

--------------------------------
Class: TigerInventoryItemPack.TigerConsumableInventoryItemBase.TigerInventoryItemBase.Object
	TigerItemId ItemId;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: TigerServerCallbacks.Interface.Object
	void OnLoginSucceeded(out const TigerPersistentPlayerCharacter[] AvailableCharacters);// 0x197e4f0
	void OnLoginFailed(out const TigerLoginFailedInfo InLoginFailedInfo);// 0x197e4f0
	void OnLegalDocumentAcceptanceResult(out const enum[] InDocumentTypes);// 0x197e4f0
	void OnGetValidGameVersionResult(enum Result);// 0x197e4f0
	void OnGetUserPrivileges();// 0x197e4f0
	void OnCreateCharacterResult(out const TigerPersistentCharacterID CharacterId, bool bWasCharacterCreated);// 0x197e4f0
	void OnCharacterSelected();// 0x197e4f0

--------------------------------
Class: TigerLoginFailedInfo
	enum FailReason;//[Offset: 0x0, Size: 0x1]
	TigerBanInfo BanInfo;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: TigerBanInfo
	byte Reason;//[Offset: 0x0, Size: 0x1]
	FString EndsAt;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TigerStartingPassivesBundle.TigerGameModeFeatureBundle.PrimaryDataAsset.DataAsset.Object
	TigerPassiveConfig*[] StartingPassives;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: TigerPlayerMeshManager.TigerCharacterMeshManager.ActorComponent.Object
	TigerPlayerMeshMaterialData MaterialData;//[Offset: 0x1f0, Size: 0x10]
	TigerPlayerMeshMaterialData[] StaticMeshMaterialData;//[Offset: 0x2a0, Size: 0x10]
	TigerPlayerMeshMaterialData[] PoseableMeshMaterialData;//[Offset: 0x2b0, Size: 0x10]
	MaterialInterface* CurrentOverrideMaterial;//[Offset: 0x2c0, Size: 0x8]
	TigerPlayerMaterialOverrideCopyData[] ScalarParametersToCopy;//[Offset: 0x2d0, Size: 0x10]
	TigerPlayerMaterialOverrideCopyData[] VectorParametersToCopy;//[Offset: 0x2e0, Size: 0x10]
	void ResetMaterials();// 0x15b1290
	void OverrideMaterial(MaterialInterface* InMaterial, const float InTimeOutSeconds);// 0x15b11c0

--------------------------------
Class: TigerPlayerMeshMaterialData
	MaterialInterface*[] OriginalMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerPlayerMaterialOverrideCopyData
	enum BodyPart;//[Offset: 0x0, Size: 0x1]
	int MaterialIndex;//[Offset: 0x4, Size: 0x4]
	FName ParameterName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerPlayerAnimInstance.TigerAnimInstance.AnimInstance.Object
	AnimMontage* CurrentDownedMontage;//[Offset: 0x3c0, Size: 0x8]
	bool bSkipDownedTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	TigerHandIkWallTraceData HandIkTraceDataWhenWallHanging;//[Offset: 0x3cc, Size: 0x58]
	TigerAnimMetaData[] CurrentMontageMetaData;//[Offset: 0x428, Size: 0x10]
	AnimMetaData*[] CurrentAnimNodeMetaData;//[Offset: 0x438, Size: 0x10]
	AnimMetaData*[] CurrentMetaDataFromProxy;//[Offset: 0x448, Size: 0x10]
	CurveFloat* CurrentTurnStartCurve;//[Offset: 0x458, Size: 0x8]
	bool bIsEmoting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1]
	bool bIsClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x466, Size: 0x1]
	bool bIsLedgeGrabbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x467, Size: 0x1]
	bool bWasSprintingWhenStartingJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	float SprintMultiplier;//[Offset: 0x46c, Size: 0x4]
	float ClimbPitch;//[Offset: 0x470, Size: 0x4]
	bool bWasLastLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	bool bMeleeSwingRecoveryHasDisabledRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 0x1]
	bool bIsOnGroundDuringAerialAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 0x1]
	float Acceleration;//[Offset: 0x478, Size: 0x4]
	float FloorHeightSensitivty;//[Offset: 0x47c, Size: 0x4]
	bool bIsProbablyTouchingFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	bool bHasVanishBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x485, Size: 0x1]
	bool bIsInCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x486, Size: 0x1]
	bool bIsDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x487, Size: 0x1]
	bool bIsInWallJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bWallJumpIsAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	bool bWallJumpWasAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 0x1]
	enum ActiveMontageDisciplineType;//[Offset: 0x48b, Size: 0x1]
	bool bAllowRotationLerpDuringDisciplineMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	int CurrentJumpCount;//[Offset: 0x490, Size: 0x4]
	FName DownedMontageNames;//[Offset: 0x494, Size: 0x8]
	FName StaticEntryToDownedMontageName;//[Offset: 0x4b4, Size: 0x8]
	enum AirDashDirection;//[Offset: 0x4bc, Size: 0x1]
	enum WallJumpDirection;//[Offset: 0x4bd, Size: 0x1]
	enum WallJumpAnticipationDirection;//[Offset: 0x4be, Size: 0x1]
	float WallGrindRotationFromWallInDegrees;//[Offset: 0x4c0, Size: 0x4]
	float CameraRelativeWallJumpCosineAngle;//[Offset: 0x4c4, Size: 0x4]
	float WallJumpPlayerFacingYaw;//[Offset: 0x4c8, Size: 0x4]
	float AirDashAngleInDegrees;//[Offset: 0x4cc, Size: 0x4]
	enum WallJumpAnimationState;//[Offset: 0x4d0, Size: 0x1]
	bool bIsInTurnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	bool bTurnStartIsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d2, Size: 0x1]
	bool bAdjustClimbSpeedByAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d3, Size: 0x1]
	float SurfaceCompensationInterpSpeed;//[Offset: 0x4d4, Size: 0x4]
	float SurfaceCompensationPitch;//[Offset: 0x4d8, Size: 0x4]
	float SurfaceCompensationRoll;//[Offset: 0x4dc, Size: 0x4]
	int CurrentLodLevel;//[Offset: 0x4e0, Size: 0x4]
	bool bIsFeeding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1]
	float VelocityFrontBack;//[Offset: 0x4e8, Size: 0x4]
	float VelocityLeftRight;//[Offset: 0x4ec, Size: 0x4]
	float VelocityUpDown;//[Offset: 0x4f0, Size: 0x4]
	float DirectionHor;//[Offset: 0x4f4, Size: 0x4]
	float DirectionVer;//[Offset: 0x4f8, Size: 0x4]
	bool bIsStandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 0x1]
	bool bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 0x1]
	bool bIsMovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fe, Size: 0x1]
	bool bIsInLowVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ff, Size: 0x1]
	bool bIsInTurnStartMetaData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	bool bAllowSprintToRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	float TimeSinceLastPlayerInput;//[Offset: 0x504, Size: 0x4]
	float TimeSinceLastJump;//[Offset: 0x508, Size: 0x4]
	float SmoothSpeed;//[Offset: 0x50c, Size: 0x4]
	float SmoothSpeedSlow;//[Offset: 0x510, Size: 0x4]
	Rotator CurrentCameraWorldRotation;//[Offset: 0x514, Size: 0xc]
	Rotator CameraDeltaRotation;//[Offset: 0x52c, Size: 0xc]
	float SlideAngle;//[Offset: 0x538, Size: 0x4]
	float StartAngle;//[Offset: 0x53c, Size: 0x4]
	float CameraYawDeltaSlideSlow;//[Offset: 0x540, Size: 0x4]
	float RootBoneDeltaSmoother;//[Offset: 0x544, Size: 0x4]
	float YawDelta;//[Offset: 0x548, Size: 0x4]
	float YawDeltaSmooth;//[Offset: 0x54c, Size: 0x4]
	float LeanIntensityStrength;//[Offset: 0x55c, Size: 0x4]
	float LeanAngleMin;//[Offset: 0x560, Size: 0x4]
	float LeanAngleMax;//[Offset: 0x564, Size: 0x4]
	float ActivateVelocityLeanBlendFloat;//[Offset: 0x568, Size: 0x4]
	Vector CurrentPlayerIntendedVelocity;//[Offset: 0x56c, Size: 0xc]
	Vector StrafeLeanRootRotCurrent;//[Offset: 0x590, Size: 0xc]
	Vector StrafeLeanRootTransCurrent;//[Offset: 0x59c, Size: 0xc]
	Rotator StrafeLeanSpineCurrent;//[Offset: 0x5a8, Size: 0xc]
	Rotator StrafeLeanSpineCurrentThird;//[Offset: 0x5b4, Size: 0xc]
	Rotator StrafeLeanHeadCounterCurrent;//[Offset: 0x5c0, Size: 0xc]
	float SlidePitchInterpSpeed;//[Offset: 0x5cc, Size: 0x4]
	float SlideSurfacePitch;//[Offset: 0x5d0, Size: 0x4]
	bool bShouldUseFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 0x1]
	Vector MinLimitsStanding;//[Offset: 0x5d8, Size: 0xc]
	Vector MinLimitsCrouching;//[Offset: 0x5e4, Size: 0xc]
	Vector MaxLimitsStanding;//[Offset: 0x5f0, Size: 0xc]
	Vector MaxLimitsCrouching;//[Offset: 0x5fc, Size: 0xc]
	FName LeftFootBoneName;//[Offset: 0x638, Size: 0x8]
	FName RightFootBoneName;//[Offset: 0x640, Size: 0x8]
	float TraceLengthAboveFoot;//[Offset: 0x648, Size: 0x4]
	float TraceLengthBelowFoot;//[Offset: 0x64c, Size: 0x4]
	float TransformInterpSpeed;//[Offset: 0x650, Size: 0x4]
	float RotationInterpSpeed;//[Offset: 0x654, Size: 0x4]
	bool bShowTraces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	Vector LeftFootOffsetsTra;//[Offset: 0x65c, Size: 0xc]
	Rotator LeftFootOffsetsRot;//[Offset: 0x668, Size: 0xc]
	Vector RightFootOffsetsTra;//[Offset: 0x674, Size: 0xc]
	Rotator RightFootOffsetsRot;//[Offset: 0x680, Size: 0xc]
	Vector FootIKPelvisOffsetTra;//[Offset: 0x68c, Size: 0xc]
	int MaxLOD;//[Offset: 0x698, Size: 0x4]
	float LookAtIsInRangeThreshold;//[Offset: 0x69c, Size: 0x4]
	float LookAtIsNotInRangeThreshold;//[Offset: 0x6a0, Size: 0x4]
	float HorizontalLookAtLimit;//[Offset: 0x6a4, Size: 0x4]
	bool bShouldUseLookAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	float LookAtSpineOnOff;//[Offset: 0x6ac, Size: 0x4]
	bool bLookAtInRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	bool bLookAtRightSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 0x1]
	float LookAtVertical;//[Offset: 0x6b4, Size: 0x4]
	float LookAtHorizontal;//[Offset: 0x6b8, Size: 0x4]
	float LookAtHorizontalSlow;//[Offset: 0x6bc, Size: 0x4]
	Rotator LookAtSpineRotator;//[Offset: 0x6c0, Size: 0xc]
	Rotator LookAtHeadRotator;//[Offset: 0x6cc, Size: 0xc]
	float LookAtHeadTiltAmount;//[Offset: 0x6d8, Size: 0x4]
	bool bIsInMeleeSwing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 0x1]
	bool bIsAimingWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dd, Size: 0x1]
	bool bIsRotatingInPlaceDueToDiscipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6de, Size: 0x1]
	bool bIsHipFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6df, Size: 0x1]
	bool bIsUsingRangedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	bool bIsUsingMeleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]
	bool bAboutToCollideWithClimbableSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 0x1]
	float TimeUntilCollision;//[Offset: 0x6e4, Size: 0x4]
	float WallCollisionAngle;//[Offset: 0x6e8, Size: 0x4]
	Vector PlayerDesiredMovementDirection;//[Offset: 0x6ec, Size: 0xc]
	bool bHasMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	float TimeMoving;//[Offset: 0x6fc, Size: 0x4]
	bool bNewStartAnimationAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	bool bNewStopAnimationAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 0x1]
	Vector PlayerDesiredStartDirection;//[Offset: 0x704, Size: 0xc]
	float TurnStartAngle;//[Offset: 0x710, Size: 0x4]
	Rotator StartCameraWorldRotation;//[Offset: 0x714, Size: 0xc]
	Vector PlayerDesiredStopDirection;//[Offset: 0x720, Size: 0xc]
	Vector LastPlayerDesiredMovementDirection;//[Offset: 0x72c, Size: 0xc]
	bool bShouldPlaySoftStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1]
	bool bStopCrouchState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 0x1]
	bool bShouldLeaveStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73a, Size: 0x1]
	bool bStartCrouchState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73b, Size: 0x1]
	bool bIsStrafingBackwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 0x1]
	float StartAngleOffset;//[Offset: 0x740, Size: 0x4]
	float PlayerDesiredStartDirectionWhole90;//[Offset: 0x744, Size: 0x4]
	float PlayerDesiredStartDirectionRotOffsetDegree;//[Offset: 0x748, Size: 0x4]
	Rotator PlayerDesiredStartDirectionRotOffset;//[Offset: 0x74c, Size: 0xc]
	FName StrafeHipRotationCurveName;//[Offset: 0x758, Size: 0x8]
	float StrafeRotationOffset;//[Offset: 0x760, Size: 0x4]
	float StrafeBackwardsDirectionSmooth;//[Offset: 0x764, Size: 0x4]
	float StrafeForwardDirectionSmooth;//[Offset: 0x768, Size: 0x4]
	float StrafeBackwardsDirection;//[Offset: 0x76c, Size: 0x4]
	float StrafeForwardDirection;//[Offset: 0x770, Size: 0x4]
	bool bLegCrossClearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774, Size: 0x1]
	float StrafeStepFrequencyMod;//[Offset: 0x778, Size: 0x4]
	float ModifiedStrafePlayrate;//[Offset: 0x77c, Size: 0x4]
	float StrafeWalkRunBlend;//[Offset: 0x780, Size: 0x4]
	float WalkStrafePlayrate;//[Offset: 0x784, Size: 0x4]
	float WalkStrafeScaled;//[Offset: 0x788, Size: 0x4]
	float RunStrafePlayrate;//[Offset: 0x78c, Size: 0x4]
	float RunStrafeScaled;//[Offset: 0x790, Size: 0x4]
	float StepLengthModWalk;//[Offset: 0x794, Size: 0x4]
	float StepLengthModRun;//[Offset: 0x798, Size: 0x4]
	float StepLengthModWalkFwd;//[Offset: 0x79c, Size: 0x4]
	float StepLengthModRunFwd;//[Offset: 0x7a0, Size: 0x4]
	float StepLengthModWalkBwd;//[Offset: 0x7a4, Size: 0x4]
	float StepLengthModRunBwd;//[Offset: 0x7a8, Size: 0x4]
	bool bActivateNewStrafeScaler;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 0x1]
	float WalkSpeed;//[Offset: 0x7b0, Size: 0x4]
	float MinWalkSpeed;//[Offset: 0x7b4, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x7b8, Size: 0x4]
	float RunSpeed;//[Offset: 0x7bc, Size: 0x4]
	float MinRunSpeed;//[Offset: 0x7c0, Size: 0x4]
	float MaxRunSpeed;//[Offset: 0x7c4, Size: 0x4]
	Vector InAirLeaning;//[Offset: 0x7c8, Size: 0xc]
	float InAirLeaningHeightReverser;//[Offset: 0x7d4, Size: 0x4]
	float InAirJumpLean;//[Offset: 0x7d8, Size: 0x4]
	float FallVerticalValue;//[Offset: 0x7dc, Size: 0x4]
	float SprintAngleWide;//[Offset: 0x7e0, Size: 0x4]
	float SprintAngle;//[Offset: 0x7e4, Size: 0x4]
	float SprintAngleSlow;//[Offset: 0x7e8, Size: 0x4]
	float SprintAccelTimer;//[Offset: 0x7ec, Size: 0x4]
	bool bSprintTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 0x1]
	Vector FootIKPelvisOffsetTraCrouchSlope;//[Offset: 0x7f4, Size: 0xc]
	bool bFootIKPelvisOffsetTraCrouchSlopeActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	float CrouchSlopeHightOffset;//[Offset: 0x804, Size: 0x4]
	bool bRecentlyChangedSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	bool bRecentlyChangedSetSingleFrameCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x809, Size: 0x1]
	float CharacterDeltaYawSmoothWallSlide;//[Offset: 0x80c, Size: 0x4]
	bool bRotateL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 0x1]
	bool bRotateR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 0x1]
	float RotateInPlaceAlpha;//[Offset: 0x814, Size: 0x4]
	float RotateInPlacePlayRate;//[Offset: 0x818, Size: 0x4]
	enum[] RotateInPlacePowersArray;//[Offset: 0x820, Size: 0x10]
	Vector SoaringLeapLeaningPelvisTrans;//[Offset: 0x838, Size: 0xc]
	Rotator SoaringLeapLeaningPelvisRot;//[Offset: 0x844, Size: 0xc]
	Rotator SoaringLeapLeaningSpineRot;//[Offset: 0x850, Size: 0xc]
	Rotator SoaringLeapLeaningHeadRot;//[Offset: 0x85c, Size: 0xc]
	bool bIsBlinded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 0x1]
	float IsBlindedWeight;//[Offset: 0x86c, Size: 0x4]
	class Object* BlindingBuffClass;//[Offset: 0x870, Size: 0x8]
	FName PowerAOAlphaCurveName;//[Offset: 0x878, Size: 0x8]
	bool bIsAnyPowerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	float PowerAOAlpha;//[Offset: 0x884, Size: 0x4]
	bool bShouldReturnToDownedIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]
	FName RotateinPlaceLeftSequenceName;//[Offset: 0x8d8, Size: 0x8]
	FName RotateinPlaceRightSequenceName;//[Offset: 0x8e0, Size: 0x8]
	FName ToDownedSequenceName;//[Offset: 0x8e8, Size: 0x8]
	FName ToDownedFallSequenceName;//[Offset: 0x8f0, Size: 0x8]
	FName DownedLandSequenceName;//[Offset: 0x8f8, Size: 0x8]
	FName DownedHardLandSequenceName;//[Offset: 0x900, Size: 0x8]
	FName DownedIdleSequenceName;//[Offset: 0x908, Size: 0x8]
	FName AimSweepSequenceName;//[Offset: 0x910, Size: 0x8]
	FName HipSweepSequenceName;//[Offset: 0x918, Size: 0x8]
	FName SlideOutJumpAnimSequenceName;//[Offset: 0x920, Size: 0x8]
	FName JumpAnimSequenceName;//[Offset: 0x928, Size: 0x8]
	FName DoubleJumpAnimSequenceName;//[Offset: 0x930, Size: 0x8]
	FName JumpLeftAnimSequenceName;//[Offset: 0x938, Size: 0x8]
	FName CrouchIdleSequenceName;//[Offset: 0x940, Size: 0x8]
	FName IdlePoseSequenceName;//[Offset: 0x948, Size: 0x8]
	FName CrouchIdlePoseSequenceName;//[Offset: 0x950, Size: 0x8]
	FName InBlindedSequenceName;//[Offset: 0x958, Size: 0x8]
	FName IdleBlindedSequenceName;//[Offset: 0x960, Size: 0x8]
	FName OutBlindedSequenceName;//[Offset: 0x968, Size: 0x8]
	FName RunToSprintSequenceName;//[Offset: 0x970, Size: 0x8]
	FName SprintSequenceName;//[Offset: 0x978, Size: 0x8]
	FName WallJumpBackwardSequenceName;//[Offset: 0x980, Size: 0x8]
	FName HardLandSequenceName;//[Offset: 0x988, Size: 0x8]
	FName SlideSettleSequenceName;//[Offset: 0x990, Size: 0x8]
	FName SlideNoiseSequenceName;//[Offset: 0x998, Size: 0x8]
	FName WallSlideDetachFrontSequenceName;//[Offset: 0x9a0, Size: 0x8]
	FName WallSlideDetachLeftSequenceName;//[Offset: 0x9a8, Size: 0x8]
	FName WallSlideDetachRightSequenceName;//[Offset: 0x9b0, Size: 0x8]
	FName IdleSequenceName;//[Offset: 0x9b8, Size: 0x8]
	FName RecoilKickAdditiveSequenceName;//[Offset: 0x9c0, Size: 0x8]
	FName RecoilKickHipRightAdditiveSequenceName;//[Offset: 0x9c8, Size: 0x8]
	FName RecoilKickRightAdditiveSequenceName;//[Offset: 0x9d0, Size: 0x8]
	FName RecoilKickHipLeftAdditiveSequenceName;//[Offset: 0x9d8, Size: 0x8]
	FName RecoilKickLeftAdditiveSequqnceName;//[Offset: 0x9e0, Size: 0x8]
	FName RecoilShakeAdditiveSequenceName;//[Offset: 0x9e8, Size: 0x8]
	FName AimIdleADDSequenceName;//[Offset: 0x9f0, Size: 0x8]
	FName AimFallADDSequenceName;//[Offset: 0x9f8, Size: 0x8]
	FName AimLandAdditiveSequenceName;//[Offset: 0xa00, Size: 0x8]
	FName LandAdditiveSequenceName;//[Offset: 0xa08, Size: 0x8]
	FName LongFallLandAdditiveSequenceName;//[Offset: 0xa10, Size: 0x8]
	FName DeathEndSequenceName;//[Offset: 0xa18, Size: 0x8]
	FName DownedStopsBlendSpaceName;//[Offset: 0xa20, Size: 0x8]
	FName DownedLocomotionBlendSpaceName;//[Offset: 0xa28, Size: 0x8]
	FName StrafeAimAddForwardBlendSpaceName;//[Offset: 0xa30, Size: 0x8]
	FName StrafeAimAddBackwardBlendSpaceName;//[Offset: 0xa38, Size: 0x8]
	FName StrafeCrouchAimAddForwardBlendSpaceName;//[Offset: 0xa40, Size: 0x8]
	FName StrafeCrouchAimAddBackwardBlendSpaceName;//[Offset: 0xa48, Size: 0x8]
	FName StrafeStartsBlendSpaceName;//[Offset: 0xa50, Size: 0x8]
	FName StrafeStartsCrouchedBlendSpaceName;//[Offset: 0xa58, Size: 0x8]
	FName TurnStartsSet1BlendSpaceName;//[Offset: 0xa60, Size: 0x8]
	FName TurnStartsSet2BlendSpaceName;//[Offset: 0xa68, Size: 0x8]
	FName TurnStartsSet3BlendSpaceName;//[Offset: 0xa70, Size: 0x8]
	FName TurnStartsSet4BlendSpaceName;//[Offset: 0xa78, Size: 0x8]
	FName StrafeAddForwardBlendSpaceName;//[Offset: 0xa80, Size: 0x8]
	FName StrafeBaseForwardBlendSpaceName;//[Offset: 0xa88, Size: 0x8]
	FName StrafeAddBackwardBlendSpaceName;//[Offset: 0xa90, Size: 0x8]
	FName StrafeBaseBackwardBlendSpaceName;//[Offset: 0xa98, Size: 0x8]
	FName StrafeCrouchAddBackwardBlendSpaceName;//[Offset: 0xaa0, Size: 0x8]
	FName StrafeCrouchBaseBackwardBlendSpaceName;//[Offset: 0xaa8, Size: 0x8]
	FName StrafeCrouchAddForwardBlendSpaceName;//[Offset: 0xab0, Size: 0x8]
	FName StrafeBaseCrouchForwardBlendSpaceName;//[Offset: 0xab8, Size: 0x8]
	FName StrafeStopsBlendSpaceName;//[Offset: 0xac0, Size: 0x8]
	FName FallLoopBlendSpaceName;//[Offset: 0xac8, Size: 0x8]
	FName StrafeStopsCrouchBlendSpaceName;//[Offset: 0xad0, Size: 0x8]
	FName ClimbBlendSpace1DName;//[Offset: 0xad8, Size: 0x8]
	FName ClimbCurveBlendSpace1DName;//[Offset: 0xae0, Size: 0x8]
	FName ClimbStartBlendSpace1DName;//[Offset: 0xae8, Size: 0x8]
	FName ClimbStartCurveBlendSpace1DName;//[Offset: 0xaf0, Size: 0x8]
	FName WallJumpLeftForwardBlendSpace1DName;//[Offset: 0xaf8, Size: 0x8]
	FName WallJumpRightForwardBlendSpace1DName;//[Offset: 0xb00, Size: 0x8]
	FName WallJumpLeftBackwardBlendSpace1DName;//[Offset: 0xb08, Size: 0x8]
	FName WallJumpRightBackwardBlendSpace1DName;//[Offset: 0xb10, Size: 0x8]
	FName SlideSweepBlendSpace1DName;//[Offset: 0xb18, Size: 0x8]
	FName SlideSweepBackBlendSpace1DName;//[Offset: 0xb20, Size: 0x8]
	FName WeaponHipOffsetBlendSpace1DName;//[Offset: 0xb28, Size: 0x8]
	FName WeaponAimoffsetBlendSpace1DName;//[Offset: 0xb30, Size: 0x8]
	FName StrafeStartForwardLeftFootBlendSpace1DName;//[Offset: 0xb38, Size: 0x8]
	FName PowerAimOffsetBlendSpace1DName;//[Offset: 0xb40, Size: 0x8]
	BlendSpace1D* ClimbBlendSpace1D;//[Offset: 0xb48, Size: 0x8]
	BlendSpace1D* ClimbStartBlendSpace1D;//[Offset: 0xb50, Size: 0x8]
	BlendSpace1D* ClimbCurveBlendSpace1D;//[Offset: 0xb58, Size: 0x8]
	BlendSpace1D* SlideSweepBlendSpace1D;//[Offset: 0xb60, Size: 0x8]
	BlendSpace1D* SlideSweepBackBlendSpace1D;//[Offset: 0xb68, Size: 0x8]
	BlendSpace1D* ClimbStartCurveBlendSpace1D;//[Offset: 0xb70, Size: 0x8]
	BlendSpace1D* WallJumpRightForwardBlendSpace1D;//[Offset: 0xb78, Size: 0x8]
	BlendSpace1D* WallJumpRightBackwardBlendSpace1D;//[Offset: 0xb80, Size: 0x8]
	BlendSpace1D* WallJumpLeftBackwardBlendSpace1D;//[Offset: 0xb88, Size: 0x8]
	BlendSpace1D* WallJumpLeftForwardBlendSpace1D;//[Offset: 0xb90, Size: 0x8]
	BlendSpace1D* WeaponHipOffsetBlendSpace1D;//[Offset: 0xb98, Size: 0x8]
	BlendSpace1D* WeaponAimoffsetBlendSpace1D;//[Offset: 0xba0, Size: 0x8]
	BlendSpace1D* StrafeStartForwardLeftFootBlendSpace1D;//[Offset: 0xba8, Size: 0x8]
	BlendSpace1D* PowerAimOffsetBlendSpace1D;//[Offset: 0xbb0, Size: 0x8]
	BlendSpace* FallLoopBlendSpace;//[Offset: 0xbb8, Size: 0x8]
	BlendSpace* TurnStartsSet1BlendSpace;//[Offset: 0xbc0, Size: 0x8]
	BlendSpace* TurnStartsSet2BlendSpace;//[Offset: 0xbc8, Size: 0x8]
	BlendSpace* TurnStartsSet3BlendSpace;//[Offset: 0xbd0, Size: 0x8]
	BlendSpace* TurnStartsSet4BlendSpace;//[Offset: 0xbd8, Size: 0x8]
	BlendSpace* StrafeStartsBlendSpace;//[Offset: 0xbe0, Size: 0x8]
	BlendSpace* StrafeStopsBlendSpace;//[Offset: 0xbe8, Size: 0x8]
	BlendSpace* StrafeAddForwardBlendSpace;//[Offset: 0xbf0, Size: 0x8]
	BlendSpace* StrafeStopsCrouchBlendSpace;//[Offset: 0xbf8, Size: 0x8]
	BlendSpace* StrafeBaseForwardBlendSpace;//[Offset: 0xc00, Size: 0x8]
	BlendSpace* StrafeAddBackwardBlendSpace;//[Offset: 0xc08, Size: 0x8]
	BlendSpace* StrafeBaseBackwardBlendSpace;//[Offset: 0xc10, Size: 0x8]
	BlendSpace* StrafeAimAddForwardBlendSpace;//[Offset: 0xc18, Size: 0x8]
	BlendSpace* StrafeAimAddBackwardBlendSpace;//[Offset: 0xc20, Size: 0x8]
	BlendSpace* StrafeStartsCrouchedBlendSpace;//[Offset: 0xc28, Size: 0x8]
	BlendSpace* StrafeCrouchAddForwardBlendSpace;//[Offset: 0xc30, Size: 0x8]
	BlendSpace* StrafeBaseCrouchForwardBlendSpace;//[Offset: 0xc38, Size: 0x8]
	BlendSpace* StrafeCrouchAddBackwardBlendSpace;//[Offset: 0xc40, Size: 0x8]
	BlendSpace* StrafeCrouchBaseBackwardBlendSpace;//[Offset: 0xc48, Size: 0x8]
	BlendSpace* StrafeCrouchAimAddForwardBlendSpace;//[Offset: 0xc50, Size: 0x8]
	BlendSpace* StrafeCrouchAimAddBackwardBlendSpace;//[Offset: 0xc58, Size: 0x8]
	BlendSpace* DownedStopsBlendSpace;//[Offset: 0xc60, Size: 0x8]
	BlendSpace* DownedLocomotionStateBlendSpace;//[Offset: 0xc68, Size: 0x8]
	AnimSequence* HardLandSequence;//[Offset: 0xc70, Size: 0x8]
	AnimSequence* SlideSettleSequence;//[Offset: 0xc78, Size: 0x8]
	AnimSequence* SlideNoiseSequence;//[Offset: 0xc80, Size: 0x8]
	AnimSequence* DownedHardLandSequence;//[Offset: 0xc88, Size: 0x8]
	AnimSequence* DownedLandSequence;//[Offset: 0xc90, Size: 0x8]
	AnimSequence* ToDownedSequence;//[Offset: 0xc98, Size: 0x8]
	AnimSequence* DownedIdleSequence;//[Offset: 0xca0, Size: 0x8]
	AnimSequence* ToDownedFallSequence;//[Offset: 0xca8, Size: 0x8]
	AnimSequence* AimSweepSequence;//[Offset: 0xcb0, Size: 0x8]
	AnimSequence* HipSweepSequence;//[Offset: 0xcb8, Size: 0x8]
	AnimSequence* SlideOutJumpAnimSequence;//[Offset: 0xcc0, Size: 0x8]
	AnimSequence* JumpAnimSequence;//[Offset: 0xcc8, Size: 0x8]
	AnimSequence* DoubleJumpStateAnimSequence;//[Offset: 0xcd0, Size: 0x8]
	AnimSequence* JumpLeftAnimSequence;//[Offset: 0xcd8, Size: 0x8]
	AnimSequence* IdlePoseSequence;//[Offset: 0xce0, Size: 0x8]
	AnimSequence* CrouchIdleSequence;//[Offset: 0xce8, Size: 0x8]
	AnimSequence* CrouchIdlePoseSequence;//[Offset: 0xcf0, Size: 0x8]
	AnimSequence* InBlindedSequence;//[Offset: 0xcf8, Size: 0x8]
	AnimSequence* OutBlindedSequence;//[Offset: 0xd00, Size: 0x8]
	AnimSequence* IdleBlindedSequence;//[Offset: 0xd08, Size: 0x8]
	AnimSequence* SprintSequence;//[Offset: 0xd10, Size: 0x8]
	AnimSequence* RunToSprintSequence;//[Offset: 0xd18, Size: 0x8]
	AnimSequence* RotateInPlaceLeftSequence;//[Offset: 0xd20, Size: 0x8]
	AnimSequence* RotateInPlaceRightSequence;//[Offset: 0xd28, Size: 0x8]
	AnimSequence* WallJumpBackwardSequence;//[Offset: 0xd30, Size: 0x8]
	AnimSequence* WallSlideDetachFrontSequence;//[Offset: 0xd38, Size: 0x8]
	AnimSequence* WallSlideDetachRightSequence;//[Offset: 0xd40, Size: 0x8]
	AnimSequence* WallSlideDetachLeftSequence;//[Offset: 0xd48, Size: 0x8]
	AnimSequence* IdleSequence;//[Offset: 0xd50, Size: 0x8]
	AnimSequence* RecoilKickAdditiveSequence;//[Offset: 0xd58, Size: 0x8]
	AnimSequence* RecoilKickHipRightAdditiveSequence;//[Offset: 0xd60, Size: 0x8]
	AnimSequence* RecoilKickRightAdditiveSequence;//[Offset: 0xd68, Size: 0x8]
	AnimSequence* RecoilKickHipLeftAdditiveSequence;//[Offset: 0xd70, Size: 0x8]
	AnimSequence* RecoilKickLeftAdditiveSequqnce;//[Offset: 0xd78, Size: 0x8]
	AnimSequence* RecoilShakeAdditiveSequence;//[Offset: 0xd80, Size: 0x8]
	AnimSequence* AimIdleADDSequence;//[Offset: 0xd88, Size: 0x8]
	AnimSequence* AimFallADDSequence;//[Offset: 0xd90, Size: 0x8]
	AnimSequence* AimLandAdditiveSequence;//[Offset: 0xd98, Size: 0x8]
	AnimSequence* LandAdditiveSequence;//[Offset: 0xda0, Size: 0x8]
	AnimSequence* LongFallLandAdditiveSequence;//[Offset: 0xda8, Size: 0x8]
	AnimSequence* DeathEndSequence;//[Offset: 0xdb0, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xdb8, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0xdc0, Size: 0x8]
	bool bIsDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 0x1]
	bool bIsInElysium;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc9, Size: 0x1]
	bool bIsSimulatedProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdca, Size: 0x1]
	enum GroundedStatus;//[Offset: 0xdcb, Size: 0x1]
	enum PreviousGroundedStatus;//[Offset: 0xdcc, Size: 0x1]
	enum CurrentWallSlideWallSide;//[Offset: 0xdcd, Size: 0x1]
	enum PreviousWallSlideWallSide;//[Offset: 0xdce, Size: 0x1]
	Vector RightHandIKHandLocation;//[Offset: 0xdd0, Size: 0xc]
	float RightHandIKToWallDistance;//[Offset: 0xddc, Size: 0x4]
	bool bRightHandIKTraceSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 0x1]
	Vector LeftHandIKHandLocation;//[Offset: 0xde4, Size: 0xc]
	float LeftHandIKToWallDistance;//[Offset: 0xdf0, Size: 0x4]
	bool bLeftHandIKTraceSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf4, Size: 0x1]
	CurveFloat* WallGrindRemap;//[Offset: 0xdf8, Size: 0x8]
	TigerSlotAnimationAsDynamicMontageData AimAdditiveLandData;//[Offset: 0xe00, Size: 0x28]
	TigerSlotAnimationAsDynamicMontageData LandAdditiveData;//[Offset: 0xe28, Size: 0x28]
	TigerSlotAnimationAsDynamicMontageData LongFallLandAdditiveData;//[Offset: 0xe50, Size: 0x28]
	TigerWallSlideSideSpecificOffsets WallSlideRightHandIKZOffset;//[Offset: 0xe78, Size: 0xc]
	TigerWallSlideSideSpecificOffsets WallSlideLeftHandIKZOffset;//[Offset: 0xe84, Size: 0xc]
	TigerWallSlideSideSpecificOffsets WallLookAtUpperValues;//[Offset: 0xe90, Size: 0xc]
	TigerWallSlideSideSpecificOffsets WallLookAtLowerValues;//[Offset: 0xe9c, Size: 0xc]
	Vector RightHandIKWallSoft;//[Offset: 0xea8, Size: 0xc]
	Vector LeftHandIKWallSoft;//[Offset: 0xeb4, Size: 0xc]
	Vector WallSlideIKOffsetRightHand;//[Offset: 0xec0, Size: 0xc]
	Vector WallSlideIKOffsetLeftHand;//[Offset: 0xecc, Size: 0xc]
	Vector WallSlideVelocity;//[Offset: 0xed8, Size: 0xc]
	Vector LookAtWallSlide;//[Offset: 0xee4, Size: 0xc]
	Vector DistanceToWallCompensation;//[Offset: 0xef0, Size: 0xc]
	Vector LeftHandWeaponTranslation;//[Offset: 0xefc, Size: 0xc]
	Vector LeftElbowWeaponTranslation;//[Offset: 0xf08, Size: 0xc]
	Vector RightHandWeaponTranslation;//[Offset: 0xf14, Size: 0xc]
	Vector RightElbowWeaponTranslation;//[Offset: 0xf20, Size: 0xc]
	Vector PelvisReloadOffset;//[Offset: 0xf2c, Size: 0xc]
	Vector WallSlideRightHandIKDefaultOffset;//[Offset: 0xf38, Size: 0xc]
	Vector WallSlideLeftHandIKDefaultOffset;//[Offset: 0xf44, Size: 0xc]
	Vector DistanceToWallCompensationRotationVector;//[Offset: 0xf50, Size: 0xc]
	Rotator WallSlideRotationOffsetRightHand;//[Offset: 0xf5c, Size: 0xc]
	Rotator WallSlideRotationOffsetLeftHand;//[Offset: 0xf68, Size: 0xc]
	Rotator LeftHandWeaponRotation;//[Offset: 0xf74, Size: 0xc]
	Rotator RightHandWeaponRotation;//[Offset: 0xf80, Size: 0xc]
	Vector2D WallSlideUpperMappingInputRange;//[Offset: 0xf8c, Size: 0x8]
	Vector2D WallSlideUpperValueRangeMapping;//[Offset: 0xf94, Size: 0x8]
	Vector2D WallSlideMappingRangeInputs;//[Offset: 0xf9c, Size: 0x8]
	Vector2D WallSlideMappingRangeMapping;//[Offset: 0xfa4, Size: 0x8]
	Vector2D WallSlideFromFrontLowerTransitionThresholds;//[Offset: 0xfac, Size: 0x8]
	Vector2D WallSlideFromFrontUpperTransitionThresholds;//[Offset: 0xfb4, Size: 0x8]
	Vector2D WallSlideFromLeftTransitionThresholds;//[Offset: 0xfbc, Size: 0x8]
	Vector2D WallSlideFromRightTransitionThresholds;//[Offset: 0xfc4, Size: 0x8]
	Vector2D WallSlideFromLeftUpperTransitionThresholds;//[Offset: 0xfcc, Size: 0x8]
	Vector2D WallSlideFromRightLowerTransitionThresholds;//[Offset: 0xfd4, Size: 0x8]
	Vector2D WallSlideLookAtInputRange;//[Offset: 0xfdc, Size: 0x8]
	Vector2D WallSlideLookAtRangeMapping;//[Offset: 0xfe4, Size: 0x8]
	Vector2D WallSlideLookAtZValueInputRange1;//[Offset: 0xfec, Size: 0x8]
	Vector2D WallSlideLookAtZValueInputRange2;//[Offset: 0xff4, Size: 0x8]
	Vector2D WallSlideTargetMultiplierInputRange;//[Offset: 0xffc, Size: 0x8]
	Vector2D WallSlideTargetMultiplierRangeMapping;//[Offset: 0x1004, Size: 0x8]
	Vector2D AimSweepInputRange;//[Offset: 0x100c, Size: 0x8]
	Vector2D AimSweepRangeMapping;//[Offset: 0x1014, Size: 0x8]
	Vector2D DynamicADDReloadAlphaRange;//[Offset: 0x101c, Size: 0x8]
	Vector2D RangedWeaponCacheFalseBlendTimeRange;//[Offset: 0x1024, Size: 0x8]
	Vector2D UpperBodyWeightTarget;//[Offset: 0x102c, Size: 0x8]
	FName WeaponHipOffsetBlendSpaceName;//[Offset: 0x1034, Size: 0x8]
	FName HipSweepBlendSpaceName;//[Offset: 0x103c, Size: 0x8]
	FName WeaponAimOffsetBlendSpaceName;//[Offset: 0x1044, Size: 0x8]
	FName AimSweepBlendSpaceName;//[Offset: 0x104c, Size: 0x8]
	FName ReloadAdditiveOffsetCurveName;//[Offset: 0x1054, Size: 0x8]
	FName LeftHandJointName;//[Offset: 0x105c, Size: 0x8]
	FName LeftElbowJointName;//[Offset: 0x1064, Size: 0x8]
	FName RightHandJointName;//[Offset: 0x106c, Size: 0x8]
	FName RightElbowJointName;//[Offset: 0x1074, Size: 0x8]
	FName FaceAnimSlotName00;//[Offset: 0x107c, Size: 0x8]
	FName FaceAnimSlotName01;//[Offset: 0x1084, Size: 0x8]
	FName FaceAnimSlotName02;//[Offset: 0x108c, Size: 0x8]
	FName FaceAnimSlotName03;//[Offset: 0x1094, Size: 0x8]
	class AnimMetaData* TurnStartActiveClass;//[Offset: 0x10a0, Size: 0x8]
	class AnimMetaData* StartIsActiveClass;//[Offset: 0x10a8, Size: 0x8]
	class AnimMetaData* StopIsActiveClass;//[Offset: 0x10b0, Size: 0x8]
	class AnimMetaData* WeaponIKClass;//[Offset: 0x10b8, Size: 0x8]
	class AnimMetaData* PrimingMetaDataClass;//[Offset: 0x10c0, Size: 0x8]
	float DynamicADDReloadAlpha;//[Offset: 0x10c8, Size: 0x4]
	float TimeSinceWallSlideStateEntered;//[Offset: 0x10cc, Size: 0x4]
	float WallSlideDirectionAttachInverser;//[Offset: 0x10d0, Size: 0x4]
	float WallGrindAimOffset;//[Offset: 0x10d4, Size: 0x4]
	float RangedWeaponCacheFalseBlendTime;//[Offset: 0x10d8, Size: 0x4]
	float IsInReloadAlpha;//[Offset: 0x10dc, Size: 0x4]
	float FireReadyTimeStamp;//[Offset: 0x10e0, Size: 0x4]
	float RecoilShakeAlphaTarget;//[Offset: 0x10e4, Size: 0x4]
	float RecoilPushBackAmount;//[Offset: 0x10e8, Size: 0x4]
	float CrouchAimPelvisOffset;//[Offset: 0x10ec, Size: 0x4]
	float UpperbodyWeight;//[Offset: 0x10f0, Size: 0x4]
	float AimSweepFloat;//[Offset: 0x10f4, Size: 0x4]
	float LeftHandIK;//[Offset: 0x10f8, Size: 0x4]
	float RightHandIK;//[Offset: 0x10fc, Size: 0x4]
	float ClimbAngle;//[Offset: 0x1100, Size: 0x4]
	float ToClimbBlendTime;//[Offset: 0x1104, Size: 0x4]
	float TimeFalling;//[Offset: 0x1108, Size: 0x4]
	float TimeFallingForLongfallSlotAnimation;//[Offset: 0x110c, Size: 0x4]
	float WasClimbingDelayTimer;//[Offset: 0x1110, Size: 0x4]
	float ToClimbBlendTimeTarget;//[Offset: 0x1114, Size: 0x4]
	float ToClimbBlendTimeInterSpeed;//[Offset: 0x1118, Size: 0x4]
	float RightHandIKWallSoftInterSpeed;//[Offset: 0x111c, Size: 0x4]
	float LeftHandIKWallSoftInterSpeed;//[Offset: 0x1120, Size: 0x4]
	float WallSlideMappingRangeInputLowerValue;//[Offset: 0x1124, Size: 0x4]
	float WallSlideMappingRangeMappingUpperValue;//[Offset: 0x1128, Size: 0x4]
	float WallSlideVelocityInterpSpeed;//[Offset: 0x112c, Size: 0x4]
	float WallSlideCharacterToWallRotationCutoff;//[Offset: 0x1130, Size: 0x4]
	float LookAtWallSlideInterpSpeed;//[Offset: 0x1134, Size: 0x4]
	float AdditiveLocomotionSpeedThreshold;//[Offset: 0x1138, Size: 0x4]
	float AdditiveLocomotionLastInputThreshold;//[Offset: 0x113c, Size: 0x4]
	float UpperbodyWeightInterpSpeed;//[Offset: 0x1140, Size: 0x4]
	float ClampedDeltaTime;//[Offset: 0x1144, Size: 0x4]
	bool bLowerBodyLayering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 0x1]
	bool bShouldUseADDLocomotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1149, Size: 0x1]
	bool bIsInReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114a, Size: 0x1]
	bool bRangedWeaponCacheBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114b, Size: 0x1]
	bool bActivateWallSlideDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114c, Size: 0x1]
	bool bCrouchSlidingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114d, Size: 0x1]
	bool bIsInPrimingAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114e, Size: 0x1]
	bool bHasValidRangedAimOffsets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114f, Size: 0x1]
	bool bIsFiringWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 0x1]
	bool bJumpGroupGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1151, Size: 0x1]
	bool bStartIsActiveGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1152, Size: 0x1]
	bool bStopIsActiveGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1153, Size: 0x1]
	bool bLeftHandIKGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1154, Size: 0x1]
	bool bRightHandIKGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1155, Size: 0x1]
	bool bRecoilSystemGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1156, Size: 0x1]
	bool bShouldUseAnimatedIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1157, Size: 0x1]
	bool bWasClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 0x1]
	bool bMovementStatusIsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1159, Size: 0x1]
	void UpdateYawDeltaSmoothVariables(float InDeltaSeconds);// 0x15945f0
	void UpdateWasWallJumpAvailable();// 0x15945d0
	void UpdateVelocityLeanVariables(float InDeltaSeconds);// 0x1594550
	void UpdateStrafeVariables(float InDeltaSeconds);// 0x15944d0
	void UpdateStartStopVariables();// 0x15944b0
	void UpdateSprintVariables(float InDeltaSeconds);// 0x1594430
	void UpdateSoaringLeapVariables();// 0x1594410
	void UpdateSmoothSpeedVariables(float InDeltaSeconds);// 0x1594390
	void UpdateSlideVariables(float InDeltaSeconds);// 0x1594310
	void UpdateSingleFrameCheckVariables();// 0x15942f0
	void UpdateRotateInPlace(float InDeltaTime);// 0x1594270
	void UpdatePlayerVariables(float InDeltaSeconds);// 0x15941f0
	void UpdateMovementVariables();// 0x15941d0
	void UpdateMeshCapsuleDiffForWallSlide();// 0x15941b0
	void UpdateLookAtVariables(float InDeltaSeconds);// 0x1594130
	void UpdateLastPlayerInputVariables(float InDeltaSeconds);// 0x15940b0
	void UpdateIsAnyPowerActive();// 0x1594090
	void UpdateInAirVariables(float InDeltaSeconds);// 0x1594010
	void UpdateFootIKVariables(float InDeltaSeconds);// 0x1593f90
	void UpdateCrouchSlopePelivsOffsetVariables(float InDeltaSeconds);// 0x1593f10
	void UpdateCheckIfBlinded(float InDeltaTime);// 0x1593e90
	void OnWantsToStartRangedAttack();// 0x197e4f0
	bool IsPlayingDisciplineMontage();// 0x1593e60
	bool IsAllowingRotationLerpDuringCurrentDisciplineMontage();// 0x1593e40
	void HandleWeaponIKMetaData(const AnimMetaData* InWeaponIKMetaData);// 0x197e4f0
	Vector GetPlayerDesiredMovement(const bool bShowDebug);// 0x1593d90
	TigerPlayer* GetPlayer();// 0x1593d60
	float GetBlendingInFirePoseTimeLeft();// 0x197e4f0
	void GetAllActiveMetadata(out const AnimMetaData*[] OutActiveMetaData);// 0x1593cb0
	void ClearWallJumpAnimationState();// 0x1593c90
	void CalculateTurnInPlace(float InDeltaSeconds, float InAimYawDelta, bool bInCanEnterTurnInPlace, out bool bOutShouldTriggerTurnInPlace);// 0x1593b20
	void CalculateFootOffsetTargets(out const FName InFootBoneName, float InTraceLengthAboveFoot, float InTraceLengthBelowFoot, out const Vector InMinLimits, out const Vector InMaxLimits, byte InTraceChannel, bool bInShowTraces, out Rotator OutFootRotation, out Vector OutFootOffset);// 0x1593840

--------------------------------
Class: TigerHandIkWallTraceData
	TigerHandIkData RightHandIkData;//[Offset: 0x0, Size: 0x28]
	TigerHandIkData LeftHandIkData;//[Offset: 0x28, Size: 0x28]
	byte InTraceChannel;//[Offset: 0x50, Size: 0x1]
	float TraceLength;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: TigerHandIkData
	FName HandBoneName;//[Offset: 0x0, Size: 0x8]
	Vector HandLocation;//[Offset: 0x8, Size: 0xc]
	float ToWallDistance;//[Offset: 0x14, Size: 0x4]
	bool bTraceSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: TigerAnimMetaData
	AnimMontage* Montage;//[Offset: 0x0, Size: 0x8]
	AnimMetaData* MetaData;//[Offset: 0x8, Size: 0x8]
	float BlendWeight;//[Offset: 0x10, Size: 0x4]
	enum BlendState;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: TigerSlotAnimationAsDynamicMontageData
	FName AnimationSequenceName;//[Offset: 0x0, Size: 0x8]
	FName SlotNodeName;//[Offset: 0x8, Size: 0x8]
	float BlendInTime;//[Offset: 0x10, Size: 0x4]
	float BlendOutTime;//[Offset: 0x14, Size: 0x4]
	float InPlayRate;//[Offset: 0x18, Size: 0x4]
	float BlendoutTriggerTime;//[Offset: 0x1c, Size: 0x4]
	float InTimeToStartMontageAt;//[Offset: 0x20, Size: 0x4]
	int LoopCount;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: TigerWallSlideSideSpecificOffsets
	float Offset;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TigerPlayerBotsSubsystem.GameInstanceSubsystem.Subsystem.Object
	static bool IsSpawningBot();// 0x15a0aa0

--------------------------------
Class: TigerPlayerBotSubsystemSettings.DeveloperSettings.Object
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float BotDifficulty;//[Offset: 0x3c, Size: 0x4]
	float JumpingSpamDifficultyThresholdMin;//[Offset: 0x40, Size: 0x4]
	float JumpingSpamDifficultyThresholdMax;//[Offset: 0x44, Size: 0x4]
	float SlidingDifficultyThresholdMin;//[Offset: 0x48, Size: 0x4]
	float SlidingDifficultyThresholdMax;//[Offset: 0x4c, Size: 0x4]
	float ClanPowerDifficultyThresholdMin;//[Offset: 0x50, Size: 0x4]
	float ClanPowerDifficultyThresholdMax;//[Offset: 0x54, Size: 0x4]
	float ArchetypePowerDifficultyThresholdMin;//[Offset: 0x58, Size: 0x4]
	float ArchetypePowerDifficultyThresholdMax;//[Offset: 0x5c, Size: 0x4]
	float HealingDifficultyThreshold;//[Offset: 0x60, Size: 0x4]
	float BotCombatTransitionDelayMin;//[Offset: 0x64, Size: 0x4]
	float BotCombatTransitionDelayMax;//[Offset: 0x68, Size: 0x4]
	float BotAccuracyMin;//[Offset: 0x6c, Size: 0x4]
	float BotAccuracyMax;//[Offset: 0x70, Size: 0x4]
	float MidHealFightOrFlightThreshold;//[Offset: 0x74, Size: 0x4]
	float AttackedResponsePriorityDifficultyThresholdMax;//[Offset: 0x78, Size: 0x4]
	float AttackedResponsePriorityDifficultyThresholdMin;//[Offset: 0x7c, Size: 0x4]
	float TargetRandomnessDifficultyThresholdMax;//[Offset: 0x80, Size: 0x4]
	float TargetRandomnessDifficultyThresholdMin;//[Offset: 0x84, Size: 0x4]
	float CurrentTargetPriorityDifficultyThresholdMax;//[Offset: 0x88, Size: 0x4]
	float CurrentTargetPriorityDifficultyThresholdMin;//[Offset: 0x8c, Size: 0x4]
	float TargetingDiablerisersDifficultyThresholdMax;//[Offset: 0x90, Size: 0x4]
	float TargetingDiablerisersDifficultyThresholdMin;//[Offset: 0x94, Size: 0x4]
	float RangedWeaponThreatDifficultyThresholdMax;//[Offset: 0x98, Size: 0x4]
	float RangedWeaponThreatDifficultyThresholdMin;//[Offset: 0x9c, Size: 0x4]
	float RangedWeaponThreatStartFromDifficultyThreshold;//[Offset: 0xa0, Size: 0x4]
	float MeleeWeaponThreatDifficultyThresholdMax;//[Offset: 0xa4, Size: 0x4]
	float MeleeWeaponThreatDifficultyThresholdMin;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: TigerBufferedActionBlock.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionCrouch.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineArchetype.TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineArchetypeReleased.TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineClan.TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineClanReleased.TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineWeaponAbility.TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDisciplineWeaponAbilityReleased.TigerBufferedActionDisciplineBase.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionDodge.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionJump.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionMelee.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionRanged.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionReload.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionSprint.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionSwitchWeapon.TigerBufferedAction.Object

--------------------------------
Class: TigerBufferedActionToggleHSenses.TigerBufferedAction.Object

--------------------------------
Class: TBP_CamShake_Slide_C.MatineeCameraShake.CameraShakeBase.Object

--------------------------------
Class: TBP_Gamepad_Aiming_Config_C.TigerAimingCameraBehavior.TigerActiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: TBP_CamConf_Ghost_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Feeding_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Diablerize_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_Cam_Conf_DialogueInteraction_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Main_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Spectate_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_SharkDeath_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Scoped_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_MeleeCombat_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Indoor_C.TBP_CamConf_Main_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Downed_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Climbing_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_AirDash_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_AimingAndSliding_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Additive_Sliding_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Additive_Running_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Additive_Crouching_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_CamConf_Additive_Combat_C.TigerCameraPreset.Object

--------------------------------
Class: TBP_TigerPlayerCameraManager_C.TigerPlayerCameraManager.PlayerCameraManager.Actor.Object
	float HighSpeedCameraTreshold;//[Offset: 0x2940, Size: 0x4]
	float MinMoveSpeedForMeleeCamera;//[Offset: 0x2944, Size: 0x4]
	void OnChangingCameraPreset(class TigerCameraPreset InCurrentCameraPresetClass, class TigerCameraPreset InNewCameraPresetClass, bool CallFunc_IsAnyDisciplineActive_ReturnValue, TigerDisciplineBase* CallFunc_GetActiveDiscipline_ReturnValue);// 0x197e4f0
	CurveFloat* SelectPresetTransitionCurve(TigerCameraPreset* InPreviousPreset, TigerCameraPreset* InNewPreset, bool Temp_bool_Variable, bool CallFunc_ClassIsChildOf_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, CurveFloat* K2Node_Select_Default, CurveFloat* K2Node_Select_Default);// 0x197e4f0
	class TigerCameraPreset EvaluateCameraPreset(SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, TigerSpectatorPawn* K2Node_DynamicCast_AsTiger_Spectator_Pawn, bool K2Node_DynamicCast_bSuccess, class TigerCameraPreset Temp_class_Variable, bool CallFunc_IsInPhysicalInteraction_ReturnValue, TigerDisciplineBase* CallFunc_GetPreparingDiscipline_ReturnValue, TigerDisciplineBase* CallFunc_GetActiveDiscipline_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ShouldUseCameraPresetWhenActive_ReturnValue, class TigerCameraPreset CallFunc_GetCameraPreset_ReturnValue, bool CallFunc_HasCameraPreset_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class TigerCameraPreset CallFunc_GetPreparationCameraPreset_ReturnValue, bool CallFunc_HasPreparationCameraPreset_ReturnValue, class TigerCameraPreset Temp_class_Variable, class TigerCameraPreset Temp_class_Variable, enum CallFunc_GetCurrentlyEquippedSlot_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool Temp_bool_Variable, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsIndoor_ReturnValue, bool Temp_bool_Variable, class TigerCameraPreset Temp_class_Variable, class TigerCameraPreset K2Node_Select_Default, bool CallFunc_DesiresAiming_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsInDialogueInteraction_ReturnValue, TigerCharacterMovementComponent* CallFunc_GetTigerCharacterMovement_ReturnValue, bool CallFunc_IsInAirDash_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDecoupling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsFeeding_ReturnValue, bool CallFunc_IsDead_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsDowned_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TigerCharacterMovementComponent* CallFunc_GetTigerCharacterMovement_ReturnValue, bool CallFunc_ShouldUseClimbingCamera_ReturnValue, bool CallFunc_IsSliding_ReturnValue, TigerRangedWeapon* CallFunc_GetEquippedOrWantedWeapon_ReturnValue, bool CallFunc_HasBuff_ReturnValue, bool CallFunc_WeaponUsesScope_ReturnValue, bool CallFunc_HasEquippedOrWantedWeapon_ReturnValue, bool CallFunc_ShouldUseAimingAnimation_ReturnValue, class TigerCameraPreset K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, class TigerCameraPreset K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsInGhostMode_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x197e4f0

--------------------------------
Class: TigerSpectateCameraBehavior.TigerActiveCameraBehavior.TigerCameraBehavior.Object
	float FollowCameraDelay;//[Offset: 0x128, Size: 0x4]
	float CameraFollowSpeedMultiplier;//[Offset: 0x12c, Size: 0x4]
	float ConstantAddedCameraFollowSpeed;//[Offset: 0x130, Size: 0x4]
	float NewFollowPointOffsetMultiplier;//[Offset: 0x134, Size: 0x4]
	TigerSpectatorPawn* SpectatorPawn;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: TBP_CameraBehavior_Spectate_C.TigerSpectateCameraBehavior.TigerActiveCameraBehavior.TigerCameraBehavior.Object

--------------------------------
Class: TigerMacroExperienceAsset.DataAsset.Object
	<enum,int> EventMacroExperience;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: TigerMasqueradeActionMarker.Actor.Object
	bool bOnlyVisibleInHeightenedSenses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]

--------------------------------
Class: TigerMasqueradeConsequenceActionWorldMaker.TigerMasqueradeConsequence.Object
	class TigerMasqueradeActionMarker* MarkerClass;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TigerMasqueradeConsequenceBloodHuntedSyncInstance.TigerMasqueradeConsequenceSyncInstance.Object
	class UserWidget* MapMarkerClass;//[Offset: 0x58, Size: 0x8]
	class TigerCompassMarkerWidget* CompassMarkerClass;//[Offset: 0x60, Size: 0x8]
	Texture2D* CompassMarkerTexture;//[Offset: 0x68, Size: 0x8]
	BloodHuntMarker Marker;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: BloodHuntMarker
	TigerCompassMarkerWidget* CompassMarker;//[Offset: 0x0, Size: 0x8]
	TigerMapMarkerProxy* MapMarkerProxy;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerMasqueradeConsequenceBloodHunted.TigerMasqueradeConsequence.Object

--------------------------------
Class: TigerMasqueradeConsequenceCompassMarkerSyncInstance.TigerMasqueradeConsequenceSyncInstance.Object
	class TigerCompassMarkerWidget* CompassMarkerClass;//[Offset: 0x58, Size: 0x8]
	Texture2D* CompassMarkerTexture;//[Offset: 0x60, Size: 0x8]
	TigerCompassMarkerWidget* CompassMarker;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: TigerMasqueradeConsequenceCompassMarker.TigerMasqueradeConsequence.Object

--------------------------------
Class: TigerPlayerMasqueradeConsequenceHsRevealSyncInstance.TigerMasqueradeConsequenceSyncInstance.Object
	bool bOnlyVisibleInHeightenedsSenses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bAffectedPlayerIsWithinLocalHsArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	void OnLeaveHsArea(TigerPlayer* InPlayer);// 0x15b1080
	void OnEnterHsArea(TigerPlayer* InPlayer);// 0x15b0f60

--------------------------------
Class: TigerPlayerMasqueradeConsequenceHsReveal.TigerMasqueradeConsequence.Object

--------------------------------
Class: TigerMasqueradeConsequenceMapAreaMarkerSyncInstance.TigerMasqueradeConsequenceSyncInstance.Object
	class TigerMasqueradeMarker* AreaMarkerClass;//[Offset: 0x58, Size: 0x8]
	float AreaRadius;//[Offset: 0x60, Size: 0x4]
	TigerMasqueradeMarkerProxy* MapMarkerProxy;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: TigerMasqueradeConsequenceMapAreaMarker.TigerMasqueradeConsequence.Object

--------------------------------
Class: TigerMasqueradeConsequenceMapMarkerSyncInstance.TigerMasqueradeConsequenceSyncInstance.Object
	class UserWidget* MapMarkerClass;//[Offset: 0x58, Size: 0x8]
	TigerMapMarkerProxy* MapMarkerProxy;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TigerMasqueradeConsequenceMapMarker.TigerMasqueradeConsequence.Object

--------------------------------
Class: TigerMasqueradeConsequenceTrailSyncInstance.TigerMasqueradeConsequenceSyncInstance.Object
	bool bOnlyVisibleInHeightenedsSenses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bAffectedPlayerIsWithinLocalHsArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	void OnTrailDeactivated(TigerPlayer* InPlayer);// 0x197e4f0
	void OnTrailActivated(TigerPlayer* InPlayer);// 0x197e4f0
	void OnLeaveHsArea_Native(TigerPlayer* InPlayer);// 0x15b1110
	void OnLeaveHsArea(TigerPlayer* InPlayer);// 0x197e4f0
	void OnEnterHsArea_Native(TigerPlayer* InPlayer);// 0x15b0ff0
	void OnEnterHsArea(TigerPlayer* InPlayer);// 0x197e4f0

--------------------------------
Class: TigerMasqueradeConsequenceTrail.TigerMasqueradeConsequence.Object

--------------------------------
Class: TigerPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	byte GameTypeSpawnFlags;//[Offset: 0x258, Size: 0x1]

--------------------------------
Class: TigerPlayerStateDataStatics.BlueprintFunctionLibrary.Object
	static TigerPlayerStateGameData MakePlayerStateGameData(FString InPlayerName, enum InPlatformType);// 0x15baa40
	static bool IsStateDataValid(out const TigerPlayerStateGameData InPlayerData);// 0x15ba910
	static bool IsInLocalPlayersGroup(const Object* InWorldContextObject, out const TigerPlayerStateGameData InPlayerData);// 0x15ba790
	static bool IsInLocalPlayersExtendedGroup(const Object* InWorldContextObject, out const TigerPlayerStateGameData InPlayerData);// 0x15ba630
	static void GetPlayerName(const Object* InWorldContextObject, out const TigerPlayerStateGameData InPlayerData, bool InIsInstigator, out FText OutPlayerName);// 0x15ba400

--------------------------------
Class: TigerPoiMarkerProxy.TigerMapMarkerProxy.Object
	PointOfInterest PointOfInterest;//[Offset: 0x68, Size: 0xa0]

--------------------------------
Class: TigerPointOfInterestMapMarkerWidget.TigerMapMarkerWidget.TigerWidget.UserWidget.Widget.Visual.Object
	void SetToHighTierLootLocation(out const class TigerHighTierLootGroup InHighTierLootGroup);// 0x197e4f0
	void OnHighTierLootLocationsChanged(out const class TigerHighTierLootGroup[] InActiveGroups);// 0x15bac10

--------------------------------
Class: TigerPopUpLogWidget.TigerWidget.UserWidget.Widget.Visual.Object
	FString LogString;//[Offset: 0x280, Size: 0x10]
	void OnSetLogString();// 0x197e4f0

--------------------------------
Class: TigerPostMatchScreenUI.TigerLoadingScreenUI.UserWidget.Widget.Visual.Object
	delegate OnReadyToTravel;//[Offset: 0x2c8, Size: 0x10]
	void ShowPlayerReviewDialog();// 0x15bb120
	void ReadyToTravel();// 0x15bad60
	void OnWidgetClassLoaded__DelegateSignature(class TigerWidget InWidgetClass);// 0x197e4f0
	void OnReadyToTravelDelegate__DelegateSignature();// 0x197e4f0
	void GetPlayerData();// 0x15ba3e0
	bool GetIsReadyToTravel();// 0x15ba3c0
	bool CanShowPlayerReviewDialog();// 0x15b9f30
	void AsyncLoadPlacementWidget(out const delegate InDelegate);// 0x15b9e80

--------------------------------
Class: TigerPremiumCurrencyManagerNull.TigerPremiumCurrencyManager.Object

--------------------------------
Class: TigerPremiumCurrencyManagerPS5.TigerPremiumCurrencyManager.Object

--------------------------------
Class: TigerPremiumCurrencyManagerWin64.TigerPremiumCurrencyManager.Object

--------------------------------
Class: TigerPremiumCurrencyManagerSettings.DeveloperSettings.Object
	FString[] OfferCategoryIds;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: TigerPremiumCurrencyUiScreen.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	void PurchaseResult(const byte InPurchaseResult);// 0x15bace0
	void OnPurchaseHandled(const bool bInWasSuccesful, const byte InPurchaseResult);// 0x197e4f0
	void OnCurrencyPacksUpdateFailed();// 0x197e4f0
	void OnCurrencyPacksUpdated(out const TigerPremiumCurrencyPackData[] InPremiumCurrencyPacks);// 0x197e4f0
	void OnCloseCurrencyStore();// 0x197e4f0
	void LoadCurrencyPacks();// 0x15baa20
	bool IsLoadingPremiumCurrencyPacks();// 0x15ba8f0
	void ConfirmPurchase(out const TigerPremiumCurrencyPackData InCurrencyPackData);// 0x15b9f60

--------------------------------
Class: TigerPremiumCurrencyPackData
	int Amount;//[Offset: 0x10, Size: 0x4]
	FString Currency;//[Offset: 0x18, Size: 0x10]
	FString ImagePath;//[Offset: 0x28, Size: 0x10]
	int Bonus;//[Offset: 0x38, Size: 0x4]
	float Price;//[Offset: 0x3c, Size: 0x4]
	float RegularPrice;//[Offset: 0x40, Size: 0x4]
	float UpsellPrice;//[Offset: 0x44, Size: 0x4]
	enum DiscountType;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: TigerPreSpawnMapUI.TigerWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: TigerPrimogenNPC.TigerNPC.TigerBaseNPC.TigerCharacter.Character.Pawn.Actor.Object
	SoftObjectPath CharacterPresetPath;//[Offset: 0xb30, Size: 0x18]
	void OnRep_CharacterPresetPath();// 0x15bf690

--------------------------------
Class: TigerProjectileReplicationRouter.Interface.Object

--------------------------------
Class: TigerProjectilePoolingSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	bool bUsingProjectilePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: TigerProjectilePoolManager.Object
	class Object[] ProjectilePoolTypes;//[Offset: 0x30, Size: 0x10]
	<class TigerProjectile,TigerProjectilePool*> LocalPlayerProjectilePoolMap;//[Offset: 0x40, Size: 0x50]
	<class TigerProjectile,TigerProjectilePool*> RemotePlayersProjectilePoolMap;//[Offset: 0x90, Size: 0x50]
	<class TigerProjectile,TigerProjectilePool*> ServerPlayersProjectilePoolMap;//[Offset: 0xe0, Size: 0x50]

--------------------------------
Class: ProjectilePoolReserveCountSettings.Object
	<class TigerProjectile,int8> InitialLocalPlayerProjectileReserveCount;//[Offset: 0x28, Size: 0x50]
	<class TigerProjectile,int8> InitialRemotePlayersProjectileReserveCount;//[Offset: 0x78, Size: 0x50]
	<class TigerProjectile,int8> InitialServerPlayersProjectileReserveCount;//[Offset: 0xc8, Size: 0x50]
	int8 DefaultReservedProjectileCount;//[Offset: 0x118, Size: 0x1]

--------------------------------
Class: TigerStaticMeshPropComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: TigerSkeletalMeshPropComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: TigerPropEffectsComponent.TigerStaticMeshPropComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Particles;//[Offset: 0x4e8, Size: 0x8]
	FName AttachPoint;//[Offset: 0x4f0, Size: 0x8]
	ParticleSystemComponent* ParticlesSystemComponent;//[Offset: 0x4f8, Size: 0x8]
	bool bActivateEffectOnAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]

--------------------------------
Class: TigerPropCompInterface.Interface.Object
	void OnDeactiveEffect();// 0x197e4f0
	void OnActivateEffect();// 0x197e4f0
	void DeactiveEffect();// 0x15bf1b0
	void ActivateEffect();// 0x15bf050

--------------------------------
Class: TigerPS5StoreIconWidget.UserWidget.Widget.Visual.Object
	void ShowIcon();// 0xb7a5a0
	void HideIcon();// 0xb7a5a0

--------------------------------
Class: TigerPsoCacheUI.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnCachingDone;//[Offset: 0x280, Size: 0x10]
	TigerSharedMouseCursor* SharedMouseCursor;//[Offset: 0x290, Size: 0x8]
	void TigerOnCachingDone__DelegateSignature();// 0x197e4f0
	static bool ShouldCacheDx12PsosAtBoot();// 0x15c52f0
	void OnProgressUpdated(const float InPercentageCompleted);// 0x197e4f0
	void CancelCaching();// 0x15c37b0

--------------------------------
Class: TigerQueueForLogin.BlueprintAsyncActionBase.Object
	delegate ReadyForLogin;//[Offset: 0x30, Size: 0x10]
	delegate WaitTimeUpdated;//[Offset: 0x40, Size: 0x10]
	delegate Error;//[Offset: 0x50, Size: 0x10]
	TigerLoginQueueService* LoginQueueService;//[Offset: 0x68, Size: 0x8]
	void QueueForLoginOutputPin__DelegateSignature(out const TigerLoginQueueToken LoginToken, out const Timespan EstimatedWaitTime, FString ErrorMessage);// 0x197e4f0
	static TigerQueueForLogin* QueueForLogin(Object* InWorldContextObject);// 0x15c8c80

--------------------------------
Class: TigerRadarChart.Widget.Visual.Object
	SlateBrush GraphImage;//[Offset: 0x108, Size: 0x88]
	Color FillColor;//[Offset: 0x190, Size: 0x4]
	int Points;//[Offset: 0x194, Size: 0x4]
	float Radius;//[Offset: 0x198, Size: 0x4]
	float Tilt;//[Offset: 0x19c, Size: 0x4]
	Vector2D Offset;//[Offset: 0x1a0, Size: 0x8]
	int ValueMaximum;//[Offset: 0x1a8, Size: 0x4]
	int ValueMinimum;//[Offset: 0x1ac, Size: 0x4]
	int[] Values;//[Offset: 0x1b0, Size: 0x10]
	void SetValue(int InIndex, int InValue);// 0x15c9100
	void SetAllValues(int[] InValues, int InDefaultValue);// 0x15c8fd0
	void NullifyAllValues();// 0x15c8b20

--------------------------------
Class: TigerRat.TigerInteractiveObject.Actor.Object
	Vector LocalHandOffset;//[Offset: 0x2a8, Size: 0xc]
	Rotator LocalHandRotation;//[Offset: 0x2b4, Size: 0xc]
	AnimMontage* Montage;//[Offset: 0x2c0, Size: 0x8]
	TigerPlayerController* CurrentInteractingPlayerController;//[Offset: 0x2c8, Size: 0x8]
	float FeedTickTime;//[Offset: 0x2d0, Size: 0x4]
	float FeedHealthAmount;//[Offset: 0x2d4, Size: 0x4]
	float MoveSpeed;//[Offset: 0x2d8, Size: 0x4]
	float RotationSpeed;//[Offset: 0x2dc, Size: 0x4]
	float MaxWaitTime;//[Offset: 0x2e0, Size: 0x4]
	float MinWaitTime;//[Offset: 0x2e4, Size: 0x4]
	SkeletalMeshComponent* RatMesh;//[Offset: 0x2e8, Size: 0x8]
	bool bShouldMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	AkAudioEvent* PickUpSqueekEvent;//[Offset: 0x2f8, Size: 0x8]
	bool bIsEaten;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void OnInteractEnd();// 0x15c8b40
	bool IsEaten();// 0x15c8390

--------------------------------
Class: TigerRatSpawnpointActorSpawner.SceneComponent.ActorComponent.Object
	class TigerRat* ActorToSpawn;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: TigerRatSpawnpoint.Actor.Object
	int NumRatsToSpawn;//[Offset: 0x228, Size: 0x4]

--------------------------------
Class: TigerReactToHeightenedSense.Interface.Object
	void OnLeaveHeightenedSenseArea();// 0x197e4f0
	void OnEnterHeightenedSenseAreaInitial();// 0x197e4f0
	void OnEnterHeightenedSenseArea();// 0x197e4f0

--------------------------------
Class: TigerReflectable.Interface.Object
	Actor* CopyAndReflect(TigerCharacter* InNewOwner, out const Vector InSpawnLocation, out const Rotator InSpawnRotation);// 0x15ccd70
	void BlockReflect(TigerCharacter* ReflectOwner);// 0x15ccaa0

--------------------------------
Class: TigerReflector.Interface.Object

--------------------------------
Class: TigerRejuvenatingVoiceEffectActor.Actor.Object
	TigerPlayer* Player;//[Offset: 0x228, Size: 0x8]
	float HealAmount;//[Offset: 0x230, Size: 0x4]

--------------------------------
Class: TigerRemoteLocalizationSubSystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: TigerRenderingSettings.DeveloperSettings.Object
	int MaxSpotLightShadowCasters;//[Offset: 0x38, Size: 0x4]
	MaterialInterface* LastLodMaterialMaster;//[Offset: 0x40, Size: 0x28]
	FName[] LastLodExtractionParameters;//[Offset: 0x68, Size: 0x10]
	MaterialInterface*[] MaterialsToExclude;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: TigerReplayCameraManager.PlayerCameraManager.Actor.Object
	float PPWeight;//[Offset: 0x2d10, Size: 0x4]

--------------------------------
Class: TigerReplaySpectatorController.PlayerController.Controller.Actor.Object
	TigerSpringArmComponent* SpringArm;//[Offset: 0x580, Size: 0x8]
	bool bUseAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	float CurrentTimeIncrement;//[Offset: 0x58c, Size: 0x4]
	float[] FStopValidValues;//[Offset: 0x590, Size: 0x10]
	float FOVMinValue;//[Offset: 0x5a0, Size: 0x4]
	float FOVMaxValue;//[Offset: 0x5a4, Size: 0x4]
	float DepthOfFieldFocalDistanceMinValue;//[Offset: 0x5a8, Size: 0x4]
	float DepthOfFieldFocalDistanceMaxValue;//[Offset: 0x5ac, Size: 0x4]
	float DepthOfFieldSensorWidthMinValue;//[Offset: 0x5b0, Size: 0x4]
	float DepthOfFieldSensorWidthMaxValue;//[Offset: 0x5b4, Size: 0x4]
	float MotionBlurMinValue;//[Offset: 0x5b8, Size: 0x4]
	float MotionBlurMaxValue;//[Offset: 0x5bc, Size: 0x4]
	float CameraRollMinValue;//[Offset: 0x5c0, Size: 0x4]
	float CameraRollMaxValue;//[Offset: 0x5c4, Size: 0x4]
	float MinDemoTimeDilation;//[Offset: 0x5c8, Size: 0x4]
	float MaxDemoTimeDilation;//[Offset: 0x5cc, Size: 0x4]
	float MinCameraShakeScale;//[Offset: 0x5d0, Size: 0x4]
	float MaxCameraShakeScale;//[Offset: 0x5d4, Size: 0x4]
	float MinMoveSpeed;//[Offset: 0x5d8, Size: 0x4]
	float MaxMoveSpeed;//[Offset: 0x5dc, Size: 0x4]
	float MinLookSpeed;//[Offset: 0x5e0, Size: 0x4]
	float MaxLookSpeed;//[Offset: 0x5e4, Size: 0x4]
	int[] MarkedPlayerIds;//[Offset: 0x5e8, Size: 0x10]
	enum CurrentCameraMode;//[Offset: 0x608, Size: 0x1]
	class MatineeCameraShake* CameraShakeBehaviour;//[Offset: 0x610, Size: 0x8]
	bool HideDeadPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool FilterMarkedPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	enum CurrentMoveType;//[Offset: 0x61a, Size: 0x1]
	enum CurrentRelativeMoveType;//[Offset: 0x61b, Size: 0x1]
	enum CurrentMoveMode;//[Offset: 0x61c, Size: 0x1]
	enum CurrentRotateMode;//[Offset: 0x61d, Size: 0x1]
	FString CurrentLookAtBoneName;//[Offset: 0x620, Size: 0x10]
	enum CurrentTransitionType;//[Offset: 0x630, Size: 0x1]
	float CurrentMoveTypeParameter;//[Offset: 0x634, Size: 0x4]
	float BaseRollRate;//[Offset: 0x638, Size: 0x4]
	TigerMapInfoDataAsset* MapInfoAsset;//[Offset: 0x640, Size: 0x8]
	TigerMapGameData* MapGameData;//[Offset: 0x648, Size: 0x8]
	delegate ToggleSmoothTransitions;//[Offset: 0x650, Size: 0x10]
	delegate ToggleLinearMoves;//[Offset: 0x660, Size: 0x10]
	delegate AdvanceFrame;//[Offset: 0x670, Size: 0x10]
	delegate DecrementFrame;//[Offset: 0x680, Size: 0x10]
	delegate RemoveFrame;//[Offset: 0x690, Size: 0x10]
	delegate ReplaceFrame;//[Offset: 0x6a0, Size: 0x10]
	delegate InsertFrame;//[Offset: 0x6b0, Size: 0x10]
	delegate ViewFrame;//[Offset: 0x6c0, Size: 0x10]
	delegate UpdatePlaybackSpeedDisplay;//[Offset: 0x6d0, Size: 0x10]
	delegate UpdateMovementSpeedDisplay;//[Offset: 0x6e0, Size: 0x10]
	delegate UpdateLookSpeedDisplay;//[Offset: 0x6f0, Size: 0x10]
	delegate UpdateIsPausedDisplay;//[Offset: 0x700, Size: 0x10]
	delegate ReversePlayers;//[Offset: 0x710, Size: 0x10]
	delegate TogglePlayers;//[Offset: 0x720, Size: 0x10]
	delegate ToggleMainUIFocus;//[Offset: 0x730, Size: 0x10]
	delegate UpdateMarked;//[Offset: 0x740, Size: 0x10]
	delegate UpdateCameraEffectsSettingsDisplay;//[Offset: 0x750, Size: 0x10]
	delegate PlaybackFinished;//[Offset: 0x760, Size: 0x10]
	delegate ScrubStarted;//[Offset: 0x770, Size: 0x10]
	delegate ScrubCompleted;//[Offset: 0x780, Size: 0x10]
	delegate QueuedPauseScrubCompleted;//[Offset: 0x790, Size: 0x10]
	delegate CameraAttachmentChanged;//[Offset: 0x7a0, Size: 0x10]
	delegate CellFinishedLoading;//[Offset: 0x7b0, Size: 0x10]
	delegate PlayerSpawned;//[Offset: 0x7c0, Size: 0x10]
	delegate SpectatorUpdated;//[Offset: 0x7d0, Size: 0x10]
	delegate CurrentlyPlayingKeyframeUpdated;//[Offset: 0x7e0, Size: 0x10]
	delegate UpdateCameraModesSettingsDisplay;//[Offset: 0x7f0, Size: 0x10]
	delegate OnKeyFrameRemoved;//[Offset: 0x800, Size: 0x10]
	delegate OnKeyframingCompleted;//[Offset: 0x810, Size: 0x10]
	delegate UpdateControlsRefHeldPrerequisiteButtons;//[Offset: 0x820, Size: 0x10]
	delegate UpdateControlsRefHeldPrerequisiteButtonsParam;//[Offset: 0x830, Size: 0x10]
	delegate UpdateCameraRoll;//[Offset: 0x840, Size: 0x10]
	delegate OnPlayerLifeStatusChanged;//[Offset: 0x850, Size: 0x10]
	bool bPlaybackFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	float KeyFrameOffset;//[Offset: 0x864, Size: 0x4]
	TigerBookmarkPosition[] BookmarkPositions;//[Offset: 0x868, Size: 0x10]
	TigerReplayCameraPosition[] CameraPositions;//[Offset: 0x878, Size: 0x10]
	bool bUseQueuedPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 0x1]
	bool bQueuePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 0x1]
	float QueuedPauseOffsetSec;//[Offset: 0xa70, Size: 0x4]
	float QueuedPausePlayRateLerpExp;//[Offset: 0xa7c, Size: 0x4]
	void ToggleMarkCurrentlySpectatedPlayer();// 0x15cf390
	void TeleportToCurrentSpectatedPlayer();// 0x15cf370
	void TeleportToCameraKeyFrame(const bool bInToTime, const int InKeyFrameID);// 0x15cf2a0
	void TeleportToBookmark(const int InBookmarkIndex);// 0x15cf210
	void ShowMouseCursor();// 0x15cf1f0
	void SetShouldPlaybackSpeedAffectCameraSpeed(const bool InEnabled);// 0x15cf160
	void SetSeparateTranslucencyValue(const float InValue);// 0x15cf0e0
	void SetReplayCameraRotationMode(const enum InRotateMode);// 0x15cf060
	void SetReplayCameraMode(const enum InMode);// 0x15cefe0
	void SetPreviousPlayerIndex(const int InPlayerIndex);// 0x15cef50
	bool SetPausedState(bool bInPauseState);// 0x15ceeb0
	void SetMovementSpeed(const float InMoveSpeed);// 0x15cee30
	void SetMotionBlurValue(const float InValue);// 0x15cedb0
	void SetMotionBlurAntiAliasing(bool bInTurnOn);// 0x15ced20
	float SetKeyFrameOffset(const float InOffset);// 0x15cec80
	void SetHUDInputEnabled(const bool bIsEnabled);// 0x15cebf0
	void SetFieldOfViewValue(const float InValue);// 0x15ceb70
	void SetDepthOfFieldSensorWidthValue(const float InValue);// 0x15ceaf0
	void SetDepthOfFieldFStopValue(const float InValue);// 0x15ce9f0
	void SetDepthOfFieldFocalDistanceValue(const float InValue);// 0x15cea70
	void SetDepthOfFieldEnabled(const bool InEnabled);// 0x15ce960
	void SetDepthOfFieldBladeCount(const float InValue);// 0x15ce8e0
	void SetCurrentReplayTimeToSeconds(const float InSeconds);// 0x15ce7d0
	void SetCurrentReplayPlayRate(const float InPlayRate);// 0x15ce750
	void SetCurrentPlayerIndex(const int InPlayerIndex);// 0x15ce6c0
	void SetCurrentMoveMode(const enum InMoveMode);// 0x15ce640
	void SetCurrentlySpectatedPlayer(TigerPlayer* InPlayer);// 0x15ce850
	void SetCameraSmoothingAmount(const float InNewValue);// 0x15ce5c0
	void SetCameraShakeScale(const float InNewValue);// 0x15ce540
	void SetCameraShakeEnabled(const bool InEnabled);// 0x15ce4b0
	void SetCameraRollValue(const float InValue);// 0x15ce430
	void SetBulletTrailsEnabled(bool InEnabled);// 0x15ce3a0
	TigerPlayer* SelectPreviousPlayer();// 0x15ce370
	TigerPlayer* SelectPlayerFromName(FString InPlayerName);// 0x15ce2c0
	TigerPlayer* SelectPlayerFromList(const int InIndexInPlayerList);// 0x15ce220
	TigerPlayer* SelectPlayerFromId(const int InPlayerId);// 0x15ce180
	void SelectPlayerAndReattachRelativeCamera(FString InPlayerName);// 0x15ce0e0
	TigerPlayer* SelectNextPlayer();// 0x15ce0b0
	void SaveCameraMove(FString InFilename);// 0x15ce010
	void SaveBookmarkPositions(FString InFilename);// 0x15cdf70
	void ReplaceCameraMoveKeyFrame(const int InKeyFrameID);// 0x15cdee0
	void RemoveCameraMoveKeyFrame(const int InKeyFrameID);// 0x15cde50
	void RemoveBookmark(const int InBookmarkIndex);// 0x15cddc0
	void RegisterToWorldGrid();// 0x15cdda0
	void PlayReplayFromBP(FString InReplayName);// 0x15cdd00
	void OnPlayerBeginPlay(TigerPlayer* InPlayer);// 0x15cdc70
	void OnLifeStatusChanged(enum InNewLifeStatus);// 0x15cdbf0
	void LoadCameraMove(FString InFilename);// 0x15cdb50
	void LoadBookmarkPositions(FString InFilename);// 0x15cdab0
	bool IsScrubbing();// 0x15cda90
	bool IsPlayerMarked(const TigerPlayer* InPlayer);// 0x15cd9f0
	bool IsCurrentlyPlayingKeyframe();// 0x15cd9d0
	bool IsCurrentlyBetweenKeyFrames();// 0x15cd9b0
	bool IsCurrentlyAtopKeyFrame();// 0x15cd990
	int InsertCameraMoveKeyFrame();// 0x15cd960
	int InsertBookmark();// 0x15cd930
	void HideMouseCursor();// 0x15cd910
	bool GetShouldPlaybackSpeedAffectCameraSpeed();// 0x15cd8f0
	float GetSeparateTranslucencyValue();// 0x15cd8c0
	int GetPreviousPlayerIndex();// 0x15cd8a0
	FString GetPreviousBone();// 0x15cd820
	bool GetPausedState();// 0x15cd800
	FString GetNextBone();// 0x15cd780
	float GetMotionBlurValue();// 0x15cd750
	TigerMapGameData* GetMapGameData();// 0x15cd730
	FString GetLastBone();// 0x15cd6b0
	FString GetFirstBone();// 0x15cd630
	float GetFieldOfViewValue();// 0x15cd600
	float GetDepthOfFieldSensorWidthValue();// 0x15cd5d0
	float GetDepthOfFieldFStopValue();// 0x15cd570
	float GetDepthOfFieldFocalDistanceValue();// 0x15cd5a0
	bool GetDepthOfFieldEnabled();// 0x15cd550
	float GetCurrentReplayTotalTimeInSeconds();// 0x15cd500
	float GetCurrentReplayPlayRate();// 0x15cd4d0
	int GetCurrentReplayCurrentTimeInSeconds();// 0x15cd4a0
	int GetCurrentReplayCurrentTimeInMilliseconds();// 0x15cd470
	TigerPlayer*[] GetCurrentPlayerListFiltered();// 0x15cd3f0
	TigerPlayer*[] GetCurrentPlayerList(const bool InFilterOutDeadPlayers, const bool InMarkedPlayersOnly);// 0x15cd2c0
	int GetCurrentPlayerIndex();// 0x15cd290
	TigerPlayer* GetCurrentlySpectatedPlayer();// 0x15cd530
	int GetCurrentKeyframeIndex();// 0x15cd270
	float GetCameraShakeScale();// 0x15cd250
	bool GetCameraShakeEnabled();// 0x15cd220
	float GetCameraMaxSpeed();// 0x15cd1f0
	float GetCameraBaseMovementSpeed();// 0x15cd1d0
	enum GetActivePrerequisiteButtonForValueChange();// 0x15cd190
	void FocusOnTarget();// 0x15cd170
	bool DoesCameraMoveKeyFrameExist(const int InKeyFrameID);// 0x15cd0d0
	bool DoesCameraFileExist(FString InFilename);// 0x15cd020
	bool DoesBookmarkFileExist(FString InFilename);// 0x15ccf70
	bool DoesBookmarkExist(const int InBookmarkIndex);// 0x15cced0
	bool DetachArm();// 0x15ccea0
	void ClearCurrentlySpectatedPlayer();// 0x15cccb0
	void ChangeCameraRollValue(const float InChangeValue);// 0x15ccc30
	bool CameraRotateModeRequiresValidSpectator(const enum InRotateMode);// 0x15ccbb0
	bool CameraModeRequiresValidSpectator(const enum InMode);// 0x15ccb30
	bool AttachArm();// 0x15cca70

--------------------------------
Class: TigerBookmarkPosition
	float BookmarkTime;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
	Vector CameraPosition;//[Offset: 0x18, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: TigerReplayCameraPosition
	enum Mode;//[Offset: 0x0, Size: 0x1]
	enum RotationMode;//[Offset: 0x1, Size: 0x1]
	FString SpectatedName;//[Offset: 0x8, Size: 0x10]
	FString LookAtBoneName;//[Offset: 0x18, Size: 0x10]
	Vector CameraPosition;//[Offset: 0x28, Size: 0xc]
	Rotator CameraRotation;//[Offset: 0x34, Size: 0xc]
	Vector CameraRelativeLocation;//[Offset: 0x40, Size: 0xc]
	Rotator CameraRelativeRotation;//[Offset: 0x4c, Size: 0xc]
	float CameraTime;//[Offset: 0x58, Size: 0x4]
	enum MoveType;//[Offset: 0x5c, Size: 0x1]
	enum RelativeMoveType;//[Offset: 0x5d, Size: 0x1]
	float MoveTypeParameter;//[Offset: 0x60, Size: 0x4]
	enum TransitionType;//[Offset: 0x64, Size: 0x1]
	float CameraFOV;//[Offset: 0x68, Size: 0x4]
	float CameraFocalDistance;//[Offset: 0x6c, Size: 0x4]
	float CameraFStop;//[Offset: 0x70, Size: 0x4]
	float CameraSensorWidth;//[Offset: 0x74, Size: 0x4]
	bool bCameraTargetFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bChaseRelativeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bCameraShakeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	float PlayBackSpeed;//[Offset: 0x7c, Size: 0x4]
	float CameraShakeScale;//[Offset: 0x80, Size: 0x4]
	bool bBulletTrailsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: TigerReplicationGraph.ReplicationGraph.ReplicationDriver.Object
	ReplicationGraphNode_GridSpatialization2D* GridNode;//[Offset: 0x498, Size: 0x8]
	TigerReplicationGraphNode_GridSpatialization2D_PlayerSpawned* PlayerSpawnedGridNode;//[Offset: 0x4a0, Size: 0x8]
	ReplicationGraphNode_ActorList* AlwaysRelevantNode;//[Offset: 0x4a8, Size: 0x8]
	TigerReplicationGraphNode_OwnerRelevant* OwnerRelevantNode;//[Offset: 0x4b0, Size: 0x8]
	TigerReplicationGraphNode_ExtendedTeamRelevant* ExtendedTeamRelevantNode;//[Offset: 0x4b8, Size: 0x8]
	TigerReplicationGraphNode_ActorSpecifiedRelevant* ActorSpecifiedRelevantNode;//[Offset: 0x4c0, Size: 0x8]

--------------------------------
Class: TigerReplicationGraphNode_GridSpatialization2D_PlayerSpawned.ReplicationGraphNode_GridSpatialization2D.ReplicationGraphNode.Object

--------------------------------
Class: TigerReplicationGraphNode_OwnerRelevant.ReplicationGraphNode.Object

--------------------------------
Class: TigerReplicationGraphNode_ExtendedTeamRelevant.ReplicationGraphNode.Object

--------------------------------
Class: TigerReplicationGraphNode_ActorSpecifiedRelevant.ReplicationGraphNode.Object

--------------------------------
Class: TigerReplicationGraphNode_AlwaysRelevant_ForConnection.ReplicationGraphNode.Object
	Actor* LastViewer;//[Offset: 0x68, Size: 0x8]
	Actor* LastViewTarget;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: TigerRespawnStreamingWidget.TigerWidget.UserWidget.Widget.Visual.Object
	float ShowStartTime;//[Offset: 0x280, Size: 0x4]
	float RespawnLoadingTimeLimitInMs;//[Offset: 0x284, Size: 0x4]
	float RespawnStreamingActorsUpdateTimeLimitInMs;//[Offset: 0x288, Size: 0x4]
	enum StreamingStatus;//[Offset: 0x2a0, Size: 0x1]
	void Restart();// 0x15d4040
	void PrintInfiniteLoadingDebugInfo();// 0x15d3fd0
	void OnStreamingStatusChanged(enum InStreamingStatus);// 0x197e4f0
	void HandleLifeStatusChanged(enum InNewLifeStatus);// 0x15d3e30

--------------------------------
Class: TigerRewardEntryItem.TigerRewardEntry.Object
	TigerInventoryItemBase* GetItem();// 0x15d38e0

--------------------------------
Class: TigerRewardEntryPerk.TigerRewardEntry.Object
	TigerPerkItem* GetPerkItem();// 0x15d3990

--------------------------------
Class: TigerRichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x150, Size: 0x58]
	LinearColor ColorAndOpacity;//[Offset: 0x1a8, Size: 0x10]
	TigerRichTextBlockDecorator*[] Decorators;//[Offset: 0x1b8, Size: 0x10]
	void SetText(out const FText InText);// 0x15d4520
	void SetOpacity(float InOpacity);// 0x15d42c0
	void SetColorAndOpacity(out const LinearColor InColorAndOpacity);// 0x15d4230
	FText GetText();// 0x15d3d50

--------------------------------
Class: TigerRichTextBlockDecorator.Object
	bool bReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int RevealedIndex;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: TigerRichTextBlockIconDecorator.RichTextBlockDecorator.Object
	bool bUsingGamePad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	TigerPlayerController* PlayerControllerRef;//[Offset: 0x30, Size: 0x8]
	DataTable* IconImages;//[Offset: 0x40, Size: 0x8]
	TigerKeyTextureMapping* KeyTextureMapping;//[Offset: 0x48, Size: 0x8]
	TigerKeyTextureMapping* KeyTextureMappingXbox;//[Offset: 0x50, Size: 0x8]
	void OnUseGamepadChanged(bool InUsingGamepad);// 0x15d70a0
	void InitializeValues(TigerPlayerController* InTigerController, TigerStyledRichTextBlock* InOwningRichTextBlock);// 0x15d6f90
	bool GetIsUsingGamePad();// 0x15d6f40
	SlateBrush GetBrushForKeyInternal(Key InKey);// 0x197e4f0
	SlateBrush GetBrushForAxisInternal(out const FName InName, const float InScale);// 0x197e4f0
	SlateBrush GetBrushForActionInternal(out const FName InName);// 0x197e4f0

--------------------------------
Class: TigerRoofSystem.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	float Width;//[Offset: 0x230, Size: 0x4]
	float Depth;//[Offset: 0x234, Size: 0x4]
	void OnUpgrade(int InVersion);// 0x149f800

--------------------------------
Class: TigerRoofSystemFreeTransformable.Actor.Object
	SceneComponent* Root;//[Offset: 0x228, Size: 0x8]
	SplineComponent* SplineComponent;//[Offset: 0x230, Size: 0x8]
	TigerRoofSystemFreeTransformableCorner[] Corners;//[Offset: 0x238, Size: 0x10]
	void OnUpgrade(int InVersion);// 0x149f800

--------------------------------
Class: TigerRoofSystemFreeTransformableCorner
	PoseableMeshComponent* CornerComponent;//[Offset: 0x0, Size: 0x8]
	StaticMeshComponent* StaticComponent;//[Offset: 0x8, Size: 0x8]
	ProceduralMeshComponent* CollisionComponent;//[Offset: 0x10, Size: 0x8]
	Vector TopBoneLocation;//[Offset: 0x18, Size: 0xc]
	Vector LeftBoneLocation;//[Offset: 0x24, Size: 0xc]
	Vector RightBoneLocation;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: TigerSafeHavenVolume.TriggerVolume.Volume.Brush.Actor.Object
	TigerHaven* AssignedHaven;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: TigerSafeZoneSettings.DeveloperSettings.Object
	Vector2D SafeZoneRelativeScreenSpaceDimensions;//[Offset: 0x38, Size: 0x8]
	float UIZoneAspectRatio;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1]
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 0x1]
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x29d1900

--------------------------------
Class: TigerSafeZoneWidget.SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: TigerScreenshotMapGenerationSettings.DeveloperSettings.Object
	float Width;//[Offset: 0x38, Size: 0x4]
	int Resolution;//[Offset: 0x3c, Size: 0x4]
	Vector2D Start;//[Offset: 0x40, Size: 0x8]
	Vector2D End;//[Offset: 0x48, Size: 0x8]
	float Height;//[Offset: 0x50, Size: 0x4]
	TigerPostProcessSettingsSetup PostProcessSetup;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: TigerPostProcessSettingsSetup
	MaterialInterface*[] PostProcessMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TigerScreenshotMapBuilder.Actor.Object
	TigerPlayerController* PlayerController;//[Offset: 0x228, Size: 0x8]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	void TakeScreenshot();// 0x15db700
	void HandleScreenShotTaken();// 0x15dae70

--------------------------------
Class: TigerScreenTransition.TigerWidget.UserWidget.Widget.Visual.Object
	CurveFloat* ScreenTransitionCurveIn;//[Offset: 0x280, Size: 0x8]
	CurveFloat* ScreenTransitionCurveOut;//[Offset: 0x288, Size: 0x8]
	delegate OnTransitionInFinished;//[Offset: 0x290, Size: 0x10]
	delegate OnTransitionOutFinished;//[Offset: 0x2a0, Size: 0x10]
	enum CurrentTransitionState;//[Offset: 0x2b0, Size: 0x1]
	float GetCurrentTransitionProgress();// 0x15dae10
	void BeginTransition();// 0x15dac20

--------------------------------
Class: TigerServerPushConnectionManager.TigerPushConnectionManager.Object

--------------------------------
Class: TigerSharedVendorUI.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnShortcutHeaderClicked;//[Offset: 0x280, Size: 0x10]
	delegate OnMainHeaderClicked;//[Offset: 0x290, Size: 0x10]
	TigerPaperDoll* VendorPaperDoll;//[Offset: 0x2a0, Size: 0x8]
	class TigerPaperDoll* PaperDollClass;//[Offset: 0x2a8, Size: 0x8]
	FText VendorName;//[Offset: 0x2b8, Size: 0x18]
	FText VendorPurpose;//[Offset: 0x2d0, Size: 0x18]
	void TabMenuRightGamepad();// 0x197e4f0
	void TabMenuLeftGamepad();// 0x197e4f0
	void SwitchToDialogueWindow();// 0x197e4f0
	void SwitchToBlockingDialogueWindow();// 0x197e4f0
	void SpawnPaperDoll();// 0x15db6e0
	void OnHeaderTabClicked__DelegateSignature();// 0x197e4f0

--------------------------------
Class: TigerSharkDeathTriggerVolume.TriggerVolume.Volume.Brush.Actor.Object
	class Actor* Shark;//[Offset: 0x260, Size: 0x8]
	Rotator SharkRotation;//[Offset: 0x268, Size: 0xc]
	Vector SharkSpawnLocationOffset;//[Offset: 0x274, Size: 0xc]
	float KillDelay;//[Offset: 0x280, Size: 0x4]
	void OnBeginOverlap(Actor* InOverlappedActor, Actor* InOtherActor);// 0x15dfdc0
	void KillVictim();// 0x15dfcb0
	void HandleSharkVictim(TigerCharacter* InVictim);// 0x15dfa80

--------------------------------
Class: TigerSharknetAgent.TigerDsBackendAgent.Object
	FString DsVersion;//[Offset: 0x60, Size: 0x10]
	float MaxRegisterRetryDelaySeconds;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: TigerGeneratedStaticMeshActor.Actor.Object
	StaticMeshComponent* MeshComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: TigerSidewalkSpline.TigerRebuildableActor.Actor.Object
	PrimitiveComponent*[] OrderedComponentsToMerge;//[Offset: 0x240, Size: 0x10]

--------------------------------
Class: TigerSignificanceManager.SignificanceManager.Object

--------------------------------
Class: TigerSignificanceSettings.DeveloperSettings.Object
	TigerSignificanceBudget Budgets;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: TigerSignificanceBudget
	TigerSignificancePlayerBucket[] PlayerBuckets;//[Offset: 0x0, Size: 0x10]
	TigerSignificanceElysiumNpcBucket[] ElysiumNpcBuckets;//[Offset: 0x10, Size: 0x10]
	TigerSignificanceBotBucket[] BotBuckets;//[Offset: 0x20, Size: 0x10]
	float[] PlayerUroScreenSizeThresholds;//[Offset: 0x30, Size: 0x10]
	float[] NpcUroScreenSizeThresholds;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerSignificancePlayerBucket
	int BucketSize;//[Offset: 0x0, Size: 0x4]
	float TickRate;//[Offset: 0x4, Size: 0x4]
	float MoveCompTickRate;//[Offset: 0x8, Size: 0x4]
	UInt32Property VisibleMeshesBitMask;//[Size: 0x4]
	bool bEnableClothSim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bEnableFootIk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x12, Size: 0x1]

--------------------------------
Class: TigerSignificanceElysiumNpcBucket
	int BucketSize;//[Offset: 0x0, Size: 0x4]
	float TickRate;//[Offset: 0x4, Size: 0x4]
	UInt32Property VisibleMeshesBitMask;//[Size: 0x4]
	bool bForceLastLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bEnableClothSim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: TigerSignificanceBotBucket
	int BucketSize;//[Offset: 0x0, Size: 0x4]
	float TickRate;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TigerSingleItemSpawner.TigerLootSpawner.Actor.Object
	enum TelemetryIDSource;//[Offset: 0x278, Size: 0x1]
	Transform GetSecondaryItemTransform();// 0x15df9a0
	Transform GetPrimaryItemTransform();// 0x15df9a0

--------------------------------
Class: TigerSocialSubscreenUI.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	void Open();// 0x1549c60
	void OnOpen();// 0x197e4f0
	void OnClose();// 0x197e4f0
	bool IsOpen();// 0x15dfc80
	void Close();// 0x15df8c0

--------------------------------
Class: TigerSocialElysiumUI.TigerSocialSubscreenUI.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayerStateFriendPair[] GetSortedPlayerList();// 0x15dfa00

--------------------------------
Class: TigerPlayerStateFriendPair
	TigerPlayerState* PlayerState;//[Offset: 0x0, Size: 0x8]
	TigerFriend* Friend;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerSocialFriendInviteListUI.TigerWidget.UserWidget.Widget.Visual.Object
	void StopMonitoring();// 0x15e02b0
	void PopulateListAndMonitorChanges();// 0x15e00e0
	void OnPopulateInvites(out const TigerFriendInvite*[] InFriendInvites);// 0x197e4f0
	void OnInviteRemoved(const TigerFriendInvite* InInvite);// 0x197e4f0
	void OnInviteReceived(const TigerFriendInvite* InInvite);// 0x197e4f0
	void OnFriendAdded(TigerFriend* InNewFriend);// 0x197e4f0

--------------------------------
Class: TigerSocialFriendsUI.TigerSocialSubscreenUI.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	void OnFriendsLoaded();// 0x197e4f0
	void OnFriendServiceStatusChanged(enum InServiceStatus);// 0x197e4f0
	void OnFriendRemoved(TigerFriend* InLostFriend);// 0x197e4f0
	void OnFriendAdded(TigerFriend* InNewFriend);// 0x197e4f0

--------------------------------
Class: TigerSocialInboxUI.TigerSocialSubscreenUI.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	void OnFriendServiceStatusChanged(enum InServiceStatus);// 0x197e4f0

--------------------------------
Class: TigerSocialPartyInviteListUI.TigerWidget.UserWidget.Widget.Visual.Object
	void StopMonitoring();// 0x15e02d0
	void OnInviteRemoved(const TigerPartyInvite* InInvite);// 0x197e4f0
	void OnInviteReceived(const TigerPartyInvite* InInvite);// 0x197e4f0
	void MonitorInvites();// 0x15dfda0

--------------------------------
Class: TigerSocialSearchPlayerUI.TigerWidget.UserWidget.Widget.Visual.Object
	void OnSearchPlayerResponse(TigerFriend* InPlayer);// 0x197e4f0
	void Init();// 0x15dfb30
	void Close();// 0x15df8a0

--------------------------------
Class: TigerSocialUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerSocialSubscreenUI* CurrentSubscreen;//[Offset: 0x3c0, Size: 0x8]
	void OpenSubscreen(TigerSocialSubscreenUI* InSubscreen);// 0x15e3350
	void OnSubscreenOpen(TigerSocialSubscreenUI* InSubscreen);// 0x197e4f0
	void CloseCurrentSubscreen();// 0x15e3110

--------------------------------
Class: TigerSpawnMechanicBattleRoyaleBase.TigerSpawnMechanic.Object
	TigerMatchGameMode* GameMode;//[Offset: 0x28, Size: 0x8]
	Actor*[] AllPlayerStarts;//[Offset: 0x30, Size: 0x10]
	Actor*[] UnusedPlayerStarts;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerSpawnMechanicBattleRoyaleMapSelection.TigerSpawnMechanicBattleRoyaleBase.TigerSpawnMechanic.Object
	TigerDesiredSpawnLocation[] DesiredSpawnLocations;//[Offset: 0x50, Size: 0x10]
	void OnPreMatchStateChanged(const TigerPreMatchStateInfo InNewInfo);// 0x15e3230

--------------------------------
Class: TigerDesiredSpawnLocation
	TigerPlayerController* PlayerController;//[Offset: 0x0, Size: 0x8]
	Actor* AssignedSpawnPoint;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerSpawnMechanicBattleRoyaleRandomStart.TigerSpawnMechanicBattleRoyaleBase.TigerSpawnMechanic.Object
	TigerGroupCoordinator* GroupCoordinator;//[Offset: 0x50, Size: 0x8]
	class TigerWorldMarker* TestSpawnPointsMapMarkerClass;//[Offset: 0x58, Size: 0x8]
	Vector2D[] GroupSpawnLocations;//[Offset: 0x60, Size: 0x10]
	<TigerPlayerState*,TigerGroupId> FakeGroupIds;//[Offset: 0xc0, Size: 0x50]
	float MinimumDistanceBetweenGroups;//[Offset: 0x110, Size: 0x4]
	float DistanceBetweenGroupsFalloffLength;//[Offset: 0x114, Size: 0x4]

--------------------------------
Class: TigerSpawnMechanicExtendedGroupRandom.TigerSpawnMechanicBattleRoyaleRandomStart.TigerSpawnMechanicBattleRoyaleBase.TigerSpawnMechanic.Object

--------------------------------
Class: TigerSpawnMechanicPlayInEditor.TigerSpawnMechanic.Object

--------------------------------
Class: TigerSpawnMechanicRandomPlayerStart.TigerSpawnMechanic.Object
	TigerGameMode* GameMode;//[Offset: 0x28, Size: 0x8]
	Actor*[] AllPlayerStarts;//[Offset: 0x30, Size: 0x10]
	Actor*[] UnusedPlayerStarts;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TigerSpawnMechanicTutorial.TigerSpawnMechanicRandomPlayerStart.TigerSpawnMechanic.Object
	Actor*[] AllBotStarts;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: TigerSplatmapSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	bool bRenderSplatmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Texture2D* DefaultStamp;//[Offset: 0x40, Size: 0x28]
	float TimeBetweenAutoExportInSeconds;//[Offset: 0x68, Size: 0x4]
	bool bUseCtrlToDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	MaterialInterface* DrawMaterialMaster;//[Offset: 0x70, Size: 0x28]
	FName DrawMaterialTextureParamName;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: TigerSplatmapPaintingSettings.Object
	Texture2D* Stamp;//[Offset: 0x28, Size: 0x8]
	bool[] Channels;//[Offset: 0x30, Size: 0x10]
	float Opacity;//[Offset: 0x40, Size: 0x4]
	float StampWorldSize;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: TigerSplatmapGenerationSettings.Object
	float CellBounds;//[Offset: 0x28, Size: 0x4]
	IntPoint CellCount;//[Offset: 0x2c, Size: 0x8]
	IntPoint CellTextureDimensions;//[Offset: 0x34, Size: 0x8]
	Vector CenterLocation;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: TigerSplatmap.Actor.Object
	MaterialParameterCollection* SplatmapParameterCollection;//[Offset: 0x228, Size: 0x8]
	TextureRenderTarget2D* SplatTextureRenderTarget;//[Offset: 0x230, Size: 0x8]
	TextureRenderTarget2D* SplatTextureHeightRenderTarget;//[Offset: 0x238, Size: 0x8]
	Material* SplatmapCellReadMaterial;//[Offset: 0x240, Size: 0x8]
	MaterialInstanceDynamic* SplatmapCellReadMaterialInstance;//[Offset: 0x248, Size: 0x8]
	float BoundsSize;//[Offset: 0x250, Size: 0x4]
	float HeightmapBoundsSize;//[Offset: 0x254, Size: 0x4]
	TigerSplatmapGenerationSettings* CurrentGenerationSettings;//[Offset: 0x258, Size: 0x8]
	TigerSplatmapCell*[] SplatmapCells;//[Offset: 0x260, Size: 0x10]
	SceneComponent* Root;//[Offset: 0x270, Size: 0x8]
	Actor* CellOwner;//[Offset: 0x278, Size: 0x8]
	<TigerSplatmapCell*> CellsInRangeLastFrame;//[Offset: 0x280, Size: 0x50]
	<TigerSplatmapCell*> CellsInRangeThisFrame;//[Offset: 0x2d0, Size: 0x50]
	float TickInterval;//[Offset: 0x320, Size: 0x4]
	float MinRerenderDistance;//[Offset: 0x324, Size: 0x4]
	Canvas* SplatCanvas;//[Offset: 0x328, Size: 0x8]
	Canvas* HeightCanvas;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: TigerSplatmapCell.Actor.Object
	Texture2D* TextureResource;//[Offset: 0x228, Size: 0x28]
	MaterialInterface* DrawMaterial;//[Offset: 0x250, Size: 0x28]
	Texture2D* HeightTextureResource;//[Offset: 0x278, Size: 0x28]
	MaterialInterface* HeightDrawMaterial;//[Offset: 0x2a0, Size: 0x28]
	float BoundsSize;//[Offset: 0x2f8, Size: 0x4]

--------------------------------
Class: TigerSpotLight.Light.Actor.Object
	TigerSpotLightComponent* SpotLightComponent;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: TigerSpotLightComponent.SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object

--------------------------------
Class: TigerStaggerComponent.ActorComponent.Object
	AnimMontage* CurrentStaggerAnimation;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: TigerStaticMeshUserData.AssetUserData.Object
	enum StaticMeshType;//[Offset: 0x28, Size: 0x1]
	bool bIsClimbable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bIsWallJumpable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bFadeWhenNearToCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bIsLowVaultable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bIsLedgeGrabbable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bForceHorizontalVelocityOnFallingImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]

--------------------------------
Class: TigerPiercingPhysicsAssetUserData.AssetUserData.Object
	float Mass;//[Offset: 0x28, Size: 0x4]
	float ForceAmount;//[Offset: 0x2c, Size: 0x4]
	float AnglePitchLimit;//[Offset: 0x30, Size: 0x4]
	float AngleRollLimit;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: TigerStatsSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: TigerStore.Actor.Object
	SceneComponent* RootSceneComponent;//[Offset: 0x228, Size: 0x8]
	TigerBlueprintLootLocationComponent* LootConfiguration;//[Offset: 0x230, Size: 0x8]
	BoxComponent* AchievementZone;//[Offset: 0x238, Size: 0x8]
	bool bHasAlarmedTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	enum StoreTypeIdentifier;//[Offset: 0x241, Size: 0x1]
	int StoreId;//[Offset: 0x244, Size: 0x4]
	void OnAchievementZoneBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x15e79a0
	bool IsEveryDoorOpen();// 0x15e7970
	bool IsEligibleForAchievement(TigerCharacter* InCharacter);// 0x15e78d0
	void GiveAchievementProgress(TigerCharacter* InCharacter);// 0x15e7810

--------------------------------
Class: TigerStoreEntryWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerMetaStoreEntry RepresentedStoreEntry;//[Offset: 0x280, Size: 0x50]
	bool HasValidStoreEntry();// 0x15e78a0
	void BuyStoreEntry(out const delegate InOnBuyResponse, const int InQuantity);// 0x15e76f0

--------------------------------
Class: TigerStreamingBenchmarkTraversalStrategy.Object

--------------------------------
Class: TigerStreamingBenchmarkTeleportStrategy.TigerStreamingBenchmarkTraversalStrategy.Object

--------------------------------
Class: TigerStreamingBenchmarkFlyingStrategy.TigerStreamingBenchmarkTraversalStrategy.Object

--------------------------------
Class: TigerUISettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	DataTableRowHandle DefaultTextStyle;//[Offset: 0x38, Size: 0x10]
	DataTable* DefaultTextStyleSet;//[Offset: 0x48, Size: 0x28]

--------------------------------
Class: TigerStyledRichTextBlockDecorator.RichTextBlockDecorator.Object

--------------------------------
Class: TigerSupplyDrop.TigerLootBox.TigerInteractiveObject.Actor.Object
	BoxComponent* BoxRoot;//[Offset: 0x310, Size: 0x8]
	Transform FinalTransform;//[Offset: 0x320, Size: 0x30]
	TigerItemLootTable* LootTable;//[Offset: 0x350, Size: 0x8]
	int MinNumItems;//[Offset: 0x358, Size: 0x4]
	int MaxNumItems;//[Offset: 0x35c, Size: 0x4]
	float MaxFallSpeed;//[Offset: 0x360, Size: 0x4]
	void OnRep_FinalTransform();// 0x15f41d0
	void HideParachute();// 0x197e4f0

--------------------------------
Class: TigerSupplyDropHelicopter.Actor.Object

--------------------------------
Class: TigerSyncPartyCrossplaySettingsAysnc.BlueprintAsyncActionBase.Object
	delegate SettingSynced;//[Offset: 0x30, Size: 0x10]
	static TigerSyncPartyCrossplaySettingsAysnc* SyncPartyCrossplaySettings(const Object* InWorldContextObject, PlayerController* InPlayerController);// 0x15f4230
	void CrossplaySettingSynced(enum InSyncedPlatform);// 0x15f3b50

--------------------------------
Class: TigerTargetDummy.TigerCharacter.Character.Pawn.Actor.Object
	Actor* SplineActor;//[Offset: 0x870, Size: 0x8]
	float SplineOffset;//[Offset: 0x878, Size: 0x4]
	float MoveSpeed;//[Offset: 0x87c, Size: 0x4]
	float DownedDuration;//[Offset: 0x880, Size: 0x4]
	float TargetDummyHealth;//[Offset: 0x884, Size: 0x4]
	enum PivotPlacement;//[Offset: 0x888, Size: 0x1]
	bool bAutoRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]
	bool bInitiallyDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88a, Size: 0x1]
	delegate OnShotDown;//[Offset: 0x890, Size: 0x10]
	delegate OnRevived;//[Offset: 0x8a0, Size: 0x10]
	SplineComponent* Spline;//[Offset: 0x8b0, Size: 0x8]
	<enum,CurveFloat*> RotationCurveDown;//[Offset: 0x8c0, Size: 0x50]
	<enum,CurveFloat*> RotationCurveUp;//[Offset: 0x910, Size: 0x50]
	float HingeXOffset;//[Offset: 0x960, Size: 0x4]
	bool bIsDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96a, Size: 0x1]
	void RespawnDummy();// 0x15f41f0
	void OnRep_Downed();// 0x15f41b0
	void OnHit(bool bInWasDowned, const TigerPlayer* InInstigator);// 0x197e4f0
	void Multicast_PlayHitSoundDowned(const TigerPlayer* InInstigator);// 0x15f4000
	void Multicast_PlayHitSound(const TigerPlayer* InInstigator);// 0x15f3f70
	void DownDummy();// 0x15f3bd0

--------------------------------
Class: TigerTeamViewUI.TigerWidget.UserWidget.Widget.Visual.Object
	TigerPlayerState*[] OtherGroupMembers;//[Offset: 0x280, Size: 0x10]
	TigerPreMatchPaperDollComponent* PreMatchPaperDollComp;//[Offset: 0x290, Size: 0x8]
	FString PreHighlightTag;//[Offset: 0x298, Size: 0x10]
	FName[] GroupMemberPaperDollTags;//[Offset: 0x2a8, Size: 0x10]
	void OnGroupMemberAdded(byte InMemberId, TigerPlayerState* InPlayerState, bool bInIsLeftSide, TigerPaperDoll* InPaperDoll);// 0x197e4f0
	void HandleGroupMembersChanged(TigerGroupStateComponent* InGroupStateComponent, out const TigerPlayerState*[] InPreviousMembers);// 0x15f3d40

--------------------------------
Class: TigerTelemetryDataDefinitions.Object
	enum ArchetypeDefinitions;//[Offset: 0x28, Size: 0x1]
	enum ClanDefinitions;//[Offset: 0x29, Size: 0x1]
	enum DamageSourceIdentifiers;//[Offset: 0x2a, Size: 0x1]
	enum ExperienceSources;//[Offset: 0x2b, Size: 0x1]
	enum DamageTypes;//[Offset: 0x2c, Size: 0x1]
	enum Disciplines;//[Offset: 0x2d, Size: 0x1]
	enum MatchmakingCancelReasons;//[Offset: 0x2e, Size: 0x1]
	enum CauseOfPingRemoval;//[Offset: 0x2f, Size: 0x1]
	enum DeviceTypes;//[Offset: 0x30, Size: 0x1]
	enum PlatformTypes;//[Offset: 0x31, Size: 0x1]
	enum MapIds;//[Offset: 0x32, Size: 0x1]
	enum RankedModes;//[Offset: 0x33, Size: 0x1]
	enum GameplayModes;//[Offset: 0x34, Size: 0x1]
	enum ChallengeTypes;//[Offset: 0x35, Size: 0x1]
	enum TelemetrySourceID;//[Offset: 0x36, Size: 0x1]
	enum BattlepassTypes;//[Offset: 0x37, Size: 0x1]
	enum HardCurrencyReceiveMethod;//[Offset: 0x38, Size: 0x1]
	enum NetworkTypes;//[Offset: 0x39, Size: 0x1]
	enum NetworkIPType;//[Offset: 0x3a, Size: 0x1]
	enum RebirthType;//[Offset: 0x3b, Size: 0x1]
	enum MetaItemSourceType;//[Offset: 0x3c, Size: 0x4]
	enum DeathType;//[Offset: 0x40, Size: 0x1]
	enum EngagementEndedReason;//[Offset: 0x41, Size: 0x1]

--------------------------------
Class: TigerTelemetryIDInterface.Interface.Object

--------------------------------
Class: TigerTelemetryUtilityBFL.BlueprintFunctionLibrary.Object
	static void UpdateTelemetryIDBundle(out TigerTelemetryIDBundle InBundle);// 0x15fbbf0
	void OnTelemetryIDObjectsLoaded__DelegateSignature(out const TigerTelemetryIDBundle[] InLoadedBundle);// 0x197e4f0
	static void MoveTelemetryIDFromCombinedItemsToNewItem(class TigerCharacterCombinedItemConfiguration[] InCombinedItemObjectPaths, class TigerInventoryItemBase[] InNewItemObjectPaths, out FString[] OutLogs, out FString[] OutErrorStrings);// 0x15fb650
	static bool ImportTelemetryIDsFromHistoricData(out const TigerTelemetryIDBundle[] InBundles, out TigerTelemetryIdImportData[] OutImportData);// 0x15fb420
	static FString GetTelemetryIDsHistoricDataLocalFilePath();// 0x15fb140
	static FString GetTelemetryIdAsString(out const TigerTelemetryIDBundle InTelemetryBundle);// 0x15fb1c0
	static class Object[] GetBlueprintsUsingTelemetryID(out const FName[] InClassExclusionList);// 0x15fad80
	static void GetAllUObjectsImplementingTelemetryIDInterfaceAsync(out const delegate InOnLoadedDelegate);// 0x15facb0
	static TigerTelemetryIDCollisionBundle[] FindTelemetryIDCollisions(TigerTelemetryIDBundle[] InIDBundles, out bool bOutHadInvalidIDs, out bool bOutValidIDsExisted);// 0x15fa9e0
	static TigerTelemetryIDBundle[] FilterOutBundlesWithID(out const TigerTelemetryIDBundle[] InBundles);// 0x15fa8f0
	static bool ExportTelemetryIdsToJson(out const TigerTelemetryIDBundle[] InIDBundles, const TigerTelemetryIDExportFilter InFilter);// 0x15fa7f0
	static void ExportTelemetryDefinitionsToJson(FString InPingDefinitionName, out const TigerTelemetryDefinition InPingDefinition);// 0x15fa680
	static bool CheckTelemetryIDIsCollisionFree(out const TigerTelemetryIDBundle[] InIDBundles, out TigerTelemetryIDBundle InBundleToValidate, int InOuterIndex, out int OutInnerCollisionIndex);// 0x15fa4d0
	static TigerTelemetryIDBundle[] CheckAndGenerateUniqueTelemetryIds(out TigerTelemetryIDBundle[] InIDBundles);// 0x15fa3e0

--------------------------------
Class: TigerTelemetryIDBundle
	Object* FoundObject;//[Offset: 0x0, Size: 0x8]
	UInt64Property PersistentID;//[Size: 0x8]

--------------------------------
Class: TigerTelemetryIdImportData
	Object* Object;//[Offset: 0x18, Size: 0x8]
	FString TelemetryIdString;//[Offset: 0x20, Size: 0x10]
	FString OldTelemetryIdString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: TigerTelemetryIDCollisionBundle
	Object* CollidingObject1;//[Offset: 0x0, Size: 0x8]
	Object* CollidingObject2;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TigerTelemetryIDExportFilter
	class Object* FilterClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TigerTelemetryDefinition
	FString EnumName;//[Offset: 0x0, Size: 0x10]
	FString VariableType;//[Offset: 0x10, Size: 0x10]
	int ActualDataSize;//[Offset: 0x20, Size: 0x4]
	<FString,int> KeyValuePairs;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: TigerTextWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TextBlock* GetText();// 0x197e4f0

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x188, Size: 0x58]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 0x88]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x290, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x296, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x29d6040
	void SetText(FText InText);// 0x29d5f50
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x29d5d20
	void SetShadowOffset(Vector2D InShadowOffset);// 0x29d5a80
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x29d59f0
	void SetOpacity(float InOpacity);// 0x29d5970
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x29d5650
	void SetFont(SlateFontInfo InFontInfo);// 0x29d5090
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x29d4e20
	void SetAutoWrapText(bool InAutoTextWrap);// 0x29d4d90
	FText GetText();// 0x29d49b0
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x29d4770
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x29d4740

--------------------------------
Class: TigerThrallMapData.DataAsset.Object
	Texture2D* Map;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: TigerThrallMapUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	FName SubLevelName;//[Offset: 0x3c0, Size: 0x8]
	FName SubLevelCamName;//[Offset: 0x3c8, Size: 0x8]

--------------------------------
Class: TigerThrallMenu.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerLocalThrallData*[] ThrallSlots;//[Offset: 0x3c0, Size: 0x10]
	TigerLocalThrallData* CurrentThrall;//[Offset: 0x3d0, Size: 0x8]
	enum ThrallMenuIndex;//[Offset: 0x3d8, Size: 0x1]
	bool IsCurrentSlotEmpty();// 0x15fb620
	void InitialiseOnOpen(const TigerPlayerController* InController);// 0x15fb590
	void IncrementIndex();// 0x15fb570
	int GetSlotIndex();// 0x15fb0f0
	void DecrementIndex();// 0x15fa660

--------------------------------
Class: TigerThrallMissionDetailsUi.UserWidget.Widget.Visual.Object
	FText MissionName;//[Offset: 0x260, Size: 0x18]
	FText MissionObjective;//[Offset: 0x278, Size: 0x18]
	FText MissionStatRequirements;//[Offset: 0x290, Size: 0x18]
	int MissionRewardXp;//[Offset: 0x2a8, Size: 0x4]
	FText MissionRewardItems;//[Offset: 0x2b0, Size: 0x18]
	int MissionTurnsLeft;//[Offset: 0x2c8, Size: 0x4]
	void LoadMissionDetails(int InMissionUId);// 0x14c0500

--------------------------------
Class: TigerThrallSystemSettings.DeveloperSettings.Object
	DataTable* AbilitiesTable;//[Offset: 0x38, Size: 0x28]
	DataTable* BaseThrallsTable;//[Offset: 0x60, Size: 0x28]
	DataTable* StatModifiersTable;//[Offset: 0x88, Size: 0x28]
	DataTable* ThrallMissionsTable;//[Offset: 0xb0, Size: 0x28]
	static DataTable* GetThrallMissionsTable();// 0x15fb2c0
	static DataTable* GetThrallAbilitiesTable();// 0x15fb290
	static DataTable* GetStatModifiersTable();// 0x15fb110
	static DataTable* GetBaseThrallsTable();// 0x15fad50

--------------------------------
Class: TigerThrallTable.TigerInteractiveObject.Actor.Object
	TigerThrallMapUI* TigerThrallMapUI;//[Offset: 0x2a0, Size: 0x8]
	bool bIsThrallMapUIOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	CameraComponent* Camera;//[Offset: 0x2b0, Size: 0x8]
	float TimeToTransition;//[Offset: 0x2b8, Size: 0x4]
	float CameraExponent;//[Offset: 0x2bc, Size: 0x4]
	StaticMeshComponent* TableMesh;//[Offset: 0x2c0, Size: 0x8]
	TigerPlayer* InteractingPlayer;//[Offset: 0x2c8, Size: 0x8]
	void SwitchToTableCamera(bool bIsInstant, TigerPlayerController* InTigerController);// 0x1602db0
	void SwitchToPlayerCamera(bool bIsInstant, TigerPlayerController* InTigerController);// 0x1602ce0
	void StopInteracting(TigerPlayerController* InTigerController);// 0x1602c50
	void StartCameraTransition();// 0x1602c30
	void OpenUI(TigerPlayerController* InTigerController);// 0x1602870
	bool IsThrallMapOpen();// 0x1602630
	TigerPlayerController* GetTigerController();// 0x1602520

--------------------------------
Class: TigerThrowingAxe.Actor.Object
	bool bHasBeenReflected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	float GetDamageMultiplier();// 0x15239c0
	Actor* CopyAndReflect(TigerCharacter* InNewOwner, out const Vector InSpawnLocation, out const Rotator InSpawnRotation);// 0x16023f0

--------------------------------
Class: TigerThumbnailCameraComponent.SceneComponent.ActorComponent.Object
	FString CameraTag;//[Offset: 0x1f8, Size: 0x10]

--------------------------------
Class: TigerTitleErrorUI.TigerWidget.UserWidget.Widget.Visual.Object
	TigerOnlineError* OnlineError;//[Offset: 0x280, Size: 0x8]
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	void Open();// 0x1602850
	void OnOpen();// 0x197e4f0
	void OnClose();// 0x197e4f0
	void Close();// 0x16023d0

--------------------------------
Class: TigerTooltipKeyPromptWidget.TigerWidget.UserWidget.Widget.Visual.Object
	delegate OnPromptPressed;//[Offset: 0x280, Size: 0x10]
	delegate OnPromptHeld;//[Offset: 0x290, Size: 0x10]
	bool bHasHoldAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	void SetPromptText(out const FText PromptText);// 0x197e4f0
	void SetHoldProgress(const float HoldProgress);// 0x197e4f0
	void PromptPressed();// 0x1602920
	void PromptHeld();// 0x1602900

--------------------------------
Class: TigerTooltipUI.TigerWidget.UserWidget.Widget.Visual.Object
	TigerTooltipKeyPromptWidget* AddKeyPrompt(out const FText PromptText, bool bHasHoldAction);// 0x197e4f0
	void AddDropItemPrompt(TigerItemAsset* ItemToDrop);// 0x1602110

--------------------------------
Class: TigerTransferFromMatchGameMode.GameModeBase.Info.Actor.Object
	void HideMouseCursor();// 0xb7a5a0

--------------------------------
Class: TigerTransferFromMatchGameState.TigerGameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: TigerTransitionWidget.UserWidget.Widget.Visual.Object
	float AnimationDelay;//[Offset: 0x260, Size: 0x4]
	float AnimationSpeed;//[Offset: 0x264, Size: 0x4]
	delegate OnTransitionStarted;//[Offset: 0x268, Size: 0x10]
	delegate OnTransitionFinished;//[Offset: 0x278, Size: 0x10]
	float Progress;//[Offset: 0x288, Size: 0x4]
	MaterialInstanceDynamic* EffectMaterialInstance;//[Offset: 0x290, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x1602e80
	void SetEffectMaterialInstance(MaterialInstanceDynamic* InMaterialInstance);// 0x1602a60
	void SetAnimationSpeed(float InAnimationSpeed);// 0x16029e0
	void SetAnimationDelay(float InAnimationDelay);// 0x1602960
	void RestartAnimation();// 0x1602940
	void EnableRendering();// 0x197e4f0
	void DisableRendering();// 0x197e4f0

--------------------------------
Class: TigerTraversalAirDashState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalCrouchState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalDownedState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalFallState.TigerTraversalBaseFiniteState.Object
	TigerTraversalStateFallConfig* FallConfig;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: TigerTraversalStateFallConfig.TigerTraversalStateConfigBase.Object
	float DecelerationFactorFallingUpwardsFromSliding;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TigerTraversalFlyingState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalForcedMoveState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalJumpState.TigerTraversalBaseFiniteState.Object
	TigerTraversalStateJumpConfig* JumpConfig;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TigerTraversalStateJumpConfig.TigerTraversalStateConfigBase.Object
	int MaxJumpIndexForDiminishingReturnsCurve;//[Offset: 0x50, Size: 0x4]
	float TimeToReduceDiminishingReturnsCount;//[Offset: 0x54, Size: 0x4]
	float JumpForgivenessDistance;//[Offset: 0x58, Size: 0x4]
	float InitialJumpZVelocity;//[Offset: 0x5c, Size: 0x4]
	float PostJumpClimbInteractionDelay;//[Offset: 0x60, Size: 0x4]
	float JumpCoolDownTime;//[Offset: 0x64, Size: 0x4]
	bool bCancelJumpOnHeadImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	CurveFloat* DiminishingReturnsCurve;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: TigerTraversalLedgeGrabState.TigerTraversalBaseFiniteState.Object
	TigerTraversalStateLedgeGrabConfig* LedgeGrabConfig;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: TigerTraversalStateLedgeGrabConfig.TigerTraversalStateConfigBase.Object
	FName LedgeGrabAnimationName;//[Offset: 0x50, Size: 0x8]
	FName FallbackLedgeGrabAnimationName;//[Offset: 0x58, Size: 0x8]
	Vector LedgeGrabUpperBodyVolumeExtent;//[Offset: 0x60, Size: 0xc]
	Vector LedgeGrabClearanceCheckExtent;//[Offset: 0x6c, Size: 0xc]
	Vector LedgeGrabUpperBodyVolumeCheckPosition;//[Offset: 0x78, Size: 0xc]
	float AnimationBlendoutStartDelay;//[Offset: 0x84, Size: 0x4]
	float LedgeGrabAnimationTriggerMaxDistance;//[Offset: 0x88, Size: 0x4]
	float MaximumLedgeWallHeight;//[Offset: 0x8c, Size: 0x4]
	float MaximumLedgeOverHangDepth;//[Offset: 0x90, Size: 0x4]
	float LedgeGrabUpperBodyVolumeForwardOffset;//[Offset: 0x94, Size: 0x4]
	float LedgeGrabMaximumCameraAngleDifference;//[Offset: 0x98, Size: 0x4]
	float LedgeGrabForwardSearchDepth;//[Offset: 0x9c, Size: 0x4]
	float LedgeGrabBackwardSearchDepth;//[Offset: 0xa0, Size: 0x4]
	float LedgeGrabPositionSweepRadius;//[Offset: 0xa4, Size: 0x4]
	float LedgeGrabPositionHorizontalEdgeOffset;//[Offset: 0xa8, Size: 0x4]
	float LedgeGrabPositionVerticalOffset;//[Offset: 0xac, Size: 0x4]
	float StartingRotationSpeedForBringingCharacterBackToCameraFacing;//[Offset: 0xb0, Size: 0x4]
	float RotationSpeedGainPerSecond;//[Offset: 0xb4, Size: 0x4]
	float MaxTimeToFixCharacterRotation;//[Offset: 0xb8, Size: 0x4]
	bool bShouldAdjustLedgeGrabAnimationPlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bShouldUseExitLedgeGrabRotationInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]

--------------------------------
Class: TigerTraversalLowVaultState.TigerTraversalBaseFiniteState.Object
	AnimMontage* ActiveLowVaultMontage;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: TigerTraversalSlideJumpState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversaleStateForcedMoveConfig.TigerTraversalStateConfigBase.Object

--------------------------------
Class: TigerTraversalStateAirDashConfig.TigerTraversalStateConfigBase.Object
	bool bResetOnWallJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float JumpVerticalVelocity;//[Offset: 0x54, Size: 0x4]
	float PostJumpClimbInteractionDelay;//[Offset: 0x58, Size: 0x4]
	float JumpCoolDownTime;//[Offset: 0x5c, Size: 0x4]
	bool bPreventFallingSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bResetAimGlideOnDoubleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]

--------------------------------
Class: TigerTraversalStateSlideJumpConfig.TigerTraversalStateConfigBase.Object
	float JumpCoolDownTime;//[Offset: 0x50, Size: 0x4]
	float PostJumpClimbInteractionDelay;//[Offset: 0x54, Size: 0x4]
	float SlideHorizontalDirectionInfluenceThreshold;//[Offset: 0x58, Size: 0x4]
	float SlideJumpDecayRecoverySpeed;//[Offset: 0x5c, Size: 0x4]
	CurveFloat* JumpZVelocityOverSlideSpeed;//[Offset: 0x60, Size: 0x8]
	CurveFloat* SlideJumpHorizontalMultiplierOverVelocity;//[Offset: 0x68, Size: 0x8]
	CurveFloat* SlideJumpDecayCurve;//[Offset: 0x70, Size: 0x8]
	CurveFloat* SlideJumpAngledJumpCurve;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TigerTraversalStateWallJumpConfig.TigerTraversalStateConfigBase.Object
	TigerWallJumpBlendBundle DefaultWallJumpBlendBundle;//[Offset: 0x50, Size: 0x10]
	TigerWallJumpBlendBundle WallJumpBlendBundleFromClimb;//[Offset: 0x60, Size: 0x10]
	Vector WallJumpColliderOffset;//[Offset: 0x70, Size: 0xc]
	float PostJumpClimbInteractionDelay;//[Offset: 0x7c, Size: 0x4]
	float JumpCoolDownTime;//[Offset: 0x80, Size: 0x4]
	float WallJumpSphereColliderRadius;//[Offset: 0x84, Size: 0x4]
	float SecondaryWallSweepRadius;//[Offset: 0x88, Size: 0x4]
	float MaximumHorizontalJumpVelocity;//[Offset: 0x8c, Size: 0x4]
	float MinimumHorizontalJumpVelocity;//[Offset: 0x90, Size: 0x4]
	float WallJumpZVelocity;//[Offset: 0x94, Size: 0x4]
	float WallJumpInputDirectionCutOffAngle;//[Offset: 0x98, Size: 0x4]
	float MaxWallJumpStateDuration;//[Offset: 0x9c, Size: 0x4]
	float WallJumpDownwardWallNormalCutOffAngle;//[Offset: 0xa0, Size: 0x4]
	float WallJumpRequiredHalfAngleFromWallWhenHoldingForward;//[Offset: 0xa4, Size: 0x4]
	float WallJumpDeadzoneHalfAngle;//[Offset: 0xa8, Size: 0x4]
	float WallJumpMaxAllowedHalfAngleBeforeClamping;//[Offset: 0xac, Size: 0x4]
	bool bShouldCapNumberOfWallJumpsFromSimilarWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float ConsecutiveWallJumpNormalLikenessThreshold;//[Offset: 0xb4, Size: 0x4]
	float WallJumpDelayTime;//[Offset: 0xb8, Size: 0x4]
	float WallJumpDownwardSpeedGainInSeconds;//[Offset: 0xbc, Size: 0x4]
	float WallJumpSlideSpeedScale;//[Offset: 0xc0, Size: 0x4]
	float WallJumpMinimumWallSlideSpeed;//[Offset: 0xc4, Size: 0x4]
	float WallJumpMaximumWallSlideSpeed;//[Offset: 0xc8, Size: 0x4]
	float WallJumpForwardHalfAngleAnimationCutOff;//[Offset: 0xcc, Size: 0x4]
	enum WallJumpInputOption;//[Offset: 0xd0, Size: 0x1]
	byte MaximumNumberOfWallJumpsFromSimilarWall;//[Offset: 0xd1, Size: 0x1]
	byte NumberOfWallJumpsToRestoreOnDoubleJump;//[Offset: 0xd2, Size: 0x1]
	bool bShouldApplyDownwardForceDuringWallJumpDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	bool AdjustWallJumpSlideSpeedOnInputAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool bShouldValidateDownwardAngleOfHitResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	CurveFloat* WallJumpDelaySpeedCurve;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: TigerWallJumpBlendBundle
	float InputBlendScale;//[Offset: 0x0, Size: 0x4]
	float NormalBlendScale;//[Offset: 0x4, Size: 0x4]
	float VelocityDirectionBlendScale;//[Offset: 0x8, Size: 0x4]
	float VelocityForceScale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TigerTraversalStateDownedConfig.TigerTraversalStateConfigBase.Object
	float DownedMaxSpeed;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TigerTraversalStateLowVaultConfig.TigerTraversalStateConfigBase.Object
	FName LowVaultAnimationName;//[Offset: 0x50, Size: 0x8]
	Vector LowVaultLowerBodyVolumeExtent;//[Offset: 0x58, Size: 0xc]
	Vector LowVaultCheckOffset;//[Offset: 0x64, Size: 0xc]
	float LowVaultMaximumCameraAngleDifference;//[Offset: 0x70, Size: 0x4]
	float AnimationBlendoutStartDelay;//[Offset: 0x74, Size: 0x4]
	float LowVaultPositionVerticalOffset;//[Offset: 0x78, Size: 0x4]
	float HorizontalEndPositionOffset;//[Offset: 0x7c, Size: 0x4]
	bool bShouldAdjustLowVaultAnimationPlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: TigerTraversalStateWallHangConfig.TigerTraversalStateConfigBase.Object
	float OffsetDistanceForFutureWallHangPosition;//[Offset: 0x50, Size: 0x4]
	bool bShouldBlockWallHangIfLikelyToSlideOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bShouldAllowPlayerToSlideoffHorizontallyDuringDeceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	CurveFloat* VerticalVelocitySlowDownRate;//[Offset: 0x58, Size: 0x8]
	CurveFloat* HorizontalVelocitySlowDownRate;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TigerTraversalStateFlyConfig.TigerTraversalStateConfigBase.Object

--------------------------------
Class: TigerTraversalWalkState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalWallHangState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTraversalWallJumpState.TigerTraversalBaseFiniteState.Object

--------------------------------
Class: TigerTRNSubsystem.GameInstanceSubsystem.Subsystem.Object
	int NumRetries;//[Offset: 0xa8, Size: 0x4]
	FString BaseUrl;//[Offset: 0xb0, Size: 0x10]
	FString EndpointDev;//[Offset: 0xc0, Size: 0x10]
	FString EndpointRelease;//[Offset: 0xd0, Size: 0x10]
	bool bShouldForceUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bUseStagingTrackerLink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	FString GetTrackerLink(TigerPersistentPlayerID InID);// 0x1607bb0

--------------------------------
Class: TigerMetadataDataTableHelper.Object
	Texture2D* GetRankIconByIndex(out const int InIndex);// 0x197e4f0

--------------------------------
Class: TigerMetadataExportSettings.DeveloperSettings.Object
	class TigerMetadataDataTableHelper* DataTableHelper;//[Offset: 0x38, Size: 0x28]

--------------------------------
Class: TigerTutorialGameMode.TigerGameMode.GameModeBase.Info.Actor.Object
	delegate OnTutorialStart;//[Offset: 0xae0, Size: 0x10]
	delegate OnTutorialBeat01Complete;//[Offset: 0xaf0, Size: 0x10]
	delegate OnTutorialBeat02Complete;//[Offset: 0xb00, Size: 0x10]
	delegate OnTutorialBeat03Complete;//[Offset: 0xb10, Size: 0x10]
	bool bHasTutorialStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 0x1]
	bool bHasTutorialCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 0x1]
	TigerPreviewerData PlayerAppearance;//[Offset: 0xb28, Size: 0x2d8]
	TigerPreviewerData BotAppearance;//[Offset: 0xe00, Size: 0x2d8]
	FString BotName;//[Offset: 0x10d8, Size: 0x10]
	TigerItemAsset* StartingRangedItemAsset;//[Offset: 0x10e8, Size: 0x8]
	UInt32Property StartingRangedAmmo;//[Size: 0x4]
	float BotDifficulty;//[Offset: 0x10f4, Size: 0x4]
	TigerPowerKit* TutorialPlayerArchetype;//[Offset: 0x10f8, Size: 0x8]
	TigerPowerKit* TutorialBotArchetype;//[Offset: 0x1100, Size: 0x8]
	AkAudioEvent* CurrentDialogueEvent;//[Offset: 0x1108, Size: 0x8]
	TigerItemWorldRepresentation* Beat03Consumable;//[Offset: 0x1110, Size: 0x8]
	TigerConsequenceBroadcastCoordinator* ConsequenceBroadcastCoordinator;//[Offset: 0x1118, Size: 0x8]
	void UnlockPlayer();// 0x197e4f0
	void StartMatch();// 0x1608820
	TigerCharacter* SpawnTutorialBotWithTransform(out const Transform InTransform, BehaviorTree* InBehaviorTree);// 0x16085d0
	void SpawnTutorialBot();// 0x16085b0
	void ShowContextualHelp_BlueprintImplementation(out const class TigerContextualHelp InContextualHelp);// 0x197e4f0
	void ShowContextualHelp(class TigerContextualHelp InContextualHelp);// 0x1608390
	void SetTutorialHasStarted(const bool bInTutorialHasStarted);// 0x1608270
	void SetTutorialHasCompleted();// 0x1608250
	void RemoveSubtitles(const AkAudioEvent* InDialogueEvent);// 0x197e4f0
	void RemovePing();// 0x197e4f0
	AkAudioEvent* PlayVoiceOver_BlueprintImplementation(out const AkAudioEvent* InDialogueEvent, out const FText InSubtitles, out const delegate InPostEventCallback);// 0x197e4f0
	AkAudioEvent* PlayVoiceOver(AkAudioEvent* InDialogueEvent, out const FText InSubtitles, out const delegate InPostEventCallback);// 0x1608030
	void Ping_BlueprintImplementation(out const Vector InWorldLocation, out const class TigerPingBase InPingClass, const Actor* InContextualActor, out const Vector InLocalOffset);// 0x197e4f0
	void Ping(const Vector InWorldLocation, const class TigerPingBase InPingClass, const Actor* InContextualActor, const Vector InLocalOffset);// 0x1607e50
	void MakeTutorialBotBloodHunted();// 0x1607e30
	void LockPlayer();// 0x197e4f0
	bool IsObjectiveActive(const FName InObjectiveIdentifier);// 0x197e4f0
	void HideUI();// 0x197e4f0
	void HideContextualHelp_BlueprintImplementation(out const class TigerContextualHelp InContextualHelp);// 0x197e4f0
	void HideContextualHelp(class TigerContextualHelp InContextualHelp);// 0x1607cf0
	AkAudioEvent* GetCurrentDialogueEvent();// 0x1607b30
	void CompleteObjective_BlueprintImplementation(out const FName InObjectiveIdentifier);// 0x197e4f0
	void CompleteObjective(const FName InObjectiveIdentifier);// 0x1607aa0
	void AddNewObjective_BlueprintImplementation(out const FName InObjectiveIdentifier, out const FText InObjectiveText, out const FName InActionToEmbed, out const FName InGamepadOverrideActionToEmbed, const bool InHasAdditionalKeyboardInput, out const Key InAdditionalKeyboardInput, const bool InHasAdditionalGamepadInput, out const Key InAdditionalGamepadInput, const bool InOverrideImage, out const FName InImageToOverride, const bool InPersistantObjective, out const FName InGamepadImageToOverride);// 0x197e4f0
	void AddNewObjective(const FName InObjectiveIdentifier, const FText InObjectiveText, const FName InActionToEmbed, const FName InGamepadOverrideActionToEmbed, const bool InHasAdditionalKeyboardInput, const Key InAdditionalKeyboardInput, const bool InHasAdditionalGamepadInput, const Key InAdditionalGamepadInput, const bool InOverrideImage, const FName InImageToOverride, const bool InPersistantObjective, const FName InGamepadImageToOverride);// 0x16075f0

--------------------------------
Class: TigerTutorialGameState.TigerGameState.GameStateBase.Info.Actor.Object
	bool bHasRequestedLeaveSession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]

--------------------------------
Class: TigerTutorialTrainerAsset.DataAsset.Object
	class AIController* Controller;//[Offset: 0x30, Size: 0x8]
	class TigerTutorialTrainer* NPC;//[Offset: 0x38, Size: 0x8]
	TigerPreviewerData[] VisualData;//[Offset: 0x40, Size: 0x10]
	class TigerWeapon* WeaponClass;//[Offset: 0x50, Size: 0x8]
	bool bShouldBeFriendlyWithPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bShouldReviveInsteadOfDiablerize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: TigerTutorialTrainer.TigerCharacter.Character.Pawn.Actor.Object
	delegate OnReviveEnded;//[Offset: 0x898, Size: 0x10]
	delegate OnTutorialTrainerDowned;//[Offset: 0x8a8, Size: 0x10]
	delegate OnTutorialTrainerDiablerized;//[Offset: 0x8b8, Size: 0x10]
	TutorialTrainerDiablerizeData DiablerizeData;//[Offset: 0x8c8, Size: 0x20]
	TutorialTrainerReviveData ReviveData;//[Offset: 0x8e8, Size: 0x18]
	float HealthOnEnteringDownedState;//[Offset: 0x900, Size: 0x4]
	float DiablerizeOffsetDistance;//[Offset: 0x904, Size: 0x4]
	float MaxDownedTime;//[Offset: 0x908, Size: 0x4]
	float RemainingDownedTime;//[Offset: 0x90c, Size: 0x4]
	bool bShouldBeFriendlyWithPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool bCanBeDiablerized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]
	bool bWantsToShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 0x1]
	bool bIsDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x913, Size: 0x1]
	bool bIsInvulnerableWhenDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 0x1]
	TigerCharacter* CurrentlyAimedAtCharacter;//[Offset: 0x918, Size: 0x8]
	TigerNPCVisualAsset* VisualAsset;//[Offset: 0x920, Size: 0x8]
	class TigerNPCFacePoseMap* HeadMeshsPoseAssetsClass;//[Offset: 0x928, Size: 0x8]
	TigerPhysicalInteractionAnimationAsset* DiablerizeAnimationSetAsset;//[Offset: 0x930, Size: 0x8]
	float TimeInEnterState;//[Offset: 0x938, Size: 0x4]
	float TimeInDrainState;//[Offset: 0x93c, Size: 0x4]
	float TimeInLeaveState;//[Offset: 0x940, Size: 0x4]
	FName DownedMontageNames;//[Offset: 0x944, Size: 0x8]
	FName StaticEntryToDownedMontageName;//[Offset: 0x964, Size: 0x8]
	FName InterruptSectionName;//[Offset: 0x96c, Size: 0x8]
	FName EndSectionName;//[Offset: 0x974, Size: 0x8]
	FName DodgeOnGroundBlendSpaceName;//[Offset: 0x97c, Size: 0x8]
	FName DodgeInAirBlendSpaceName;//[Offset: 0x984, Size: 0x8]
	FName DiablerizeAnimationName;//[Offset: 0x98c, Size: 0x8]
	FName GetDiablerizedAnimationName;//[Offset: 0x994, Size: 0x8]
	FName ExitDownedStateAnimationName;//[Offset: 0x99c, Size: 0x8]
	AnimMontage* CurrentTrainerDiablerizeMontage;//[Offset: 0x9b0, Size: 0x8]
	AnimMontage* CurrentPlayerDiablerizeMontage;//[Offset: 0x9b8, Size: 0x8]
	void TutorialTrainerReviveFinished__DelegateSignature(bool bDidCompleteRevive, bool bWasInterruptedByPlayer);// 0x197e4f0
	void TutorialTrainerDowned__DelegateSignature();// 0x197e4f0
	void TutorialTrainerDiablerized__DelegateSignature();// 0x197e4f0
	void StopShooting(const bool bShouldStopAiming);// 0x1608930
	void StopBlocking();// 0x1608910
	void StopAiming();// 0x16088f0
	void StartShooting(TigerCharacter* ShootingTargetActor);// 0x1608860
	void StartMeleeAttack();// 0x1608840
	void StartHeavyMeleeAttack(const float ChargeUpTime);// 0x16087a0
	void StartBlocking();// 0x1608780
	void StartAimingAt(TigerCharacter* ShootingTargetActor);// 0x16086f0
	void ShootOnce(TigerCharacter* ShootingTargetActor);// 0x1608300
	void ReloadWeapon();// 0x1608230
	void OnExitDownedState();// 0x197e4f0
	void OnDowned();// 0x197e4f0
	void OnDiablerizeStopped();// 0x197e4f0
	void OnDiablerizeStarted();// 0x197e4f0
	void OnDiablerizedSuccessfullyFinished();// 0x197e4f0
	bool IsAiming();// 0x1607e00
	float GetReviveOrDiablerizeProgress();// 0x1607b80
	float GetDiablerizeTimeInSeconds();// 0x1607b50

--------------------------------
Class: TutorialTrainerDiablerizeData
	float DiablerizeTimeLeft;//[Offset: 0x8, Size: 0x4]
	float TimeToGetInPositionforDiablerize;//[Offset: 0xc, Size: 0x4]
	bool bIsGettingDiablerized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	TigerCharacter* DiablerizingCharacter;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TutorialTrainerReviveData
	bool bIsGettingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ReviveTimeInSeconds;//[Offset: 0x4, Size: 0x4]
	float CurrentReviveTime;//[Offset: 0x8, Size: 0x4]
	float RotationSpeed;//[Offset: 0xc, Size: 0x4]
	TigerPlayer* CurrentRevivingPlayer;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerTutorialNpcSpawner.Actor.Object
	TigerTutorialTrainerAsset* DataAsset;//[Offset: 0x228, Size: 0x8]
	TigerTutorialTrainer* SpawnNpc();// 0x1608580
	TigerTutorialTrainer*[] SpawnGroupOfNpcs(int NumberToSpawn);// 0x16084a0

--------------------------------
Class: TigerTypeAndRarityData.DataAsset.Object
	<enum,FText> ItemTypeNames;//[Offset: 0x30, Size: 0x50]
	<enum,FText> ShortItemTypeNames;//[Offset: 0x80, Size: 0x50]
	<enum,FText> AmmoTypeNames;//[Offset: 0xd0, Size: 0x50]
	<enum,FText> ShortWeaponTypeNames;//[Offset: 0x120, Size: 0x50]
	<enum,FText> LootCategoryNames;//[Offset: 0x170, Size: 0x50]
	<enum,FText> ItemRarityNames;//[Offset: 0x1c0, Size: 0x50]
	<enum,enum> ItemRarityColors;//[Offset: 0x210, Size: 0x50]

--------------------------------
Class: TigerUIBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	static void Update3dWidgetTransform(const Actor* Character, SceneComponent* Widget, out const Vector SocketLocation, Vector Offset);// 0x160d990
	static TigerProgressedChallengeWrapper[] SortProgressedChallenges(TigerProgressedChallengeWrapper[] InProgressedChallengesArray);// 0x160d7b0
	static void ShowGameModeNotification(TigerPlayerController* Player, FText Message);// 0x160d690
	static bool ShouldTintItemImage(const TigerInventoryItemBase* InItem);// 0x160d600
	static void RegisterMatchSettingsSetListener(delegate InMatchSettingsSetDelegate);// 0x160cdd0
	static void RegisterExtendedGroupScoreListener(delegate InScoreDelegate);// 0x160cd40
	static bool ProjectWorldToScreenBidirectional(PlayerController* InPlayerController, Vector InWorldLocation, out Vector2D OutScreenPosition);// 0x160cc20
	static void PlayOrReverseAnimation(UserWidget* Widget, WidgetAnimation* WidgetAnimation, byte PlayMode, float PlayBackSpeed);// 0x160cad0
	void OnMatchSettingsSetDelegate__DelegateSignature();// 0x197e4f0
	static void MapWorldLocationToUIRectangle(const TigerPlayerController* InPlayerController, out const Vector InLocation, out const Box2D InMargins, out Vector2D OutScreenPosition, out float OutRotationAngleDegrees, out bool bIsOnScreen);// 0x160c8a0
	static void MapWorldLocationToUICircle(const TigerPlayer* Player, out const Vector InLocation, const float EdgePercent, const float CircleRadius, out Vector2D OutScreenPosition, out float OutRotationAngleDegrees, out bool bIsOnScreen);// 0x160c660
	static bool IsItemPartOfPlayerCard(out const TigerPersistentPlayerCardData InCard, out const class TigerInventoryItemBase InItemPath);// 0x160c500
	static bool IsItemPartOfAppearance(out const TigerCharacterAppearance InAppearance, out const class TigerInventoryItemBase InItemPath);// 0x160c3b0
	static bool IsDisciplineClanAbility(TigerPlayer* Player, const enum Type);// 0x160c2e0
	static float GetUIAngle(const TigerPlayer* Player, out const Vector LocationToGetAngleFrom);// 0x160c120
	static StatChangeDescription[] GetStatChanges(out const TigerCharacterStatModification StatModification);// 0x160bf30
	static Rotator GetRelativeCameraDirectionToActorRotation(const Actor* Actor);// 0x160be90
	static void GetLineLineIntersectionPoint(out const Vector LineAStart, out const Vector LineAEnd, out const Vector LineBStart, out const Vector LineBEnd, out bool bDoesIntersect, out Vector IntersectionPoint);// 0x160bc60
	static InputAxisKeyMapping[] GetKeysForAxis(const PlayerController* Controller, out const FName Axis);// 0x160ba70
	static InputActionKeyMapping[] GetKeysForAction(const PlayerController* Controller, out const FName Action);// 0x160b8a0
	static enum GetInventoryItemTypeFromWeaponType(const enum WeaponType);// 0x160b820
	static FName GetFNameFromKey(out const Key Key);// 0x160b6b0
	static float GetExpandableAreaRolloutAnimationSeconds(const ExpandableArea* InExpandableArea);// 0x160b620
	static FText GetDisplayTextFromKey(out const Key Key);// 0x160b500
	static MediaSource* GetDisciplinePreviewMediaSource(class TigerDisciplineConfigs InConfigsClass, enum InDisciplineType);// 0x160b430
	static Texture2D* GetDisciplineIcon(class TigerDisciplineConfigs ConfigsClass, enum DisciplineType);// 0x160b360
	static TigerDisciplineConfigBase* GetDisciplineConfigFromType(TigerPlayer* Player, const enum Type);// 0x160b290
	static Vector2D GetBorderLocationFromAngle(const float Angle, const float DistanceFromBorder);// 0x160af20
	static void GetBorderLocationAndAngleFromWorld(TigerPlayerController* InPlayerController, Vector InWorldLocation, float InBorderDistance, out Vector2D OutScreenPosition, out float OutAngle);// 0x160ad50
	static void GamepadUpdateScrollbox(const TigerPlayerController* InPlayerController, ScrollBox* InScrollbox, out float ScrollTime, float InDeltaTime, float InMinScrollSpeed, float InMaxScrollSpeed, float InMaxScrollTime, bool bIgnoreHover);// 0x160a950
	static void GamepadMoveMouseToWidget(TigerPlayerController* InPlayerController, out const Widget*[] InWidgetList, int InHoverIndex, int InDirection, ScrollBox* InScrollbox, out bool OutMouseMoved);// 0x160a760
	void ExtendedGroupScoreChanged__DelegateSignature(TigerExtendedGroupScoreComponent* InScoreComponent);// 0x197e4f0
	static LinearColor ChooseItemTintColor(const TigerPlayer* InPawn, const TigerInventoryItemBase* InItem);// 0x160a2c0
	static float CalculateTopdownAngleBetweenPlayerAndTarget(const TigerPlayer* InPlayer, out const Vector InLocationToGetAngleFrom);// 0x160a1f0

--------------------------------
Class: StatChangeDescription
	FText StatName;//[Offset: 0x0, Size: 0x18]
	FString StatChange;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TigerUiNewNotificationNode.Object
	NewIds(UInt64Property)[] NewIds;//[Offset: 0x28, Size: 0x10]
	TigerUiNewNotificationNode* ParentNode;//[Offset: 0x38, Size: 0x8]
	TigerUiNewNotificationNode*[] ChildNodes;//[Offset: 0x40, Size: 0x10]
	TigerUiNewNotificationHandler* NewNotificationHandler;//[Offset: 0x50, Size: 0x8]
	bool bHasNewEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	HiddenIds(UInt64Property)[] HiddenIds;//[Offset: 0x60, Size: 0x10]
	bool bShouldPersistBetweenSessions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: TigerUiNewNotificationHandler.GameInstanceSubsystem.Subsystem.Object
	delegate OnNewItemStatus;//[Offset: 0x30, Size: 0x10]
	<enum,TigerUiNewNotificationNode*> NodeMap;//[Offset: 0x40, Size: 0x50]
	void UpdateInboxViewedState(bool InViewedState);// 0x1615080
	void OnNewItemStatus__DelegateSignature();// 0x197e4f0
	void OnGroupInvite(const TigerPartyInvite* InInvite);// 0x1613dd0
	void OnFriendInvite(const TigerFriendInvite* InInvite);// 0x1613d40
	void MarkWeeklyChallengeAsViewed();// 0x1613b60
	void MarkTypeAsViewed(const enum InType);// 0x1613ae0
	void MarkQuestAsViewed(FString InQuestlineId);// 0x1613a40
	void MarkMasteryChallengeAsViewed();// 0x1613a20
	void MarkItemAsViewed(out const TigerItemId InTigerItemId, const enum InArchetypeType);// 0x1613940
	void MarkGrimoireEntryAsViewed(const InID(UInt32Property) InID);// 0x16138b0
	void MarkFriendInviteEntryViewed();// 0x1613890
	void MarkEverythingAsViewed();// 0x1613870
	void MarkDailyChallengeAsViewed();// 0x1613850
	void MarkBattlepassAsViewed();// 0x1613830
	void MarkArchetypeViewed();// 0x1613810
	void MarkAllGroupInviteEntriesViewed();// 0x16137f0
	bool IsQuestlineNew(FString InQuestlineId);// 0x1613600
	bool IsItemUnviewed(out const TigerItemId InTigerItemId, const enum InArchetypeType);// 0x1613510
	bool CalculateNewNotificationActive(const enum InType, const enum InArchetypeType, bool bForceCalculate);// 0x16123c0
	void AddNewWeeklyChallenges();// 0x1611e50
	void AddNewQuest(FString InQuestlineId);// 0x1611db0
	void AddNewMasteryChallenge();// 0x1611d90
	void AddNewGroupInviteEntry();// 0x1611d70
	void AddNewGrimoireEntry(const InID(UInt32Property) InID);// 0x1611ce0
	void AddNewFriendInviteEntry();// 0x1611cc0
	void AddNewDailyChallenges();// 0x1611ca0
	void AddNewBattlepassOrBattlepassLevel();// 0x1611c80
	void AddNewArchetype();// 0x1611c60

--------------------------------
Class: TigerUtilityBFL.BlueprintFunctionLibrary.Object
	static Vector VRandCone(const Vector InDir, const float InConeHalfAngleRad, out TigerRangedRandomState InOutRandomState);// 0x161f210
	static LinearColor UnpackLinearColorFromFloat(float InPackedColor);// 0x161f180
	static TigerPreviewerData ToPreviewerData(out const TigerCharacterAppearance InAppearance);// 0x161f0a0
	static float TimeSince(const float Time, const Object* WorldContextObject);// 0x161efd0
	static void TigerDebugDrawSphere(const Object* InWorldContextObject, out const Vector InCenter, const float InRadius, const int InSegments, const LinearColor InColor, bool bInPersistentLines, float InLifeTime, byte InDepthPriority, float InThickness);// 0x161ed10
	static void TigerDebugDrawRotation(const Object* InWorldContextObject, out const Rotator InRotation, out const Vector InPosition, const float InLength, const float InLifeTime);// 0x161eb50
	static void TigerDebugDrawLine(const Object* InWorldContextObject, out const Vector InLineStart, out const Vector InLineEnd, const LinearColor InColor, bool bInPersistentLines, float InLifeTime, byte InDepthPriority, float InThickness);// 0x161e8d0
	static void TigerDebugDrawCapsule(const Object* InWorldContextObject, out const Vector InCenter, const float InRadius, const float InHalfHeight, out const Rotator InRotation, const LinearColor InColor, bool bInPersistentLines, float InLifeTime, byte InDepthPriority, float InThickness);// 0x161e5d0
	static void TigerDebugDrawBox(const Object* WorldContextObject, out const Vector InCenter, out const Vector InExtent, out const Rotator InRotation, const LinearColor InColor, bool bInPersistentLines, float InLifeTime, byte InDepthPriority, float InThickness);// 0x161e2f0
	static float TigerApplyPointDamage(TigerCharacter* InDamagedActor, float InBaseDamage, out const Vector InHitFromDirection, out const HitResult InHitInfo, Controller* InEventInstigator, Actor* InDamageCauser, class DamageType InDamageTypeClass, enum InDamageCauserType, FString InDamageReason, out const TigerDamageContext InDamageContext);// 0x161df00
	static float TigerApplyDamage(TigerCharacter* InDamagedActor, float InBaseDamage, Controller* InEventInstigator, Actor* InDamageCauser, class DamageType InDamageTypeClass, enum InDamageCauserType, FString InDamageReason, out const TigerDamageContext InDamageContext);// 0x161dc20
	static ProceduralMeshComponent* TigerAddProceduralMeshComponent(Actor* Actor, out const CollisionResponseContainer CollisionResponses, const byte CollisionObjectType, FName ComponentName);// 0x161dac0
	static void StoreOpened(const TigerPlayerController* InPlayerController);// 0x161da40
	static void StoreItemPreviewOpened(const TigerPlayerController* InPlayerController, out const TigerMetaStoreEntry InEntry);// 0x161d940
	static void StoreItemPreviewExited(const TigerPlayerController* InPlayerController, out const TigerMetaStoreEntry InEntry);// 0x161d840
	static void StoreExited(const TigerPlayerController* InPlayerController);// 0x161d7c0
	static void StopAkPlayingId(int AkPlayingId, float FadeOutDuration);// 0x161d700
	static PerfTimerHandle StartPerfTimer();// 0x161d6d0
	static void SpawnItemFromTable(const Object* InWorldContextObject, TigerItemLootTable* InLootTable, out const Transform InFirstTransform, out const Transform InSecondTransform, const enum InItemSource, out TigerItemWorldRepresentation* OutFirstSpawnedItem, out TigerItemWorldRepresentation* OutSecondSpawnedItem, const bool bInSpawnSecondItem, bool bInSimulatePhysics, float InBlockInteractionDuration);// 0x161d300
	static TigerItemWorldRepresentation* SpawnItem(const Object* InWorldContextObject, out const Transform InTransform, TigerItemAsset* InItem, const enum InItemSource, int InItemCount, bool bInSimulatePhysics, float InBlockInteractionDuration);// 0x161d080
	static ParticleSystemComponent* SpawnEmitterStrategized(ParticleSystem* InSystemToSpawn, const TigerCharacter* InInstigatingCharacter, out const Transform InRelativeTransform, const FName InAttachPointName, SceneComponent* InComponentToAttachTo, TigerParticleStrategyPostSpawn* InPostSpawnStrategy);// 0x161ce50
	static ParticleSystemComponent* SpawnEmitterDefaultStrategized(ParticleSystem* InSystemToSpawn, const TigerCharacter* InInstigatingCharacter, out const Transform InRelativeTransform, const FName InAttachPointName, SceneComponent* InComponentToAttachTo, const class TigerParticleStrategyPostSpawn InPostSpawnStrategy);// 0x161cc20
	static bool ShouldSkipHealthWarning();// 0x161cbf0
	static bool ShouldAutoSpectateOnDeath();// 0x161cbc0
	static void SetTemporalAASamples(int InSamples);// 0x161cb40
	static void SetStaticMeshMobility(StaticMeshComponent* MeshComponent, byte NewMobility);// 0x161ca80
	static void SetSignificanceManagerBudgetType(const Object* InWorldContextObject, enum InBudgetType);// 0x161c9c0
	static void SetCurrentAudioCultureForced(FString InNewAudioCulture);// 0x161c930
	static void RunAllFunctionalTestsOnMap();// 0xc123b0
	static void ResetMaterialsToMeshDefault(PrimitiveComponent* Component);// 0x161c8b0
	static void RenameActorInstance(Actor* InActor, FString InName);// 0x161c7e0
	static void RecordStartOfTutorialObjective(const Object* InWorldContextObject, FString InTimeStampId, out const Vector InLocation);// 0x161c6c0
	static void RecordStartOfTutorial(const Object* InWorldContextObject);// 0x161c640
	static void RecordEndOfTutorialObjective(const Object* InWorldContextObject, FString InTimeStampId);// 0x161c570
	static void RecordEndOfTutorial(const Object* InWorldContextObject, bool InTutorialFinished);// 0x161c4b0
	static void PrintPerfTimer(out const PerfTimerHandle Handle, bool bPrintToLog, LinearColor TextColor);// 0x161c380
	static int PostAudioVisualizedAkEventOnComponent(AkAudioEvent* InEvent, Actor* InActor, TigerAudioVisualizationSpawnerComponent* InVisualizationComponent, FName InAttachPointName, bool bInStopWhenAttachedToDestroyed, FString InEventName);// 0x161c150
	static int PostAudioVisualizedAkEventAtLocation(AkAudioEvent* InEvent, Vector InLocation, Rotator InOrientation, TigerAudioVisualizationSpawnerComponent* InVisualizationComponent, FString InEventName);// 0x161bf50
	static int PostAudioVisualizedAkEvent(AkAudioEvent* InEvent, TigerPlayer* InPlayer, FName InAttachPointName, bool bInStopWhenAttachedToDestroyed, FString InEventName);// 0x161bd60
	static void PostAkEventRaw(out int InAkPlayingId, AkAudioEvent* InAkAudioEvent, Actor* InOwner, bool bInStopWhenOwnerIsDestroyed);// 0x161bc00
	static int PostAkEventIfLocallyControlled(Actor* InActor, AkAudioEvent* InEvent);// 0x161bb30
	static TigerPersistentVoipID PersistentPlayerIdToPersistentVoipID(out const TigerPersistentPlayerID InPersistentPlayerId);// 0x161ba40
	static bool PartialMatch(FString InRegexPattern, FString InInput);// 0x161b8d0
	static float PackLinearColorToFloat(out const LinearColor InColor);// 0x161b840
	void OnItemAppliedToCard__DelegateSignature(out const TigerPersistentPlayerCardData InCard);// 0x197e4f0
	void OnItemAppliedToApperanceFromPreview__DelegateSignature(out const TigerPreviewerData InPreviewerAppearance);// 0x197e4f0
	static bool MeshContainsCollisionData(StaticMeshComponent* InMeshComp);// 0x161b7b0
	static TigerDamageContext MakeTigerDamageContext(const Object* InUObject);// 0x161b710
	static void LogToScreenPopupFromUObject(const Object* InWorldContextObject, FString InScreenMessage);// 0x161b640
	static void LogToScreenPopUp(World* InWorld, FString InScreenMessage);// 0x161b570
	static Object* LoadObjectOfType(out const Object* ObjectPath, class Object Type);// 0x161b460
	static Object* LoadDefaultObjectFromSoftClass(class Object InSoftClass, class Object InOutputType);// 0x161b310
	static void LoadClan(out const TigerPlayerClanData* ClanPath, out TigerPlayerClanData* ClanData);// 0x161b200
	static FText ListChanges(out const float[] Changes, const FText Prefix, const FText Suffix, const FText Seperator);// 0x161af10
	static bool IsValidCharacterId(out const TigerPersistentCharacterID CharacterId);// 0x161ae80
	static bool IsSharkmobAccountLoginEnabled();// 0x161ae50
	static bool IsSameCharacterId(out const TigerPersistentCharacterID CharacterA, out const TigerPersistentCharacterID CharacterB);// 0x161ad70
	static bool IsOnlineSubsystemEnabled(FName InSubsystemName);// 0x161ace0
	static bool IsInTutorial(const Object* InWorldContextObject);// 0x161ac50
	static bool IsInTransferFromMatch(const Object* InWorldContextObject);// 0x161abc0
	static bool IsInMatch(const Object* InWorldContextObject);// 0x161ab30
	static bool IsInElysium(const Object* WorldContextObject);// 0x161aaa0
	static bool IsInEditor();// 0x161aa70
	static bool IsInBenchmark(const Object* InWorldContextObject);// 0x161a9e0
	static bool IsEditorBuild();// 0x95db50
	static bool IsDirectlyHovered(Widget* Widget);// 0x161a950
	static bool InvitesAreEqual(out const TigerInviteId InFirstInvite, out const TigerInviteId InSecondInvite);// 0x161a850
	static void InitializeCharacterAlignmentAk(Actor* Actor);// 0x161a7d0
	static bool HasMatchEnded(const Object* InWorldContextObject);// 0x161a740
	static TigerVotingContext* GetVotingContext(const Object* InWorldContextObject);// 0x161a6b0
	static int GetUniqueID(const Object* InObject);// 0x161a620
	static TigerPersistentPlayerTransactionalData GetTransactionalPlayerData(const Object* WorldContextObject);// 0x161a590
	static void GetTimeLeftForStoreEntry(const Object* InWorldContextObject, out const TigerMetaStoreEntry InStoreEntry, out bool bOutHasExpired, out Timespan OutTimeLeft);// 0x161a3d0
	static TigerGameInstance* GetTigerGameInstance(const Object* InWorldContextObject);// 0x161a340
	static enum GetTigerBuildType();// 0xf553d0
	static int GetTemporalAASamples();// 0x161a310
	static TigerGameModeDescriptor GetSuitableGameModeDescriptor(const Object* InWorldContextObject);// 0x161a110
	static TigerPersistentPlayerCharacterData GetSelectedCharacterData(const Object* InWorldContextObject);// 0x161a060
	static TigerCharacterAppearance GetSelectedCharacterAppearance(const Object* InWorldContextObject);// 0x1619fd0
	static float GetScrollBoxContentSpace(ScrollBox* ScrollBox);// 0x1619f40
	static FString GetRomanNumeral(int InNumber);// 0x1619e70
	static TigerReplaySpectatorController* GetReplayController(const Object* WorldContextObject);// 0x1619de0
	static NiagaraSystem* GetPreloadedNiagaraSystem(const Object* WorldContextObject, out const SoftObjectPath SoftObjectPath);// 0x1619cf0
	static TigerPersistentPlayerCardData GetPlayerCardData(const Object* InWorldContextObject);// 0x1619c50
	static float GetPerfTimerElapsedTime(out const PerfTimerHandle Handle);// 0x1619bb0
	static TigerPartyManager* GetPartyManager(const Object* InWorldContextObject);// 0x1619b20
	static class TigerCharacterOutfitConfiguration GetOutfitSoftClass(out const TigerCharacterCustomizationOutfitData InOutfitData);// 0x1619a20
	static TigerUIDPadNavNode* GetNodeInScrollDirection(const byte InScrollDirection, TigerUIDPadNavNode* InNode, bool InIsVertical);// 0x1619910
	static int GetNearestScrollBoxToPoint(out const ScrollBox*[] Boxes, out const Vector2D Point);// 0x1619810
	static TigerPlayerState* GetLocalPlayerState(const Object* InWorldContextObject);// 0x1619780
	static TigerPlayerController* GetLocalPlayerController(const Object* WorldContextObject);// 0x16196f0
	static TigerPlayer* GetLocalPlayer(const Object* WorldContextObject);// 0x1619660
	static TigerLegalDocuments* GetLegalDocuments(const Object* InWorldContextObject);// 0x16195d0
	static float GetLastRenderTime(PrimitiveComponent* Primitive);// 0x1619540
	static class TigerInventoryItemBase GetItemSoftClassFromItemId(const TigerItemId InItemId);// 0x1619450
	static TigerItemDatabase* GetItemsDatabase();// 0x1619510
	static TigerItemId GetItemIdForItem(const class TigerInventoryItemBase InItemPathFrom);// 0x1619340
	static TigerInventoryItemBase* GetItemFromItemId(const TigerItemId InItemId);// 0x16192b0
	static int GetHardCurrency(const Object* InWorldContextObject);// 0x1619220
	static TigerGrimoireTree* GetGrimoireTree();// 0x16191f0
	static float GetGameTimeSecondsByContext(const Object* InWorldContextObject);// 0x1619160
	static float GetGameTimeSeconds(const Object* InWorldContextObject);// 0x16190d0
	static TigerGameModeDescriptor[] GetGameModeDescriptors(const Object* InWorldContextObject);// 0x1618f50
	static int GetGameModeAverageWaitTime(const Object* InWorldContextObject, out const TigerGameModeDescriptor InGameMode);// 0x1618e00
	static enum GetDamageCauserFromCharacter(TigerCharacter* InCharacter);// 0x1618d70
	static FString GetComputerIdentifier(const Object* InWorldContextObject);// 0x1618ca0
	static void GetCommandLineInteger(FString ParameterName, out bool ParameterExists, out int Integer);// 0x1618b60
	static Actor* GetClosestActorToLocation(class Actor ActorClass, out const Actor*[] ActorArray, out const Vector Location);// 0x1618910
	static Object* GetClassDefaultObject(class Object Class);// 0x1618880
	static int GetBuildVersion();// 0x1618850
	static TigerPropAttachmentInfo GetAttachmentInfoFromIdentifierAndClass(class TigerPropDummy Subclass, const FName Identifier);// 0x1618750
	static float GetAngleDeltaDegrees(const float Angle1, const float Angle2);// 0x1618680
	static FString FormatDate(out const DateTime DateTime, FText Format);// 0x1618500
	static void ForceUpdateOnAnimInstance(SkeletalMeshComponent* InMeshComp);// 0x1618480
	static bool EqualTigerPersistentPlayerId(const TigerPersistentPlayerID InLHS, const TigerPersistentPlayerID InRHS);// 0x1618310
	static bool EqualTigerItemIDs(const TigerItemId InLHS, const TigerItemId InRHS);// 0x1618240
	static void DisableReplicationInElysium(ActorComponent* InActorComponent);// 0x16181c0
	static bool DestroyActorIfNotEditorBuild(Actor* InActor);// 0x1618130
	static void DedicatedServerBranch(const Object* WorldContextObject, out enum NetMode);// 0x1618060
	static TigerChatMessage CreateGameChatMessage(const FText InMessage, const bool bInIsChatBanMessage);// 0x1617db0
	static int ConvertInt64ToInt(int64 Int64Value, out bool bSuccess);// 0x1617cd0
	static enum Conv_AccountChannelToPlatformType(enum InAccountChannel);// 0x1617c50
	static void CenterMouseLocation(TigerPlayerController* PlayerController);// 0x1617bd0
	static bool ArePlayerStateArraysEqual(out const PlayerState*[] InLeft, out const PlayerState*[] InRight);// 0x1617ab0
	static bool AreOutfitPhysicalMeshesValid(out const TigerPersistentOutfitSetup InOutfitSetup);// 0x16179e0
	static bool AreGroupIdsEqual(out const TigerGroupId lhs, out const TigerGroupId rhs);// 0x16178e0
	static void ApplyItemToCardAsync(out const class TigerInventoryItemBase InItemPath, out const TigerPersistentPlayerCardData InCardData, out const delegate InDelegate);// 0x1617760
	static void ApplyItemToAppearanceFromPreview(out const class TigerInventoryItemBase InItemPath, const int InSlot, out const TigerPreviewerData InPreviewAppearance, const enum InUsedPowerKit, const enum InClan, out const delegate InDelegate);// 0x16174e0
	static void ApplyCustomizationParametersToMeshComponentFiltered(out const TigerCharacterCustomizationParameters InParams, SkeletalMeshComponent* InMeshComponent, enum InPart);// 0x1617390
	static void ApplyCustomizationParametersToMeshComponent(out const TigerCharacterCustomizationParameters Params, SkeletalMeshComponent* MeshComponent);// 0x1617270
	static ProceduralMeshComponent* AddProceduralMeshWithSection(Actor* Actor, out const Vector[] Vertices, const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision, out const CollisionResponseContainer CollisionResponses, const byte CollisionObjectType);// 0x1616e70

--------------------------------
Class: PerfTimerHandle

--------------------------------
Class: TigerUtilityPowerLureComponent.TigerUtilityPowerBaseComponent.ActorComponent.Object
	float TimeToLure;//[Offset: 0xe8, Size: 0x4]
	AnimMontage* LureAnimation;//[Offset: 0xf0, Size: 0x8]
	SoundBase* LureWhistleSound;//[Offset: 0xf8, Size: 0x8]
	float ClientFeedbackUpdateTickInterval;//[Offset: 0x100, Size: 0x4]
	void Server_StopLureAttempt();// 0x1623d70
	void Server_StartLureAttempt(TigerNPC* TargetNpc);// 0x1623cb0
	void OnSuccesfulLure(TigerNPC* TigerNPC);// 0x197e4f0
	void OnStoppedChannelingLure(TigerNPC* TigerNPC);// 0x197e4f0
	void OnStartedChannelingLure(TigerNPC* TigerNPC);// 0x197e4f0
	void OnLureEffectEnded(TigerNPC* TigerNPC);// 0x197e4f0
	void Multicast_StoppedLureAttempt(TigerNPC* TigerNPC);// 0x1623910
	void Multicast_StartedLureAttempt(TigerNPC* TigerNPC);// 0x14b9bd0
	void Multicast_Lure(TigerNPC* TigerNPC);// 0x14bae10
	void Client_SyncSuccessfulLureTarget(TigerNPC* TargetNpc);// 0x1623130
	void Client_StopLureAttempt();// 0x1623110

--------------------------------
Class: TigerUtilityPowerRoar.TigerUtilityPowerBaseComponent.ActorComponent.Object
	float DurationAIAreAffected;//[Offset: 0xe8, Size: 0x4]
	float ConeEffectLength;//[Offset: 0xec, Size: 0x4]
	float SphereEffectRadius;//[Offset: 0xf0, Size: 0x4]
	float ConeWidthAngle;//[Offset: 0xf4, Size: 0x4]
	float Cooldown;//[Offset: 0xf8, Size: 0x4]
	AnimMontage* RoarStaggerAnimation;//[Offset: 0x100, Size: 0x8]
	AnimMontage* RoarAnimation;//[Offset: 0x108, Size: 0x8]
	AkAudioEvent* RoarSoundEvent;//[Offset: 0x110, Size: 0x8]
	void Server_AttemptRoar();// 0x1623c10
	void Multicast_Roar();// 0x16238f0
	void Client_ConfirmRoarUsage();// 0x16230f0

--------------------------------
Class: TigerVendorUI.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerNPC* VendorNPC;//[Offset: 0x298, Size: 0x8]
	TigerInteractiveNpcComponent* InteractiveNpcComponent;//[Offset: 0x2a0, Size: 0x8]
	TigerSharedVendorUI* SharedVendorUI;//[Offset: 0x2a8, Size: 0x8]
	bool bHideMouseCusorAtDescruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bUseTransitions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	bool ShouldUseTransitions();// 0x1623e10
	void OnMenuBuy();// 0x197e4f0
	void OnCloseVendorWidget(out bool bShouldRemoveWidget);// 0x197e4f0
	void OnAddToScreen();// 0x197e4f0

--------------------------------
Class: TigerVideoCameraActorOffset.CameraActor.Actor.Object
	TigerPlayer* PlayerActor;//[Offset: 0x800, Size: 0x8]

--------------------------------
Class: TigerVisualLoggerDummyFilter.Object

--------------------------------
Class: TigerVoipChatIndicatorWidget.UserWidget.Widget.Visual.Object
	enum UpdateVoiceChatState2(const TigerPlayerState* inTigerPlayerState);// 0x1624070
	void TalkingVisibilityStateChanged(const enum InTalkingVisibilityState);// 0x197e4f0
	void InitializeChatStateWithVoipID(out const TigerPersistentVoipID InPersistentVoipId);// 0x1623770
	void InitializeChatStateWithTigerPlayerState(const TigerPlayerState* inTigerPlayerState);// 0x16236e0

--------------------------------
Class: TigerVoSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	AkAudioEvent* AudioEvent;//[Offset: 0x38, Size: 0x28]
	<FName,TigerVoCategoryData> CategoryData;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: TigerVoCategoryData
	byte Prio;//[Offset: 0x0, Size: 0x1]
	float TriggerChance;//[Offset: 0x4, Size: 0x4]
	float Cooldown;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TigerVoSubsystem.GameInstanceSubsystem.Subsystem.Object
	AkAudioEvent* AudioEvent;//[Offset: 0x30, Size: 0x8]
	TigerVoEvent[] VoEvents;//[Offset: 0xd8, Size: 0x10]
	float AddVoEvent(out const TigerVoEvent InVoEvent);// 0x1622fb0

--------------------------------
Class: TigerVoEvent
	FName Category;//[Offset: 0x0, Size: 0x8]
	Actor* EventActor;//[Offset: 0x8, Size: 0x8]
	bool bPlayFacialAnimFromCategory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TigerVotingOptionDetailUI.TigerWidget.UserWidget.Widget.Visual.Object
	VotingOptionContentHolder[] ContentHolders;//[Offset: 0x280, Size: 0x10]

--------------------------------
Class: VotingOptionContentHolder
	TigerStyledRichTextBlock* Title;//[Offset: 0x0, Size: 0x8]
	TigerStyledRichTextBlock* Description;//[Offset: 0x8, Size: 0x8]
	Image* Image;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TigerVotingOptionUI.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object
	TigerVotingOptionResources VotingResources;//[Offset: 0x370, Size: 0x50]
	TigerVotingOptionResource[] GetVotingOptionResources(const TigerVotingContext* InVotingContext, enum InCategory, int InOptionIndex, bool bInPreviousResult);// 0x1627de0

--------------------------------
Class: TigerVotingOptionResource
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	FText Title;//[Offset: 0x8, Size: 0x18]
	FText Description;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: TigerVotingOptionResources
	<FString,TigerVotingOptionResource> OptionResources;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TigerVotingResultsScreen.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: TigerVotingScreen.TigerUIDPadNavNode.TigerWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: TigerVotingUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: TigerWardrobeUI.TigerSceneBackgroundUI.TigerIngameSubmenuWidget.TigerMenuWidget.TigerWidget.UserWidget.Widget.Visual.Object
	TigerVendorComponent* VendorComponent;//[Offset: 0x3c0, Size: 0x8]
	TigerVendorStoreCategory*[] InventoryCategories;//[Offset: 0x3c8, Size: 0x10]
	TigerVendorStoreCategory* CurrentCategory;//[Offset: 0x3d8, Size: 0x8]
	void SetZoomStatus(TigerBattlepassRewardPreview* InPreviewItem, bool bIsHeadItem);// 0x1628de0
	void OnSelectedCharacterChanged(TigerPersistentPlayerState* InPersistentPlayerState);// 0x1628860
	void OnPlayerInventoryUpdated();// 0x197e4f0
	void OnPlayerInventoryChanged(TigerPersistentPlayerState* InPersistentPlayerState);// 0x1628700
	void OnCategoryItemsReceived(enum CategoryType, out const TigerVendorStoreCategoryItem[] CategoryItems);// 0x197e4f0
	void OnBodyTypeChanged(enum InBodyType);// 0x197e4f0
	void FetchCategoryItems(enum CategoryType);// 0x1627890

--------------------------------
Class: TigerThrowingAxeConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	AnimMontage* StartAimingPoseMontage;//[Offset: 0x190, Size: 0x8]
	AnimMontage* ReadyAxeMontage;//[Offset: 0x198, Size: 0x8]
	bool bDebugInfiniteAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool bDebugDrawPredictedProjectilePath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	FName CastAnimationName;//[Offset: 0x1a4, Size: 0x8]
	class Actor* ThrowingAxeProjectile;//[Offset: 0x1b0, Size: 0x8]
	TigerItemAsset* AxeItem;//[Offset: 0x1b8, Size: 0x8]
	FName AxeSpawnSocket;//[Offset: 0x1c0, Size: 0x8]
	float ForwardOffset;//[Offset: 0x1c8, Size: 0x4]
	Rotator AxeSpawnRotationOffset;//[Offset: 0x1cc, Size: 0xc]
	float ProjectileDamage;//[Offset: 0x1d8, Size: 0x4]
	float ProjectileStartSpeed;//[Offset: 0x1dc, Size: 0x4]
	float ProjectileMaxSpeed;//[Offset: 0x1e0, Size: 0x4]
	float ProjectileMassInKg;//[Offset: 0x1e4, Size: 0x4]
	Rotator ProjectileRotationPerSecond;//[Offset: 0x1e8, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x1f4, Size: 0x4]
	float MovementMultiplierAimState;//[Offset: 0x1f8, Size: 0x4]

--------------------------------
Class: TigerWeaponAbilityAxeThrow.TigerDisciplineAnimTriggered.TigerDisciplineBase.Object
	TigerThrowingAxeConfig* Config;//[Offset: 0xf0, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0xf8, Size: 0x8]
	void ThrowMontageEnded(AnimMontage* Montage, bool bWasInterrupted);// 0x1628eb0
	void Multicast_RevertWeaponVisibilityOnSimulatedProxy();// 0x1628460

--------------------------------
Class: TigerDashConfig.TigerDisciplineAnimTriggeredConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	Vector HitBoxExtents;//[Offset: 0x190, Size: 0xc]
	Vector HitBoxOffset;//[Offset: 0x19c, Size: 0xc]
	float DashDistance;//[Offset: 0x1a8, Size: 0x4]
	float DashDuration;//[Offset: 0x1ac, Size: 0x4]
	float Damage;//[Offset: 0x1b0, Size: 0x4]
	float DashExitVelocity;//[Offset: 0x1b4, Size: 0x4]
	float SurfaceStopThreshold;//[Offset: 0x1b8, Size: 0x4]
	AnimMontage* RecoveryMontage;//[Offset: 0x1c0, Size: 0x8]
	AnimMontage* RecoveryMontageInAir;//[Offset: 0x1c8, Size: 0x8]
	float RecoveryCancelledBlendOut;//[Offset: 0x1d0, Size: 0x4]
	float RecoveryCancelledBlendOutInAir;//[Offset: 0x1d4, Size: 0x4]
	ParticleSystem* DashPSTemplate;//[Offset: 0x1d8, Size: 0x8]
	AnimMontage* AirDashMontage;//[Offset: 0x1e0, Size: 0x8]
	float PlayAirAnimAngleToSurfaceThreshold;//[Offset: 0x1e8, Size: 0x4]

--------------------------------
Class: TigerWeaponAbilityDash.TigerDisciplineBase.Object
	TigerDashConfig* AbilityConfig;//[Offset: 0x78, Size: 0x8]
	Vector CastDirection;//[Offset: 0x80, Size: 0xc]
	Vector CastLocation;//[Offset: 0x8c, Size: 0xc]
	void OnTerrainInterrupt(const Actor* TerrainActor, const PrimitiveComponent* HitComponent, out const HitResult HitResult);// 0x197e4f0
	void OnTerrainHitResult(const Actor* InTerrainActor, const PrimitiveComponent* InHitComponent, out const HitResult InHitResult);// 0x197e4f0
	void OnTerrainHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x1628980
	void OnRecoveryMontageBlendingOutStarted(AnimMontage* InMontage, bool bInWasInterrupted);// 0x1628790
	void OnOwnerMovementUpdated(float DeltaSeconds, Vector OldLocation, Vector OldVelocity);// 0x16285d0
	void OnForcedMoveResult(const enum ForcedMoveResult);// 0x1628550
	void OnCharacterHit(const TigerCharacter* AHitTigerCharacter);// 0x197e4f0
	void Multicast_SpawnOnHitParticle(const TigerCharacter* TigerCharacterHit);// 0x1628480
	void Multicast_PlayRecovery();// 0x1628240
	void Client_RecoveryMontageEnded();// 0x1627760

--------------------------------
Class: TigerWeaponAbilityHook.TigerDisciplineBase.Object
	TigerHookConfig* Config;//[Offset: 0x78, Size: 0x8]
	void Server_ThrowHook(const Vector SpawnLoc, const Vector TargetLoc);// 0x1628cf0

--------------------------------
Class: TigerReflectConfig.TigerActiveDisciplineConfig.TigerDisciplineConfigBase.Object
	enum ReflectBehaviors;//[Offset: 0x180, Size: 0x1]
	float DamageLetThroughModifier;//[Offset: 0x188, Size: 0x4]
	float ReflectSpread;//[Offset: 0x18c, Size: 0x4]
	float MaxDuration;//[Offset: 0x190, Size: 0x4]
	class Actor* BulletReflector;//[Offset: 0x198, Size: 0x8]
	float ReflectorRadius;//[Offset: 0x1a0, Size: 0x4]
	float ReflectorHalfHeight;//[Offset: 0x1a4, Size: 0x4]
	float ReflectorCoverageRange;//[Offset: 0x1a8, Size: 0x4]
	float PoseSwapDelay;//[Offset: 0x1ac, Size: 0x4]
	FName[] ReflectMontageNames;//[Offset: 0x1b0, Size: 0x10]
	FName ReflectEndMontageName;//[Offset: 0x1c0, Size: 0x8]
	bool bDrawReflectedBulletLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]

--------------------------------
Class: TigerWeaponAbilityReflect.TigerDisciplineBase.Object
	TigerReflectConfig* Config;//[Offset: 0x88, Size: 0x8]
	TigerPlayer* Player;//[Offset: 0x90, Size: 0x8]
	Actor* ReflectorActor;//[Offset: 0x98, Size: 0x8]
	void ReflectProjectile(Actor* InReflector, Actor* InOverlappedActor, out const HitResult InHit);// 0x1628b60
	void OnSilencedChanged(bool bInIsSilenced);// 0x16288f0
	void Multicast_StopReflecting();// 0x1628530
	void Multicast_StopDiscipline();// 0x1628510
	void Multicast_ReflectProjectile(const TigerRangedWeapon* InRangedWeapon, Actor* InOverlappedActor, const enum InBehaviour, const Vector InProjectileSpawnLocation, const Rotator InProjectileSpawnDirection, const int aFireSettingsIndex);// 0x1628260

--------------------------------
Class: TigerWeaponAbilityReflectActor.Actor.Object
	bool CanBeReflected(PrimitiveComponent* InOverlappedComponent, Actor* InOtherActor, PrimitiveComponent* InOtherComp, int InOtherBodyIndex, bool bInFromSweep, out const HitResult InSweepResult);// 0x162c2c0

--------------------------------
Class: TigerWeatherSettings.SharkLocalDeveloperSettings.DeveloperSettings.Object
	<FName,class TigerWeatherScenarioData> WeatherScenarioAliases;//[Offset: 0x38, Size: 0x50]
	<class TigerWeatherScenarioData,float> WeatherScenarioProbabilityRatios;//[Offset: 0x88, Size: 0x50]
	static class TigerWeatherScenarioData GetWeatherScenarioCDO(out const FName InName);// 0x162c790
	static FName[] GetWeatherScenarioAliases();// 0x162c710

--------------------------------
Class: DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object
	float WindStrength;//[Offset: 0x40, Size: 0x4]
	float WindSpeed;//[Offset: 0x44, Size: 0x4]
	float RainRate;//[Offset: 0x48, Size: 0x4]
	float PuddlesAmount;//[Offset: 0x4c, Size: 0x4]
	float PuddlesRingsIntensity;//[Offset: 0x50, Size: 0x4]
	float PuddlesWindTiling;//[Offset: 0x54, Size: 0x4]
	float AISightModifier;//[Offset: 0x58, Size: 0x4]
	float RainAudioMin;//[Offset: 0x5c, Size: 0x4]
	float ThunderAudioMin;//[Offset: 0x60, Size: 0x4]
	float WindAudioMin;//[Offset: 0x64, Size: 0x4]
	float RainAudioMax;//[Offset: 0x68, Size: 0x4]
	float ThunderAudioMax;//[Offset: 0x6c, Size: 0x4]
	float WindAudioMax;//[Offset: 0x70, Size: 0x4]
	enum ExponensialHeightFog;//[Offset: 0x74, Size: 0x1]
	float SnowfallRate;//[Offset: 0x78, Size: 0x4]
	float WetnessAmount;//[Offset: 0x7c, Size: 0x4]
	float MovementStrength;//[Offset: 0x80, Size: 0x4]
	float Speed;//[Offset: 0x84, Size: 0x4]
	float NoiseMultiplier;//[Offset: 0x88, Size: 0x4]
	bool EnableLightning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	PostProcessOverrides Global Post Process Settings;//[Offset: 0x90, Size: 0x58]
	SkyTextures SkyCubemapTextures;//[Offset: 0xe8, Size: 0x78]
	TextureCube* LightningMask;//[Offset: 0x160, Size: 0x28]
	float AuroraIntensity;//[Offset: 0x188, Size: 0x4]

--------------------------------
Class: DA_WeatherScenarioNoRain_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioLightRainLightFog_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioHeavyRain_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioLightRainHeavyFog_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioLightning_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioLightSnow_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioRedSky_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioYellowSky_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: DA_WeatherScenarioStormyVentrueSky_C.DA_WeatherScenario_C.TigerWeatherScenarioData.DataAsset.Object

--------------------------------
Class: TigerWorldCompositionGridCellComponent.TigerWorldCompositionCellComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: TigerWorldCompositionHexGridCellComponent.TigerWorldCompositionCellComponent.SceneComponent.ActorComponent.Object
	float HexCellRadius;//[Offset: 0x230, Size: 0x4]

--------------------------------
Class: TigerWorldCompositionSettings.DeveloperSettings.Object
	DirectoryPath StreamedLevelDirectory;//[Offset: 0x38, Size: 0x10]
	enum ProxyGenerationMode;//[Offset: 0x48, Size: 0x1]
	int ActorSortingCellSizeIncrementCount;//[Offset: 0x4c, Size: 0x4]
	float ActorSortingCellSizeIncrementAmount;//[Offset: 0x50, Size: 0x4]
	MeshMergingSettings ProxyMeshMergeSettings;//[Offset: 0x54, Size: 0xa0]
	bool bDoSecondProxyGenStage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	MeshProxySettings ProxySettings;//[Offset: 0xf8, Size: 0xa8]
	MeshBuildSettings LodBuildSettings;//[Offset: 0x1a0, Size: 0x30]
	PerPlatformFloat[] LodScreenSizes;//[Offset: 0x1d0, Size: 0x10]
	bool bEnableLodDitheringOnProxyMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	float ProxySizeRequirement;//[Offset: 0x1e4, Size: 0x4]
	bool bForceLoadAllCellLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	bool bEnablePreSpawnLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 0x1]
	bool bTriggerGarbageCollectionOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb, Size: 0x1]
	class Actor[] ProxyTypeBlacklistSoft;//[Offset: 0x1f0, Size: 0x10]
	class Actor[] StreamingTypeBlacklistSoft;//[Offset: 0x200, Size: 0x10]
	class Actor[] LevelClusterBlacklistSoft;//[Offset: 0x210, Size: 0x10]
	StaticMesh*[] StaticMeshesToMoveToFoliageSystem;//[Offset: 0x220, Size: 0x10]
	MaterialInterface* DebugVisualizationMaterialNotInFilter;//[Offset: 0x230, Size: 0x28]

--------------------------------
Class: MeshBuildSettings
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bBuildReversedIndexBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGenerateDistanceFieldAsIfTwoSided;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportFaceRemap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4]
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4]
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4]
	float BuildScale;//[Offset: 0x10, Size: 0x4]
	Vector BuildScale3D;//[Offset: 0x14, Size: 0xc]
	float DistanceFieldResolutionScale;//[Offset: 0x20, Size: 0x4]
	StaticMesh* DistanceFieldReplacementMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TigerConsiderForProxyUserData.AssetUserData.Object

--------------------------------
Class: TigerNeverConsiderForProxyUserData.AssetUserData.Object

--------------------------------
Class: TigerWorldCompositionLevel.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	static TigerWorldCompositionLevel* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x16308c0
	static TigerWorldCompositionLevel* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x16306b0

--------------------------------
Class: TigerWorldSettings.WorldSettings.Info.Actor.Object
	bool bOverrideServerReplicationCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	float CullDistance;//[Offset: 0x3ac, Size: 0x4]
	TigerProjectilePoolManager* ProjectilePoolManager;//[Offset: 0x3b0, Size: 0x8]
	class ProjectilePoolReserveCountSettings* ProjectilePoolReserveCountSettings;//[Offset: 0x3b8, Size: 0x8]

--------------------------------
Class: TigerWorldStatsGenerator.Object

--------------------------------
Class: TigerWorldStatsComponentCountGenerator.TigerWorldStatsGenerator.Object

--------------------------------
Class: TigerWorldStatsActorCountGenerator.TigerWorldStatsGenerator.Object

--------------------------------
Class: TigerWorldStatsObjectCountGenerator.TigerWorldStatsGenerator.Object

--------------------------------
Class: TigerWorldStatsBlueprintCountGenerator.TigerWorldStatsGenerator.Object

--------------------------------
Class: TigerWorldStatsCommandGenerator.TigerWorldStatsGenerator.Object

--------------------------------
Class: TigerWorldStatsSubSystem.GameInstanceSubsystem.Subsystem.Object
	void OnCellStartedLoading(TigerWorldCompositionCellComponent* InCellComponent);// 0x1630b00
	void OnCellFinishedLoading();// 0x1630ae0

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x278]

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0x580]

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x3f0]

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8, Size: 0x3b8]
	SlateSound PressedSlateSound;//[Offset: 0x3c0, Size: 0x18]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3d8, Size: 0x18]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8, Size: 0x278]
	SlateBrush DownArrowImage;//[Offset: 0x280, Size: 0x88]
	Vector2D ShadowOffset;//[Offset: 0x308, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x310, Size: 0x10]
	SlateBrush MenuBorderBrush;//[Offset: 0x320, Size: 0x88]
	Margin MenuBorderPadding;//[Offset: 0x3a8, Size: 0x10]

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x3b8]

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0x7f8]

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 0x88]
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 0x88]
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 0x88]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 0x88]
	Margin Padding;//[Offset: 0x228, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x238, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0x290, Size: 0x28]
	SlateColor BackgroundColor;//[Offset: 0x2b8, Size: 0x28]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2e0, Size: 0x28]
	Margin HScrollBarPadding;//[Offset: 0x308, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x318, Size: 0x10]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x328, Size: 0x4d0]

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x220]

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	SlateBrush BackgroundImageSelected;//[Offset: 0x88, Size: 0x88]
	SlateBrush BackgroundImageComposing;//[Offset: 0x110, Size: 0x88]
	SlateBrush CaretImage;//[Offset: 0x198, Size: 0x88]

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x1a0]

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x88]
	SlateBrush FillImage;//[Offset: 0x90, Size: 0x88]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 0x88]

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x4d0]

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x228]

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x2e8]

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush ActiveFillBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush InactiveFillBrush;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush ArrowsImage;//[Offset: 0x228, Size: 0x88]
	SlateColor ForegroundColor;//[Offset: 0x2b0, Size: 0x28]
	Margin TextPadding;//[Offset: 0x2d8, Size: 0x10]

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x270]

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x1ca4250

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1]
	delegate OnComplete;//[Offset: 0x4, Size: 0x10]
	int CompressionQuality;//[Offset: 0x14, Size: 0x4]
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4]
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10]
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10]
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10]
	FString Description;//[Offset: 0x58, Size: 0x10]
	FString Homepage;//[Offset: 0x68, Size: 0x10]
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10]
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10]
	Guid ProjectID;//[Offset: 0x98, Size: 0x10]
	FString ProjectName;//[Offset: 0xa8, Size: 0x10]
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10]
	FString SupportContact;//[Offset: 0xc8, Size: 0x10]
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18]
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18]
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1]
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1]
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4]
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4]
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4]
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x24aba10
	void StartReconstruction();// 0x24ab9f0
	void PauseReconstruction();// 0x24ab790
	bool IsReconstructionStarted();// 0x1557e40
	bool IsReconstructionPaused();// 0x15597d0
	void DisconnectMRMesh();// 0x24ab610
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x24ab4f0

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x460, Size: 0x8]
	MaterialInterface* WireframeMaterial;//[Offset: 0x468, Size: 0x8]
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 0x1]
	BodySetup* CachedBodySetup;//[Offset: 0x478, Size: 0x8]
	BodySetup*[] BodySetups;//[Offset: 0x480, Size: 0x10]
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0x24ab960
	void SetWireframeColor(out const LinearColor InColor);// 0x24ab8d0
	void SetUseWireframe(bool bUseWireframe);// 0x24ab840
	void SetEnableMeshOcclusion(bool bEnable);// 0x24ab7b0
	bool IsConnected();// 0x24ab750
	LinearColor GetWireframeColor();// 0x24ab720
	bool GetUseWireframe();// 0x24ab700
	bool GetEnableMeshOcclusion();// 0x24ab6e0
	void ForceNavMeshUpdate();// 0x24ab6c0
	void Clear();// 0x24ab4c0

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x1f8, Size: 0x10]
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1]
	enum VertexColorMode;//[Offset: 0x20b, Size: 0x1]
	Color[] BlockVertexColors;//[Offset: 0x210, Size: 0x10]
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x220, Size: 0x10]
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x230, Size: 0x10]
	float UpdateInterval;//[Offset: 0x240, Size: 0x4]
	MRMeshComponent* MRMesh;//[Offset: 0x248, Size: 0x8]
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0x197e4f0
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x24ab630
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0x24ab580

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0x24c1b90

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x1f8, Size: 0x10]
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x240, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x248, Size: 0x8]
	MRMeshComponent* MRMeshComponent;//[Offset: 0x250, Size: 0x8]
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x258, Size: 0x8]
	void UpdateVisualization();// 0x24cc020
	void SetNativeID(Guid NativeID);// 0x24cbbb0
	void ReceiveRemove();// 0x197e4f0
	void OnRep_Payload();// 0x24caf70
	MRMeshComponent* GetMRMesh();// 0x24cad10

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueID;//[Offset: 0x28, Size: 0x10]
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30]
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30]
	enum TrackingState;//[Offset: 0xa0, Size: 0x1]
	MRMeshComponent* UnderlyingMesh;//[Offset: 0xb0, Size: 0x8]
	enum ObjectClassification;//[Offset: 0xb8, Size: 0x1]
	int LastUpdateFrameNumber;//[Offset: 0xd0, Size: 0x4]
	FName DebugName;//[Offset: 0xe0, Size: 0x8]
	bool IsTracked();// 0x24d4050
	MRMeshComponent* GetUnderlyingMesh();// 0x24d3f60
	enum GetTrackingState();// 0x24ceb70
	enum GetObjectClassification();// 0x24d3ce0
	FString GetName();// 0x24d3ca0
	Transform GetLocalToWorldTransform();// 0x24d3c20
	Transform GetLocalToTrackingTransform();// 0x24ce990
	float GetLastUpdateTimestamp();// 0x24d3b30
	int GetLastUpdateFrameNumber();// 0x24d3b00
	FName GetDebugName();// 0x24d3960

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	static void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x24c4df0
	static bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0x24c4d20
	static void StopARSession();// 0x24c4d00
	static void StartARSession(ARSessionConfig* SessionConfig);// 0x24c4c80
	static void SetEnabledXRCamera(bool bOnOff);// 0x24c4c00
	static void SetARWorldScale(float InWorldScale);// 0x24c4ab0
	static void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0x24c4920
	static void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x24c4b30
	static bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0x24c4850
	static IntPoint ResizeXRCamera(out const IntPoint InSize);// 0x24c47b0
	static void RemovePin(ARPin* PinToRemove);// 0x24c4730
	static void RemoveARPinFromLocalStore(FName InSaveName);// 0x24c4690
	static void RemoveAllARPinsFromLocalStore();// 0x24c4710
	static ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x24c4500
	static bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0x24c4430
	static ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x24c4280
	static void PauseARSession();// 0x24c4260
	static <FName,ARPin*> LoadARPinsFromLocalStore();// 0x24c4190
	static ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x24c3d80
	static ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x24c3fb0
	static bool IsSessionTypeSupported(enum SESSIONTYPE);// 0x24c3d00
	static bool IsSessionTrackingFeatureSupported(enum SESSIONTYPE, enum SessionTrackingFeature);// 0x24c3c40
	static bool IsSceneReconstructionSupported(enum SESSIONTYPE, enum SceneReconstructionMethod);// 0x24c3b80
	static bool IsARSupported();// 0x24c3b50
	static bool IsARPinLocalStoreSupported();// 0x24c3b20
	static bool IsARPinLocalStoreReady();// 0x24c3af0
	static enum GetWorldMappingStatus();// 0x24c3ac0
	static enum GetTrackingQualityReason();// 0x24c3a90
	static enum GetTrackingQuality();// 0x24c3a60
	static ARVideoFormat[] GetSupportedVideoFormats(enum SESSIONTYPE);// 0x24c3790
	static ARSessionConfig* GetSessionConfig();// 0x24c3760
	static Vector[] GetPointCloud();// 0x24c36e0
	static ARTexture* GetPersonSegmentationImage();// 0x24c36b0
	static ARTexture* GetPersonSegmentationDepthImage();// 0x24c3680
	static bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x24c34f0
	static int GetNumberOfTrackedFacesSupported();// 0x24c34c0
	static ARLightEstimate* GetCurrentLightEstimate();// 0x24c3030
	static bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0x24c2f70
	static ARTextureCameraImage* GetCameraImage();// 0x24c2f40
	static ARTextureCameraDepth* GetCameraDepth();// 0x24c2f10
	static float GetARWorldScale();// 0x24c28f0
	static ARTexture* GetARTexture(enum TextureType);// 0x24c2870
	static ARSessionStatus GetARSessionStatus();// 0x24c27e0
	static ARTrackedPose*[] GetAllTrackedPoses();// 0x24c2e90
	static ARTrackedPoint*[] GetAllTrackedPoints();// 0x24c2e10
	static ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x24c2d90
	static ARTrackedImage*[] GetAllTrackedImages();// 0x24c2d10
	static AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x24c2c90
	static ARPose2D[] GetAllTracked2DPoses();// 0x24c2b50
	static ARPin*[] GetAllPins();// 0x24c2ad0
	static ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0x24c2a00
	static ARTrackedGeometry*[] GetAllGeometries();// 0x24c2980
	static Transform GetAlignmentTransform();// 0x24c2920
	static ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0x24c2700
	static void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x24c2560
	static void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x24c23c0
	static void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0x24c2260
	static void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0x24c2070
	static bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0x24c1ef0
	static ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x24c1d60
	static bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x24c1c80

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1]
	enum SESSIONTYPE;//[Offset: 0x3b, Size: 0x1]
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1]
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1]
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1]
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10]
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4]
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1]
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10]
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10]
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc]
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1]
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1]
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4]
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10]
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1]
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1]
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8]
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8]
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8]
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8]
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8]
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8]
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8]
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8]
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8]
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8]
	bool ShouldResetTrackedObjects();// 0x24cf780
	bool ShouldResetCameraTracking();// 0x24cf750
	bool ShouldRenderCameraOverlay();// 0x24cf720
	bool ShouldEnableCameraTracking();// 0x24cf6f0
	bool ShouldEnableAutoFocus();// 0x24cf6c0
	void SetWorldMapData(byte[] WorldMapData);// 0x24cf5d0
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x24cf550
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0x24cf4d0
	void SetResetTrackedObjects(bool bNewValue);// 0x24cf440
	void SetResetCameraTracking(bool bNewValue);// 0x24cf3b0
	void SetFaceTrackingUpdate(enum InUpdate);// 0x24cf240
	void SetFaceTrackingDirection(enum InDirection);// 0x24cf1c0
	void SetEnableAutoFocus(bool bNewValue);// 0x24cf0a0
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x24cf000
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x24cef50
	byte[] GetWorldMapData();// 0x24cebd0
	enum GetWorldAlignment();// 0x24ceba0
	enum GetSessionType();// 0x24ceb10
	enum GetSceneReconstructionMethod();// 0x24ceae0
	enum GetPlaneDetectionMode();// 0x24ceab0
	int GetMaxNumSimultaneousImagesTracked();// 0x24cea50
	enum GetLightEstimationMode();// 0x24ce960
	enum GetFrameSyncMode();// 0x24ce930
	enum GetFaceTrackingUpdate();// 0x24ce900
	enum GetFaceTrackingDirection();// 0x24ce8d0
	enum GetEnvironmentCaptureProbeType();// 0x24ce8a0
	enum GetEnabledSessionTrackingFeature();// 0x24ce870
	ARVideoFormat GetDesiredVideoFormat();// 0x24ce830
	ARCandidateObject*[] GetCandidateObjectList();// 0x24ce760
	ARCandidateImage*[] GetCandidateImageList();// 0x24ce6d0
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x24ce0f0
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x24ce060

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8]
	FString FriendlyName;//[Offset: 0x38, Size: 0x10]
	float Width;//[Offset: 0x48, Size: 0x4]
	float Height;//[Offset: 0x4c, Size: 0x4]
	enum Orientation;//[Offset: 0x50, Size: 0x1]
	float GetPhysicalWidth();// 0x24d3ef0
	float GetPhysicalHeight();// 0x24d3ed0
	enum GetOrientation();// 0x24d3eb0
	FString GetFriendlyName();// 0x24d3aa0
	Texture2D* GetCandidateTexture();// 0x24d3910

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10]
	FString FriendlyName;//[Offset: 0x40, Size: 0x10]
	Box BoundingBox;//[Offset: 0x50, Size: 0x1c]
	void SetFriendlyName(FString NewName);// 0x24d41d0
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x24d4120
	void SetBoundingBox(out const Box InBoundingBox);// 0x24d4080
	FString GetFriendlyName();// 0x24d3ad0
	byte[] GetCandidateObjectData();// 0x24d38e0
	Box GetBoundingBox();// 0x24d38b0

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4]
	int Width;//[Offset: 0x4, Size: 0x4]
	int Height;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x80]
	static void SetPlaneComponentDebugMode(enum NewDebugMode);// 0x24cbd90
	static void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0x24cbc50
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0x24cb630
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0x197e4f0
	static <enum,LinearColor> GetObjectClassificationDebugColors();// 0x24cad30

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	Vector Center;//[Offset: 0x50, Size: 0xc]
	Vector Extents;//[Offset: 0x5c, Size: 0xc]
	Vector[] BoundaryVertices;//[Offset: 0x68, Size: 0x10]
	enum ObjectClassification;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x278, Size: 0x1]
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0x24cb780
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x278, Size: 0x1]
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 0x1]
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x40]
	static void SetFaceComponentDebugMode(enum NewDebugMode);// 0x24cba60
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0x24cb1f0
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0xc]
	Vector RightEyePosition;//[Offset: 0x24, Size: 0xc]
	Vector LookAtTarget;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x60]
	static void SetImageComponentDebugMode(enum NewDebugMode);// 0x24cbb40
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0x24cb3f0
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	ARCandidateImage* DetectedImage;//[Offset: 0x50, Size: 0x8]
	Vector2D EstimatedSize;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x70]
	static void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0x24cbe70
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0x24cb940
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	Vector Extents;//[Offset: 0x50, Size: 0xc]
	FString QRCode;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x40]
	static void SetPoseComponentDebugMode(enum NewDebugMode);// 0x24cbe00
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0x24cb830
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30]
	Transform[] JointTransforms;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x30]
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0x24cb110
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30]

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x30]
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0x24cb110
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x30]

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x60]
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0x24cb520
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	enum ObjectClassification;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x280, Size: 0x70]
	static void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0x24cbad0
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0x24cb2c0
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0x197e4f0
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0x197e4f0

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x30]
	float Longitude;//[Offset: 0x50, Size: 0x4]
	float Latitude;//[Offset: 0x54, Size: 0x4]
	float AltitudeMeters;//[Offset: 0x58, Size: 0x4]
	enum AltitudeSource;//[Offset: 0x5c, Size: 0x1]
	FString AnchorName;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8]
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8]
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x30]
	Transform LocalToAlignedTrackingTransform;//[Offset: 0x70, Size: 0x30]
	enum TrackingState;//[Offset: 0xa0, Size: 0x1]
	delegate OnARTrackingStateChanged;//[Offset: 0xc0, Size: 0x10]
	delegate OnARTransformUpdated;//[Offset: 0xd0, Size: 0x10]
	enum GetTrackingState();// 0x24ceb70
	ARTrackedGeometry* GetTrackedGeometry();// 0x24ceb40
	SceneComponent* GetPinnedComponent();// 0x24cea80
	Transform GetLocalToWorldTransform();// 0x24ce9f0
	Transform GetLocalToTrackingTransform();// 0x24ce990
	FName GetDebugName();// 0x24ce7f0
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x24ce4a0

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4]
	enum TraceChannel;//[Offset: 0x4, Size: 0x1]
	Transform LocalTransform;//[Offset: 0x10, Size: 0x30]
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0xe8, Size: 0x1]
	float Timestamp;//[Offset: 0xec, Size: 0x4]
	Guid ExternalTextureGuid;//[Offset: 0xf0, Size: 0x10]
	Vector2D Size;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8]
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x8]
	Vector2D PrincipalPoint;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0x108, Size: 0x1]
	enum DepthAccuracy;//[Offset: 0x109, Size: 0x1]
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1]

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10]
	enum Status;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0xf8, Size: 0x50]
	ARPose3D GetTrackedPoseData();// 0x24d3f30

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28]
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10]
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10]
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4]
	FName[] JointNames;//[Offset: 0x8, Size: 0x10]
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0xf8, Size: 0x1]
	Vector Center;//[Offset: 0xfc, Size: 0xc]
	Vector Extent;//[Offset: 0x108, Size: 0xc]
	Vector[] BoundaryPolygon;//[Offset: 0x118, Size: 0x10]
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x128, Size: 0x8]
	ARPlaneGeometry* GetSubsumedBy();// 0x24d3f10
	enum GetOrientation();// 0x14bf8d0
	Vector GetExtent();// 0x24d3a70
	Vector GetCenter();// 0x24d3930
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x24d37f0

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0xf8, Size: 0x8]
	Vector2D EstimatedSize;//[Offset: 0x100, Size: 0x8]
	Vector2D GetEstimateSize();// 0x24d39f0
	ARCandidateImage* GetDetectedImage();// 0x24d39a0

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0xf8, Size: 0xc]
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x108, Size: 0x8]
	Vector GetExtent();// 0x24d3a30
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x24d39c0

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x140, Size: 0x1]
	float Timestamp;//[Offset: 0x144, Size: 0x4]
	Guid ExternalTextureGuid;//[Offset: 0x148, Size: 0x10]
	Vector2D Size;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28]
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10]
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	static ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x24c3960
	static enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x24c3860
	static Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0x24c33a0
	static Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x24c3280
	static Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x24c3160
	static float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x24c3060

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	static ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x24c1b00

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	static ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x24c19d0

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0x24cbee0
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0x24caf90
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0x24cae20
	static ARDependencyHandler* GetARDependencyHandler();// 0x24cabe0
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0x24ca900

--------------------------------
Class: ARGeoTrackingSupport.Object
	static ARGeoTrackingSupport* GetGeoTrackingSupport();// 0x24cace0
	enum GetGeoTrackingStateReason();// 0x15597d0
	enum GetGeoTrackingState();// 0x1557e40
	enum GetGeoTrackingAccuracy();// 0x150b0b0
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0x24ca740
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0x24ca5c0

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0x197e4f0
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0x24caae0
	static CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0x24caa50

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0x197e4f0
	static GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0x24cac10

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x208, Size: 0x10]
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0x24ced20
	void ServerDestroyARActor(ARActor* Actor);// 0x24cec10
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0x197e4f0
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0x197e4f0

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4]
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4]
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10]
	float GetAmbientIntensityLumens();// 0x24ce6a0
	float GetAmbientColorTemperatureKelvin();// 0x24ce670
	LinearColor GetAmbientColor();// 0x24ce630

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x310, Size: 0x4]
	void SetPreviewImageData(byte[] ImageData);// 0x24cf2c0
	void SetARWorldSharingIsReady();// 0x24cef30
	void SetARSharedWorldData(byte[] ARWorldData);// 0x24cee40
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x24ce600

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x298, Size: 0x10]
	byte[] ARWorldData;//[Offset: 0x2a8, Size: 0x10]
	int PreviewImageBytesTotal;//[Offset: 0x2b8, Size: 0x4]
	int ARWorldBytesTotal;//[Offset: 0x2bc, Size: 0x4]
	int PreviewImageBytesDelivered;//[Offset: 0x2c0, Size: 0x4]
	int ARWorldBytesDelivered;//[Offset: 0x2c4, Size: 0x4]
	void K2_OnARWorldMapIsReady();// 0x197e4f0

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0x24cecd0
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x24ce390
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x24ce280
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x24ce180

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x238, Size: 0x8]
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x24cf130

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x108, Size: 0x10]
	int Version;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0xf8, Size: 0xc]
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	<enum,float> BlendShapes;//[Offset: 0x108, Size: 0x50]
	Transform LeftEyeTransform;//[Offset: 0x190, Size: 0x30]
	Transform RightEyeTransform;//[Offset: 0x1c0, Size: 0x30]
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x24d3f90
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x24d3b80
	float GetBlendShapeValue(enum BlendShape);// 0x24d3610
	<enum,float> GetBlendShapes();// 0x24d36a0

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0xf8, Size: 0x8]
	ARCandidateObject* GetDetectedObject();// 0x24d39a0

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x24d3d00

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0x24d3c80
	float GetLatitude();// 0x24d3b60
	enum GetAltitudeSource();// 0x24d35f0
	float GetAltitudeMeters();// 0x24d35d0

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb0, Size: 0x10]
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc0, Size: 0x10]
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd0, Size: 0x10]
	delegate OnAddTrackedPlane;//[Offset: 0xe0, Size: 0x10]
	delegate OnUpdateTrackedPlane;//[Offset: 0xf0, Size: 0x10]
	delegate OnRemoveTrackedPlane;//[Offset: 0x100, Size: 0x10]
	delegate OnAddTrackedPoint;//[Offset: 0x110, Size: 0x10]
	delegate OnUpdateTrackedPoint;//[Offset: 0x120, Size: 0x10]
	delegate OnRemoveTrackedPoint;//[Offset: 0x130, Size: 0x10]
	delegate OnAddTrackedImage;//[Offset: 0x140, Size: 0x10]
	delegate OnUpdateTrackedImage;//[Offset: 0x150, Size: 0x10]
	delegate OnRemoveTrackedImage;//[Offset: 0x160, Size: 0x10]
	delegate OnAddTrackedFace;//[Offset: 0x170, Size: 0x10]
	delegate OnUpdateTrackedFace;//[Offset: 0x180, Size: 0x10]
	delegate OnRemoveTrackedFace;//[Offset: 0x190, Size: 0x10]
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a0, Size: 0x10]
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b0, Size: 0x10]
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c0, Size: 0x10]
	delegate OnAddTrackedObject;//[Offset: 0x1d0, Size: 0x10]
	delegate OnUpdateTrackedObject;//[Offset: 0x1e0, Size: 0x10]
	delegate OnRemoveTrackedObject;//[Offset: 0x1f0, Size: 0x10]

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	static void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x24e7e10
	static void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0x24e7cf0
	static void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0x24e7c50
	static void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x24e7b90
	static void SetTrackingOrigin(byte Origin);// 0x24e7aa0
	static void SetSpectatorScreenTexture(Texture* InTexture);// 0x24e7990
	static void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x24e7780
	static void SetSpectatorScreenMode(enum Mode);// 0x24e7710
	static void SetClippingPlanes(float Near, float Far);// 0x24e7260
	static void ResetOrientationAndPosition(float Yaw, byte Options);// 0x24e7110
	static bool IsSpectatorScreenModeControllable();// 0x24e70e0
	static bool IsInLowPersistenceMode();// 0xb69560
	static bool IsHeadMountedDisplayEnabled();// 0x24e6d80
	static bool IsHeadMountedDisplayConnected();// 0x24e6d50
	static bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x24e6cb0
	static bool HasValidTrackingPosition();// 0x24e6c60
	static int GetXRSystemFlags();// 0x24e6c30
	static float GetWorldToMetersScale(Object* WorldContext);// 0x24e6ba0
	static void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x24e6a40
	static FString GetVersionString();// 0x24e6b20
	static Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x24e6980
	static void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x24e65a0
	static byte GetTrackingOrigin();// 0x24e6560
	static float GetScreenPercentage();// 0x24e6530
	static void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x24e62c0
	static float GetPixelDensity();// 0x24e6290
	static void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x24e60e0
	static int GetNumOfTrackingSensors();// 0x24e60b0
	static void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0x24e5f10
	static byte GetHMDWornState();// 0x24e5dc0
	static FName GetHMDDeviceName();// 0x24e5d80
	static void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0x24e5ca0
	static void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x24e5a70
	static void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x24e5880
	static bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec);// 0x24e5500
	static XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x24e53b0
	static void EnableLowPersistenceMode(bool bEnable);// 0x24e5090
	static bool EnableHMD(bool bEnable);// 0x24e5000
	static void DisconnectRemoteXRDevice();// 0x24e4fe0
	static byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0x24e4c60
	static bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0x24e4bc0
	static void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0x24e4b40
	static void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x24e4a50

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8]
	int DeviceID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName DeviceName;//[Offset: 0x4, Size: 0x8]
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10]
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1]
	enum HandIndex;//[Offset: 0x1d, Size: 0x1]
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1]
	Vector GripPosition;//[Offset: 0x20, Size: 0xc]
	Quat GripRotation;//[Offset: 0x30, Size: 0x10]
	Vector AimPosition;//[Offset: 0x40, Size: 0xc]
	Quat AimRotation;//[Offset: 0x50, Size: 0x10]
	Vector[] HandKeyPositions;//[Offset: 0x60, Size: 0x10]
	Quat[] HandKeyRotations;//[Offset: 0x70, Size: 0x10]
	float[] HandKeyRadii;//[Offset: 0x80, Size: 0x10]
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName DeviceName;//[Offset: 0x4, Size: 0x8]
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10]
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1]
	Vector Position;//[Offset: 0x20, Size: 0xc]
	Quat Rotation;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum AxisGesture;//[Offset: 0x2, Size: 0x1]
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x450, Size: 0x4]
	enum Hand;//[Offset: 0x454, Size: 0x1]
	FName MotionSource;//[Offset: 0x458, Size: 0x8]
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 0x1]
	enum CurrentTrackingStatus;//[Offset: 0x464, Size: 0x1]
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 0x1]
	FName DisplayModelSource;//[Offset: 0x468, Size: 0x8]
	StaticMesh* CustomDisplayMesh;//[Offset: 0x470, Size: 0x8]
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x478, Size: 0x10]
	PrimitiveComponent* DisplayComponent;//[Offset: 0x4f0, Size: 0x8]
	void SetTrackingSource(const enum NewSource);// 0x24e7b10
	void SetTrackingMotionSource(const FName NewSource);// 0x24e7a10
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x24e7680
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x24e73b0
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x24e7320
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x24e71d0
	void OnMotionControllerUpdated();// 0x197e4f0
	bool IsTracked();// 0x24ab6e0
	enum GetTrackingSource();// 0x24e6950
	float GetParameterValue(FName InName, out bool bValueFound);// 0x24e61b0
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x24e5df0

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	static void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x24e7440
	static bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x24e7010
	static bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x24e6f40
	static bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x24e6eb0
	static bool IsMotionTrackedDeviceCountManagementNecessary();// 0x24e6e80
	static bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x24e6db0
	static int GetMotionTrackingEnabledControllerCount();// 0x24e6080
	static int GetMaximumMotionTrackedControllerCount();// 0x24e5ee0
	static FName GetActiveTrackingSystemName();// 0x24e54c0
	static FName[] EnumerateMotionSources();// 0x24e5330
	static bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x24e5260
	static bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x24e5190
	static bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x24e5100
	static void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x24e4f20
	static void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x24e4e60
	static void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x24e4de0
	static void DisableMotionTrackingOfAllControllers();// 0x24e4dc0
	static void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x24e4d40

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate HMDRecenteredDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate HMDReconnectedDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate HMDConnectCanceledDelegate;//[Offset: 0x100, Size: 0x10]
	delegate HMDPutOnHeadDelegate;//[Offset: 0x110, Size: 0x10]
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x120, Size: 0x10]
	delegate VRControllerRecenteredDelegate;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	static PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x24e4810
	static PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x24e41a0

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10]
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10]
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8]
	static AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x24e4570
	static AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x24e3f70

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	static void ShowLoadingScreen();// 0x24e7df0
	static void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x24e74c0
	static void HideLoadingScreen();// 0x24e6c90
	static void ClearLoadingScreenSplashes();// 0x24e4b20
	static void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x24e4370

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1]
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	UInt32Property AppId;//[Size: 0x4]
	FString AppName;//[Offset: 0x30, Size: 0x10]
	FString BuildVersion;//[Offset: 0x40, Size: 0x10]
	FString LaunchExe;//[Offset: 0x50, Size: 0x10]
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10]
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50]
	FString PrereqName;//[Offset: 0xc0, Size: 0x10]
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10]
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10]
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10]
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10]
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10]
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14]
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10]
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10]
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	UInt32Property Offset;//[Size: 0x4]
	UInt32Property Size;//[Size: 0x4]

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	UInt64Property Hash;//[Size: 0x8]
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14]
	int64 FileSize;//[Offset: 0x30, Size: 0x8]
	byte GroupNumber;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x678, Size: 0x10]
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x688, Size: 0x10]
	Guid GenerationGuid;//[Offset: 0x698, Size: 0x10]

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	static int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x2715f90
	static int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x2715e50

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10]
	float Density;//[Offset: 0x38, Size: 0x4]
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4]
	float Radius;//[Offset: 0x40, Size: 0x4]
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4]
	enum Scaling;//[Offset: 0x4c, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8]
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc]
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1]
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4]
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8]
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4]
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4]
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8]
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8]
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10]
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4]
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10]
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4]
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8]
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1]
	Vector CollisionScale;//[Offset: 0x108, Size: 0xc]
	BoxSphereBounds MeshBounds;//[Offset: 0x114, Size: 0x1c]
	Vector LowBoundOriginRadius;//[Offset: 0x130, Size: 0xc]
	byte Mobility;//[Offset: 0x13c, Size: 0x1]
	Int32Interval CullDistance;//[Offset: 0x140, Size: 0x8]
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x148, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x148, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x148, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x148, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x148, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x148, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x148, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x149, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x14c, Size: 0x4]
	enum LightmapType;//[Offset: 0x150, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x154, Size: 0x1]
	BodyInstance BodyInstance;//[Offset: 0x158, Size: 0x158]
	byte CustomNavigableGeometry;//[Offset: 0x2b0, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2b1, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2b8, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2bc, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x2c0, Size: 0x4]
	float CollisionRadius;//[Offset: 0x2c4, Size: 0x4]
	float ShadeRadius;//[Offset: 0x2c8, Size: 0x4]
	int NumSteps;//[Offset: 0x2cc, Size: 0x4]
	float InitialSeedDensity;//[Offset: 0x2d0, Size: 0x4]
	float AverageSpreadDistance;//[Offset: 0x2d4, Size: 0x4]
	float SpreadVariance;//[Offset: 0x2d8, Size: 0x4]
	int SeedsPerStep;//[Offset: 0x2dc, Size: 0x4]
	int DistributionSeed;//[Offset: 0x2e0, Size: 0x4]
	float MaxInitialSeedOffset;//[Offset: 0x2e4, Size: 0x4]
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	float MaxInitialAge;//[Offset: 0x2ec, Size: 0x4]
	float MaxAge;//[Offset: 0x2f0, Size: 0x4]
	float OverlapPriority;//[Offset: 0x2f4, Size: 0x4]
	FloatInterval ProceduralScale;//[Offset: 0x2f8, Size: 0x8]
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x300, Size: 0x88]
	int ChangeCount;//[Offset: 0x388, Size: 0x4]
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38d, Size: 0x1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1]
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x390, Size: 0x10]
	int VirtualTextureCullMips;//[Offset: 0x3a0, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x3a4, Size: 0x1]

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float MaskThreshold;//[Offset: 0x4, Size: 0x4]
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x3a8, Size: 0x8]
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x3a8, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x3b0, Size: 0x10]
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x3c0, Size: 0x8]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x238, Size: 0x8]
	Vector TouchingActorEntryPosition;//[Offset: 0x240, Size: 0xc]
	Vector FoliageVelocity;//[Offset: 0x24c, Size: 0xc]
	Vector FoliageForce;//[Offset: 0x258, Size: 0xc]
	Vector FoliagePosition;//[Offset: 0x264, Size: 0xc]
	float FoliageDamageImpulseScale;//[Offset: 0x270, Size: 0x4]
	float FoliageTouchImpulseScale;//[Offset: 0x274, Size: 0x4]
	float FoliageStiffness;//[Offset: 0x278, Size: 0x4]
	float FoliageStiffnessQuadratic;//[Offset: 0x27c, Size: 0x4]
	float FoliageDamping;//[Offset: 0x280, Size: 0x4]
	float MaxDamageImpulse;//[Offset: 0x284, Size: 0x4]
	float MaxTouchImpulse;//[Offset: 0x288, Size: 0x4]
	float MaxForce;//[Offset: 0x28c, Size: 0x4]
	float Mass;//[Offset: 0x290, Size: 0x4]
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x2715c20

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8]
	float TileOverlap;//[Offset: 0xb8, Size: 0x4]
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8]
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4]
	float TileSize;//[Offset: 0x2c, Size: 0x4]
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4]
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4]
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10]
	void Simulate(int NumSteps);// 0x27160f0

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8]
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8]
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8]
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Location;//[Offset: 0x10, Size: 0xc]
	float Age;//[Offset: 0x1c, Size: 0x4]
	Vector Normal;//[Offset: 0x20, Size: 0xc]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	FoliageType* Type;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x4e0, Size: 0x4]

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x228, Size: 0x8]
	Guid LandscapeGuid;//[Offset: 0x230, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x240, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x248, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x24c, Size: 0x4]
	byte LODFalloff;//[Offset: 0x250, Size: 0x1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x254, Size: 0x4]
	float LOD0ScreenSize;//[Offset: 0x258, Size: 0x4]
	float LOD0DistributionSetting;//[Offset: 0x25c, Size: 0x4]
	float LODDistributionSetting;//[Offset: 0x260, Size: 0x4]
	float TessellationComponentScreenSize;//[Offset: 0x264, Size: 0x4]
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x26c, Size: 0x4]
	int OccluderGeometryLOD;//[Offset: 0x270, Size: 0x4]
	int StaticLightingLOD;//[Offset: 0x274, Size: 0x4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x278, Size: 0x8]
	float StreamingDistanceMultiplier;//[Offset: 0x280, Size: 0x4]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x288, Size: 0x8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2b0, Size: 0x8]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x2b8, Size: 0x10]
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	byte MeshHolesMaxLod;//[Offset: 0x2c9, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x2d0, Size: 0x10]
	int VirtualTextureNumLods;//[Offset: 0x2e0, Size: 0x4]
	int VirtualTextureLodBias;//[Offset: 0x2e4, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x2e8, Size: 0x1]
	float NegativeZBoundsExtension;//[Offset: 0x2ec, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x2f0, Size: 0x4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x2f8, Size: 0x10]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x308, Size: 0x10]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x318, Size: 0x10]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x390, Size: 0x4]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x394, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a4, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3a5, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a8, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a8, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x3ac, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x3b0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x3b4, Size: 0x4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3b8, Size: 0x18]
	int CollisionMipLevel;//[Offset: 0x3d0, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x3d4, Size: 0x4]
	float CollisionThickness;//[Offset: 0x3d8, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x3e0, Size: 0x158]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x538, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x53c, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x540, Size: 0x4]
	int NumSubsections;//[Offset: 0x544, Size: 0x4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x548, Size: 0x1]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x54d, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e, Size: 0x1]
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54f, Size: 0x1]
	<Texture2D*,LandscapeWeightmapUsage*> WeightmapUsageMap;//[Offset: 0x550, Size: 0x50]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x274dbe0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x274db10
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x274da40
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x274d920
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x1509f70
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x274d590
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x274d500
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x274d470
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x1540190
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x1496400
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x274d3e0

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x450, Size: 0x10]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x460, Size: 0x10]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x470, Size: 0x10]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x274f7b0

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	float Width;//[Offset: 0x40, Size: 0x4]
	float LayerWidthRatio;//[Offset: 0x44, Size: 0x4]
	float SideFalloff;//[Offset: 0x48, Size: 0x4]
	float LeftSideFalloffFactor;//[Offset: 0x4c, Size: 0x4]
	float RightSideFalloffFactor;//[Offset: 0x50, Size: 0x4]
	float LeftSideLayerFalloffFactor;//[Offset: 0x54, Size: 0x4]
	float RightSideLayerFalloffFactor;//[Offset: 0x58, Size: 0x4]
	float EndFalloff;//[Offset: 0x5c, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x60, Size: 0x10]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float TangentLen;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]
	Vector LayerLeft;//[Offset: 0x3c, Size: 0xc]
	Vector LayerRight;//[Offset: 0x48, Size: 0xc]
	Vector LayerFalloffLeft;//[Offset: 0x54, Size: 0xc]
	Vector LayerFalloffRight;//[Offset: 0x60, Size: 0xc]
	float StartEndFalloff;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x450, Size: 0x4]
	int SectionBaseY;//[Offset: 0x454, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x458, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x45c, Size: 0x4]
	int NumSubsections;//[Offset: 0x460, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x468, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x470, Size: 0x8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x478, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x488, Size: 0x10]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x498, Size: 0x10]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x4a8, Size: 0x10]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x4b8, Size: 0x10]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x4c8, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x4d0, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x4e0, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x4f0, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x500, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x51c, Size: 0x1c]
	Texture2D* HeightmapTexture;//[Offset: 0x538, Size: 0x8]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x540, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x550, Size: 0x10]
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x560, Size: 0x8]
	Guid MapBuildDataId;//[Offset: 0x568, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x578, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x588, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x58c, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x590, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x594, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x598, Size: 0x4]
	int ForcedLOD;//[Offset: 0x59c, Size: 0x4]
	int LODBias;//[Offset: 0x5a0, Size: 0x4]
	Guid StateId;//[Offset: 0x5a4, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x5b4, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x5c8, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0x5d0, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x5d8, Size: 0x8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x5e0, Size: 0x10]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x5f0, Size: 0x10]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x274bc40
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x274bb60
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x274ba80

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x450, Size: 0x10]
	int SectionBaseX;//[Offset: 0x460, Size: 0x4]
	int SectionBaseY;//[Offset: 0x464, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x468, Size: 0x4]
	float CollisionScale;//[Offset: 0x46c, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x470, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x478, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x488, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x498, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x4b4, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x4e0, Size: 0x10]
	LandscapeComponent* GetRenderComponent();// 0x274bce0

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8]
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0xb7a5a0
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x274be90
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x274bd10
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0x197e4f0

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c]
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10]
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4]
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4]
	Vector DrawScale;//[Offset: 0x60, Size: 0xc]
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x5a0, Size: 0x1c]

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x368, Size: 0x10]
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1]
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x378, Size: 0x1]
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x378, Size: 0x1]

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x530, Size: 0x10]

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x228, Size: 0x8]

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x4e0, Size: 0x10]
	IntPoint[] ProxyComponentBases;//[Offset: 0x4f0, Size: 0x10]
	int8 ProxyLOD;//[Offset: 0x500, Size: 0x1]

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LandscapeSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8]
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8]
	byte BlendType;//[Offset: 0x8, Size: 0x1]
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0xc]
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0xc]
	float PreviewWeight;//[Offset: 0x34, Size: 0x4]
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0xc]
	float ConstHeightInput;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x40, Size: 0x1]
	byte CustomUVType;//[Offset: 0x41, Size: 0x1]
	float MappingScale;//[Offset: 0x44, Size: 0x4]
	float MappingRotation;//[Offset: 0x48, Size: 0x4]
	float MappingPanU;//[Offset: 0x4c, Size: 0x4]
	float MappingPanV;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x40, Size: 0x8]
	float PreviewWeight;//[Offset: 0x48, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x4c, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x40, Size: 0xc]
	ExpressionInput LayerNotUsed;//[Offset: 0x54, Size: 0xc]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x74, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x40, Size: 0xc]
	ExpressionInput Layer;//[Offset: 0x54, Size: 0xc]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]
	float PreviewWeight;//[Offset: 0x70, Size: 0x4]
	Vector ConstBase;//[Offset: 0x74, Size: 0xc]
	Guid ExpressionGUID;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x8, Size: 0xc]

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object
	Guid ExpressionGUID;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FixedFrameRate;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	static FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x2752070
	static FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x2751fb0
	static FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x2751ef0
	static FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x2751da0
	static FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x2751cc0
	static FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x2751c00
	static bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x2751b00
	static bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x2751a60
	static FrameRate GetTimecodeFrameRate();// 0x2751a20
	static Timecode GetTimecode();// 0x27519e0
	static FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x2751920
	static FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x27517f0
	static float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x2751740
	static float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x27516a0
	static int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x2751610
	static FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x2751550
	static FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x2751490

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int FrameOffset;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x27d01d0
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x27d0120
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x27d0070
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x27cff70

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xf0, Size: 0x90]

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool[] Values;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneFloatDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x197e4f0

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8]
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10]
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10]
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]
	Guid ObjectGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8]
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8]
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	static void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x28427d0
	static void K2_StartProfilingTimer();// 0x28427b0
	static Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x28424d0
	static float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x28423b0
	static Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x2842110
	static float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x2842020
	static float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x2841d30
	static Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x2841c20
	static float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x28417c0
	static float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x28415a0

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10]
	float Range;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10]
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10]
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10]
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x2843ab0
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x28439c0
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x28438f0
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x2843820
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x2843690

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0x197e4f0

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xe8, Size: 0x10]
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xf8, Size: 0x18]
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0x28e5b40
	MovieSceneObjectBindingID GetConstraintBindingID();// 0x28e5a00

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x118, Size: 0x8]
	FName AttachComponentName;//[Offset: 0x120, Size: 0x8]
	enum AttachmentLocationRule;//[Offset: 0x128, Size: 0x1]
	enum AttachmentRotationRule;//[Offset: 0x129, Size: 0x1]
	enum AttachmentScaleRule;//[Offset: 0x12a, Size: 0x1]
	enum DetachmentLocationRule;//[Offset: 0x12b, Size: 0x1]
	enum DetachmentRotationRule;//[Offset: 0x12c, Size: 0x1]
	enum DetachmentScaleRule;//[Offset: 0x12d, Size: 0x1]

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x110, Size: 0xa0]
	enum FrontAxisEnum;//[Offset: 0x1b0, Size: 0x1]
	enum UpAxisEnum;//[Offset: 0x1b1, Size: 0x1]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4, Size: 0x1]
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b4, Size: 0x1]

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xf0, Size: 0x4]
	MovieSceneFloatChannel Translation;//[Offset: 0xf8, Size: 0xa0]
	MovieSceneFloatChannel Rotation;//[Offset: 0x2d8, Size: 0xa0]
	MovieSceneFloatChannel Scale;//[Offset: 0x4b8, Size: 0xa0]
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x698, Size: 0xa0]
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1]

--------------------------------
Class: MovieSceneTransformMask
	UInt32Property Mask;//[Size: 0x4]

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe8, Size: 0xb0]
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x198, Size: 0x80]
	FString[] ActorGuidStrings;//[Offset: 0x218, Size: 0x10]

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10]
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18]
	FName ComponentName;//[Offset: 0x18, Size: 0x8]
	FName SocketName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe8, Size: 0x8]
	FrameNumber StartFrameOffset;//[Offset: 0xf0, Size: 0x4]
	float StartOffset;//[Offset: 0xf4, Size: 0x4]
	float AudioStartTime;//[Offset: 0xf8, Size: 0x4]
	float AudioDilationFactor;//[Offset: 0xfc, Size: 0x4]
	float AudioVolume;//[Offset: 0x100, Size: 0x4]
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x108, Size: 0xa0]
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1a8, Size: 0xa0]
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x248, Size: 0xb0]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x300, Size: 0x8]
	delegate OnQueueSubtitles;//[Offset: 0x308, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x318, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x328, Size: 0x10]
	void SetStartOffset(FrameNumber InStartOffset);// 0x28e5c90
	void SetSound(SoundBase* InSound);// 0x28e5c00
	FrameNumber GetStartOffset();// 0x28e5a60
	SoundBase* GetSound();// 0x28e5a40

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe8, Size: 0x20]
	CameraAnim* CameraAnim;//[Offset: 0x108, Size: 0x8]
	float PlayRate;//[Offset: 0x110, Size: 0x4]
	float PlayScale;//[Offset: 0x114, Size: 0x4]
	float BlendInTime;//[Offset: 0x118, Size: 0x4]
	float BlendOutTime;//[Offset: 0x11c, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float PlayScale;//[Offset: 0xc, Size: 0x4]
	float BlendInTime;//[Offset: 0x10, Size: 0x4]
	float BlendOutTime;//[Offset: 0x14, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	Guid CameraGuid;//[Offset: 0xf4, Size: 0x10]
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0x104, Size: 0x18]
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x30]
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0x28e5a80
	MovieSceneObjectBindingID GetCameraBindingID();// 0x28e59c0

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe8, Size: 0x20]
	class MatineeCameraShake* ShakeClass;//[Offset: 0x108, Size: 0x8]
	float PlayScale;//[Offset: 0x110, Size: 0x4]
	enum PlaySpace;//[Offset: 0x114, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x118, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class MatineeCameraShake* ShakeClass;//[Offset: 0x0, Size: 0x8]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	enum PlaySpace;//[Offset: 0xc, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe8, Size: 0x88]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10]
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	enum PlaySpace;//[Offset: 0xc, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x160, Size: 0x10]
	FText DISPLAYNAME;//[Offset: 0x170, Size: 0x18]
	void SetShotDisplayName(FString InShotDisplayName);// 0x28ebc30
	FString GetShotDisplayName();// 0x28eba90

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe8, Size: 0xa0]
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x188, Size: 0xa0]
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x228, Size: 0xa0]
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c8, Size: 0xa0]

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedComponentTransformSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe8, Size: 0x98]

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xf0, Size: 0x28]

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8]
	FieldPathProperty BoundObjectProperty;//[Size: 0x20]

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe8, Size: 0x78]
	MovieSceneEventSectionData EventData;//[Offset: 0x160, Size: 0x88]

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName Value;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	EventPayload[] KeyValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8]
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	enum EventPosition;//[Offset: 0x84, Size: 0x1]
	MovieSceneSection*[] Sections;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xf0, Size: 0x88]

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x8, Size: 0x10]
	MovieSceneEvent[] KeyValues;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xa0]
	LinearColor FadeColor;//[Offset: 0x188, Size: 0x10]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1]

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe8, Size: 0x90]

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	int DefaultValue;//[Offset: 0x18, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] Values;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xf0, Size: 0x1]
	FName[] LevelNames;//[Offset: 0xf8, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x28ebd30
	void SetLevelNames(out const FName[] InLevelNames);// 0x28ebb80
	enum GetVisibility();// 0x28ebb50
	FName[] GetLevelNames();// 0x28eba60

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe8, Size: 0xc0]

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	class Object* PropertyClass;//[Offset: 0x8, Size: 0x8]
	FrameNumber[] Times;//[Offset: 0x10, Size: 0x10]
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x20, Size: 0x10]
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28]
	Object* HardPtr;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	class Object* PropertyClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe8, Size: 0x10]
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf8, Size: 0x10]
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x108, Size: 0x10]
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x118, Size: 0x10]
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x128, Size: 0x10]
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x138, Size: 0x10]
	bool RemoveVectorParameter(FName InParameterName);// 0x28f19d0
	bool RemoveVector2DParameter(FName InParameterName);// 0x28f1930
	bool RemoveTransformParameter(FName InParameterName);// 0x28f1890
	bool RemoveScalarParameter(FName InParameterName);// 0x28f17f0
	bool RemoveColorParameter(FName InParameterName);// 0x28f1750
	bool RemoveBoolParameter(FName InParameterName);// 0x28f16b0
	void GetParameterNames(out <FName> ParameterNames);// 0x28f1570
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0x28f1450
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0x28f1340
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0x28f11e0
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0x28f10c0
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0x28f0fa0
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0x28f0e90

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0x90]

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xa0]

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0]

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel YCurve;//[Offset: 0xa8, Size: 0xa0]
	MovieSceneFloatChannel ZCurve;//[Offset: 0x148, Size: 0xa0]

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xa8, Size: 0xa0]
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x148, Size: 0xa0]
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x1e8, Size: 0xa0]

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xa0]
	MovieSceneFloatChannel Rotation;//[Offset: 0x1e8, Size: 0xa0]
	MovieSceneFloatChannel Scale;//[Offset: 0x3c8, Size: 0xa0]

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe8, Size: 0x98]

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe8, Size: 0xc0]

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe8, Size: 0xd8]
	AnimSequence* AnimSequence;//[Offset: 0x1c0, Size: 0x8]
	AnimSequenceBase* Animation;//[Offset: 0x1c8, Size: 0x8]
	float StartOffset;//[Offset: 0x1d0, Size: 0x4]
	float EndOffset;//[Offset: 0x1d4, Size: 0x4]
	float PlayRate;//[Offset: 0x1d8, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 0x1]
	FName SlotName;//[Offset: 0x1e0, Size: 0x8]
	Vector StartLocationOffset;//[Offset: 0x1e8, Size: 0xc]
	Rotator StartRotationOffset;//[Offset: 0x1f4, Size: 0xc]
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	FName MatchedBoneName;//[Offset: 0x204, Size: 0x8]
	Vector MatchedLocationOffset;//[Offset: 0x20c, Size: 0xc]
	Rotator MatchedRotationOffset;//[Offset: 0x218, Size: 0xc]
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226, Size: 0x1]
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x227, Size: 0x1]
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4]
	float PlayRate;//[Offset: 0x14, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	FName SlotName;//[Offset: 0x1c, Size: 0x8]
	MovieSceneFloatChannel Weight;//[Offset: 0x28, Size: 0xa0]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	float StartOffset;//[Offset: 0xcc, Size: 0x4]
	float EndOffset;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x80, Size: 0x10]
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0x98, Size: 0x30]
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xa0]

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe8, Size: 0xa0]

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x8, Size: 0x10]
	FString[] Values;//[Offset: 0x18, Size: 0x10]
	FString DefaultValue;//[Offset: 0x28, Size: 0x10]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe8, Size: 0xa0]
	int ChannelsUsed;//[Offset: 0x368, Size: 0x4]

--------------------------------
Class: MovieSceneVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFail;//[Offset: 0x40, Size: 0x10]
	static AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x29be330

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x120, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x130, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x131, Size: 0x1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]
	float BlurStrength;//[Offset: 0x134, Size: 0x4]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int BlurRadius;//[Offset: 0x13c, Size: 0x4]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x140, Size: 0x88]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c0360
	void SetPadding(Margin InPadding);// 0x29bfbb0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x29bf810
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29bf460
	void SetBlurStrength(float InStrength);// 0x29becf0
	void SetBlurRadius(int InBlurRadius);// 0x29bec60
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x29beab0

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c03e0
	void SetPadding(Margin InPadding);// 0x29bfc40
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29bf4e0

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0x29be6f0

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x120, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x121, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x122, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x124, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x134, Size: 0x10]
	Margin Padding;//[Offset: 0x144, Size: 0x10]
	SlateBrush Background;//[Offset: 0x158, Size: 0x88]
	delegate BackgroundDelegate;//[Offset: 0x1e0, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x1f0, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x200, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x210, Size: 0x8]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x21c, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x22c, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x23c, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x24c, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c0460
	void SetPadding(Margin InPadding);// 0x29bfcd0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29bf560
	void SetDesiredSizeScale(Vector2D InScale);// 0x29bf3e0
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x29bf350
	void SetBrushFromTexture(Texture2D* Texture);// 0x29bf0b0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x29bf020
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x29bef90
	void SetBrushColor(LinearColor InBrushColor);// 0x29bef00
	void SetBrush(out const SlateBrush InBrush);// 0x29bed80
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x29be500

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0x29be720

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x120, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x128, Size: 0x278]
	LinearColor ColorAndOpacity;//[Offset: 0x3a0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x3b0, Size: 0x10]
	byte ClickMethod;//[Offset: 0x3c0, Size: 0x1]
	byte TouchMethod;//[Offset: 0x3c1, Size: 0x1]
	byte PressMethod;//[Offset: 0x3c2, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3c8, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3d8, Size: 0x10]
	delegate OnReleased;//[Offset: 0x3e8, Size: 0x10]
	delegate OnHovered;//[Offset: 0x3f8, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x408, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x29c0260
	void SetStyle(out const ButtonStyle InStyle);// 0x29c0180
	void SetPressMethod(byte InPressMethod);// 0x29bff80
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29bf2c0
	void SetClickMethod(byte InClickMethod);// 0x29bf1c0
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x29bebd0
	bool IsPressed();// 0x29be940

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29c0560
	void SetPadding(Margin InPadding);// 0x29bfdf0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29bf660

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x120, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x124, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x138, Size: 0x580]
	SlateWidgetStyleAsset* Style;//[Offset: 0x6b8, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x6c0, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x6c8, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x6d0, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x6d8, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x6e0, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x6e8, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x6f0, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x6f8, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x700, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x708, Size: 0x1]
	Margin Padding;//[Offset: 0x70c, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x720, Size: 0x28]
	byte ClickMethod;//[Offset: 0x748, Size: 0x1]
	byte TouchMethod;//[Offset: 0x749, Size: 0x1]
	byte PressMethod;//[Offset: 0x74a, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74b, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x750, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x29c02e0
	void SetPressMethod(byte InPressMethod);// 0x29c0000
	void SetIsChecked(bool InIsChecked);// 0x29bf6e0
	void SetClickMethod(byte InClickMethod);// 0x29bf240
	void SetCheckedState(enum InCheckedState);// 0x29bf140
	bool IsPressed();// 0x29be970
	bool IsChecked();// 0x29be910
	enum GetCheckedState();// 0x29be4d0

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0x29be8b0

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4]
	float Period;//[Offset: 0x10c, Size: 0x4]
	float Radius;//[Offset: 0x110, Size: 0x4]
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 0x8]
	SlateBrush Image;//[Offset: 0x120, Size: 0x88]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	void SetRadius(float InRadius);// 0x29c0080
	void SetPeriod(float InPeriod);// 0x29bfe80
	void SetNumberOfPieces(int InNumberOfPieces);// 0x29bfa90

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0x29be680
	LinearColor GetLinearValue();// 0x29be580

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] Items;//[Offset: 0x108, Size: 0x10]
	delegate OnGenerateWidgetEvent;//[Offset: 0x118, Size: 0x10]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x108, Size: 0x10]
	FString SelectedOption;//[Offset: 0x118, Size: 0x10]
	ComboBoxStyle WidgetStyle;//[Offset: 0x128, Size: 0x3f0]
	TableRowStyle ItemStyle;//[Offset: 0x518, Size: 0x7c8]
	Margin ContentPadding;//[Offset: 0xce0, Size: 0x10]
	float MaxListHeight;//[Offset: 0xcf0, Size: 0x4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0xcf8, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0xd50, Size: 0x28]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 0x1]
	delegate OnGenerateWidgetEvent;//[Offset: 0xd7c, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0xd90, Size: 0x10]
	delegate OnOpening;//[Offset: 0xda0, Size: 0x10]
	void SetSelectedOption(FString Option);// 0x29c3f80
	void SetSelectedIndex(const int Index);// 0x29c3ef0
	bool RemoveOption(FString Option);// 0x29c3340
	void RefreshOptions();// 0x29c3290
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x197e4f0
	void OnOpeningEvent__DelegateSignature();// 0x197e4f0
	bool IsOpen();// 0x29c3260
	FString GetSelectedOption();// 0x29c3040
	int GetSelectedIndex();// 0x29c3010
	int GetOptionCount();// 0x29c2fe0
	FString GetOptionAtIndex(int Index);// 0x29c2f00
	int FindOptionIndex(FString Option);// 0x29c2d00
	void ClearSelection();// 0x29c2950
	void ClearOptions();// 0x29c2930
	void AddOption(FString Option);// 0x29c27a0

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8, Size: 0x88]
	SlateBrush ActiveHoveredBrush;//[Offset: 0x90, Size: 0x88]
	SlateBrush ActiveBrush;//[Offset: 0x118, Size: 0x88]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1a0, Size: 0x88]
	SlateBrush InactiveBrush;//[Offset: 0x228, Size: 0x88]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2b0, Size: 0x88]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x338, Size: 0x88]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3c0, Size: 0x88]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x448, Size: 0x88]
	SlateColor TextColor;//[Offset: 0x4d0, Size: 0x28]
	SlateColor SelectedTextColor;//[Offset: 0x4f8, Size: 0x28]
	SlateBrush DropIndicator_Above;//[Offset: 0x520, Size: 0x88]
	SlateBrush DropIndicator_Onto;//[Offset: 0x5a8, Size: 0x88]
	SlateBrush DropIndicator_Below;//[Offset: 0x630, Size: 0x88]
	SlateBrush ActiveHighlightedBrush;//[Offset: 0x6b8, Size: 0x88]
	SlateBrush InactiveHighlightedBrush;//[Offset: 0x740, Size: 0x88]

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x108, Size: 0x1]
	Vector2D EntrySpacing;//[Offset: 0x10c, Size: 0x8]
	Vector2D[] SpacingPattern;//[Offset: 0x118, Size: 0x10]
	SlateChildSize EntrySizeRule;//[Offset: 0x128, Size: 0x8]
	byte EntryHorizontalAlignment;//[Offset: 0x130, Size: 0x1]
	byte EntryVerticalAlignment;//[Offset: 0x131, Size: 0x1]
	int MaxElementSize;//[Offset: 0x134, Size: 0x4]
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x138, Size: 0xc]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x158, Size: 0x80]
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0x29c3d80
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x29c35f0
	int GetNumEntries();// 0x29c2ed0
	UserWidget*[] GetAllEntries();// 0x29c2db0

--------------------------------
Class: RadialBoxSettings
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float AngleBetweenItems;//[Offset: 0x4, Size: 0x4]
	float StartingAngle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x1d8, Size: 0x8]
	void Reset(bool bDeleteWidgets);// 0x29c33f0
	void RemoveEntry(UserWidget* EntryWidget);// 0x29c32b0
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x29c2870
	UserWidget* BP_CreateEntry();// 0x29c2840

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10]
	FText HintText;//[Offset: 0x130, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x148, Size: 0x10]
	EditableTextStyle WidgetStyle;//[Offset: 0x158, Size: 0x220]
	SlateWidgetStyleAsset* Style;//[Offset: 0x378, Size: 0x8]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x380, Size: 0x8]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x388, Size: 0x8]
	SlateBrushAsset* CaretImage;//[Offset: 0x390, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0x398, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x3f0, Size: 0x28]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x41c, Size: 0x4]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x422, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x423, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 0x1]
	byte KeyboardType;//[Offset: 0x426, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x427, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0x428, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x429, Size: 0x1]
	byte Justification;//[Offset: 0x42a, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x42b, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0x430, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x440, Size: 0x10]
	void SetText(FText InText);// 0x29c4070
	void SetJustification(byte InJustification);// 0x29c3c80
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x29c3b60
	void SetIsPassword(bool InbIsPassword);// 0x29c3a40
	void SetHintText(FText InHintText);// 0x29c3760
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x197e4f0
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x197e4f0
	FText GetText();// 0x29c30c0

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x108, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x120, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x130, Size: 0x7f8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 0x8]
	FText HintText;//[Offset: 0x930, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x948, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x958, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0x9b0, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x9c0, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9d0, Size: 0x10]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x9e4, Size: 0x4]
	Margin Padding;//[Offset: 0x9e8, Size: 0x10]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f8, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f9, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fa, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fb, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1]
	byte KeyboardType;//[Offset: 0x9fe, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9ff, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0xa00, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xa01, Size: 0x1]
	byte Justification;//[Offset: 0xa02, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xa03, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0xa08, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xa18, Size: 0x10]
	void SetText(FText InText);// 0x29c4150
	void SetJustification(byte InJustification);// 0x29c3d00
	void SetIsReadOnly(bool bReadOnly);// 0x29c3bf0
	void SetIsPassword(bool bIsPassword);// 0x29c3ad0
	void SetHintText(FText InText);// 0x29c3840
	void SetError(FText InError);// 0x29c3680
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x197e4f0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x197e4f0
	bool HasError();// 0x29c3230
	FText GetText();// 0x29c3160
	void ClearError();// 0x29c2910

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0x29c3200

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x120, Size: 0x10]
	float[] RowFill;//[Offset: 0x130, Size: 0x10]
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x29c3e20
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x29c3480
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x29c2690

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x29c6430

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x108, Size: 0x278]
	TextBlockStyle TextStyle;//[Offset: 0x380, Size: 0x270]
	InputChord SelectedKey;//[Offset: 0x5f0, Size: 0x20]
	SlateFontInfo Font;//[Offset: 0x610, Size: 0x58]
	Margin Margin;//[Offset: 0x668, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x678, Size: 0x10]
	FText KeySelectionText;//[Offset: 0x688, Size: 0x18]
	FText NoKeySpecifiedText;//[Offset: 0x6a0, Size: 0x18]
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1]
	Key[] EscapeKeys;//[Offset: 0x6c0, Size: 0x10]
	delegate OnKeySelected;//[Offset: 0x6d0, Size: 0x10]
	delegate OnIsSelectingKeyChanged;//[Offset: 0x6e0, Size: 0x10]
	void SetTextBlockVisibility(const enum InVisibility);// 0x29c8a80
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x29c8880
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x29c82d0
	void SetKeySelectionText(FText InKeySelectionText);// 0x29c8160
	void SetEscapeKeys(out const Key[] InKeys);// 0x29c7f70
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x29c7310
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x29c7280
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x197e4f0
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x197e4f0
	bool GetIsSelectingKey();// 0x29c6c40

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0x29c6eb0

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	void SetCanCache(bool CanCache);// 0x29c7d30
	void InvalidateCache();// 0xb7a5a0
	bool GetCanCache();// 0x29c6ab0

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x197e4f0
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x197e4f0
	void BP_OnEntryReleased();// 0x197e4f0

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	static bool IsListItemSelected(interface classNone UserListEntry);// 0x29c6f80
	static bool IsListItemExpanded(interface classNone UserListEntry);// 0x29c6ee0
	static ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0x29c6e10

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x108, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x110, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x118, Size: 0x4]
	delegate BP_OnEntryGenerated;//[Offset: 0x120, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x130, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x140, Size: 0x80]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x29c8c00
	void SetScrollOffset(const float InScrollOffset);// 0x29c86f0
	void SetScrollBarVisibility(enum InVisibility);// 0x29c8770
	void ScrollToTop();// 0x29c7260
	void ScrollToBottom();// 0x29c7240
	void RequestRefresh();// 0x29c7190
	void RegenerateAllEntries();// 0x29c70e0
	UserWidget*[] GetDisplayedEntryWidgets();// 0x29c6ae0

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0x197e4f0

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	static Object* GetListItemObject(interface classNone UserObjectListEntry);// 0x29c6d10

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x2d8, Size: 0x1]
	byte SelectionMode;//[Offset: 0x2d9, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x2da, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	float EntrySpacing;//[Offset: 0x2e0, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	Object*[] ListItems;//[Offset: 0x2e8, Size: 0x10]
	delegate BP_OnEntryInitialized;//[Offset: 0x308, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0x318, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0x328, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x338, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0x348, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x358, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x29c8970
	void SetSelectedIndex(int Index);// 0x29c87f0
	void ScrollIndexIntoView(int Index);// 0x29c71b0
	void RemoveItem(Object* Item);// 0x29c7100
	void NavigateToIndex(int Index);// 0x29c7050
	bool IsRefreshPending();// 0x29c7020
	int GetNumItems();// 0x29c6de0
	Object*[] GetListItems();// 0x29c6db0
	Object* GetItemAt(int Index);// 0x29c6c70
	int GetIndexForItem(Object* Item);// 0x29c6ba0
	void ClearListItems();// 0x29c6a90
	void BP_SetSelectedItem(Object* Item);// 0x29c6a00
	void BP_SetListItems(out const Object*[] InListItems);// 0x29c6950
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x29c6880
	void BP_ScrollItemIntoView(Object* Item);// 0x29c67f0
	void BP_NavigateToItem(Object* Item);// 0x29c6760
	bool BP_IsItemVisible(Object* Item);// 0x29c66c0
	bool BP_GetSelectedItems(out Object*[] Items);// 0x29c6600
	Object* BP_GetSelectedItem();// 0x29c65d0
	int BP_GetNumItemsSelected();// 0x29c65a0
	void BP_ClearSelection();// 0x29c6580
	void BP_CancelScrollIntoView();// 0x29c6560
	void AddItem(Object* Item);// 0x29c64d0

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x120, Size: 0x8]
	delegate OnGetMenuContentEvent;//[Offset: 0x128, Size: 0x10]
	delegate OnGetUserMenuContentEvent;//[Offset: 0x138, Size: 0x10]
	byte Placement;//[Offset: 0x148, Size: 0x1]
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a, Size: 0x1]
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b, Size: 0x1]
	delegate OnMenuOpenChanged;//[Offset: 0x150, Size: 0x10]
	void ToggleOpen(bool bFocusOnOpen);// 0x29ccef0
	bool ShouldOpenDueToClick();// 0x29ccec0
	void SetPlacement(byte InPlacement);// 0x29cc8b0
	void Open(bool bFocusMenu);// 0x29cbfc0
	bool IsOpen();// 0x29cbf90
	bool HasOpenSubMenus();// 0x29cbf60
	UserWidget* GetUserWidget__DelegateSignature();// 0x197e4f0
	Vector2D GetMenuPosition();// 0x29cbce0
	void FitInWindow(bool bFit);// 0x29cb8f0
	void Close();// 0x29cb8d0

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0x29cbe60

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe8, Size: 0xa0]
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x188, Size: 0xa0]
	MovieSceneFloatChannel RightCurve;//[Offset: 0x228, Size: 0xa0]
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x2c8, Size: 0xa0]

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0x90, Size: 0x10]
	FName TrackName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	FText HintText;//[Offset: 0x140, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10]
	TextBlockStyle WidgetStyle;//[Offset: 0x168, Size: 0x270]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x3e0, Size: 0x58]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x43d, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x43e, Size: 0x1]
	delegate OnTextChanged;//[Offset: 0x440, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x450, Size: 0x10]
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x29cce10
	void SetText(FText InText);// 0x29cca90
	void SetIsReadOnly(bool bReadOnly);// 0x29cc680
	void SetHintText(FText InHintText);// 0x29cc3b0
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x197e4f0
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x197e4f0
	FText GetText();// 0x29cbd20
	FText GetHintText();// 0x29cbba0

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	FText HintText;//[Offset: 0x140, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x158, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x168, Size: 0x7f8]
	TextBlockStyle TextStyle;//[Offset: 0x960, Size: 0x270]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd1, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xbd2, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xbd3, Size: 0x1]
	SlateWidgetStyleAsset* Style;//[Offset: 0xbd8, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0xbe0, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0xc38, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xc48, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xc58, Size: 0x10]
	delegate OnTextChanged;//[Offset: 0xc68, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xc78, Size: 0x10]
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0x29ccc50
	void SetText(FText InText);// 0x29ccb70
	void SetIsReadOnly(bool bReadOnly);// 0x29cc710
	void SetHintText(FText InHintText);// 0x29cc490
	void SetError(FText InError);// 0x29cc240
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x197e4f0
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x197e4f0
	FText GetText();// 0x29cbdc0
	FText GetHintText();// 0x29cbc40

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x29cb810

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x1a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2a8, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b0, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x2b8, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c0, Size: 0x8]
	float Percent;//[Offset: 0x2c8, Size: 0x4]
	byte BarFillType;//[Offset: 0x2cc, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x2d0, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x2d8, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x2e8, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10]
	void SetPercent(float InPercent);// 0x29cc830
	void SetIsMarquee(bool InbIsMarquee);// 0x29cc5f0
	void SetFillColorAndOpacity(LinearColor InColor);// 0x29cc320

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x108, Size: 0x4d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x5d8, Size: 0x8]
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1]
	byte Orientation;//[Offset: 0x5e2, Size: 0x1]
	Vector2D Thickness;//[Offset: 0x5e4, Size: 0x8]
	Margin Padding;//[Offset: 0x5ec, Size: 0x10]
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x29d1a80

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x130, Size: 0x4]
	float HeightOverride;//[Offset: 0x134, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x138, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x13c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x140, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x144, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x148, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x14c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x29d2030
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x29d1420
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x29d1320
	void SetMinAspectRatio(float InMinAspectRatio);// 0x29d12a0
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x29d1220
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x29d11a0
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x29d1120
	void SetHeightOverride(float InHeightOverride);// 0x29d0f10
	void ClearWidthOverride();// 0x29cf630
	void ClearMinDesiredWidth();// 0x29cf610
	void ClearMinDesiredHeight();// 0x29cf5f0
	void ClearMinAspectRatio();// 0x29cf5d0
	void ClearMaxDesiredWidth();// 0x29cf5b0
	void ClearMaxDesiredHeight();// 0x29cf590
	void ClearMaxAspectRatio();// 0x29cf570
	void ClearHeightOverride();// 0x29cf550

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	static Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0x29d23b0
	static Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0x29d22b0
	static float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0x29d21b0
	static float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0x29d20b0
	static void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0x29d0380
	static void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0x29d0220
	static void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x29d0120
	static void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x29cff30
	static Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x29cfe30
	static bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x29cfd30
	static Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0x29cfb40
	static Vector2D GetLocalSize(out const Geometry Geometry);// 0x29cfa80
	static Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x29cf920
	static bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x29cf670
	static void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x29cf3d0
	static Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x29cf2d0

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10]
	IndexData(UInt32Property)[] IndexData;//[Offset: 0x38, Size: 0x10]
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8]
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x8]
	Vector2D ExtentMax;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SlateMeshVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x8]
	Color Color;//[Offset: 0x8, Size: 0x4]
	Vector2D UV0;//[Offset: 0xc, Size: 0x8]
	Vector2D UV1;//[Offset: 0x14, Size: 0x8]
	Vector2D UV2;//[Offset: 0x1c, Size: 0x8]
	Vector2D UV3;//[Offset: 0x24, Size: 0x8]
	Vector2D UV4;//[Offset: 0x2c, Size: 0x8]
	Vector2D UV5;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10]
	float MinValue;//[Offset: 0x11c, Size: 0x4]
	float MaxValue;//[Offset: 0x120, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x128, Size: 0x340]
	byte Orientation;//[Offset: 0x468, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x46c, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x47c, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 0x1]
	float StepSize;//[Offset: 0x490, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x498, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x4a8, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x4b8, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x4c8, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x4d8, Size: 0x10]
	void SetValue(float InValue);// 0x29d60c0
	void SetStepSize(float InValue);// 0x29d5ca0
	void SetSliderHandleColor(LinearColor InValue);// 0x29d5c10
	void SetSliderBarColor(LinearColor InValue);// 0x29d5b80
	void SetMinValue(float InValue);// 0x29d57e0
	void SetMaxValue(float InValue);// 0x29d5550
	void SetLocked(bool InValue);// 0x29d53b0
	void SetIndentHandle(bool InValue);// 0x29d52a0
	float GetValue();// 0x29d4af0
	float GetNormalizedValue();// 0x29d4900

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x108, Size: 0x8]
	void SetSize(Vector2D InSize);// 0x29d5b00

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x108, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x10c, Size: 0x10]
	SpinBoxStyle WidgetStyle;//[Offset: 0x120, Size: 0x2e8]
	SlateWidgetStyleAsset* Style;//[Offset: 0x408, Size: 0x8]
	int MinFractionalDigits;//[Offset: 0x410, Size: 0x4]
	int MaxFractionalDigits;//[Offset: 0x414, Size: 0x4]
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	float Delta;//[Offset: 0x41c, Size: 0x4]
	float SliderExponent;//[Offset: 0x420, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0x428, Size: 0x58]
	byte Justification;//[Offset: 0x480, Size: 0x1]
	float MinDesiredWidth;//[Offset: 0x484, Size: 0x4]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	SlateColor ForegroundColor;//[Offset: 0x490, Size: 0x28]
	delegate OnValueChanged;//[Offset: 0x4b8, Size: 0x10]
	delegate OnValueCommitted;//[Offset: 0x4c8, Size: 0x10]
	delegate OnBeginSliderMovement;//[Offset: 0x4d8, Size: 0x10]
	delegate OnEndSliderMovement;//[Offset: 0x4e8, Size: 0x10]
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8, Size: 0x1]
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f8, Size: 0x1]
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f8, Size: 0x1]
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f8, Size: 0x1]
	float MinValue;//[Offset: 0x4fc, Size: 0x4]
	float MaxValue;//[Offset: 0x500, Size: 0x4]
	float MinSliderValue;//[Offset: 0x504, Size: 0x4]
	float MaxSliderValue;//[Offset: 0x508, Size: 0x4]
	void SetValue(float NewValue);// 0x29d6140
	void SetMinValue(float NewValue);// 0x29d5860
	void SetMinSliderValue(float NewValue);// 0x29d5760
	void SetMinFractionalDigits(int NewValue);// 0x29d56d0
	void SetMaxValue(float NewValue);// 0x29d55d0
	void SetMaxSliderValue(float NewValue);// 0x29d54d0
	void SetMaxFractionalDigits(int NewValue);// 0x29d5440
	void SetForegroundColor(SlateColor InForegroundColor);// 0x29d51b0
	void SetDelta(float NewValue);// 0x29d4f10
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0x29d4b50
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x197e4f0
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x197e4f0
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x197e4f0
	float GetValue();// 0x29d4b20
	float GetMinValue();// 0x29d48d0
	float GetMinSliderValue();// 0x29d48a0
	int GetMinFractionalDigits();// 0x29d4870
	float GetMaxValue();// 0x29d4840
	float GetMaxSliderValue();// 0x29d4810
	int GetMaxFractionalDigits();// 0x29d47e0
	float GetDelta();// 0x29d4710
	bool GetAlwaysUsesDeltaSnap();// 0x29d46e0
	void ClearMinValue();// 0x29d46c0
	void ClearMinSliderValue();// 0x29d46a0
	void ClearMaxValue();// 0x29d4680
	void ClearMaxSliderValue();// 0x29d4660

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0x29d4a50
	FString GetStringValue();// 0x29d4930

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x108, Size: 0x4]
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	SlateBrushAsset* PieceImage;//[Offset: 0x110, Size: 0x8]
	SlateBrush Image;//[Offset: 0x118, Size: 0x88]
	void SetNumberOfPieces(int InNumberOfPieces);// 0x29d58e0
	void SetAnimateVertically(bool bInAnimateVertically);// 0x29d4d00
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x29d4c70
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x29d4be0

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x368, Size: 0x4]
	float EntryWidth;//[Offset: 0x36c, Size: 0x4]
	enum TileAlignment;//[Offset: 0x370, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x29d5010
	void SetEntryHeight(float NewHeight);// 0x29d4f90
	float GetEntryWidth();// 0x29d47c0
	float GetEntryHeight();// 0x29d47a0

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0x378, Size: 0x10]
	delegate BP_OnItemExpansionChanged;//[Offset: 0x388, Size: 0x10]
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0x29dc380
	void ExpandAll();// 0x29dae40
	void CollapseAll();// 0x29dae20

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x120, Size: 0x10]
	float MinDesiredSlotWidth;//[Offset: 0x130, Size: 0x4]
	float MinDesiredSlotHeight;//[Offset: 0x134, Size: 0x4]
	void SetSlotPadding(Margin InSlotPadding);// 0x29dc970
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x29dc4d0
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x29dc450
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x29da880

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x29dec00

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x120, Size: 0x10]
	Actor* Spawn(class Actor ActorClass);// 0x29e0860
	void SetViewRotation(Rotator Rotation);// 0x29e0750
	void SetViewLocation(Vector Location);// 0x29e06c0
	Rotator GetViewRotation();// 0x29df3a0
	World* GetViewportWorld();// 0x29df3e0
	Vector GetViewLocation();// 0x29df360

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0x29df330

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1]
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8]
	FName UserTag;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate Finished;//[Offset: 0x28, Size: 0x10]
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlayBackSpeed);// 0x29e3a60
	static WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlayBackSpeed);// 0x29e3840

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0x29e5e30

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	static EventReply UnlockMouse(out EventReply Reply);// 0x29e7e10
	static EventReply Unhandled();// 0x29e7da0
	static void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0x29e7b80
	static void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0x29e7af0
	static void SetWindowTitleBarCloseButtonActive(bool bActive);// 0x29e7a70
	static EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x29e32e0
	static EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x29e73d0
	static void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x29e7240
	static void SetInputMode_UIOnly(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x29e7140
	static void SetInputMode_GameOnly(PlayerController* PlayerController);// 0x29e70c0
	static void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x29e6f70
	static void SetInputMode_GameAndUI(PlayerController* Target, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x29e6e10
	static bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x29e6cd0
	static void SetFocusToGameViewport();// 0x29e6c30
	static void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0x29e6940
	static void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x29e6790
	static void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x29e6790
	static void RestorePreviousWindowTitleBarState();// 0x29e66e0
	static EventReply ReleaseMouseCapture(out EventReply Reply);// 0x29e65f0
	static EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x29e3580
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x197e4f0
	static SlateBrush NoResourceBrush();// 0x29e6540
	static SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x29e63a0
	static SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x29e6200
	static SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x29e60f0
	static EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x29e5fc0
	static bool IsDragDropping();// 0x29e5f60
	static EventReply Handled();// 0x29e5ef0
	static void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0x29e5c40
	static KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x29e59e0
	static InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x29e5890
	static InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x29e57b0
	static InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x29e5690
	static InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x29e55b0
	static MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x29e5410
	static DragDropOperation* GetDragDroppingContent();// 0x29e5380
	static Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0x29e51a0
	static MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0x29e5020
	static Object* GetBrushResource(out const SlateBrush Brush);// 0x29e4ea0
	static void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0x29e4d30
	static void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x29e4bc0
	static EventReply EndDragDrop(out EventReply Reply);// 0x29e4ad0
	static void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x29e4850
	static void DrawText(out PaintContext Context, FString inString, Vector2D Position, LinearColor Tint);// 0x29e46c0
	static void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x29e44e0
	static void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x29e42d0
	static void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x29e4110
	static void DismissAllMenus();// 0x29e40f0
	static EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x29e3ea0
	static EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x29e3cc0
	static DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x29e37b0
	static UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x29e36b0
	static EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x29e3580
	static EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x29e3450
	static EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x29e32e0
	static void CancelDragDrop();// 0x29e32c0

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x1f8, Size: 0x10]
	int VirtualUserIndex;//[Offset: 0x218, Size: 0x4]
	int PointerIndex;//[Offset: 0x21c, Size: 0x4]
	byte TraceChannel;//[Offset: 0x220, Size: 0x1]
	float InteractionDistance;//[Offset: 0x224, Size: 0x4]
	enum InteractionSource;//[Offset: 0x228, Size: 0x1]
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1]
	float DebugSphereLineThickness;//[Offset: 0x22c, Size: 0x4]
	float DebugLineThickness;//[Offset: 0x230, Size: 0x4]
	LinearColor DebugColor;//[Offset: 0x234, Size: 0x10]
	HitResult CustomHitResult;//[Offset: 0x2c0, Size: 0x8c]
	Vector2D LocalHitLocation;//[Offset: 0x34c, Size: 0x8]
	Vector2D LastLocalHitLocation;//[Offset: 0x354, Size: 0x8]
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x360, Size: 0x8]
	HitResult LastHitResult;//[Offset: 0x368, Size: 0x8c]
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 0x1]
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f6, Size: 0x1]
	void SetFocus(Widget* FocusWidget);// 0x29ead70
	void SetCustomHitResult(out const HitResult HitResult);// 0x29eab80
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x29ea9a0
	void ScrollWheel(float ScrollDelta);// 0x29ea910
	void ReleasePointerKey(Key Key);// 0x29ea7a0
	bool ReleaseKey(Key Key);// 0x29ea6a0
	void PressPointerKey(Key Key);// 0x29ea440
	bool PressKey(Key Key, bool bRepeat);// 0x29ea300
	bool PressAndReleaseKey(Key Key);// 0x29ea200
	bool IsOverInteractableWidget();// 0x29ea1d0
	bool IsOverHitTestVisibleWidget();// 0x29ea1a0
	bool IsOverFocusableWidget();// 0x29ea170
	HitResult GetLastHitResult();// 0x29e9ba0
	WidgetComponent* GetHoveredWidgetComponent();// 0x29e9b70
	Vector2D Get2DHitLocation();// 0x29e9ad0

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x120, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x29eaaf0
	void SetActiveWidget(Widget* Widget);// 0x29c76a0
	Widget* GetWidgetAtIndex(int Index);// 0x29ea0d0
	int GetNumWidgets();// 0x29e9e20
	int GetActiveWidgetIndex();// 0x29e9b40
	Widget* GetActiveWidget();// 0x29e9b10

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29eb340
	void SetPadding(Margin InPadding);// 0x29eb110
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29eae80

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29eb3c0
	void SetPadding(Margin InPadding);// 0x29eb1a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29eaf00

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x120, Size: 0x8]
	float WrapWidth;//[Offset: 0x128, Size: 0x4]
	float WrapSize;//[Offset: 0x12c, Size: 0x4]
	bool bExplicitWrapWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	byte Orientation;//[Offset: 0x132, Size: 0x1]
	void SetInnerSlotPadding(Vector2D InPadding);// 0x29eb000
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x29e9a30

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x228, Size: 0x4]
	float CraneYaw;//[Offset: 0x22c, Size: 0x4]
	float CraneArmLength;//[Offset: 0x230, Size: 0x4]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* CraneYawControl;//[Offset: 0x240, Size: 0x8]
	SceneComponent* CranePitchControl;//[Offset: 0x248, Size: 0x8]
	SceneComponent* CraneCameraMount;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x228, Size: 0x4]
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	SplineComponent* RailSplineComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* RailCameraMount;//[Offset: 0x240, Size: 0x8]
	SplineComponent* GetRailSplineComponent();// 0x29ef810

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	static float TrimAudioCache(float InMegabytesToFree);// 0x2a651d0
	static SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0x2a64d70
	static void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2a64cb0
	static void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0x2a64bf0
	static void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0x2a64ac0
	static void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2a64a00
	static void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x2a647e0
	static void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0x2a64160
	static void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0x2a637b0
	static void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x2a63530
	static void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2a63270
	static void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x2a63170
	static void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2a63070
	static void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0x2a62f70
	static void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2a62eb0
	static void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0x2a62de0
	static void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0x2a62d60
	static void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x2a62ca0
	static SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2a62a70
	static SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2a62880
	static SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2a62690
	static bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2a62590
	static void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0x2a62040
	static int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0x2a61f70
	static void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0x2a61d40
	static void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0x2a616e0
	static void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0x2a615d0
	static void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0x2a61550
	static int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2a61450
	static void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0x2a61340
	static void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2a61280

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xe0, Size: 0x50]
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0x2a63e30
	void SetExternalSubmix(SoundSubmix* Submix);// 0x2a63900

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	enum LinkMode;//[Offset: 0x2, Size: 0x1]
	float InputGainDb;//[Offset: 0x4, Size: 0x4]
	float ThresholdDb;//[Offset: 0x8, Size: 0x4]
	float Ratio;//[Offset: 0xc, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4]
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4]
	SoundSubmix* ExternalSubmix;//[Offset: 0x20, Size: 0x8]
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float KeyGainDb;//[Offset: 0x2c, Size: 0x4]
	float OutputGainDb;//[Offset: 0x30, Size: 0x4]
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x34, Size: 0xc]
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x40, Size: 0xc]

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float Cutoff;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0xfa5c60

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4]
	float Bandwidth;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xd0, Size: 0x40]
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x2a64050
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0x2a63f40

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4]
	float GainHF;//[Offset: 0x8, Size: 0x4]
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LateDelay;//[Offset: 0x14, Size: 0x4]
	float DecayTime;//[Offset: 0x18, Size: 0x4]
	float Density;//[Offset: 0x1c, Size: 0x4]
	float Diffusion;//[Offset: 0x20, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4]
	float LateGain;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float WetLevel;//[Offset: 0x34, Size: 0x4]
	float DryLevel;//[Offset: 0x38, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: QuartzSubsystem.WorldSubsystem.Subsystem.Object
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x2a62310
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x2a62270
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x2a621d0
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x2a61c70
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x2a61bd0
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x2a61bd0
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x2a61b30
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x2a61a60
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x2a61a30
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x2a61a00
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x2a61930
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists);// 0x2a617a0

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4]
	enum BeatType;//[Offset: 0x4, Size: 0x1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4]
	enum PulseDuration;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: AssetRegistryHelpers.Object
	static SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x2ab5180
	static ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x2ab4ea0
	static bool IsValid(out const AssetData InAssetData);// 0x2ab43a0
	static bool IsUAsset(out const AssetData InAssetData);// 0x2ab42b0
	static bool IsRedirector(out const AssetData InAssetData);// 0x2ab41c0
	static bool IsAssetLoaded(out const AssetData InAssetData);// 0x2ab40a0
	static bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x2ab3e20
	static FString GetFullName(out const AssetData InAssetData);// 0x2ab3b60
	static FString GetExportTextName(out const AssetData InAssetData);// 0x2ab3a20
	static class Object GetClass(out const AssetData InAssetData);// 0x2ab3930
	static interface class   GetAssetRegistry();// 0x2ab30d0
	static Object* GetAsset(out const AssetData InAssetData);// 0x2ab2eb0
	static AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x2ab2b50

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10]
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10]
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10]
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10]
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50]
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
